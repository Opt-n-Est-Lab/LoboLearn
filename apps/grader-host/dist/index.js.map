{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Readable } from 'node:stream';\nimport { pipeline } from 'node:stream/promises';\nimport * as path from 'path';\n\nimport { ECRClient } from '@aws-sdk/client-ecr';\nimport { S3 } from '@aws-sdk/client-s3';\nimport { SQSClient, SendMessageCommand } from '@aws-sdk/client-sqs';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport * as async from 'async';\nimport byline from 'byline';\nimport Docker from 'dockerode';\nimport { execa } from 'execa';\nimport fs from 'fs-extra';\nimport * as shlex from 'shlex';\nimport * as tmp from 'tmp-promise';\n\nimport { DockerName, setupDockerAuth } from '@prairielearn/docker-utils';\nimport { contains } from '@prairielearn/path-utils';\nimport * as sqldb from '@prairielearn/postgres';\nimport { run } from '@prairielearn/run';\nimport { sanitizeObject } from '@prairielearn/sanitize';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport { makeAwsClientConfig, makeS3ClientConfig } from './lib/aws.js';\nimport { config, loadConfig } from './lib/config.js';\nimport { deferredPromise } from './lib/deferred.js';\nimport * as healthCheck from './lib/healthCheck.js';\nimport { type WinstonBufferedLogger, makeJobLogger } from './lib/jobLogger.js';\nimport * as lifecycle from './lib/lifecycle.js';\nimport * as load from './lib/load.js';\nimport globalLogger from './lib/logger.js';\nimport pullImages from './lib/pullImages.js';\nimport { type GradingJobMessage, receiveFromQueue } from './lib/receiveFromQueue.js';\nimport * as timeReporter from './lib/timeReporter.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ninterface GradingResults {\n  job_id: string;\n  received_time: Date;\n  start_time?: Date;\n  end_time?: Date;\n  succeeded?: boolean;\n  timedOut?: boolean;\n  results?: any;\n  message?: string;\n}\n\n// catch SIGTERM and exit after waiting for all current jobs to finish\nlet processTerminating = false;\nprocess.on('SIGTERM', () => {\n  globalLogger.info('caught SIGTERM, draining jobs to exit...');\n  processTerminating = true;\n  (function tryToExit() {\n    if (load.getCurrentJobs() === 0) process.exit(0);\n    setTimeout(tryToExit, 1000);\n  })();\n});\n\nasync.series(\n  [\n    async () => {\n      await loadConfig();\n      globalLogger.info('Config loaded:');\n      globalLogger.info(JSON.stringify(config, null, 2));\n\n      if (config.sentryDsn) {\n        await Sentry.init({\n          dsn: config.sentryDsn,\n          environment: config.sentryEnvironment,\n        });\n      }\n      await lifecycle.init();\n    },\n    async () => {\n      const pgConfig = {\n        host: config.postgresqlHost,\n        database: config.postgresqlDatabase,\n        user: config.postgresqlUser,\n        password: config.postgresqlPassword ?? undefined,\n        max: config.postgresqlPoolSize,\n        idleTimeoutMillis: config.postgresqlIdleTimeoutMillis,\n      };\n      function idleErrorHandler(err) {\n        globalLogger.error('idle client error', err);\n        Sentry.captureException(err, {\n          level: 'fatal',\n          tags: {\n            // This may have been set by `sql-db.js`. We include this in the\n            // Sentry tags to more easily debug idle client errors.\n            last_query: err?.data?.lastQuery ?? undefined,\n          },\n        });\n        Sentry.close().finally(() => process.exit(1));\n      }\n\n      globalLogger.info(\n        'Connecting to database ' + pgConfig.user + '@' + pgConfig.host + ':' + pgConfig.database,\n      );\n      await sqldb.initAsync(pgConfig, idleErrorHandler);\n      globalLogger.info('Successfully connected to database');\n    },\n    async () => {\n      if (config.reportLoad) {\n        load.init(config.maxConcurrentJobs);\n      }\n    },\n    async () => {\n      if (config.useHealthCheck) {\n        await healthCheck.init();\n      }\n    },\n    async () => {\n      if (config.useImagePreloading) {\n        await pullImages();\n      }\n    },\n    async () => {\n      await lifecycle.inService();\n    },\n    async () => {\n      globalLogger.info('Initialization complete; beginning to process jobs');\n      const sqs = new SQSClient(makeAwsClientConfig());\n\n      async function worker() {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          if (!healthCheck.isHealthy() || processTerminating) return;\n\n          if (!config.jobsQueueUrl) {\n            throw new Error('jobsQueueUrl is not defined');\n          }\n\n          await receiveFromQueue(sqs, config.jobsQueueUrl, async (job) => {\n            globalLogger.info(`received ${job.jobId} from queue`);\n\n            // Ensure that this job wasn't canceled in the time since job submission.\n            const canceled = await isJobCanceled(job);\n\n            if (canceled) {\n              globalLogger.info(`Job ${job.jobId} was canceled; skipping job`);\n              return;\n            }\n\n            await handleJob(job).then(\n              () => globalLogger.info(`handleJob(${job.jobId}) succeeded`),\n              (err) => {\n                globalLogger.info(`handleJob(${job.jobId}) errored`, err);\n\n                // Throwing the error will ensure that the job isn't deleted\n                // from SQS and thus will be retried.\n                throw err;\n              },\n            );\n          }).catch((err) => {\n            globalLogger.error('receiveFromQueue error', err);\n            Sentry.captureException(err);\n          });\n        }\n      }\n\n      // Start an appropriate number of workers\n      await Promise.all(Array.from({ length: config.maxConcurrentJobs }).map(() => worker()));\n    },\n  ],\n  (err) => {\n    Sentry.captureException(err, {\n      level: 'fatal',\n    });\n    globalLogger.error('Error in main loop:', err);\n    lifecycle\n      .abandonLaunch()\n      .catch((err) => {\n        globalLogger.error('Error in lifecycle.abandon():', err);\n      })\n      .finally(() => {\n        // pause to log errors, then exit\n        setTimeout(() => {\n          process.exit(1);\n        }, 1000);\n      });\n  },\n);\n\nasync function isJobCanceled(job: GradingJobMessage) {\n  const result = await sqldb.queryOneRowAsync(sql.check_job_cancellation, {\n    grading_job_id: job.jobId,\n  });\n\n  return result.rows[0].canceled;\n}\n\nasync function handleJob(job: GradingJobMessage) {\n  load.startJob();\n\n  const logger = makeJobLogger();\n  globalLogger.info(`Logging job ${job.jobId} to S3: ${job.s3Bucket}/${job.s3RootKey}`);\n\n  const context = {\n    docker: new Docker(),\n    s3: new S3(makeS3ClientConfig({ maxAttempts: 3 })),\n    logger,\n    job,\n  };\n\n  logger.info(`Running job ${job.jobId}`);\n  logger.info('job details:', job);\n\n  try {\n    const receivedTime = await timeReporter.reportReceivedTime(job.jobId);\n\n    const initResults = await Promise.allSettled([\n      reportReceived(context, receivedTime),\n      // It's possible that this could fail for normal reasons, e.g. a Docker\n      // image not existing in our cache. We'll allow this error to bubble up\n      // but we won't report it to Sentry.\n      initDocker(context),\n      // This should never fail, but if it does, something has gone very wrong,\n      // so we'll specifically report it to Sentry.\n      initFiles(context).catch((err) => {\n        Sentry.captureException(err);\n        throw err;\n      }),\n    ]);\n\n    const tempDir = initResults[2].status === 'fulfilled' ? initResults[2].value : undefined;\n\n    const results = await run(async () => {\n      const initSucceeded = initResults.every((result) => result.status === 'fulfilled');\n      if (initSucceeded && tempDir) {\n        return await runJob(context, receivedTime, tempDir.path);\n      }\n\n      // We failed to init, so we weren't able to run the job. We'll report\n      // generic error messages as the result of the job.\n      const message = run(() => {\n        const dockerInitSucceeded = initResults[1].status === 'fulfilled';\n        const fileInitSucceeded = initResults[2].status === 'fulfilled';\n\n        const messages: string[] = [];\n        if (!dockerInitSucceeded) {\n          messages.push(`Could not pull Docker image ${job.image}.`);\n        }\n        if (!fileInitSucceeded) {\n          messages.push('Could not initialize files for grading.');\n        }\n\n        // This should never occur, as `reportReceived` should never reject. But,\n        // just in case, we'll return a generic error message.\n        if (messages.length === 0) {\n          return 'An unknown error occurred.';\n        }\n\n        return messages.join('\\n');\n      });\n\n      return {\n        job_id: job.jobId,\n        received_time: receivedTime,\n        start_time: new Date(),\n        end_time: new Date(),\n        succeeded: false,\n        message,\n      };\n    });\n\n    logger.info(`Job ${job.jobId} completed with results:`, results);\n\n    try {\n      await Promise.all([\n        uploadResults(context, results),\n        // Only attempt to upload the archive if the directory was created.\n        tempDir ? uploadArchive(context, tempDir.path) : Promise.resolve(),\n      ]);\n\n      if (tempDir) {\n        logger.info('Removing temporary directories');\n        await tempDir.cleanup();\n        logger.info('Successfully removed temporary directories');\n      }\n    } catch (err) {\n      Sentry.captureException(err);\n      throw err;\n    } finally {\n      // Do this last so that we capture all relevant logs.\n      await uploadLogs(context).catch((err) => {\n        Sentry.captureException(err);\n        throw err;\n      });\n    }\n  } finally {\n    load.endJob();\n  }\n}\n\ninterface Context {\n  docker: Docker;\n  s3: S3;\n  logger: WinstonBufferedLogger;\n  job: GradingJobMessage;\n}\n\nasync function reportReceived(context: Context, receivedTime: Date) {\n  if (!config.resultsQueueUrl) {\n    throw new Error('resultsQueueUrl is not defined');\n  }\n\n  const { job, logger } = context;\n  logger.info('Sending job acknowledgement to PrairieLearn');\n\n  try {\n    const sqs = new SQSClient(makeAwsClientConfig());\n    await sqs.send(\n      new SendMessageCommand({\n        QueueUrl: config.resultsQueueUrl,\n        MessageBody: JSON.stringify({\n          jobId: job.jobId,\n          event: 'job_received',\n          data: {\n            receivedTime,\n          },\n        }),\n      }),\n    );\n  } catch (err) {\n    // We don't want to fail the job if this notification fails\n    logger.error('sendMessage error:', err);\n    Sentry.captureException(err);\n  }\n}\n\nasync function initDocker(context: Context) {\n  const {\n    logger,\n    docker,\n    job: { image },\n  } = context;\n  let dockerAuth = {};\n\n  logger.info('Pinging docker');\n  await docker.ping();\n\n  if (config.cacheImageRegistry) {\n    logger.info('Authenticating to docker');\n    const ecr = new ECRClient(makeAwsClientConfig());\n    dockerAuth = await setupDockerAuth(ecr);\n  }\n\n  logger.info(`Pulling latest version of \"${image}\" image`);\n  const repository = new DockerName(image);\n  if (config.cacheImageRegistry) {\n    repository.setRegistry(config.cacheImageRegistry);\n  }\n  const params = {\n    fromImage: repository.getRegistryRepo(),\n    tag: repository.getTag() || 'latest',\n  };\n  logger.info(`Pulling image: ${JSON.stringify(params)}`);\n\n  const stream = await docker.createImage(dockerAuth, params);\n\n  await new Promise((resolve, reject) => {\n    docker.modem.followProgress(\n      stream,\n      (err) => {\n        if (err) {\n          globalLogger.error(`Error pulling \"${image}\" image:`, err);\n          reject(err);\n        } else {\n          globalLogger.info(`Successfully pulled \"${image}\" image`);\n          resolve(null);\n        }\n      },\n      (output) => {\n        logger.info('docker output:', output);\n      },\n    );\n  });\n}\n\nasync function initFiles(context: Context) {\n  const {\n    logger,\n    s3,\n    job: { jobId, s3Bucket, s3RootKey, entrypoint },\n  } = context;\n\n  logger.info('Setting up temp file');\n  const jobArchiveFile = await tmp.file();\n\n  try {\n    logger.info('Setting up temp dir');\n    const jobDirectory = await tmp.dir({\n      prefix: `job_${jobId}_`,\n      unsafeCleanup: true,\n    });\n\n    logger.info('Loading job files');\n    const object = await s3.getObject({\n      Bucket: s3Bucket,\n      Key: `${s3RootKey}/job.tar.gz`,\n    });\n    await pipeline(object.Body as Readable, fs.createWriteStream(jobArchiveFile.path));\n\n    logger.info('Unzipping files');\n    await execa('tar', ['-xf', jobArchiveFile.path, '-C', jobDirectory.path]);\n\n    if (entrypoint != null) {\n      const entrypointFirstToken = shlex.split(entrypoint)[0];\n      if (\n        path.isAbsolute(entrypointFirstToken) &&\n        contains('/grade', entrypointFirstToken, false)\n      ) {\n        // Mark the entrypoint as executable if it lives in the mounted volume.\n        logger.info('Making entrypoint executable');\n        await execa('chmod', [\n          '+x',\n          path.resolve(jobDirectory.path, path.relative('/grade', entrypointFirstToken)),\n        ]).catch(() => {\n          logger.error('Could not make file executable; continuing execution anyways');\n        });\n      }\n    }\n\n    return jobDirectory;\n  } finally {\n    await jobArchiveFile.cleanup();\n  }\n}\n\nasync function runJob(\n  context: Context,\n  receivedTime: Date,\n  tempDir: string,\n): Promise<GradingResults> {\n  const {\n    docker,\n    logger,\n    job: { jobId, image, entrypoint, timeout, enableNetworking, environment },\n  } = context;\n\n  // Even if instructors specify a really short timeout for the execution of\n  // the grading job, there's a certain amount of overhead associated with\n  // running the job (pulling an image, uploading results, etc.). We add a\n  // fixed amount of time to the instructor-specified timeout to account for\n  // this.\n  const jobTimeout = timeout + config.timeoutOverhead;\n\n  const results: GradingResults = {\n    job_id: jobId,\n    received_time: receivedTime,\n  };\n\n  logger.info('Launching Docker container to run grading job');\n\n  const repository = new DockerName(image);\n  if (config.cacheImageRegistry) {\n    repository.setRegistry(config.cacheImageRegistry);\n  }\n  const runImage = repository.getCombined();\n  logger.info(`Run image: ${runImage}`);\n\n  const timeoutDeferredPromise = deferredPromise<never>();\n  const jobTimeoutId = setTimeout(() => {\n    healthCheck.flagUnhealthy('Job timeout exceeded; Docker presumed dead.');\n    timeoutDeferredPromise.reject(new Error(`Job timeout of ${jobTimeout}s exceeded.`));\n  }, jobTimeout * 1000);\n\n  const task = (async () => {\n    const container = await docker.createContainer({\n      Image: runImage,\n      // Convert {key: 'value'} to ['key=value'] and {key: null} to ['key'] for Docker API\n      Env: Object.entries(environment).map(([k, v]) => (v === null ? k : `${k}=${v}`)),\n      AttachStdout: true,\n      AttachStderr: true,\n      Tty: true,\n      NetworkDisabled: !enableNetworking,\n      HostConfig: {\n        Binds: [`${tempDir}:/grade`],\n        Memory: config.graderDockerMemory,\n        MemorySwap: config.graderDockerMemorySwap,\n        KernelMemory: config.graderDockerKernelMemory,\n        DiskQuota: config.graderDockerDiskQuota,\n        IpcMode: 'private',\n        CpuPeriod: config.graderDockerCpuPeriod,\n        CpuQuota: config.graderDockerCpuQuota,\n        PidsLimit: config.graderDockerPidsLimit,\n        Ulimits: [\n          {\n            // Disable core dumps, which can get very large and bloat our storage.\n            Name: 'core',\n            Soft: 0,\n            Hard: 0,\n          },\n        ],\n      },\n      Entrypoint: entrypoint ? shlex.split(entrypoint) : undefined,\n    });\n\n    const stream = await container.attach({\n      stream: true,\n      stdout: true,\n      stderr: true,\n    });\n    const out = byline(stream);\n    out.on('data', (line) => {\n      logger.info(`container> ${line.toString('utf8')}`);\n    });\n\n    await container.start();\n    logger.info('Container started!');\n\n    results.start_time = await timeReporter.reportStartTime(jobId);\n\n    const timeoutId = setTimeout(() => {\n      results.timedOut = true;\n      container.kill().catch((err) => {\n        globalLogger.error('Error killing container', err);\n      });\n    }, timeout * 1000);\n\n    logger.info('Waiting for container to complete');\n    try {\n      await container.wait();\n    } finally {\n      clearTimeout(timeoutId);\n    }\n\n    results.end_time = await timeReporter.reportEndTime(jobId);\n\n    const data = await container.inspect();\n    if (results.timedOut) {\n      logger.info('Container timed out');\n    } else {\n      logger.info(`Container exited with exit code ${data.State.ExitCode}`);\n    }\n    results.succeeded = !results.timedOut && data.State.ExitCode === 0;\n\n    await container.remove({\n      // Remove any volumes associated with this container\n      v: true,\n    });\n\n    // We made it through the Docker danger zone!\n    clearTimeout(jobTimeoutId ?? undefined);\n    logger.info('Reading course results');\n    // Now that the job has completed, let's extract the results\n    // First up: results.json\n    if (results.succeeded) {\n      await fs.readFile(path.join(tempDir, 'results', 'results.json')).then(\n        (data) => {\n          if (Buffer.byteLength(data) > 1024 * 1024) {\n            // Cap output at 1MB\n            results.succeeded = false;\n            results.message =\n              'The grading results were larger than 1MB. ' +\n              'If the problem persists, please contact course staff or a proctor.';\n            return;\n          }\n\n          try {\n            const parsedResults = JSON.parse(data.toString());\n            results.results = sanitizeObject(parsedResults);\n            results.succeeded = true;\n          } catch (e) {\n            logger.error('Could not parse results.json:', e);\n            results.succeeded = false;\n            results.message = 'Could not parse the grading results.';\n          }\n        },\n        (err) => {\n          logger.error('Could not read results.json', err);\n          results.succeeded = false;\n          results.message = 'Could not read grading results.';\n        },\n      );\n    } else {\n      if (results.timedOut) {\n        results.message = `Your grading job did not complete within the time limit of ${timeout} seconds.\\nPlease fix your code before submitting again.`;\n      }\n      results.results = null;\n    }\n  })()\n    .catch((err) => {\n      logger.error('runJob error', err);\n\n      results.succeeded = false;\n      results.message = err.toString();\n    })\n    .then(() => {\n      // It's possible that we get here with an error prior to the global job timeout exceeding.\n      // If that happens, Docker is still alive, but it just errored. We'll cancel\n      // the timeout here if needed.\n      clearTimeout(jobTimeoutId);\n\n      return results;\n    });\n\n  return await Promise.race([task, timeoutDeferredPromise.promise]);\n}\n\nasync function uploadResults(context: Context, results: GradingResults) {\n  const {\n    logger,\n    s3,\n    job: { jobId, s3Bucket, s3RootKey },\n  } = context;\n\n  // Now we can send the results back to S3\n  logger.info(`Uploading results.json to S3 bucket ${s3Bucket}/${s3RootKey}`);\n  await new Upload({\n    client: s3,\n    params: {\n      Bucket: s3Bucket,\n      Key: `${s3RootKey}/results.json`,\n      Body: Buffer.from(JSON.stringify(results, null, 2)),\n    },\n  }).done();\n\n  // Send the results back to PrairieLearn now; the archive will\n  // be uploaded later\n  logger.info('Sending results to PrairieLearn with results');\n  const messageBody = {\n    jobId,\n    event: 'grading_result',\n    // The SQS max message size is 256KB; if our results payload is\n    // larger than 250KB, we won't send results via this and will\n    // instead rely on PL fetching them via S3.\n    data: JSON.stringify(results).length <= 250 * 1024 ? results : undefined,\n  };\n\n  if (!config.resultsQueueUrl) {\n    throw new Error('resultsQueueUrl is not defined');\n  }\n\n  const sqs = new SQSClient(makeAwsClientConfig());\n  await sqs.send(\n    new SendMessageCommand({\n      QueueUrl: config.resultsQueueUrl,\n      MessageBody: JSON.stringify(messageBody),\n    }),\n  );\n}\n\nasync function uploadArchive(context: Context, tempDir: string) {\n  const {\n    logger,\n    s3,\n    job: { s3Bucket, s3RootKey },\n  } = context;\n\n  // Now we can upload the archive of the /grade directory\n  logger.info('Creating temp file for archive');\n  const archiveFile = await tmp.file();\n\n  try {\n    logger.info('Building archive');\n    await execa('tar', ['-zcf', archiveFile.path, tempDir]);\n\n    logger.info(`Uploading archive to s3 bucket ${s3Bucket}/${s3RootKey}`);\n    await new Upload({\n      client: s3,\n      params: {\n        Bucket: s3Bucket,\n        Key: `${s3RootKey}/archive.tar.gz`,\n        Body: fs.createReadStream(archiveFile.path),\n      },\n    }).done();\n  } finally {\n    await archiveFile.cleanup();\n  }\n}\n\nasync function uploadLogs(context: Context) {\n  const {\n    logger,\n    s3,\n    job: { s3Bucket, s3RootKey },\n  } = context;\n\n  // Upload all logs to S3.\n  await new Upload({\n    client: s3,\n    params: {\n      Bucket: s3Bucket,\n      Key: `${s3RootKey}/output.log`,\n      Body: logger.getBuffer(),\n    },\n  }).done();\n}\n"]}