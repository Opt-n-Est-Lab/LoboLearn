{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/lib/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { AutoScaling } from '@aws-sdk/client-auto-scaling';\nimport { GetQueueUrlCommand, SQSClient } from '@aws-sdk/client-sqs';\nimport { z } from 'zod';\n\nimport {\n  ConfigLoader,\n  makeImdsConfigSource,\n  makeSecretsManagerConfigSource,\n} from '@prairielearn/config';\n\nimport logger from './logger.js';\n\n// Determine what environment we're running in\nconst isProduction = process.env.NODE_ENV === 'production';\n\nconst ConfigSchema = z.object({\n  maxConcurrentJobs: z.number().default(5),\n  useEc2MetadataService: z.boolean().default(true),\n  useConsoleLoggingForJobs: z.boolean().default(true),\n  useImagePreloading: z.boolean().default(false),\n  useHealthCheck: z.boolean().default(true),\n  cacheImageRegistry: z.string().nullable().default(null),\n  parallelInitPulls: z.number().default(5),\n  lifecycleHeartbeatIntervalMS: z.number().default(300000),\n  jobLogGroup: z.string().default('grading-jobs-debug'),\n  reportLoad: z.boolean().default(false),\n  reportIntervalSec: z.number().default(10),\n  graderDockerMemory: z.number().default((1 << 30) * 2), // 2GiB\n  graderDockerMemorySwap: z.number().default((1 << 30) * 2), // Same as memory, so no access to swap.\n  graderDockerKernelMemory: z.number().default(1 << 29), // 512 MiB\n  graderDockerDiskQuota: z.number().default(1 << 30), // 1 GiB\n  graderDockerCpuPeriod: z.number().default(100000), // microseconds\n  graderDockerCpuQuota: z.number().default(90000),\n  graderDockerPidsLimit: z.number().default(1024),\n  healthCheckPort: z.number().default(4000),\n  healthCheckInterval: z.number().default(30000),\n  jobsQueueName: z.string().default('grading_jobs_dev'),\n  jobsQueueUrl: z.string().nullable().default(null),\n  resultsQueueName: z.string().default('grading_results_dev'),\n  resultsQueueUrl: z.string().nullable().default(null),\n  timeoutOverhead: z.number().default(300),\n  postgresqlHost: z.string().default('localhost'),\n  postgresqlDatabase: z.string().default('postgres'),\n  postgresqlUser: z.string().default('postgres'),\n  postgresqlPassword: z.string().nullable().default(null),\n  postgresqlPoolSize: z.number().default(2),\n  postgresqlIdleTimeoutMillis: z.number().default(30000),\n  autoScalingGroupName: z.string().nullable().default(null),\n  // Will be automatically detected when running in EC2.\n  instanceId: z.string().default('server'),\n  sentryDsn: z.string().nullable().default(null),\n  sentryEnvironment: z.string().default('development'),\n  awsRegion: z.string().default('us-east-2'),\n  visibilityTimeout: z.number().default(60),\n  visibilityTimeoutHeartbeatIntervalSec: z.number().default(30),\n});\n\nfunction makeProductionConfigSource() {\n  return {\n    async load() {\n      if (!isProduction) return {};\n      return {\n        useEc2MetadataService: true,\n        useConsoleLoggingForJobs: false,\n        useImagePreloading: true,\n        reportLoad: true,\n      };\n    },\n  };\n}\n\nfunction makeAutoScalingGroupConfigSource() {\n  return {\n    async load(existingConfig) {\n      if (!process.env.CONFIG_LOAD_FROM_AWS) return {};\n\n      logger.info('Detecting AutoScalingGroup...');\n      // We disable this rule because we can't reliably use `makeAwsClientConfig`\n      // as a part of the config loading process. This is because it relies on\n      // reading the region from the config, which at this point hasn't been\n      // loaded yet.\n      //\n      // This rule is designed to enforce that we share credentials between\n      // clients to avoid spamming the IMDS API when creating lots of clients,\n      // but this client will really only be used once, typically at application\n      // startup.\n      //\n      // eslint-disable-next-line @prairielearn/aws-client-shared-config\n      const autoscaling = new AutoScaling({ region: existingConfig.awsRegion });\n      const data = await autoscaling.describeAutoScalingInstances({\n        InstanceIds: [existingConfig.instanceId],\n      });\n      if (!data.AutoScalingInstances || data.AutoScalingInstances.length === 0) {\n        logger.info('Not running inside an AutoScalingGroup');\n        return {};\n      }\n\n      const autoScalingGroupName = data.AutoScalingInstances[0].AutoScalingGroupName;\n      logger.info(`Running inside AutoScalingGroup: ${autoScalingGroupName}`);\n      return { autoScalingGroupName };\n    },\n  };\n}\n\nfunction makeQueueUrlConfigSource() {\n  return {\n    async load(existingConfig) {\n      if (!process.env.CONFIG_LOAD_FROM_AWS) return {};\n\n      const queuePrefixes = ['jobs', 'results'] as const;\n      const queueUrlConfig: Record<string, string> = {};\n\n      // As above, we avoid the use of `makeAwsClientConfig` here because that\n      // can't yet access the `awsRegion` config value. We also don't care\n      // about reusing credentials here, since this client will only be used\n      // once at application startup.\n      //\n      // eslint-disable-next-line @prairielearn/aws-client-shared-config\n      const sqs = new SQSClient({ region: existingConfig.awsRegion });\n\n      for (const prefix of queuePrefixes) {\n        const queueUrlKey = `${prefix}QueueUrl`;\n        const queueNameKey = `${prefix}QueueName`;\n        if (existingConfig[queueUrlKey]) {\n          logger.info(`Using queue url from config: ${existingConfig[queueUrlKey]}`);\n          continue;\n        }\n\n        const queueName = existingConfig[queueNameKey];\n        logger.info(`Loading url for queue \"${queueName}\"`);\n        const { QueueUrl } = await sqs.send(new GetQueueUrlCommand({ QueueName: queueName }));\n\n        if (!QueueUrl) {\n          throw new Error(`Failed to load url for queue \"${queueName}\"`);\n        }\n\n        queueUrlConfig[queueUrlKey] = QueueUrl;\n        logger.info(`Loaded url for queue \"${queueName}\": ${QueueUrl}`);\n      }\n\n      return queueUrlConfig;\n    },\n  };\n}\n\nconst loader = new ConfigLoader(ConfigSchema);\n\nexport const config = loader.config;\n\nexport async function loadConfig() {\n  await loader.loadAndValidate([\n    makeProductionConfigSource(),\n    makeImdsConfigSource(),\n    makeSecretsManagerConfigSource('ConfSecret'),\n    makeAutoScalingGroupConfigSource(),\n    makeQueueUrlConfigSource(),\n  ]);\n}\n"]}