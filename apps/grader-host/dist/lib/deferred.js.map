{"version":3,"file":"deferred.js","sourceRoot":"","sources":["../../src/lib/deferred.ts"],"names":[],"mappings":"AAMA;;;GAGG;AACH,MAAM,UAAU,eAAe;IAC7B,IAAI,OAAO,EAAE,MAAM,CAAC;IACpB,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1C,OAAO,GAAG,GAAG,CAAC;QACd,MAAM,GAAG,GAAG,CAAC;IACf,CAAC,CAAC,CAAC;IACH,IAAI,OAAO,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;QAClD,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IACD,OAAO;QACL,OAAO;QACP,MAAM;QACN,OAAO;KACR,CAAC;AACJ,CAAC","sourcesContent":["interface DeferredPromise<T> {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (reason: any) => void;\n}\n\n/**\n * Returns an object that can be used to resolve or reject a promise from\n * the outside.\n */\nexport function deferredPromise<T>(): DeferredPromise<T> {\n  let resolve, reject;\n  const promise = new Promise<T>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  if (resolve === undefined || reject === undefined) {\n    throw new Error('resolve or reject is undefined');\n  }\n  return {\n    resolve,\n    reject,\n    promise,\n  };\n}\n"]}