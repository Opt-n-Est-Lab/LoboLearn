{"version":3,"file":"healthCheck.js","sourceRoot":"","sources":["../../src/lib/healthCheck.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC,OAAO,MAAM,MAAM,WAAW,CAAC;AAE/B,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AACrC,OAAO,KAAK,SAAS,MAAM,gBAAgB,CAAC;AAC5C,OAAO,YAAY,MAAM,aAAa,CAAC;AAEvC;;;GAGG;AACH,IAAI,OAAO,GAAG,IAAI,CAAC;AACnB,IAAI,eAAe,GAAG,IAAI,CAAC;AAE3B;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,IAAI;IACxB,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;IAE5B,MAAM,aAAa,GAAG,GAAG,EAAE;QACzB,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAClB,IAAI,GAAG,EAAE,CAAC;gBACR,aAAa,CAAC,oBAAoB,CAAC,CAAC;YACtC,CAAC;YACD,UAAU,CAAC,aAAa,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QAChC,YAAY,CAAC,KAAK,CAAC,gDAAgD,GAAG,EAAE,CAAC,CAAC;QAC1E,MAAM,GAAG,CAAC;IACZ,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,aAAa,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC;IAEtD,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC5C,IAAI,GAAG,CAAC,GAAG,KAAK,OAAO,EAAE,CAAC;YACxB,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YACrC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,eAAe,EAAE,CAAC,CAAC;QACjE,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;YACrB,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACvB,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACpC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;YAC3B,YAAY,CAAC,KAAK,CAAC,+CAA+C,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC;YAC5F,MAAM,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE;YAC5B,YAAY,CAAC,IAAI,CAAC,4CAA4C,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC;YACxF,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,MAAM;IAClC,YAAY,CAAC,KAAK,CAAC,0BAA0B,MAAM,EAAE,CAAC,CAAC;IACvD,OAAO,GAAG,KAAK,CAAC;IAChB,eAAe,GAAG,MAAM,CAAC;IACzB,SAAS,CAAC,aAAa,EAAE,CAAC;AAC5B,CAAC;AAED,MAAM,UAAU,SAAS;IACvB,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import * as http from 'node:http';\n\nimport Docker from 'dockerode';\n\nimport { config } from './config.js';\nimport * as lifecycle from './lifecycle.js';\nimport globalLogger from './logger.js';\n\n/**\n * Stores our current status. Once we transition to an unhealthy state, there's\n * no going back. We'll be killed eventually.\n */\nlet healthy = true;\nlet unhealthyReason = null;\n\n/**\n * We have two levels of health checks here:\n *\n * 1) a /ping endpoint that will send a 200 status if we can connect to the\n *    Docker daemon and a 500 status otherwise.\n * 2) an internal checker that will ping docker at a certain interval and will\n *    kill our process if the daemon can't be reached.\n */\nexport async function init() {\n  const docker = new Docker();\n\n  const doHealthCheck = () => {\n    docker.ping((err) => {\n      if (err) {\n        flagUnhealthy('Docker unreachable');\n      }\n      setTimeout(doHealthCheck, config.healthCheckInterval);\n    });\n  };\n\n  await docker.ping().catch((err) => {\n    globalLogger.error(`Docker ping failed during healthCheck start: ${err}`);\n    throw err;\n  });\n\n  setTimeout(doHealthCheck, config.healthCheckInterval);\n\n  const server = http.createServer((req, res) => {\n    if (req.url === '/ping') {\n      res.statusCode = healthy ? 200 : 500;\n      res.end(healthy ? 'Healthy' : `Unhealthy: ${unhealthyReason}`);\n    } else {\n      res.statusCode = 404;\n      res.end('Not found');\n    }\n  });\n\n  await new Promise((resolve, reject) => {\n    server.once('error', (err) => {\n      globalLogger.error(`Could not start health check server on port ${config.healthCheckPort}`);\n      reject(err);\n    });\n    server.once('listening', () => {\n      globalLogger.info(`Health check server is listening on port ${config.healthCheckPort}`);\n      resolve(null);\n    });\n    server.listen(config.healthCheckPort);\n  });\n}\n\nexport function flagUnhealthy(reason) {\n  globalLogger.error(`A health check failed: ${reason}`);\n  healthy = false;\n  unhealthyReason = reason;\n  lifecycle.abandonLaunch();\n}\n\nexport function isHealthy() {\n  return healthy;\n}\n"]}