{"version":3,"file":"jobLogger.js","sourceRoot":"","sources":["../../src/lib/jobLogger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAwB,MAAM,aAAa,CAAC;AAE7D,OAAO,OAAO,MAAM,SAAS,CAAC;AAG9B,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAUrC,MAAM,OAAO,sBAAuB,SAAQ,QAAQ;IAClD,MAAM,CAAQ;IACd,SAAS,CAAgB;IACzB,UAAU,CAAS;IAEnB,YAAY,OAAuC;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,OAAO,EAAE,SAAS,IAAI,IAAI,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,KAAU,EAAE,SAAyB,EAAE,QAAwC;QACpF,qEAAqE;QACrE,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC;YACvC,QAAQ,EAAE,CAAC;YACX,OAAO;QACT,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEnE,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACvE,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;YAEjC,QAAQ,EAAE,CAAC;YACX,OAAO;QACT,CAAC;QAED,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,MAAM,CAAC;QACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,QAAQ,EAAE,CAAC;IACb,CAAC;IAED,SAAS;QACP,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;CACF;AAED,MAAM,UAAU,aAAa;IAC3B,MAAM,UAAU,GAAgB,EAAE,CAAC;IAEnC,MAAM,cAAc,GAAG,IAAI,sBAAsB,CAAC;QAChD,+BAA+B;QAC/B,SAAS,EAAE,IAAI,GAAG,IAAI;KACvB,CAAC,CAAC;IAEH,IAAI,MAAM,CAAC,wBAAwB,EAAE,CAAC;QACpC,UAAU,CAAC,IAAI,CACb,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;SACnF,CAAC,CACH,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,IAAI,CACb,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC;QAC5B,MAAM,EAAE,cAAc;QACtB,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;KAClF,CAAC,CACH,CAAC;IAEF,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;IAEpD,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;QAC3B,SAAS;YACP,OAAO,cAAc,CAAC,SAAS,EAAE,CAAC;QACpC,CAAC;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Writable, type WritableOptions } from 'node:stream';\n\nimport winston from 'winston';\nimport type Transport from 'winston-transport';\n\nimport { config } from './config.js';\n\nexport interface WinstonBufferedLogger extends winston.Logger {\n  getBuffer(): Buffer;\n}\n\ninterface BufferedWritableStreamOptions extends WritableOptions {\n  maxBuffer: number;\n}\n\nexport class BufferedWritableStream extends Writable {\n  buffer: any[];\n  maxBuffer: number | null;\n  bufferSize: number;\n\n  constructor(options?: BufferedWritableStreamOptions) {\n    super(options);\n    this.buffer = [];\n    this.maxBuffer = options?.maxBuffer ?? null;\n    this.bufferSize = 0;\n  }\n\n  _write(chunk: any, _encoding: BufferEncoding, callback: (error?: Error | null) => void) {\n    // If we've already reached the max buffer size, just drop the chunk.\n    if (this.bufferSize === this.maxBuffer) {\n      callback();\n      return;\n    }\n\n    const buffer = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);\n\n    if (this.maxBuffer && this.bufferSize + buffer.length > this.maxBuffer) {\n      const remainingBytes = this.maxBuffer - this.bufferSize;\n      this.buffer.push(buffer.subarray(0, remainingBytes));\n      this.bufferSize = this.maxBuffer;\n\n      callback();\n      return;\n    }\n\n    this.bufferSize += buffer.length;\n    this.buffer.push(buffer);\n    callback();\n  }\n\n  getBuffer() {\n    return Buffer.concat(this.buffer);\n  }\n}\n\nexport function makeJobLogger(): WinstonBufferedLogger {\n  const transports: Transport[] = [];\n\n  const bufferedStream = new BufferedWritableStream({\n    // Collect at most 1MB of logs.\n    maxBuffer: 1024 * 1024,\n  });\n\n  if (config.useConsoleLoggingForJobs) {\n    transports.push(\n      new winston.transports.Console({\n        format: winston.format.combine(winston.format.colorize(), winston.format.simple()),\n      }),\n    );\n  }\n\n  transports.push(\n    new winston.transports.Stream({\n      stream: bufferedStream,\n      format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\n    }),\n  );\n\n  const logger = winston.createLogger({ transports });\n\n  return Object.assign(logger, {\n    getBuffer() {\n      return bufferedStream.getBuffer();\n    },\n  });\n}\n"]}