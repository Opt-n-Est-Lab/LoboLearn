{"version":3,"file":"jobLogger.test.js","sourceRoot":"","sources":["../../src/lib/jobLogger.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,sBAAsB,EAAE,MAAM,gBAAgB,CAAC;AAExD,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACvB,MAAM,MAAM,GAAG,IAAI,sBAAsB,EAAE,CAAC;QAE5C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtB,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAExB,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAClC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,MAAM,GAAG,IAAI,sBAAsB,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;QAE7D,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAE9B,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAClC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,MAAM,GAAG,IAAI,sBAAsB,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;QAE7D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtB,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACxB,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAExB,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAClC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport { BufferedWritableStream } from './jobLogger.js';\n\ndescribe('BufferedWritableStream', () => {\n  it('buffers bytes', () => {\n    const stream = new BufferedWritableStream();\n\n    stream.write('hello');\n    stream.write(', world');\n\n    const buffer = stream.getBuffer();\n    assert.equal(buffer.toString(), 'hello, world');\n  });\n\n  it('truncates a buffer if max size is exceeded', () => {\n    const stream = new BufferedWritableStream({ maxBuffer: 10 });\n\n    stream.write('hello, world!');\n\n    const buffer = stream.getBuffer();\n    assert.equal(buffer.length, 10);\n    assert.equal(buffer.toString(), 'hello, wor');\n  });\n\n  it('handles multiple buffers exceeding the max size', () => {\n    const stream = new BufferedWritableStream({ maxBuffer: 10 });\n\n    stream.write('hello');\n    stream.write(', world');\n    stream.write(', again');\n\n    const buffer = stream.getBuffer();\n    assert.equal(buffer.length, 10);\n    assert.equal(buffer.toString(), 'hello, wor');\n  });\n});\n"]}