{"version":3,"file":"lifecycle.js","sourceRoot":"","sources":["../../src/lib/lifecycle.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'node:assert';\n\nimport { AutoScaling } from '@aws-sdk/client-auto-scaling';\n\nimport { makeAwsClientConfig } from './aws.js';\nimport { config } from './config.js';\nimport logger from './logger.js';\n\n/**\n * Stores our current state. We do one-way transitions:\n *    null -> Launching -> InService\n * or\n *    null -> Launching -> AbandoningLaunch\n */\nlet lifecycleState: 'Launching' | 'InService' | 'AbandoningLaunch' | null = null;\n\nexport function getState() {\n  return lifecycleState;\n}\n\nexport async function init() {\n  if (config.autoScalingGroupName == null) {\n    logger.info('lifecycle.init(): not running in AutoScalingGroup');\n    return;\n  }\n\n  assert.equal(lifecycleState, null);\n  lifecycleState = 'Launching';\n  logger.info(`lifecycle.init(): changing to state ${lifecycleState}`);\n  heartbeat();\n}\n\nexport async function inService() {\n  if (config.autoScalingGroupName == null) {\n    logger.info('lifecycle.inService(): not running in AutoScalingGroup');\n    return;\n  }\n\n  assert.equal(lifecycleState, 'Launching');\n  lifecycleState = 'InService';\n  logger.info(`lifecycle.inService(): changing to state ${lifecycleState}`);\n\n  const autoscaling = new AutoScaling(makeAwsClientConfig());\n  const params = {\n    AutoScalingGroupName: config.autoScalingGroupName,\n    LifecycleActionResult: 'CONTINUE',\n    LifecycleHookName: 'launching',\n    InstanceId: config.instanceId,\n  };\n  try {\n    await autoscaling.completeLifecycleAction(params);\n    logger.info('lifecycle.inService(): completed action', params);\n  } catch {\n    // don't return the error, because there is nothing to be done about it\n    logger.error('lifecycle.inService(): error completing action', params);\n  }\n}\n\nexport async function abandonLaunch() {\n  if (config.autoScalingGroupName == null) {\n    logger.info('lifecycle.abandonLaunch(): not running in AutoScalingGroup');\n    return;\n  }\n\n  if (lifecycleState === 'Launching') {\n    lifecycleState = 'AbandoningLaunch';\n    logger.info(`lifecycle.abandonLaunch(): changing to state ${lifecycleState}`);\n\n    const autoscaling = new AutoScaling(makeAwsClientConfig());\n    const params = {\n      AutoScalingGroupName: config.autoScalingGroupName,\n      LifecycleActionResult: 'ABANDON',\n      LifecycleHookName: 'launching',\n      InstanceId: config.instanceId,\n    };\n    try {\n      await autoscaling.completeLifecycleAction(params);\n      logger.info('lifecycle.abandonLaunch(): completed action', params);\n    } catch {\n      // don't return the error, because there is nothing to be done about it\n      logger.error('lifecycle.abandonLaunch(): error completing action', params);\n    }\n  } else {\n    logger.info(`lifecycle.abandonLaunch(): in state ${lifecycleState}, taking no action`);\n  }\n}\n\nfunction heartbeat() {\n  if (config.autoScalingGroupName == null) return;\n\n  if (lifecycleState === 'Launching') {\n    logger.info('lifecycle.heartbeat(): sending heartbeat...');\n    const autoscaling = new AutoScaling(makeAwsClientConfig());\n    const params = {\n      AutoScalingGroupName: config.autoScalingGroupName,\n      LifecycleHookName: 'launching',\n      InstanceId: config.instanceId,\n    };\n    autoscaling.recordLifecycleActionHeartbeat(params, (err, _data) => {\n      if (err) return logger.error('lifecycle.heartbeat(): ERROR', err);\n      setTimeout(heartbeat, config.lifecycleHeartbeatIntervalMS);\n    });\n  } else {\n    logger.info(`lifecycle.heartbeat(): in state ${lifecycleState}, not sending heartbeat`);\n  }\n}\n"]}