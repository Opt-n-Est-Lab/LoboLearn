{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/lib/load.ts"],"names":[],"mappings":"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","sourcesContent":["import * as sqldb from '@prairielearn/postgres';\n\nimport { config } from './config.js';\nimport * as healthCheck from './healthCheck.js';\nimport * as lifecycle from './lifecycle.js';\nimport logger from './logger.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nlet initialized = false;\nlet currentJobs, maxJobs, lastEstimateTimeMS, lastIncrementTimeMS, integratedLoad;\n\nexport function init(newMaxJobs) {\n  maxJobs = newMaxJobs;\n  const nowMS = Date.now();\n  lastEstimateTimeMS = nowMS;\n  lastIncrementTimeMS = nowMS;\n  integratedLoad = 0;\n  currentJobs = 0;\n  maxJobs = newMaxJobs;\n  initialized = true;\n  _reportLoad();\n  _reportConfig();\n}\n\nexport function startJob() {\n  if (!initialized) return;\n  _addIntegratedLoad();\n  currentJobs++;\n  if (currentJobs > maxJobs) throw new Error('startJob(): currentJobs > maxJobs');\n}\n\nexport function endJob() {\n  if (!initialized) return;\n  _addIntegratedLoad();\n  currentJobs--;\n  if (currentJobs < 0) throw new Error('endJob(): currentJobs < 0');\n}\n\nexport function getCurrentJobs() {\n  return currentJobs;\n}\n\nfunction _getAndResetLoadEstimate() {\n  _addIntegratedLoad();\n  const nowMS = Date.now();\n  const deltaSeconds = Math.max(1, nowMS - lastEstimateTimeMS) / 1000;\n  const loadEstimate = integratedLoad / deltaSeconds;\n\n  // reset stats\n  lastEstimateTimeMS = nowMS;\n  lastIncrementTimeMS = nowMS;\n  integratedLoad = 0;\n\n  return loadEstimate;\n}\n\nfunction _addIntegratedLoad() {\n  const nowMS = Date.now();\n  const delta = Math.max(1, nowMS - lastIncrementTimeMS) / 1000;\n  integratedLoad += delta * currentJobs;\n  lastIncrementTimeMS = nowMS;\n}\n\nfunction _reportLoad() {\n  const params = {\n    instance_id: config.instanceId,\n    queue_name: config.jobsQueueName,\n    average_jobs: _getAndResetLoadEstimate(),\n    max_jobs: maxJobs,\n    lifecycle_state: lifecycle.getState(),\n    healthy: healthCheck.isHealthy(),\n  };\n  sqldb.query(sql.insert_load, params, (err) => {\n    if (err) logger.error('Error reporting load:', err);\n    setTimeout(_reportLoad.bind(this), config.reportIntervalSec * 1000);\n  });\n}\n\nfunction _reportConfig() {\n  const params = {\n    instance_id: config.instanceId,\n    queue_name: config.jobsQueueName,\n    average_jobs: 0,\n    max_jobs: 0,\n    config,\n  };\n  sqldb.query(sql.insert_config, params, (err) => {\n    if (err) logger.error('Error reporting config:', err);\n  });\n}\n"]}