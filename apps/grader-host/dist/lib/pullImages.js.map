{"version":3,"file":"pullImages.js","sourceRoot":"","sources":["../../src/lib/pullImages.ts"],"names":[],"mappings":"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","sourcesContent":["import { ECRClient } from '@aws-sdk/client-ecr';\nimport * as async from 'async';\nimport Docker from 'dockerode';\n\nimport { DockerName, setupDockerAuth } from '@prairielearn/docker-utils';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { makeAwsClientConfig } from './aws.js';\nimport { config } from './config.js';\nimport logger from './logger.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport default async function pullImages() {\n  const docker = new Docker();\n\n  logger.info('Pinging docker');\n  await docker.ping();\n\n  let dockerAuth = {};\n  if (config.cacheImageRegistry) {\n    logger.info('Authenticating to docker');\n    const ecr = new ECRClient(makeAwsClientConfig());\n    dockerAuth = await setupDockerAuth(ecr);\n  }\n\n  logger.info('Querying for recent images');\n  const results = await sqldb.queryAsync(sql.select_recent_images, []);\n  const images = results.rows.map((row) => row.external_grading_image);\n\n  logger.info(`Need to pull ${images.length} images`);\n  await async.eachLimit(images, config.parallelInitPulls, async (image) => {\n    try {\n      logger.info(\n        `Pulling latest version of \"${image}\" image from ${\n          config.cacheImageRegistry || 'default registry'\n        }`,\n      );\n      const repository = new DockerName(image);\n      if (config.cacheImageRegistry) {\n        repository.setRegistry(config.cacheImageRegistry);\n      }\n\n      const stream = await docker.createImage(dockerAuth, {\n        fromImage: repository.getRegistryRepo(),\n        tag: repository.getTag() || 'latest',\n      });\n\n      await new Promise((resolve, reject) => {\n        docker.modem.followProgress(\n          stream,\n          (err) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(null);\n            }\n          },\n          (output) => {\n            logger.info('docker output:', output);\n          },\n        );\n      });\n    } catch (err) {\n      // if an error occurs during image pull, log it but keep going\n      logger.error(`Error pulling \"${image}\"`, err);\n    }\n  });\n}\n"]}