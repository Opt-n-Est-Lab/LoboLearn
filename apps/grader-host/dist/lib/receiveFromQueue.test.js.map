{"version":3,"file":"receiveFromQueue.test.js","sourceRoot":"","sources":["../../src/lib/receiveFromQueue.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeMessageVisibilityCommand,\n  DeleteMessageCommand,\n  ReceiveMessageCommand,\n} from '@aws-sdk/client-sqs';\nimport { assert, use as chaiUse } from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport sinon from 'sinon';\n\nimport { config } from './config.js';\nimport { receiveFromQueue } from './receiveFromQueue.js';\n\nchaiUse(chaiAsPromised);\n\nfunction randomString() {\n  return Math.random().toString(36).slice(2);\n}\n\nfunction fakeSqs(options: { message?: any; timeoutCount?: number } = {}) {\n  const receiptHandle = randomString();\n\n  let message = options.message;\n  if (!message) {\n    message = {\n      jobId: randomString(),\n      image: randomString(),\n      entrypoint: randomString(),\n      timeout: 60,\n      enableNetworking: true,\n      environment: { FOO: 'bar' },\n      s3Bucket: randomString(),\n      s3RootKey: randomString(),\n    };\n  }\n\n  const receiveMessage = sinon.spy((_command) => {\n    if (callCount < timeoutCount) {\n      callCount++;\n      return {};\n    }\n\n    return {\n      Messages: [\n        {\n          Body: JSON.stringify(message),\n          ReceiptHandle: receiptHandle,\n        },\n      ],\n    };\n  });\n  const changeMessageVisibility = sinon.spy((_command) => null);\n  const deleteMessage = sinon.spy((_command) => null);\n\n  const timeoutCount = options.timeoutCount || 0;\n  let callCount = 0;\n\n  return {\n    send: async (command) => {\n      if (command instanceof ReceiveMessageCommand) {\n        return receiveMessage(command);\n      } else if (command instanceof ChangeMessageVisibilityCommand) {\n        return changeMessageVisibility(command);\n      } else if (command instanceof DeleteMessageCommand) {\n        return deleteMessage(command);\n      } else {\n        throw new Error(`Unknown command type: ${command.constructor.name}`);\n      }\n    },\n    message,\n    receiptHandle,\n    changeMessageVisibility,\n    receiveMessage,\n    deleteMessage,\n  } as any;\n}\n\nconst VISIBILITY_TIMEOUT = 60;\n\ndescribe('receiveFromQueue', () => {\n  beforeEach(() => {\n    // Our config-loading system chokes when it's not running in AWS. Instead\n    // of loading it, we'll just set the values we need for these tests.\n    config.visibilityTimeout = VISIBILITY_TIMEOUT;\n  });\n\n  it('tries to receive a message from the correct queue url', async () => {\n    const sqs = fakeSqs();\n\n    await receiveFromQueue(sqs, 'helloworld', async () => {});\n\n    assert.equal(sqs.receiveMessage.args[0][0].input.QueueUrl, 'helloworld');\n  });\n\n  it('tries to fetch a message again if none is delivered', async () => {\n    const sqs = fakeSqs({\n      timeoutCount: 1,\n    });\n\n    await receiveFromQueue(sqs, 'helloworld', async () => {});\n\n    assert.equal(sqs.receiveMessage.callCount, 2);\n  });\n\n  it(\"rejects messages that don't contain a valid json string\", async () => {\n    const sqs = fakeSqs({\n      message: '{\"oops, this is invalid json\"',\n    });\n\n    await assert.isRejected(receiveFromQueue(sqs, '', async () => {}));\n    assert.equal(sqs.deleteMessage.callCount, 0);\n  });\n\n  it(\"rejects messages that don't match the message schema\", async () => {\n    const sqs = fakeSqs({\n      message: {\n        timeout: 'abc',\n        s3Bucket: 123,\n      },\n    });\n\n    await assert.isRejected(receiveFromQueue(sqs, '', async () => {}));\n    assert.equal(sqs.deleteMessage.callCount, 0);\n  });\n\n  it('updates the timeout of received messages', async () => {\n    const sqs = fakeSqs();\n\n    await receiveFromQueue(sqs, '', async () => {});\n\n    assert.equal(sqs.changeMessageVisibility.callCount, 1);\n    const params = sqs.changeMessageVisibility.args[0][0].input;\n    assert.equal(params.VisibilityTimeout, VISIBILITY_TIMEOUT);\n  });\n\n  it(\"doesn't delete messages that aren't handled successfully\", async () => {\n    const sqs = fakeSqs();\n\n    await assert.isRejected(\n      receiveFromQueue(sqs, '', async () => {\n        throw new Error('RIP');\n      }),\n    );\n    assert.equal(sqs.deleteMessage.callCount, 0);\n  });\n\n  it('deletes messages that are handled successfully', async () => {\n    const sqs = fakeSqs();\n\n    await receiveFromQueue(sqs, 'goodbyeworld', async () => {});\n\n    assert.equal(sqs.deleteMessage.callCount, 1);\n    assert.equal(sqs.deleteMessage.args[0][0].input.QueueUrl, 'goodbyeworld');\n    assert.equal(sqs.deleteMessage.args[0][0].input.ReceiptHandle, sqs.receiptHandle);\n  });\n});\n"]}