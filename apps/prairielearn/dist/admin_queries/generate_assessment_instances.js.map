{"version":3,"file":"generate_assessment_instances.js","sourceRoot":"","sources":["../../src/admin_queries/generate_assessment_instances.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAClC,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,qBAAqB,EAAE,MAAM,wBAAwB,CAAC;AAExF,OAAO,EAAE,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;AAC9D,OAAO,EAEL,oBAAoB,EACpB,YAAY,EACZ,UAAU,GACX,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,4BAA4B,EAAE,MAAM,yBAAyB,CAAC;AAEvE,OAAO,EAAiC,MAAM,WAAW,CAAC;AAE1D,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC;IAC7B,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,OAAO;IACjC,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG;IACzB,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC,IAAI;IAC3B,SAAS,EAAE,YAAY,CAAC,KAAK,CAAC,EAAE;IAChC,MAAM,EAAE,YAAY,CAAC,KAAK,CAAC,UAAU;IACrC,kBAAkB,EAAE,oBAAoB,CAAC,KAAK,CAAC,EAAE;IACjD,eAAe,EAAE,oBAAoB,CAAC,KAAK,CAAC,UAAU;CACvD,CAAC,CAAC;AAEH,MAAM,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC;IAC1C,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE;CACvB,CAAC,CAAC;AAGH,MAAM,CAAC,OAAO,CAAC,KAAK,WAAW,EAC7B,aAAa,EACb,IAAI,GAIL;IACC,OAAO,MAAM,qBAAqB,CAAC,KAAK,IAAI,EAAE;QAC5C,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;YACtD,eAAe;YACf,YAAY;YACZ,wBAAwB;SACzB,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,MAAM,4BAA4B,CAAC,aAAa,CAAC,CAAC;QACrE,IAAI,CAAC,UAAU;YAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC;QAE9C,MAAM,KAAK,GAAG,UAAU,CAAC,UAAU;YACjC,CAAC,CAAC,MAAM,SAAS,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,aAAa,EAAE,EAAE,cAAc,CAAC;YACvE,CAAC,CAAC,MAAM,SAAS,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,aAAa,EAAE,EAAE,aAAa,CAAC,CAAC;QACxE,IAAI,UAAU,CAAC,UAAU;YAAE,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;QAE9D,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,IAAwB,EAAE,EAAE,CAAC,CAAC;YACvE,GAAG,IAAI;YACP,aAAa,EAAE,UAAU,CAAC,EAAE;YAC5B,UAAU,EAAE,UAAU,CAAC,KAAK;YAC5B,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;gBACnD,UAAU;gBACV,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,aAAa,EAAE,IAAI,CAAC,OAAO;gBAC3B,IAAI;gBACJ,IAAI,EAAE,IAAI,IAAI,EAAE;gBAChB,cAAc,EAAE,IAAI;gBACpB,qBAAqB,EAAE,IAAI;aAC5B,CAAC;SACH,CAAC,CAAC,CAAC;QAEJ,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { mapSeries } from 'async';\nimport { z } from 'zod';\n\nimport { loadSqlEquiv, queryRows, runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { makeAssessmentInstance } from '../lib/assessment.js';\nimport {\n  type AssessmentInstance,\n  CourseInstanceSchema,\n  CourseSchema,\n  UserSchema,\n} from '../lib/db-types.js';\nimport { selectOptionalAssessmentById } from '../models/assessment.js';\n\nimport { type AdministratorQueryResult } from './util.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst UserRowSchema = z.object({\n  user_id: UserSchema.shape.user_id,\n  uid: UserSchema.shape.uid,\n  name: UserSchema.shape.name,\n  course_id: CourseSchema.shape.id,\n  course: CourseSchema.shape.short_name,\n  course_instance_id: CourseInstanceSchema.shape.id,\n  course_instance: CourseInstanceSchema.shape.short_name,\n});\ntype UserRow = z.infer<typeof UserRowSchema>;\nconst GroupRowSchema = UserRowSchema.extend({\n  group_name: z.string(),\n});\ntype GroupRow = z.infer<typeof GroupRowSchema>;\n\nexport default async function ({\n  assessment_id,\n  mode,\n}: {\n  assessment_id: string;\n  mode: AssessmentInstance['mode'];\n}): Promise<AdministratorQueryResult> {\n  return await runInTransactionAsync(async () => {\n    const columns = Object.keys(UserRowSchema.shape).concat([\n      'assessment_id',\n      'assessment',\n      'assessment_instance_id',\n    ]);\n    const assessment = await selectOptionalAssessmentById(assessment_id);\n    if (!assessment) return { rows: [], columns };\n\n    const users = assessment.group_work\n      ? await queryRows(sql.select_groups, { assessment_id }, GroupRowSchema)\n      : await queryRows(sql.select_users, { assessment_id }, UserRowSchema);\n    if (assessment.group_work) columns.splice(0, 0, 'group_name');\n\n    const rows = await mapSeries(users, async (user: UserRow | GroupRow) => ({\n      ...user,\n      assessment_id: assessment.id,\n      assessment: assessment.title,\n      assessment_instance_id: await makeAssessmentInstance({\n        assessment,\n        user_id: user.user_id,\n        authn_user_id: user.user_id,\n        mode,\n        date: new Date(),\n        time_limit_min: null,\n        client_fingerprint_id: null,\n      }),\n    }));\n\n    return { rows, columns };\n  });\n}\n"]}