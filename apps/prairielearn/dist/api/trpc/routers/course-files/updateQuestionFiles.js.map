{"version":3,"file":"updateQuestionFiles.js","sourceRoot":"","sources":["../../../../../src/api/trpc/routers/course-files/updateQuestionFiles.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAChE,OAAO,EAAE,kBAAkB,EAAE,MAAM,gCAAgC,CAAC;AACpE,OAAO,EAAE,gBAAgB,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE9D,MAAM,CAAC,MAAM,mBAAmB,GAAG,gBAAgB;KAChD,KAAK,CACJ,CAAC,CAAC,MAAM,CAAC;IACP,WAAW;IACX,SAAS,EAAE,QAAQ;IACnB,OAAO,EAAE,QAAQ;IACjB,aAAa,EAAE,QAAQ;IACvB,0BAA0B,EAAE,CAAC,CAAC,OAAO,EAAE;IACvC,WAAW,EAAE,QAAQ;IAErB,iBAAiB;IACjB,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;CACvC,CAAC,CACH;KACA,MAAM,CACL,CAAC,CAAC,MAAM,CAAC;IACP,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3D,eAAe,EAAE,CAAC,CAAC,MAAM,EAAE;CAC5B,CAAC,CACH;KACA,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;IACvB,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC5D,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAElE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,WAAW,CAAC;QAC7C,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;QAC3B,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;KACxC,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,IAAI,oBAAoB,CAAC;QACtC,MAAM,EAAE;YACN,UAAU,EAAE;gBACV,0BAA0B,EAAE,IAAI,CAAC,KAAK,CAAC,0BAA0B;gBACjE,UAAU;aACX;YACD,MAAM;YACN,IAAI;YACJ,QAAQ;SACT;QACD,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;KACxB,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,gBAAgB,EAAE,CAAC;IAElD,IAAI,CAAC;QACH,MAAM,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;IAAC,MAAM,CAAC;QACP,OAAO;YACL,MAAM,EAAE,OAAO;YACf,eAAe,EAAE,SAAS,CAAC,aAAa;SACzC,CAAC;IACJ,CAAC;IAED,OAAO;QACL,MAAM,EAAE,SAAS;QACjB,eAAe,EAAE,SAAS,CAAC,aAAa;KACzC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { IdSchema } from '../../../../lib/db-types.js';\nimport { QuestionModifyEditor } from '../../../../lib/editors.js';\nimport { selectCourseById } from '../../../../models/course.js';\nimport { selectQuestionById } from '../../../../models/question.js';\nimport { privateProcedure, selectUsers } from '../../trpc.js';\n\nexport const updateQuestionFiles = privateProcedure\n  .input(\n    z.object({\n      // Context.\n      course_id: IdSchema,\n      user_id: IdSchema,\n      authn_user_id: IdSchema,\n      has_course_permission_edit: z.boolean(),\n      question_id: IdSchema,\n\n      // Question data.\n      files: z.record(z.string().nullable()),\n    }),\n  )\n  .output(\n    z.object({\n      status: z.union([z.literal('success'), z.literal('error')]),\n      job_sequence_id: z.string(),\n    }),\n  )\n  .mutation(async (opts) => {\n    const course = await selectCourseById(opts.input.course_id);\n    const question = await selectQuestionById(opts.input.question_id);\n\n    const { user, authn_user } = await selectUsers({\n      user_id: opts.input.user_id,\n      authn_user_id: opts.input.authn_user_id,\n    });\n\n    const editor = new QuestionModifyEditor({\n      locals: {\n        authz_data: {\n          has_course_permission_edit: opts.input.has_course_permission_edit,\n          authn_user,\n        },\n        course,\n        user,\n        question,\n      },\n      files: opts.input.files,\n    });\n\n    const serverJob = await editor.prepareServerJob();\n\n    try {\n      await editor.executeWithServerJob(serverJob);\n    } catch {\n      return {\n        status: 'error',\n        job_sequence_id: serverJob.jobSequenceId,\n      };\n    }\n\n    return {\n      status: 'success',\n      job_sequence_id: serverJob.jobSequenceId,\n    };\n  });\n"]}