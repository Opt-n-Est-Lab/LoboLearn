{"version":3,"file":"trpc.js","sourceRoot":"","sources":["../../../src/api/trpc/trpc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from 'node:crypto';\n\nimport { TRPCError, initTRPC } from '@trpc/server';\nimport { type CreateExpressContextOptions } from '@trpc/server/adapters/express';\nimport { type Request } from 'express';\nimport * as jose from 'jose';\n\nimport { run } from '@prairielearn/run';\n\nimport { config } from '../../lib/config.js';\nimport { selectUserById } from '../../models/user.js';\n\nfunction getJWT(req: Request) {\n  if (!req.headers.authorization) return null;\n\n  const [type, token] = req.headers.authorization.split(' ');\n  if (type.toLowerCase() !== 'bearer') return null;\n\n  return token || null;\n}\n\nexport async function createContext({ req }: CreateExpressContextOptions) {\n  return {\n    jwt: getJWT(req),\n    bypassJwt: false,\n  };\n}\n\nexport type TRPCContext = Awaited<ReturnType<typeof createContext>>;\n\nexport const t = initTRPC.context<TRPCContext>().create();\n\nexport const router = t.router;\nexport const publicProcedure = t.procedure;\n\nexport const privateProcedure = t.procedure.use(async (opts) => {\n  // When running in the same process, we can bypass JWT verification.\n  if (opts.ctx.bypassJwt) return opts.next();\n\n  if (!config.trpcSecretKeys?.length) {\n    throw new TRPCError({\n      code: 'INTERNAL_SERVER_ERROR',\n      message: 'Internal API secret keys are not configured',\n    });\n  }\n\n  if (!opts.ctx.jwt) {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Requires authentication',\n    });\n  }\n\n  for (const secretKey of config.trpcSecretKeys) {\n    try {\n      await jose.jwtVerify(opts.ctx.jwt, crypto.createSecretKey(secretKey, 'utf-8'), {\n        issuer: 'PrairieLearn',\n      });\n\n      // The payload was successfully verified. We can proceed.\n      return opts.next();\n    } catch {\n      // Ignore errors and try the next key.\n    }\n  }\n\n  // We weren't able to verify the JWT with any of the secret keys.\n  throw new TRPCError({\n    code: 'UNAUTHORIZED',\n    message: 'Invalid JWT',\n  });\n});\n\nexport async function selectUsers({\n  user_id,\n  authn_user_id,\n}: {\n  user_id: string;\n  authn_user_id: string;\n}) {\n  const user = await selectUserById(user_id);\n\n  const authn_user = await run(async () => {\n    if (user_id === authn_user_id) return user;\n\n    return await selectUserById(authn_user_id);\n  });\n\n  return { user, authn_user };\n}\n"]}