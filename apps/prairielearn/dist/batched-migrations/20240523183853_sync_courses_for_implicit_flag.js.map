{"version":3,"file":"20240523183853_sync_courses_for_implicit_flag.js","sourceRoot":"","sources":["../../src/batched-migrations/20240523183853_sync_courses_for_implicit_flag.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAChE,OAAO,KAAK,UAAU,MAAM,2BAA2B,CAAC;AACxD,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAErE,OAAO,EAAe,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAC/D,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,wBAAwB,EAAE,MAAM,qBAAqB,CAAC;AAC/D,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAEhE,eAAe,oBAAoB,CAAC;IAClC,KAAK,CAAC,aAAa;QACjB,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,wCAAwC,EAAE,EAAE,CAAC,CAAC;QACpF,OAAO;YACL,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG;YACvB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,GAAW;QACpC,MAAM,OAAO,GAAG,MAAM,SAAS,CAC7B,iFAAiF,EACjF,EAAE,GAAG,EAAE,GAAG,EAAE,EACZ,YAAY,CACb,CAAC;QAEF,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC7B,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;CACF,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,MAAc;IAC7C,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC;QACtC,QAAQ,EAAE,MAAM,CAAC,EAAE;QACnB,IAAI,EAAE,MAAM;QACZ,WAAW,EAAE,gBAAgB;QAC7B,yEAAyE;QACzE,WAAW;QACX,MAAM,EAAE,SAAS;QACjB,WAAW,EAAE,SAAS;KACvB,CAAC,CAAC;IAEH,0EAA0E;IAC1E,mCAAmC;IACnC,MAAM,SAAS,CAAC,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC1C,MAAM,QAAQ,GAAG,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,UAAU,CAAC,UAAU,CACzB,QAAQ,EACR;YACE,iEAAiE;YACjE,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,2DAA2D,CAAC;SAC3F,EACD,KAAK,IAAI,EAAE;YACT,GAAG,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YAC5C,MAAM,qBAAqB,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC3D,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { makeBatchedMigration } from '@prairielearn/migrations';\nimport * as namedLocks from '@prairielearn/named-locks';\nimport { queryOneRowAsync, queryRows } from '@prairielearn/postgres';\n\nimport { type Course, CourseSchema } from '../lib/db-types.js';\nimport { createServerJob } from '../lib/server-jobs.js';\nimport { getLockNameForCoursePath } from '../models/course.js';\nimport { syncDiskToSqlWithLock } from '../sync/syncFromDisk.js';\n\nexport default makeBatchedMigration({\n  async getParameters() {\n    const result = await queryOneRowAsync('SELECT MAX(id) as max from pl_courses;', {});\n    return {\n      min: 1n,\n      max: result.rows[0].max,\n      batchSize: 10,\n    };\n  },\n\n  async execute(min: bigint, max: bigint): Promise<void> {\n    const courses = await queryRows(\n      'SELECT * FROM pl_courses WHERE id >= $min AND id <= $max AND deleted_at IS NULL',\n      { min, max },\n      CourseSchema,\n    );\n\n    for (const course of courses) {\n      await syncCourse(course);\n    }\n  },\n});\n\n/**\n * Re-syncs an existing course. Does NOT pull new changes from the remote repository.\n */\nexport async function syncCourse(course: Course) {\n  const serverJob = await createServerJob({\n    courseId: course.id,\n    type: 'sync',\n    description: 'Sync from disk',\n    // Since this is a sync performed by the system, don't associate any user\n    // with it.\n    userId: undefined,\n    authnUserId: undefined,\n  });\n\n  // We use `executeUnsafe` to ensure that any errors bubble up and mark the\n  // batched migration job as failed.\n  await serverJob.executeUnsafe(async (job) => {\n    const lockName = getLockNameForCoursePath(course.path);\n    await namedLocks.doWithLock(\n      lockName,\n      {\n        // Set a long timeout to try to ensure that the lock is acquired.\n        timeout: 60_000,\n        onNotAcquired: () => job.fail('Another user is already syncing or modifying this course.'),\n      },\n      async () => {\n        job.info('Sync git repository to database');\n        await syncDiskToSqlWithLock(course.id, course.path, job);\n      },\n    );\n  });\n}\n"]}