{"version":3,"file":"20250318175247_course_instance_usages__external_grading_jobs__backfill_v3.js","sourceRoot":"","sources":["../../src/batched-migrations/20250318175247_course_instance_usages__external_grading_jobs__backfill_v3.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAChE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAE5E,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,UAAU,GAAG,sBAAsB,CAAC;AAC1C,MAAM,QAAQ,GAAG,sBAAsB,CAAC;AAExC,eAAe,oBAAoB,CAAC;IAClC,KAAK,CAAC,aAAa;QACjB,8BAA8B;QAC9B,MAAM,UAAU,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;QAElE,wDAAwD;QACxD,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,QAAQ,CACjC,GAAG,CAAC,aAAa,EACjB,EAAE,UAAU,EAAE,QAAQ,EAAE,EACxB,CAAC,CAAC,MAAM,CAAC;YACP,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE;YAC1C,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE;SAC3C,CAAC,CACH,CAAC;QACF,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;IAC1C,CAAC;IACD,KAAK,CAAC,OAAO,CAAC,KAAa,EAAE,GAAW;QACtC,MAAM,UAAU,CAAC,GAAG,CAAC,mDAAmD,EAAE;YACxE,KAAK;YACL,GAAG;YACH,UAAU;YACV,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { makeBatchedMigration } from '@prairielearn/migrations';\nimport { loadSqlEquiv, queryAsync, queryRow } from '@prairielearn/postgres';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst START_DATE = '2025-02-15T00:00:00Z';\nconst END_DATE = '2025-03-21T00:00:00Z';\n\nexport default makeBatchedMigration({\n  async getParameters() {\n    // First delete old usage data\n    await queryAsync(sql.delete_old_usages, { START_DATE, END_DATE });\n\n    // Only backfill from grading jobs within the date range\n    const { min, max } = await queryRow(\n      sql.select_bounds,\n      { START_DATE, END_DATE },\n      z.object({\n        min: z.bigint({ coerce: true }).nullable(),\n        max: z.bigint({ coerce: true }).nullable(),\n      }),\n    );\n    return { min, max, batchSize: 100_000 };\n  },\n  async execute(start: bigint, end: bigint): Promise<void> {\n    await queryAsync(sql.update_course_instance_usages_for_external_gradings, {\n      start,\n      end,\n      START_DATE,\n      END_DATE,\n    });\n  },\n});\n"]}