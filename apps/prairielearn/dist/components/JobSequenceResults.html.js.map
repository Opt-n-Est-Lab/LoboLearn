{"version":3,"file":"JobSequenceResults.html.js","sourceRoot":"","sources":["../../src/components/JobSequenceResults.html.ts"],"names":[],"mappings":"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","sourcesContent":["import { EncodedData } from '@prairielearn/browser-utils';\nimport { formatDate } from '@prairielearn/formatter';\nimport { html, unsafeHtml } from '@prairielearn/html';\n\nimport { ansiToHtml } from '../lib/chalk.js';\nimport type { Course } from '../lib/db-types.js';\nimport type { JobSequenceWithTokens, JobWithToken } from '../lib/server-jobs.types.js';\n\nimport { JobStatus } from './JobStatus.html.js';\n\nexport interface JobSequenceResultsData {\n  jobSequenceId: string;\n  token: string;\n  jobCount: number;\n  jobs: Pick<JobWithToken, 'id' | 'status' | 'token'>[];\n}\n\n// If you want live updates, you also need to import lib/jobSequenceResults.js in the page's JavaScript asset.\nexport function JobSequenceResults({\n  course,\n  jobSequence,\n}: {\n  course: Course | undefined;\n  jobSequence: JobSequenceWithTokens;\n}) {\n  const timeZone = course?.display_timezone || 'UTC';\n\n  return html`\n    ${EncodedData<JobSequenceResultsData>(\n      {\n        jobSequenceId: jobSequence.id,\n        token: jobSequence.token,\n        jobCount: jobSequence.jobs.length,\n        jobs: jobSequence.jobs.map((job) => ({\n          id: job.id,\n          status: job.status,\n          token: job.token,\n        })),\n      },\n      'job-sequence-results-data',\n    )}\n\n    <div class=\"card mb-4\">\n      <div class=\"card-header bg-primary text-white\">\n        ${jobSequence.description} #${jobSequence.number}\n      </div>\n\n      ${jobSequence.jobs.map(\n        (job) => html`\n          <div class=\"list-group\">\n            <li class=\"list-group-item\">\n              ${jobSequence.legacy\n                ? html`\n                    <h4 class=\"list-group-item-heading\">\n                      Stage ${job.number_in_sequence}: ${job.description}\n                    </h4>\n                    ${job.command\n                      ? html`\n                          <p class=\"mb-1\">\n                            Command\n                            <code>${job.command}${job.arguments?.map((arg) => ` ${arg}`)}</code>\n                            ${job.working_directory\n                              ? html` run in <code>${job.working_directory}</code>`\n                              : ''}\n                          </p>\n                        `\n                      : ''}\n                  `\n                : ''}\n              <div class=\"d-flex justify-content-end float-md-end\">\n                <div class=\"form-check form-switch\">\n                  <input\n                    type=\"checkbox\"\n                    class=\"js-toggle-verbose form-check-input\"\n                    id=\"toggle-verbose-${job.id}\"\n                    data-target-id=\"output-${job.id}\"\n                  />\n                  <label class=\"form-check-label\" for=\"toggle-verbose-${job.id}\">\n                    Show verbose messages\n                  </label>\n                </div>\n              </div>\n              <p class=\"mb-1\">\n                Started ${job.start_date ? `at ${formatDate(job.start_date, timeZone)}` : ''}\n                ${jobSequence.user_uid ? `by ${jobSequence.user_uid}` : ''}\n                ${jobSequence.authn_user_uid !== jobSequence.user_uid\n                  ? `(really ${jobSequence.authn_user_uid})`\n                  : ''}\n                ${job.finish_date\n                  ? html`&mdash; finished at ${formatDate(job.finish_date, timeZone)}`\n                  : ''}\n              </p>\n              <p class=\"mb-1\">\n                ${JobStatus({ status: job.status })}\n                ${job.status === 'Running' ? html`<i class=\"fa fa-sync fa-spin fa-fw\"></i>` : ''}\n              </p>\n              ${jobSequence.legacy\n                ? html`\n                    ${job.status === 'Error' && job.exit_code != null\n                      ? html`<p class=\"mb-1\">Exit code: ${job.exit_code}</p>`\n                      : ''}\n                    ${job.exit_signal != null\n                      ? html`<p class=\"mb-1\">Exit signal: ${job.exit_signal}</p>`\n                      : ''}\n                    ${job.error_message != null\n                      ? html`<p class=\"mb-1\">Error message: ${job.error_message}</p>`\n                      : ''}\n                  `\n                : ''}\n              <pre\n                id=\"output-${job.id}\"\n                class=\"text-white rounded p-3 mb-0 mt-3\"\n                style=\"background-color: black; --verbose-display: none;\"\n              >\n${unsafeHtml(ansiToHtml(job.output))}</pre\n              >\n            </li>\n          </div>\n        `,\n      )}\n    </div>\n  `;\n}\n"]}