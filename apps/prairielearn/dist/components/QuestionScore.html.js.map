{"version":3,"file":"QuestionScore.html.js","sourceRoot":"","sources":["../../src/components/QuestionScore.html.ts"],"names":[],"mappings":"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","sourcesContent":["import { type HtmlValue, escapeHtml, html, joinHtml } from '@prairielearn/html';\nimport { run } from '@prairielearn/run';\n\nimport type {\n  Assessment,\n  AssessmentInstance,\n  AssessmentQuestion,\n  InstanceQuestion,\n  Question,\n  Variant,\n} from '../lib/db-types.js';\nimport { formatPoints, formatPointsOrList } from '../lib/format.js';\nimport { idsEqual } from '../lib/id.js';\nimport type { SimpleVariantWithScore } from '../models/variant.js';\n\ninterface QuestionScorePanelContentProps {\n  instance_question: InstanceQuestion & {\n    allow_grade_left_ms?: number;\n    allow_grade_interval?: string;\n  };\n  assessment: Assessment;\n  assessment_question: AssessmentQuestion;\n  question: Question;\n  assessment_instance: AssessmentInstance;\n  variant?: Variant;\n  instance_question_info: {\n    question_number: string | null;\n    previous_variants: SimpleVariantWithScore[] | null;\n  };\n  urlPrefix: string;\n}\n\nexport function QuestionScorePanel(\n  props: QuestionScorePanelContentProps & {\n    authz_result?: { authorized_edit: boolean | null };\n    csrfToken: string;\n  },\n) {\n  const { instance_question_info, variant, assessment, authz_result, csrfToken } = props;\n\n  return html`\n    <div class=\"card mb-4\" id=\"question-score-panel\">\n      <div class=\"card-header bg-secondary text-white\">\n        <h2>Question ${instance_question_info.question_number}</h2>\n      </div>\n      ${QuestionScorePanelContent(props)}\n      ${variant != null && assessment.allow_issue_reporting\n        ? html`\n            <div class=\"card-footer\">\n              ${authz_result?.authorized_edit === false\n                ? html`\n                    <div class=\"alert alert-warning mt-2\" role=\"alert\">\n                      You are viewing the question instance of a different user and so are not\n                      authorized to report an error.\n                    </div>\n                  `\n                : IssueReportingPanel({ variant, csrfToken })}\n            </div>\n          `\n        : ''}\n    </div>\n  `;\n}\n\nexport function QuestionScorePanelContent({\n  instance_question,\n  assessment,\n  assessment_question,\n  question,\n  assessment_instance,\n  instance_question_info,\n  variant,\n  urlPrefix,\n}: QuestionScorePanelContentProps) {\n  const hasAutoAndManualPoints =\n    assessment_question.max_auto_points &&\n    (assessment_question.max_manual_points ||\n      instance_question.manual_points ||\n      instance_question.requires_manual_grading);\n\n  return html`\n    <table\n      class=\"table table-sm two-column-description-no-header\"\n      aria-label=\"Question score\"\n      id=\"question-score-panel-content\"\n    >\n      <tbody>\n        ${assessment.type === 'Exam'\n          ? html`\n              <tr>\n                <td>Status:</td>\n                <td>${ExamQuestionStatus({ instance_question, assessment_question })}</td>\n              </tr>\n            `\n          : ''}\n        ${assessment.type === 'Homework'\n          ? html`\n              ${\n                // This condition covers two cases:\n                // - A purely manually-graded question\n                // - A question with no points at all\n                // In both cases, we opt not to display the value, since it\n                // would not be possible to immediately earn any points with\n                // the next submission.\n                assessment_question.max_auto_points\n                  ? html`\n                      <tr>\n                        <td>Value:</td>\n                        <td>${QuestionValue({ instance_question, assessment_question })}</td>\n                      </tr>\n                    `\n                  : ''\n              }\n              ${\n                // Only show previous variants if the question allows multiple variants,\n                // or there are multiple variants (i.e., they were allowed at some point)\n                !question.single_variant ||\n                (instance_question_info.previous_variants?.length ?? 0) > 1\n                  ? html`\n                      <tr>\n                        <td colspan=\"2\" class=\"text-wrap\">\n                          All variants:\n                          ${QuestionVariantHistory({\n                            instanceQuestionId: instance_question.id,\n                            previousVariants: instance_question_info.previous_variants,\n                            currentVariantId: variant?.id,\n                            urlPrefix,\n                          })}\n                        </td>\n                      </tr>\n                    `\n                  : ''\n              }\n            `\n          : assessment_question.max_auto_points\n            ? html`\n                <tr>\n                  <td>Available points:</td>\n                  <td>\n                    ${ExamQuestionAvailablePoints({\n                      open: !!assessment_instance.open && instance_question.open,\n                      currentWeight:\n                        (instance_question.points_list_original?.[\n                          instance_question.number_attempts\n                        ] ?? 0) - (assessment_question.max_manual_points ?? 0),\n                      pointsList: instance_question.points_list?.map(\n                        (p) => p - (assessment_question.max_manual_points ?? 0),\n                      ),\n                      highestSubmissionScore: instance_question.highest_submission_score,\n                    })}\n                  </td>\n                </tr>\n              `\n            : ''}\n        ${hasAutoAndManualPoints\n          ? html`\n              <tr>\n                <td>Auto-grading:</td>\n                <td>\n                  ${InstanceQuestionPoints({\n                    instance_question,\n                    assessment_question,\n                    component: 'auto',\n                  })}\n                </td>\n              </tr>\n              <tr>\n                <td>Manual grading:</td>\n                <td>\n                  ${InstanceQuestionPoints({\n                    instance_question,\n                    assessment_question,\n                    component: 'manual',\n                  })}\n                </td>\n              </tr>\n            `\n          : ''}\n        <tr>\n          <td>Total points:</td>\n          <td>\n            ${InstanceQuestionPoints({\n              instance_question,\n              assessment_question,\n              component: 'total',\n            })}\n          </td>\n        </tr>\n        ${!hasAutoAndManualPoints && assessment_question.max_points\n          ? html`\n              <tr>\n                <td colspan=\"2\" class=\"text-right\">\n                  <small>\n                    ${!assessment_question.max_auto_points\n                      ? 'Manually-graded question'\n                      : 'Auto-graded question'}\n                  </small>\n                </td>\n              </tr>\n            `\n          : ''}\n      </tbody>\n    </table>\n  `;\n}\n\nfunction IssueReportingPanel({ variant, csrfToken }: { variant: Variant; csrfToken: string }) {\n  return html`\n    <button\n      class=\"btn btn-xs btn-secondary\"\n      type=\"button\"\n      data-bs-toggle=\"collapse\"\n      data-bs-target=\"#issueCollapse\"\n      aria-expanded=\"false\"\n      aria-controls=\"issueCollapse\"\n    >\n      Report an error in this question <i class=\"far fa-caret-square-down\"></i>\n    </button>\n    <div class=\"collapse\" id=\"issueCollapse\">\n      <form method=\"POST\">\n        <p class=\"small mt-3\">\n          This form is only for reporting errors in the question itself. Do not use this form if you\n          just don't know how to answer the question.\n        </p>\n        <div class=\"mb-3\">\n          <textarea\n            class=\"form-control\"\n            rows=\"5\"\n            name=\"description\"\n            placeholder=\"Describe the error in this question\"\n            required\n          ></textarea>\n        </div>\n        <input type=\"hidden\" name=\"__variant_id\" value=\"${variant.id}\" />\n        <input type=\"hidden\" name=\"__csrf_token\" value=\"${csrfToken}\" />\n        <div class=\"mb-3 text-right\">\n          <button type=\"submit\" class=\"btn btn-sm btn-warning\" name=\"__action\" value=\"report_issue\">\n            Report error\n          </button>\n        </div>\n      </form>\n    </div>\n  `;\n}\n\nexport function ExamQuestionStatus({\n  instance_question,\n  assessment_question,\n}: {\n  instance_question: InstanceQuestion & {\n    allow_grade_left_ms?: number;\n    allow_grade_interval?: string;\n  };\n  assessment_question: Pick<AssessmentQuestion, 'max_auto_points' | 'max_manual_points'>;\n}) {\n  // Special case: if this is a manually graded question in the \"saved\" state,\n  // we want to differentiate it from saved auto-graded questions which can\n  // be graded immediately. We'll use a green badge so that student can drive\n  // towards all status badges being green.\n  //\n  // TODO: can we safely look at the assessment question for exams? What about\n  // the guarantee that an Exam-type assessment won't change after it's created?\n  if (\n    instance_question.status === 'saved' &&\n    !assessment_question.max_auto_points &&\n    assessment_question.max_manual_points\n  ) {\n    return html`\n      <span class=\"align-middle\">\n        <span class=\"badge text-bg-success\">saved for manual grading</span>\n      </span>\n    `;\n  }\n\n  const badge_color = {\n    unanswered: 'warning',\n    invalid: 'danger',\n    grading: 'default',\n    saved: 'info',\n    complete: 'success',\n    correct: 'success',\n    incorrect: 'danger',\n  };\n\n  return html`\n    <span class=\"align-middle\">\n      <span class=\"badge badge-${badge_color[instance_question.status ?? 'grading'] ?? 'default'}\">\n        ${instance_question.status}\n      </span>\n\n      ${(instance_question.allow_grade_left_ms ?? 0) > 0\n        ? html`\n            <button\n              type=\"button\"\n              class=\"grade-rate-limit-popover btn btn-xs\"\n              data-bs-toggle=\"popover\"\n              data-bs-container=\"body\"\n              data-bs-html=\"true\"\n              data-bs-content=\"This question limits the rate of submissions. Further grade allowed ${instance_question.allow_grade_interval} (as of the loading of this page).\"\n              data-bs-placement=\"auto\"\n            >\n              <i class=\"fa fa-hourglass-half\" aria-hidden=\"true\"></i>\n            </button>\n          `\n        : ''}\n    </span>\n  `;\n}\n\nexport function QuestionVariantHistory({\n  instanceQuestionId,\n  previousVariants,\n  currentVariantId,\n  urlPrefix,\n}: {\n  instanceQuestionId: string;\n  previousVariants?: SimpleVariantWithScore[] | null;\n  currentVariantId?: string;\n  urlPrefix: string;\n}) {\n  if (!previousVariants) return '';\n  const MAX_DISPLAYED_VARIANTS = 10;\n  const collapseClass = `variants-points-collapse-${instanceQuestionId}`;\n  const collapseButtonId = `variants-points-collapse-button-${instanceQuestionId}`;\n\n  return html`\n    ${previousVariants.length > MAX_DISPLAYED_VARIANTS\n      ? html`\n          <button\n            id=\"${collapseButtonId}\"\n            class=\"bg-white text-body p-0 m-0 border-0 rounded-0\"\n            aria-label=\"Show older variants\"\n            onclick=\"\n                // show all the hidden variant score buttons\n                document.querySelectorAll('.${collapseClass}').forEach(e => e.style.display = '');\n                // hide the ... button that triggered the expansion\n                document.querySelectorAll('#${collapseButtonId}').forEach(e => e.style.display = 'none');\n            \"\n          >\n            &ctdot;\n          </button>\n        `\n      : ''}\n    ${previousVariants.map(\n      (variant, index) => html`\n        <a\n          class=\"badge ${currentVariantId != null && idsEqual(variant.id, currentVariantId)\n            ? 'badge-info'\n            : 'badge-secondary'} ${collapseClass}\"\n          ${index < previousVariants.length - MAX_DISPLAYED_VARIANTS ? 'style=\"display: none\"' : ''}\n          href=\"${urlPrefix}/instance_question/${instanceQuestionId}/?variant_id=${variant.id}\"\n        >\n          ${variant.open ? 'Open' : `${Math.floor(variant.max_submission_score * 100)}%`}\n          ${currentVariantId != null && idsEqual(variant.id, currentVariantId)\n            ? html`<span class=\"visually-hidden\">(current)</span>`\n            : ''}\n        </a>\n      `,\n    )}\n  `;\n}\n\nexport function InstanceQuestionPoints({\n  instance_question,\n  assessment_question,\n  component,\n}: {\n  instance_question: Pick<\n    InstanceQuestion,\n    'auto_points' | 'manual_points' | 'points' | 'status' | 'requires_manual_grading'\n  >;\n  assessment_question: Pick<\n    AssessmentQuestion,\n    'max_auto_points' | 'max_manual_points' | 'max_points'\n  >;\n  component: 'manual' | 'auto' | 'total';\n}) {\n  const points =\n    component === 'auto'\n      ? instance_question.auto_points\n      : component === 'manual'\n        ? instance_question.manual_points\n        : instance_question.points;\n  const maxPoints =\n    component === 'auto'\n      ? assessment_question.max_auto_points\n      : component === 'manual'\n        ? assessment_question.max_manual_points\n        : assessment_question.max_points;\n  const pointsPending =\n    (['saved', 'grading'].includes(instance_question.status ?? '') && component !== 'manual') ||\n    (instance_question.requires_manual_grading && component !== 'auto');\n\n  // Special case: if this is a manually-graded question in the saved state, don't show\n  // a \"pending\" badge for auto points, since there aren't any pending auto points.\n  if (\n    instance_question.status === 'saved' &&\n    component === 'auto' &&\n    !assessment_question.max_auto_points &&\n    assessment_question.max_manual_points\n  ) {\n    return html`&mdash;`;\n  }\n\n  return html`\n    <span class=\"text-nowrap\">\n      ${instance_question.status === 'unanswered'\n        ? html`&mdash;`\n        : pointsPending\n          ? html`<span class=\"badge text-bg-info\">pending</span>`\n          : !points && !maxPoints\n            ? html`&mdash;`\n            : html`<span data-testid=\"awarded-points\">${formatPoints(points)}</span>`}\n      ${maxPoints ? html`<small>/<span class=\"text-muted\">${maxPoints}</span></small>` : ''}\n    </span>\n  `;\n}\n\nexport function ExamQuestionAvailablePoints({\n  open,\n  pointsList,\n  highestSubmissionScore,\n  currentWeight,\n}: {\n  open: boolean;\n  pointsList?: number[];\n  highestSubmissionScore?: number | null;\n  currentWeight: number;\n}) {\n  if (!open || pointsList == null || pointsList.length === 0) return html`&mdash;`;\n\n  const bestScore = Math.floor((highestSubmissionScore ?? 0) * 100);\n  const popoverContent = html`\n    <p>\n      You have ${pointsList.length} remaining attempt${pointsList.length !== 1 ? 's' : ''} for this\n      question.\n    </p>\n    <p>\n      If you score 100% on your next submission, then you will be awarded an additional\n      ${formatPoints(pointsList[0])} points.\n    </p>\n    ${bestScore > 0\n      ? html`\n          <p>\n            If you score less than ${bestScore}% on your next submission, then you will be awarded\n            no additional points, but you will keep any awarded points that you already have.\n          </p>\n          <p class=\"mb-0\">\n            If you score between ${bestScore}% and 100% on your next submission, then you will be\n            awarded an additional\n            <code>(${formatPoints(currentWeight)} * (score - ${bestScore})/100)</code>\n            points.\n          </p>\n        `\n      : html`\n          <p class=\"mb-0\">\n            If you score less than 100% on your next submission, then you will be awarded an\n            additional\n            <code>(${formatPoints(currentWeight)} * score / 100)</code>\n            points.\n          </p>\n        `}\n  `;\n\n  return html`\n    ${pointsList.length === 1\n      ? formatPoints(pointsList[0])\n      : html`${formatPoints(pointsList[0])},\n          <span class=\"text-muted\">${formatPointsOrList(pointsList.slice(1))}</span>`}\n    <button\n      type=\"button\"\n      class=\"btn btn-xs btn-ghost js-available-points-popover\"\n      data-bs-toggle=\"popover\"\n      data-bs-container=\"body\"\n      data-bs-html=\"true\"\n      data-bs-title=\"Explanation of available points\"\n      data-bs-content=\"${escapeHtml(popoverContent)}\"\n      data-bs-placement=\"auto\"\n    >\n      <i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i>\n    </button>\n  `;\n}\n\nfunction QuestionValue({\n  instance_question,\n  assessment_question,\n}: {\n  instance_question: InstanceQuestion;\n  assessment_question: AssessmentQuestion;\n}) {\n  const initAutoPoints =\n    (assessment_question.init_points ?? 0) - (assessment_question.max_manual_points ?? 0);\n\n  const currentAutoValue =\n    (instance_question.current_value ?? 0) - (assessment_question.max_manual_points ?? 0);\n\n  const bestCurrentScore = run(() => {\n    const variantPoints = instance_question.variants_points_list.at(-1);\n    if (variantPoints == null) return 0;\n    if (variantPoints < initAutoPoints) return (variantPoints / initAutoPoints) * 100;\n    return 0;\n  });\n\n  const popoverContent = run(() => {\n    const parts: HtmlValue[] = [\n      html`\n        <p>\n          This question awards partial credit if you continue getting closer to the correct answer.\n        </p>\n      `,\n    ];\n\n    if (bestCurrentScore === 0) {\n      const pluralizedPoints = currentAutoValue === 1 ? 'point' : 'points';\n      parts.push(html`\n        <p>\n          If you score 100% on your next submission, you will be awarded an additional\n          ${formatPoints(currentAutoValue)} ${pluralizedPoints}.\n        </p>\n      `);\n\n      parts.push(html`\n        <p class=\"mb-0\">\n          If you score less than 100% on your next submission, you will be awarded an additional\n          <code>${formatPoints(initAutoPoints)} * score / 100</code> points.\n        </p>\n      `);\n    } else {\n      if (instance_question.some_perfect_submission) {\n        parts.push(html`\n          <p>\n            Your highest submission score since your last 100% submission is\n            ${formatPoints(bestCurrentScore)}%.\n          </p>\n        `);\n      } else {\n        parts.push(\n          html`<p>Your highest submission score so far is ${formatPoints(bestCurrentScore)}%.</p>`,\n        );\n      }\n\n      const perfectAdditionalPoints = (currentAutoValue * (100 - bestCurrentScore)) / 100;\n      const pluralizedPoints = perfectAdditionalPoints === 1 ? 'point' : 'points';\n      parts.push(html`\n        <p>\n          If you score 100% on your next submission, you will be awarded an additional\n          ${formatPoints(perfectAdditionalPoints)} ${pluralizedPoints}.\n        </p>\n      `);\n\n      parts.push(\n        html`<p>\n          If you score between ${formatPoints(bestCurrentScore)}% and 100% on your next submission,\n          you will be awarded an additional\n          <code>\n            ${formatPoints(currentAutoValue)} * (score - ${formatPoints(bestCurrentScore)}) / 100\n          </code>\n          points.\n        </p>`,\n      );\n\n      parts.push(html`\n        <p class=\"mb-0\">\n          If you score less than ${formatPoints(bestCurrentScore)}% on your next submission, you\n          will not be awarded any additional points for that submission.\n        </p>\n      `);\n    }\n\n    return joinHtml(parts);\n  });\n\n  return html`\n    ${currentAutoValue}\n    <button\n      type=\"button\"\n      class=\"btn btn-xs js-value-popover\"\n      data-bs-toggle=\"popover\"\n      data-bs-container=\"body\"\n      data-bs-html=\"true\"\n      data-bs-title=\"Explanation of question value\"\n      data-bs-content=\"${escapeHtml(popoverContent)}\"\n      data-bs-placement=\"auto\"\n    >\n      <i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i>\n    </button>\n  `;\n}\n"]}