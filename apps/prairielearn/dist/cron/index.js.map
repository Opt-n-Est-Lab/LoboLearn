{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cron/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { setTimeout as sleep } from 'node:timers/promises';\n\nimport debugfn from 'debug';\nimport _ from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { logger } from '@prairielearn/logger';\nimport * as namedLocks from '@prairielearn/named-locks';\nimport { SpanStatusCode, context, suppressTracing, trace } from '@prairielearn/opentelemetry';\nimport * as sqldb from '@prairielearn/postgres';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport { config } from '../lib/config.js';\nimport { isEnterprise } from '../lib/license.js';\n\nconst debug = debugfn('prairielearn:cron');\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\n/**\n * jobTimeouts meaning (used by stop()):\n *     Timeout object = timeout is running and can be canceled\n *     0 = job is currently running\n *     -1 = stop requested\n */\nconst jobTimeouts: Record<string | number, number | NodeJS.Timeout> = {};\n\ninterface CronJobModule {\n  run: () => Promise<void>;\n}\n\ninterface CronJob {\n  name: string;\n  module: CronJobModule;\n  intervalSec: number | 'daily';\n}\n\nexport let jobs: CronJob[] = [];\n\n// Cron jobs are protected by two layers:\n// 1. We use a namedLock of the form `cron:JOB_NAME`\n// 2. We check the `cron_jobs` table and only run the job if the last\n//    time it ran was more than `intervalSec` time ago.\n// This means that we can have multiple servers running cron jobs and\n// the jobs will still only run at the required frequency.\n\nexport async function init() {\n  debug('init()');\n  if (!config.cronActive) {\n    logger.verbose('cronActive is false, skipping cron initialization');\n    return;\n  }\n\n  jobs = [\n    {\n      name: 'sendUnfinishedCronWarnings',\n      module: await import('./sendUnfinishedCronWarnings.js'),\n      intervalSec: 'daily',\n    },\n    {\n      name: 'autoFinishExams',\n      module: await import('./autoFinishExams.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalAutoFinishExamsSec,\n    },\n    {\n      name: 'errorAbandonedJobs',\n      module: await import('./errorAbandonedJobs.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalErrorAbandonedJobsSec,\n    },\n    {\n      name: 'sendExternalGraderStats',\n      module: await import('./sendExternalGraderStats.js'),\n      intervalSec: 'daily',\n    },\n    {\n      name: 'sendExternalGraderDeadLetters',\n      module: await import('./sendExternalGraderDeadLetters.js'),\n      intervalSec: 'daily',\n    },\n    {\n      name: 'serverLoad',\n      module: await import('./serverLoad.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalServerLoadSec,\n    },\n    {\n      name: 'serverUsage',\n      module: await import('./serverUsage.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalServerUsageSec,\n    },\n    {\n      name: 'calculateAssessmentQuestionStats',\n      module: await import('./calculateAssessmentQuestionStats.js'),\n      intervalSec:\n        config.cronOverrideAllIntervalsSec ||\n        config.cronIntervalCalculateAssessmentQuestionStatsSec,\n    },\n    {\n      name: 'workspaceTimeoutStop',\n      module: await import('./workspaceTimeoutStop.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalWorkspaceTimeoutStopSec,\n    },\n    {\n      name: 'workspaceTimeoutWarn',\n      module: await import('./workspaceTimeoutWarn.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalWorkspaceTimeoutWarnSec,\n    },\n    {\n      name: 'workspaceHostTransitions',\n      module: await import('./workspaceHostTransitions.js'),\n      intervalSec:\n        config.cronOverrideAllIntervalsSec || config.cronIntervalWorkspaceHostTransitionsSec,\n    },\n    {\n      name: 'cleanTimeSeries',\n      module: await import('./cleanTimeSeries.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalCleanTimeSeriesSec,\n    },\n  ];\n\n  if (isEnterprise()) {\n    jobs.push({\n      name: 'externalGraderLoad',\n      module: await import('../ee/cron/externalGraderLoad.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalExternalGraderLoadSec,\n    });\n\n    jobs.push({\n      name: 'workspaceHostLoads',\n      module: await import('../ee/cron/workspaceHostLoads.js'),\n      intervalSec: config.cronOverrideAllIntervalsSec || config.cronIntervalWorkspaceHostLoadsSec,\n    });\n\n    jobs.push({\n      name: 'chunksHostAutoScaling',\n      module: await import('../ee/cron/chunksHostAutoScaling.js'),\n      intervalSec:\n        config.cronOverrideAllIntervalsSec || config.cronIntervalChunksHostAutoScalingSec,\n    });\n  }\n\n  const enabledJobs = config.cronEnabledJobs;\n  const disabledJobs = config.cronDisabledJobs;\n\n  if (enabledJobs && disabledJobs) {\n    throw new Error('Cannot set both cronEnabledJobs and cronDisabledJobs');\n  }\n\n  jobs.forEach((job) => {\n    if (typeof job.module.run !== 'function') {\n      throw new Error(`Cron job ${job.name} does not have a run() function`);\n    }\n  });\n\n  jobs = jobs.filter((job) => {\n    if (enabledJobs) {\n      return enabledJobs.includes(job.name);\n    } else if (disabledJobs) {\n      return !disabledJobs.includes(job.name);\n    } else {\n      return true;\n    }\n  });\n\n  logger.verbose(\n    'initializing cron',\n    jobs.map(({ name, intervalSec }) => ({ name, intervalSec })),\n  );\n\n  const jobsByPeriodSec = _.groupBy(jobs, 'intervalSec');\n  for (const [intervalSec, jobsList] of Object.entries(jobsByPeriodSec)) {\n    const intervalSecNum = Number.parseInt(intervalSec);\n    if (intervalSec === 'daily') {\n      queueDailyJobs(jobsList);\n    } else if (Number.isNaN(intervalSecNum)) {\n      throw new Error(`Invalid cron interval: ${intervalSec}`);\n    } else if (intervalSecNum > 0) {\n      queueJobs(jobsList, intervalSecNum);\n    } // zero or negative intervalSec jobs are not run\n  }\n}\n\nexport async function stop() {\n  Object.entries(jobTimeouts).forEach(([interval, timeout]) => {\n    if (typeof timeout !== 'number') {\n      // This is a pending timeout, which can be canceled.\n      clearTimeout(timeout);\n      delete jobTimeouts[interval];\n    } else if (timeout === 0) {\n      // Job is currently running; request that it stop.\n      jobTimeouts[interval] = -1;\n    }\n  });\n\n  // Wait until all jobs have finished.\n  while (Object.keys(jobTimeouts).length > 0) {\n    await sleep(100);\n  }\n}\n\nfunction queueJobs(jobsList: CronJob[], intervalSec: number) {\n  debug(`queueJobs(): ${intervalSec}`);\n  function queueRun() {\n    debug(`queueJobs(): ${intervalSec}: starting run`);\n    jobTimeouts[intervalSec] = 0;\n    runJobs(jobsList)\n      .catch((err) => {\n        logger.error('Error running cron jobs', err);\n        Sentry.captureException(err);\n      })\n      .finally(() => {\n        debug(`queueJobs(): ${intervalSec}: completed run`);\n        if (jobTimeouts[intervalSec] === -1) {\n          // someone requested a stop\n          debug(`queueJobs(): ${intervalSec}: stop requested`);\n          delete jobTimeouts[intervalSec];\n          return;\n        }\n        debug(`queueJobs(): ${intervalSec}: waiting for next run time`);\n        jobTimeouts[intervalSec] = setTimeout(queueRun, intervalSec * 1000);\n      });\n  }\n  jobTimeouts[intervalSec] = setTimeout(queueRun, intervalSec * 1000);\n}\n\nfunction queueDailyJobs(jobsList: CronJob[]) {\n  debug('queueDailyJobs()');\n  function timeToNextMS() {\n    const now = Date.now();\n    const midnight = new Date(now).setHours(0, 0, 0, 0);\n    const sinceMidnightMS = now - midnight;\n    const cronDailyMS = config.cronDailySec * 1000;\n    const dayMS = 24 * 60 * 60 * 1000;\n    let tMS = (cronDailyMS - sinceMidnightMS + dayMS) % dayMS;\n    if (tMS < 0) {\n      logger.error('negative tMS', {\n        now,\n        midnight,\n        sinceMidnightMS,\n        cronDailyMS,\n        dayMS,\n        tMS,\n      });\n      tMS = 24 * 60 * 60 * 1000;\n    }\n    return tMS;\n  }\n  function queueRun() {\n    debug('queueDailyJobs(): starting run');\n    jobTimeouts['daily'] = 0;\n    runJobs(jobsList)\n      .catch((err) => {\n        logger.error('Error running cron jobs', err);\n        Sentry.captureException(err);\n      })\n      .finally(() => {\n        debug('queueDailyJobs(): completed run');\n        if (jobTimeouts['daily'] === -1) {\n          // someone requested a stop\n          debug('queueDailyJobs(): stop requested');\n          delete jobTimeouts['daily'];\n          return;\n        }\n        debug('queueDailyJobs(): waiting for next run time');\n        jobTimeouts['daily'] = setTimeout(queueRun, timeToNextMS());\n      });\n  }\n  jobTimeouts['daily'] = setTimeout(queueRun, timeToNextMS());\n}\n\n// run a list of jobs\nasync function runJobs(jobsList: CronJob[]) {\n  debug('runJobs()');\n  const cronUuid = uuidv4();\n  logger.verbose('cron: jobs starting', { cronUuid });\n\n  for (const job of jobsList) {\n    debug(`runJobs(): running ${job.name}`);\n    const tracer = trace.getTracer('cron');\n    await tracer.startActiveSpan(`cron:${job.name}`, async (span) => {\n      // Don't actually trace anything that runs during the job;\n      // that would create too many events for us. The only thing\n      // we're interested in for now is the duration and the\n      // success/failure state.\n      await context.with(suppressTracing(context.active()), async () => {\n        try {\n          await tryJobWithLock(job, cronUuid);\n          span.setStatus({ code: SpanStatusCode.OK });\n        } catch (err) {\n          debug(`runJobs(): error running ${job.name}: ${err}`);\n          logger.error(`cron: ${job.name} failure: ` + String(err), {\n            message: err.message,\n            stack: err.stack,\n            data: JSON.stringify(err.data),\n            cronUuid,\n          });\n\n          Sentry.captureException(err, {\n            tags: {\n              'cron.name': job.name,\n              'cron.uuid': cronUuid,\n            },\n          });\n\n          span.recordException(err);\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: err.message,\n          });\n        }\n\n        debug(`runJobs(): completed ${job.name}`);\n      });\n\n      span.end();\n    });\n  }\n\n  debug('runJobs(): done');\n  logger.verbose('cron: jobs finished', { cronUuid });\n}\n\n// try and get the job lock, and run the job if we get it\nasync function tryJobWithLock(job: CronJob, cronUuid: string) {\n  debug(`tryJobWithLock(): ${job.name}`);\n  const lockName = 'cron:' + job.name;\n  const didLock = await namedLocks.doWithLock(\n    lockName,\n    { onNotAcquired: () => false },\n    async () => {\n      debug(`tryJobWithLock(): ${job.name}: acquired lock`);\n      logger.verbose('cron: ' + job.name + ' acquired lock', { cronUuid });\n      await tryJobWithTime(job, cronUuid);\n      return true;\n    },\n  );\n\n  if (didLock) {\n    debug(`tryJobWithLock(): ${job.name}: released lock`);\n    logger.verbose('cron: ' + job.name + ' released lock', {\n      cronUuid,\n    });\n  } else {\n    debug(`tryJobWithLock(): ${job.name}: did not acquire lock`);\n    logger.verbose('cron: ' + job.name + ' did not acquire lock', {\n      cronUuid,\n    });\n  }\n}\n\n// See how long it is since we last ran the job and only run it if\n// enough time has elapsed. We are protected by a lock here so we\n// have exclusive access.\nasync function tryJobWithTime(job: CronJob, cronUuid: string) {\n  debug(`tryJobWithTime(): ${job.name}`);\n  let interval_secs;\n  if (Number.isInteger(job.intervalSec)) {\n    interval_secs = job.intervalSec;\n  } else if (job.intervalSec === 'daily') {\n    interval_secs = 12 * 60 * 60;\n  } else {\n    throw new Error(`cron: ${job.name} invalid intervalSec: ${job.intervalSec}`);\n  }\n  const result = await sqldb.queryAsync(sql.select_recent_cron_job, {\n    name: job.name,\n    interval_secs,\n  });\n\n  if (result.rowCount != null && result.rowCount > 0) {\n    debug(`tryJobWithTime(): ${job.name}: job was recently run, skipping`);\n    logger.verbose('cron: ' + job.name + ' job was recently run, skipping', { cronUuid });\n    return null;\n  }\n\n  debug(`tryJobWithTime(): ${job.name}: job was not recently run`);\n  logger.verbose('cron: ' + job.name + ' job was not recently run', {\n    cronUuid,\n  });\n  const params = { name: job.name };\n  await sqldb.queryAsync(sql.update_cron_job_time, params);\n  debug(`tryJobWithTime(): ${job.name}: updated run time`);\n  logger.verbose('cron: ' + job.name + ' updated date', { cronUuid });\n  await runJob(job, cronUuid);\n  debug(`tryJobWithTime(): ${job.name}: done`);\n  await sqldb.queryAsync(sql.update_succeeded_at, { name: job.name });\n  debug(`tryJobWithTime(): ${job.name}: updated succeeded_at`);\n}\n\n// actually run the job\nasync function runJob(job: CronJob, cronUuid: string) {\n  debug(`runJob(): ${job.name}`);\n  logger.verbose('cron: starting ' + job.name, { cronUuid });\n  const startTime = performance.now();\n  await job.module.run();\n  const endTime = performance.now();\n  const elapsedTimeMS = endTime - startTime;\n  debug(`runJob(): ${job.name}: success, duration ${elapsedTimeMS} ms`);\n  logger.verbose('cron: ' + job.name + ' success', {\n    cronUuid,\n    elapsedTimeMS,\n  });\n}\n"]}