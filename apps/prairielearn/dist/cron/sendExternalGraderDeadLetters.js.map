{"version":3,"file":"sendExternalGraderDeadLetters.js","sourceRoot":"","sources":["../../src/cron/sendExternalGraderDeadLetters.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DeleteMessageCommand,\n  GetQueueUrlCommand,\n  ReceiveMessageCommand,\n  SQSClient,\n} from '@aws-sdk/client-sqs';\nimport * as async from 'async';\n\nimport { logger } from '@prairielearn/logger';\n\nimport { makeAwsClientConfig } from '../lib/aws.js';\nimport { config } from '../lib/config.js';\nimport * as opsbot from '../lib/opsbot.js';\n\n// After loading the queue url for the first time, we'll cache it here\nconst QUEUE_URLS = {};\n\nexport async function run() {\n  if (!opsbot.canSendMessages()) return;\n\n  const jobsDeadLetterQueueName = config.externalGradingJobsDeadLetterQueueName;\n  const resultsDeadLetterQueueName = config.externalGradingResultsDeadLetterQueueName;\n  if (!config.externalGradingUseAws || !jobsDeadLetterQueueName || !resultsDeadLetterQueueName) {\n    return;\n  }\n\n  const sqs = new SQSClient(makeAwsClientConfig());\n\n  await loadQueueUrl(sqs, jobsDeadLetterQueueName);\n  await loadQueueUrl(sqs, resultsDeadLetterQueueName);\n  const jobsMessages = await getDeadLetterMsg(sqs, jobsDeadLetterQueueName);\n  const resultsMessages = await getDeadLetterMsg(sqs, resultsDeadLetterQueueName);\n  const msg = jobsMessages + resultsMessages;\n  await opsbot\n    .sendMessage(msg)\n    .catch((err) => logger.error('Error posting external grading dead letters to slack', err.data));\n}\n\nasync function loadQueueUrl(sqs: SQSClient, queueName: string) {\n  if (QUEUE_URLS[queueName] != null) return;\n\n  logger.verbose(`Dead letter queue ${queueName}: getting URL...`);\n  const data = await sqs.send(new GetQueueUrlCommand({ QueueName: queueName }));\n  QUEUE_URLS[queueName] = data.QueueUrl;\n  logger.verbose(`Dead letter queue ${queueName}: got URL ${QUEUE_URLS[queueName]}`);\n}\n\nasync function getDeadLetterMsg(sqs: SQSClient, queueName: string) {\n  const messages = await drainQueue(sqs, queueName);\n  let msgDL = `_Dead letter queue, past 24 hours:_ *${queueName}:* count: ${messages.length}\\n`;\n  for (const message of messages) {\n    msgDL += JSON.stringify(message) + '\\n';\n  }\n  logger.verbose('cron:sendExternalGraderDeadLetters', {\n    queue: queueName,\n    count: messages.length,\n    messages,\n  });\n  return msgDL;\n}\n\nasync function drainQueue(sqs: SQSClient, queueName: string) {\n  const messages: any[] = [];\n  await async.doWhilst(\n    async () => {\n      const data = await sqs.send(\n        new ReceiveMessageCommand({\n          MaxNumberOfMessages: 10,\n          QueueUrl: QUEUE_URLS[queueName],\n          WaitTimeSeconds: 20,\n        }),\n      );\n      if (!data.Messages) {\n        // stop with message collection\n        return false;\n      }\n      await async.each(data.Messages, async (message) => {\n        if (!message.Body) return;\n        const parsedMessage = JSON.parse(message.Body);\n        const receiptHandle = message.ReceiptHandle;\n        messages.push(parsedMessage);\n        await sqs.send(\n          new DeleteMessageCommand({\n            QueueUrl: QUEUE_URLS[queueName],\n            ReceiptHandle: receiptHandle,\n          }),\n        );\n      });\n\n      // keep getting messages if we got some this time\n      return true;\n    },\n    async (keepGoing) => keepGoing,\n  );\n  return messages;\n}\n"]}