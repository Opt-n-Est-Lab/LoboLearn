{"version":3,"file":"sendExternalGraderStats.js","sourceRoot":"","sources":["../../src/cron/sendExternalGraderStats.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,KAAK,MAAM,MAAM,kBAAkB,CAAC;AAE3C,MAAM,CAAC,KAAK,UAAU,GAAG;IACvB,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;QAAE,OAAO;IAEtC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;IACzE,MAAM,EACJ,KAAK,EACL,WAAW,EACX,kBAAkB,EAClB,iBAAiB,EACjB,gBAAgB,EAChB,iBAAiB,EACjB,WAAW,EACX,SAAS,EACT,gBAAgB,EAChB,eAAe,EACf,cAAc,EACd,eAAe,EACf,SAAS,GACV,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,OAAO,CAAC,8BAA8B,EAAE;QAC7C,SAAS,EAAE,MAAM,CAAC,4BAA4B;QAC9C,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;KAClB,CAAC,CAAC;IAEH,IAAI,GAAG,GAAG,6CAA6C,MAAM,CAAC,4BAA4B,KAAK,CAAC;IAChG,GAAG,IAAI,WAAW,KAAK,KAAK,CAAC;IAC7B,GAAG,IAAI,4BAA4B,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IACzE,GAAG,IAAI,wBAAwB,CAAC;IAChC,GAAG,IAAI,gCAAgC,MAAM,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IACpF,GAAG,IAAI,+BAA+B,MAAM,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IAClF,GAAG,IAAI,+BAA+B,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IACjF,GAAG,IAAI,iCAAiC,MAAM,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IACpF,GAAG,IAAI,gCAAgC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IAC7E,GAAG,IAAI,4BAA4B,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IACvE,GAAG,IAAI,wBAAwB,CAAC;IAChC,GAAG,IAAI,gCAAgC,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IAClF,GAAG,IAAI,+BAA+B,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IAChF,GAAG,IAAI,+BAA+B,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IAC/E,GAAG,IAAI,iCAAiC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IAClF,GAAG,IAAI,gCAAgC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IAE3E,MAAM,MAAM;SACT,WAAW,CAAC,GAAG,CAAC;SAChB,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,+CAA+C,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7F,CAAC","sourcesContent":["import { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport * as opsbot from '../lib/opsbot.js';\n\nexport async function run() {\n  if (!opsbot.canSendMessages()) return;\n\n  const result = await sqldb.callOneRowAsync('grading_jobs_stats_day', []);\n  const {\n    count,\n    delta_total,\n    delta_submitted_at,\n    delta_received_at,\n    delta_started_at,\n    delta_finished_at,\n    delta_final,\n    max_total,\n    max_submitted_at,\n    max_received_at,\n    max_started_at,\n    max_finished_at,\n    max_final,\n  } = result.rows[0];\n  logger.verbose('cron:sendExternalGraderStats', {\n    queueName: config.externalGradingJobsQueueName,\n    ...result.rows[0],\n  });\n\n  let msg = `_External grading stats, past 24 hours:_ *${config.externalGradingJobsQueueName}*\\n`;\n  msg += `Count: *${count}*\\n`;\n  msg += `Average total duration: *${Number(delta_total).toFixed(2)} s*\\n`;\n  msg += 'Individual averages:\\n';\n  msg += `    Average time to submit: *${Number(delta_submitted_at).toFixed(2)} s*\\n`;\n  msg += `    Average time to queue: *${Number(delta_received_at).toFixed(2)} s*\\n`;\n  msg += `    Average time to start: *${Number(delta_started_at).toFixed(2)} s*\\n`;\n  msg += `    Average time to execute: *${Number(delta_finished_at).toFixed(2)} s*\\n`;\n  msg += `    Average time to report: *${Number(delta_final).toFixed(2)} s*\\n`;\n  msg += `Maximum total duration: *${Number(max_total).toFixed(2)} s*\\n`;\n  msg += 'Individual maximums:\\n';\n  msg += `    Maximum time to submit: *${Number(max_submitted_at).toFixed(2)} s*\\n`;\n  msg += `    Maximum time to queue: *${Number(max_received_at).toFixed(2)} s*\\n`;\n  msg += `    Maximum time to start: *${Number(max_started_at).toFixed(2)} s*\\n`;\n  msg += `    Maximum time to execute: *${Number(max_finished_at).toFixed(2)} s*\\n`;\n  msg += `    Maximum time to report: *${Number(max_final).toFixed(2)} s*\\n`;\n\n  await opsbot\n    .sendMessage(msg)\n    .catch((err) => logger.error('Error posting external grading stats to slack', err.data));\n}\n"]}