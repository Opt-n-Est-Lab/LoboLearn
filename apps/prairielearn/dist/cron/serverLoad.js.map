{"version":3,"file":"serverLoad.js","sourceRoot":"","sources":["../../src/cron/serverLoad.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AACxD,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,GAAG;IACvB,IAAI,CAAC,MAAM,CAAC,YAAY;QAAE,OAAO;IAEjC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,sBAAsB,EAAE;QAC3D,MAAM,CAAC,SAAS;QAChB,MAAM,CAAC,4BAA4B;KACpC,CAAC,CAAC;IACH,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;QAC1B,qBAAqB;QACrB,OAAO;IACT,CAAC;IACD,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;IACzD,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QAC1C,MAAM,UAAU,GAAG;YACjB,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,CAAC,SAAS,EAAE;YACjD,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE;SAC1C,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAEpD,MAAM,UAAU,CAAC,aAAa,CAAC;YAC7B,SAAS,EAAE,cAAc;YACzB,UAAU,EAAE;gBACV;oBACE,UAAU,EAAE,eAAe;oBAC3B,UAAU,EAAE,UAAU;oBACtB,iBAAiB,EAAE,CAAC;oBACpB,SAAS,EAAE,SAAS;oBACpB,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,GAAG,CAAC,cAAc;iBAC1B;gBACD;oBACE,UAAU,EAAE,aAAa;oBACzB,UAAU,EAAE,UAAU;oBACtB,iBAAiB,EAAE,CAAC;oBACpB,SAAS,EAAE,SAAS;oBACpB,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,GAAG,CAAC,YAAY;iBACxB;gBACD;oBACE,UAAU,EAAE,SAAS;oBACrB,UAAU,EAAE,UAAU;oBACtB,iBAAiB,EAAE,CAAC;oBACpB,SAAS,EAAE,SAAS;oBACpB,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,GAAG,CAAC,QAAQ;iBACpB;gBACD;oBACE,UAAU,EAAE,gBAAgB;oBAC5B,UAAU,EAAE,UAAU;oBACtB,iBAAiB,EAAE,CAAC;oBACpB,SAAS,EAAE,SAAS;oBACpB,IAAI,EAAE,SAAS;oBACf,KAAK,EAAE,GAAG,CAAC,SAAS;iBACrB;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { CloudWatch } from '@aws-sdk/client-cloudwatch';\nimport * as async from 'async';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { makeAwsClientConfig } from '../lib/aws.js';\nimport { config } from '../lib/config.js';\n\nexport async function run() {\n  if (!config.runningInEc2) return;\n\n  const result = await sqldb.callAsync('server_loads_current', [\n    config.groupName,\n    config.serverLoadAverageIntervalSec,\n  ]);\n  if (result.rowCount === 0) {\n    // Nothing to report.\n    return;\n  }\n  const cloudwatch = new CloudWatch(makeAwsClientConfig());\n  await async.each(result.rows, async (row) => {\n    const dimensions = [\n      { Name: 'Server Group', Value: config.groupName },\n      { Name: 'Job Type', Value: row.job_type },\n    ];\n    const timestamp = new Date(row.timestamp_formatted);\n\n    await cloudwatch.putMetricData({\n      Namespace: 'PrairieLearn',\n      MetricData: [\n        {\n          MetricName: 'InstanceCount',\n          Dimensions: dimensions,\n          StorageResolution: 1,\n          Timestamp: timestamp,\n          Unit: 'Count',\n          Value: row.instance_count,\n        },\n        {\n          MetricName: 'CurrentJobs',\n          Dimensions: dimensions,\n          StorageResolution: 1,\n          Timestamp: timestamp,\n          Unit: 'Count',\n          Value: row.current_jobs,\n        },\n        {\n          MetricName: 'MaxJobs',\n          Dimensions: dimensions,\n          StorageResolution: 1,\n          Timestamp: timestamp,\n          Unit: 'Count',\n          Value: row.max_jobs,\n        },\n        {\n          MetricName: 'LoadPercentage',\n          Dimensions: dimensions,\n          StorageResolution: 1,\n          Timestamp: timestamp,\n          Unit: 'Percent',\n          Value: row.load_perc,\n        },\n      ],\n    });\n  });\n}\n"]}