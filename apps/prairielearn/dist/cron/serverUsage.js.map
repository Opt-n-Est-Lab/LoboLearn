{"version":3,"file":"serverUsage.js","sourceRoot":"","sources":["../../src/cron/serverUsage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AAExD,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,GAAG;IACvB,IAAI,CAAC,MAAM,CAAC,YAAY;QAAE,OAAO;IAEjC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,sBAAsB,EAAE;QACjE,MAAM,CAAC,sBAAsB;KAC9B,CAAC,CAAC;IACH,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7B,MAAM,UAAU,GAAG,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;IACvE,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAEtD,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;IACzD,MAAM,UAAU,CAAC,aAAa,CAAC;QAC7B,SAAS,EAAE,cAAc;QACzB,UAAU,EAAE;YACV;gBACE,UAAU,EAAE,WAAW;gBACvB,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,KAAK,CAAC,UAAU;aACxB;YACD;gBACE,UAAU,EAAE,oBAAoB;gBAChC,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,KAAK,CAAC,qBAAqB;aACnC;YACD;gBACE,UAAU,EAAE,sBAAsB;gBAClC,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,KAAK,CAAC,sBAAsB;aACpC;YACD;gBACE,UAAU,EAAE,8BAA8B;gBAC1C,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,KAAK,CAAC,gCAAgC;aAC9C;YACD;gBACE,UAAU,EAAE,8BAA8B;gBAC1C,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,KAAK,CAAC,gCAAgC;aAC9C;SACF;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { CloudWatch } from '@aws-sdk/client-cloudwatch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { makeAwsClientConfig } from '../lib/aws.js';\nimport { config } from '../lib/config.js';\n\nexport async function run() {\n  if (!config.runningInEc2) return;\n\n  const result = await sqldb.callOneRowAsync('server_usage_current', [\n    config.serverUsageIntervalSec,\n  ]);\n  const stats = result.rows[0];\n  const dimensions = [{ Name: 'Server Group', Value: config.groupName }];\n  const timestamp = new Date(stats.timestamp_formatted);\n\n  const cloudwatch = new CloudWatch(makeAwsClientConfig());\n  await cloudwatch.putMetricData({\n    Namespace: 'PrairieLearn',\n    MetricData: [\n      {\n        MetricName: 'UserCount',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.user_count,\n      },\n      {\n        MetricName: 'PageViewsPerSecond',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count/Second',\n        Value: stats.page_views_per_second,\n      },\n      {\n        MetricName: 'SubmissionsPerSecond',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count/Second',\n        Value: stats.submissions_per_second,\n      },\n      {\n        MetricName: 'InternalGradingJobsPerSecond',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count/Second',\n        Value: stats.internal_grading_jobs_per_second,\n      },\n      {\n        MetricName: 'ExternalGradingJobsPerSecond',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count/Second',\n        Value: stats.external_grading_jobs_per_second,\n      },\n    ],\n  });\n}\n"]}