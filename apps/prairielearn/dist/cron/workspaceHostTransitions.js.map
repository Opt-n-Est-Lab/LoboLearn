{"version":3,"file":"workspaceHostTransitions.js","sourceRoot":"","sources":["../../src/cron/workspaceHostTransitions.ts"],"names":[],"mappings":"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","sourcesContent":["import { EC2 } from '@aws-sdk/client-ec2';\nimport * as async from 'async';\nimport fetch from 'node-fetch';\nimport { z } from 'zod';\n\nimport { logger } from '@prairielearn/logger';\nimport { loadSqlEquiv, queryAsync, queryRows } from '@prairielearn/postgres';\nimport * as workspaceUtils from '@prairielearn/workspace-utils';\n\nimport { makeAwsClientConfig } from '../lib/aws.js';\nimport { config } from '../lib/config.js';\nimport * as workspaceHostUtils from '../lib/workspaceHost.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function run() {\n  if (!config.runningInEc2) return;\n\n  await checkDBConsistency();\n  await terminateHosts();\n  await checkHealth();\n}\n\nfunction setDifference<T>(a: Set<T>, b: Set<T>): Set<T> {\n  const diff = new Set<T>();\n  for (const val of a) {\n    if (!b.has(val)) {\n      diff.add(val);\n    }\n  }\n  return diff;\n}\n\n/**\n * Attempts to make the list of hosts in EC2 consistent with what is in\n * the database.\n */\nasync function checkDBConsistency() {\n  const ec2 = new EC2(makeAwsClientConfig());\n  const runningHosts = new Set<string>();\n  const instances = await ec2.describeInstances({\n    Filters: [\n      {\n        Name: 'tag-key',\n        Values: [config.workspaceLoadLaunchTag],\n      },\n      {\n        Name: 'instance-state-name',\n        Values: ['pending', 'running'],\n      },\n    ],\n    MaxResults: 500,\n  });\n  for (const reservation of instances.Reservations ?? []) {\n    for (const instance of Object.values(reservation.Instances ?? [])) {\n      if (instance.InstanceId) {\n        runningHosts.add(instance.InstanceId);\n      }\n    }\n  }\n\n  const nonTerminatedHosts = new Set(\n    await queryRows(sql.select_nonterminated_workspace_hosts, z.string()),\n  );\n\n  // Kill off any host that is running but not in the db\n  const hostsNotInDatabase = setDifference(runningHosts, nonTerminatedHosts);\n  if (hostsNotInDatabase.size > 0) {\n    logger.info('Terminating hosts that are not in the database', Array.from(hostsNotInDatabase));\n    await queryAsync(sql.add_terminating_hosts, {\n      instances: Array.from(hostsNotInDatabase),\n    });\n    await ec2.terminateInstances({ InstanceIds: Array.from(hostsNotInDatabase) });\n  }\n\n  // Any host that is in the db but not running we will mark as \"terminated\".\n  const hostsNotInEc2 = setDifference(nonTerminatedHosts, runningHosts);\n  if (hostsNotInEc2.size > 0) {\n    logger.info('Terminating hosts that are not running in EC2', Array.from(hostsNotInEc2));\n    const stoppedWorkspaces = await workspaceHostUtils.terminateWorkspaceHostsIfNotLaunching(\n      Array.from(hostsNotInEc2),\n    );\n    stoppedWorkspaces.forEach((workspace) => {\n      workspaceUtils.emitMessageForWorkspace(workspace.workspace_id, 'change:state', {\n        workspace_id: workspace.workspace_id,\n        state: workspace.state,\n        message: workspace.message,\n      });\n    });\n  }\n}\n\nasync function terminateHosts() {\n  const ec2 = new EC2(makeAwsClientConfig());\n  const hosts = await workspaceHostUtils.findTerminableWorkspaceHosts(\n    config.workspaceHostUnhealthyTimeoutSec,\n    config.workspaceHostLaunchTimeoutSec,\n  );\n  if (hosts.length > 0) {\n    logger.info('Found terminable hosts', hosts);\n    await ec2.terminateInstances({ InstanceIds: hosts.map((h) => h.instance_id) });\n  }\n}\n\nasync function checkHealth() {\n  const hosts = await queryRows(\n    sql.select_healthy_hosts,\n    z.object({\n      id: z.string(),\n      instance_id: z.string().nullable(),\n      hostname: z.string().nullable(),\n    }),\n  );\n\n  await async.each(hosts, async (host) => {\n    const url = `http://${host.hostname}/status`;\n    let healthy = true;\n    if (host.hostname === null || host.hostname === 'null') {\n      healthy = false;\n    } else {\n      try {\n        const res = await fetch(url, { signal: AbortSignal.timeout(30_000) });\n        healthy = res.ok;\n      } catch (err) {\n        healthy = false;\n        logger.error(`Could not reach host ${host.hostname}`, err);\n      }\n    }\n\n    if (!healthy) {\n      logger.info(`Host ${host.hostname} (${host.instance_id}) is unhealthy!`);\n      await workspaceHostUtils.markWorkspaceHostUnhealthy(host.id, 'Failed health check');\n    }\n  });\n}\n"]}