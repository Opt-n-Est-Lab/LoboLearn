{"version":3,"file":"workspaceTimeoutStop.js","sourceRoot":"","sources":["../../src/cron/workspaceTimeoutStop.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '@prairielearn/logger';\nimport { ValueType, getCounter, metrics } from '@prairielearn/opentelemetry';\nimport * as sqldb from '@prairielearn/postgres';\nimport * as workspaceUtils from '@prairielearn/workspace-utils';\n\nimport { config } from '../lib/config.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nasync function stopLaunchedTimeoutWorkspaces() {\n  const meter = metrics.getMeter('prairielearn');\n  const launchedTimeoutCounter = getCounter(meter, 'workspace.stopped.launched_timeout', {\n    valueType: ValueType.INT,\n  });\n\n  const result = await sqldb.queryAsync(sql.select_launched_timeout_workspaces, {\n    launched_timeout_sec: config.workspaceLaunchedTimeoutSec,\n  });\n  for (const workspace of result.rows) {\n    logger.verbose(`workspaceTimeoutStop: launched timeout for workspace_id = ${workspace.id}`);\n    await workspaceUtils.updateWorkspaceState(\n      workspace.id,\n      'stopped',\n      `Maximum run time of ${Math.round(\n        config.workspaceLaunchedTimeoutSec / 3600,\n      )} hours exceeded. Click \"Reboot\" to keep working.`,\n    );\n    launchedTimeoutCounter.add(1);\n  }\n}\n\nasync function stopHeartbeatTimeoutWorkspaces() {\n  const meter = metrics.getMeter('prairielearn');\n  const visibilityTimeoutCounter = getCounter(meter, 'workspace.stopped.heartbeat_timeout', {\n    valueType: ValueType.INT,\n  });\n\n  const result = await sqldb.queryAsync(sql.select_heartbeat_timeout_workspaces, {\n    heartbeat_timeout_sec: config.workspaceHeartbeatTimeoutSec,\n  });\n  for (const workspace of result.rows) {\n    logger.verbose(`workspaceTimeoutStop: heartbeat timeout for workspace_id = ${workspace.id}`);\n    await workspaceUtils.updateWorkspaceState(\n      workspace.id,\n      'stopped',\n      `Connection was lost for more than ${Math.round(\n        config.workspaceHeartbeatTimeoutSec / 60,\n      )} min. Click \"Reboot\" to keep working.`,\n    );\n    visibilityTimeoutCounter.add(1);\n  }\n}\n\nasync function stopInLaunchingTimeoutWorkspaces() {\n  const meter = metrics.getMeter('prairielearn');\n  const launchingTimeoutCounter = getCounter(meter, 'workspace.stopped.launching_timeout', {\n    valueType: ValueType.INT,\n  });\n\n  const result = await sqldb.queryAsync(sql.select_in_launching_timeout_workspaces, {\n    in_launching_timeout_sec: config.workspaceInLaunchingTimeoutSec,\n  });\n  const workspaces = result.rows;\n  for (const workspace of workspaces) {\n    // these are errors because timeouts should have been enforced\n    // by the workspace hosts\n    logger.error(`workspaceTimeoutStop: in-launching timeout for workspace_id = ${workspace.id}`);\n    await workspaceUtils.updateWorkspaceState(\n      workspace.id,\n      'stopped',\n      `Maximum launching time of ${Math.round(\n        config.workspaceInLaunchingTimeoutSec / 60,\n      )} min exceeded. Click \"Reboot\" to keep working.`,\n    );\n    launchingTimeoutCounter.add(1);\n  }\n}\n\nexport async function run() {\n  await stopLaunchedTimeoutWorkspaces();\n  await stopHeartbeatTimeoutWorkspaces();\n  await stopInLaunchingTimeoutWorkspaces();\n}\n"]}