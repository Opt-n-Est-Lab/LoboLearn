{"version":3,"file":"callback.js","sourceRoot":"","sources":["../../../../src/ee/auth/azure/callback.ts"],"names":[],"mappings":"AAAA,OAAO,EAA+B,MAAM,EAAE,MAAM,SAAS,CAAC;AAC9D,OAAO,YAAY,MAAM,uBAAuB,CAAC;AACjD,OAAO,QAAQ,MAAM,UAAU,CAAC;AAEhC,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD,OAAO,KAAK,QAAQ,MAAM,uBAAuB,CAAC;AAElD,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB,SAAS,YAAY,CAAC,GAAY,EAAE,GAAa;IAC/C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,QAAQ,CAAC,YAAY,CACnB,uBAAuB,EACvB;YACE,eAAe,EAAE,KAAK;YACtB,OAAO,EAAE,KAAK;SACf,EACD,CAAC,GAAQ,EAAE,IAAS,EAAE,EAAE;YACtB,IAAI,GAAG,EAAE,CAAC;gBACR,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;QACH,CAAC,CACF,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,IAAI,CACT,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAE1C,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,2EAA2E;QAC3E,qEAAqE;QACrE,iCAAiC;QACjC,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,iCAAiC,CAAC,CAAC;IACpE,CAAC;IAED,MAAM,WAAW,GAAG;QAClB,GAAG,EAAE,IAAI,CAAC,GAAG;QACb,IAAI,EAAE,IAAI,CAAC,WAAW;QACtB,GAAG,EAAE,IAAI;QACT,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI;QAC/B,QAAQ,EAAE,OAAO;KAClB,CAAC;IAEF,MAAM,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE;QAC7C,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;AACL,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { type Request, type Response, Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport passport from 'passport';\n\nimport { HttpStatusError } from '@prairielearn/error';\n\nimport * as authnLib from '../../../lib/authn.js';\n\nconst router = Router();\n\nfunction authenticate(req: Request, res: Response): Promise<any> {\n  return new Promise((resolve, reject) => {\n    passport.authenticate(\n      'azuread-openidconnect',\n      {\n        failureRedirect: '/pl',\n        session: false,\n      },\n      (err: any, user: any) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(user);\n        }\n      },\n    )(req, res);\n  });\n}\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    const user = await authenticate(req, res);\n\n    if (!user) {\n      // We shouldn't hit this case very often in practice, but if we do, we have\n      // no control over it, so we'll report the error as a 200 to avoid it\n      // contributing to error metrics.\n      throw new HttpStatusError(200, 'Login failed. Please try again.');\n    }\n\n    const authnParams = {\n      uid: user.upn,\n      name: user.displayName,\n      uin: null,\n      email: user._json.email || null,\n      provider: 'Azure',\n    };\n\n    await authnLib.loadUser(req, res, authnParams, {\n      redirect: true,\n    });\n  }),\n);\n\nexport default router;\n"]}