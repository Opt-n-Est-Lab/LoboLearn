{"version":3,"file":"lti13Auth.js","sourceRoot":"","sources":["../../../../src/ee/auth/lti13/lti13Auth.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from 'crypto';\nimport { URL } from 'url';\nimport { callbackify } from 'util';\n\nimport { type NextFunction, type Request, type Response, Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { Issuer, Strategy, type TokenSet } from 'openid-client';\nimport * as passport from 'passport';\nimport { z } from 'zod';\n\nimport { cache } from '@prairielearn/cache';\nimport { AugmentedError, HttpStatusError } from '@prairielearn/error';\nimport { loadSqlEquiv, queryAsync } from '@prairielearn/postgres';\n\nimport * as authnLib from '../../../lib/authn.js';\nimport { getCanonicalHost } from '../../../lib/url.js';\nimport { Lti13Claim, Lti13ClaimSchema } from '../../lib/lti13.js';\nimport { selectLti13Instance } from '../../models/lti13Instance.js';\n\nimport { Lti13Test } from './lti13Auth.html.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router({ mergeParams: true });\n\nconst STATE_TEST = '-StateTest';\n\n//\n// Express routes\n//\n// https://www.imsglobal.org/spec/security/v1p0/#step-1-third-party-initiated-login\n// Can be POST or GET\nrouter.get('/login', asyncHandler(launchFlow));\nrouter.post('/login', asyncHandler(launchFlow));\nrouter.post(\n  '/callback',\n  asyncHandler(async (req, res) => {\n    const lti13_instance = await selectLti13Instance(req.params.lti13_instance_id);\n\n    const lti13_claims = await authenticate(req, res);\n    // If we get here, auth succeeded and lti13_claims is populated\n\n    // Put the LTI 1.3 claims in the session\n    req.session.lti13_claims = lti13_claims;\n    req.session.authn_lti13_instance_id = lti13_instance.id;\n\n    const ltiClaim = new Lti13Claim(req);\n\n    const inStateTest = req.body.state.endsWith(STATE_TEST);\n\n    // UID checking\n    let uid: string;\n    if (!lti13_instance.uid_attribute) {\n      throw new HttpStatusError(\n        500,\n        'LTI 1.3 instance configuration missing required UID attribute',\n      );\n    } else {\n      // Reasonable default is \"email\"\n      // Points back to OIDC Standard Claims https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n      uid = ltiClaim.get(lti13_instance.uid_attribute);\n      if (!uid && !inStateTest) {\n        // Canvas Student View does not include a uid but has a deterministic role, nicer error message\n        if (ltiClaim.isRoleTestUser()) {\n          throw new HttpStatusError(\n            403,\n            'Student View / Test user not supported. Use access modes within PrairieLearn to view as a student.',\n          );\n        } else {\n          // Error about missing UID\n          throw new HttpStatusError(\n            500,\n            `Missing UID data from LTI 1.3 login (claim ${lti13_instance.uid_attribute} missing or empty)`,\n          );\n        }\n      }\n    }\n\n    // UIN checking, if attribute defined value must be present\n    let uin: string | null = null;\n    if (lti13_instance.uin_attribute) {\n      // Uses lodash.get to expand path representation in text to the object, like 'a[0].b.c'\n      // Might look like [\"https://purl.imsglobal.org/spec/lti/claim/custom\"][\"uin\"]\n      uin = ltiClaim.get(lti13_instance.uin_attribute);\n      if (!uin && !inStateTest) {\n        throw new HttpStatusError(\n          500,\n          `Missing UIN data from LTI 1.3 login (claim ${lti13_instance.uin_attribute} missing or empty)`,\n        );\n      }\n    }\n\n    // Name checking, not an error\n    // LTI 1.3 spec defines sharing name as a MAY https://www.imsglobal.org/spec/lti/v1p3#users-and-roles\n    // but discourages (MUST NOT) using other attributes for unique identifier\n    let name: string | null = null;\n    if (lti13_instance.name_attribute) {\n      // Uses lodash.get to expand path representation in text to the object, like 'a[0].b.c'\n      // Reasonable default is \"name\"\n      // Points back to OIDC Standard Claims https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n      name = ltiClaim.get(lti13_instance.name_attribute);\n    }\n\n    let email: string | null = null;\n    if (lti13_instance.email_attribute) {\n      // Uses lodash.get to expand path representation in text to the object, like 'a[0].b.c'\n      // Reasonable default is \"email\"\n      // Points back to OIDC Standard Claims https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n      email = ltiClaim.get(lti13_instance.email_attribute);\n    }\n\n    const userInfo = {\n      uid,\n      uin,\n      name,\n      email,\n      provider: 'LTI 1.3',\n      institution_id: lti13_instance.institution_id,\n    };\n\n    if (inStateTest) {\n      res.end(\n        Lti13Test({\n          lti13_claims,\n          resLocals: res.locals,\n          userInfo,\n          lti13_instance,\n          url: new URL(`/pl/lti13_instance/${lti13_instance.id}/auth/login`, getCanonicalHost(req)),\n        }),\n      );\n      return;\n    }\n\n    // AUTHENTICATE\n    await authnLib.loadUser(req, res, userInfo);\n\n    // Record the LTI 1.3 user's subject id\n    await queryAsync(sql.update_lti13_users, {\n      user_id: res.locals.authn_user.user_id,\n      lti13_instance_id: lti13_instance.id,\n      sub: ltiClaim.get('sub'),\n    });\n\n    // Get the target_link out of the LTI request and redirect\n    res.redirect(ltiClaim.target_link_uri ?? '/pl');\n  }),\n);\n\nexport default router;\n\n//\n// Schema to validate OIDC, LTI\n//\nconst OIDCAuthResponseSchema = z.object({\n  state: z.string(),\n  id_token: z.string(),\n  // also has utf8, authenticity_token, lti_storage_target\n});\n\nconst OIDCLaunchFlowSchema = z.object({\n  iss: z.string(),\n  login_hint: z.string(),\n  lti_message_hint: z.string().optional(),\n  lti_deployment_id: z.string().optional(),\n  client_id: z.string().optional(),\n  target_link_uri: z.string(),\n  // also has deployment_id, canvas_environment, canvas_region, lti_storage_target\n});\n\n//\n// Helper functions\n//\nasync function authenticate(req: Request, res: Response): Promise<any> {\n  // https://www.imsglobal.org/spec/security/v1p0/#step-3-authentication-response\n  OIDCAuthResponseSchema.passthrough().parse(req.body);\n\n  const myPassport = await setupPassport(req.params.lti13_instance_id);\n  return new Promise((resolve, reject) => {\n    // Callback arguments described at\n    // https://github.com/jaredhanson/passport/blob/33b92f96616642864844753a481df7c5b823e047/lib/middleware/authenticate.js#L34\n    myPassport.authenticate('lti13', ((err, user, info) => {\n      if (err) {\n        // Replay attack fails here\n        // \"did not find expected authorization request details in session, req.session[\\\"oidc:localhost\\\"] is undefined\"\n        // Passport's cleanup of the session might take care of nonce reuse without us having to\n        reject(err);\n      } else if (!user) {\n        // The authentication libraries under openid-connect will fail (silently) if the key length\n        // is too small, like with the Canvas development keys. It triggers that error in PL here.\n        reject(\n          new AugmentedError('Authentication failed, before user validation.', {\n            status: 400,\n            data: {\n              info_raw: info,\n              info: info?.toString(),\n            },\n          }),\n        );\n      } else {\n        resolve(user);\n      }\n    }) as passport.AuthenticateCallback)(req, res);\n  });\n}\n\nasync function launchFlow(req: Request, res: Response, next: NextFunction) {\n  // https://www.imsglobal.org/spec/security/v1p0/#step-1-third-party-initiated-login\n\n  const parameters = OIDCLaunchFlowSchema.passthrough().parse({ ...req.body, ...req.query });\n\n  // Generate our own OIDC state, use it to toggle if testing is happening\n  let state = crypto.randomBytes(28).toString('hex');\n  if ('test' in parameters) {\n    state = state.concat(STATE_TEST);\n  }\n\n  const myPassport = await setupPassport(req.params.lti13_instance_id);\n  myPassport.authenticate('lti13', {\n    response_type: 'id_token',\n    lti_message_hint: parameters.lti_message_hint,\n    login_hint: parameters.login_hint,\n    prompt: 'none',\n    response_mode: 'form_post',\n    failWithError: true,\n    state,\n  } as passport.AuthenticateOptions)(req, res, next);\n}\n\nasync function setupPassport(lti13_instance_id: string) {\n  const lti13_instance = await selectLti13Instance(lti13_instance_id);\n\n  const localPassport = new passport.Passport();\n  const issuer = new Issuer(lti13_instance.issuer_params);\n  const client = new issuer.Client(lti13_instance.client_params, lti13_instance.keystore);\n\n  localPassport.use(\n    'lti13',\n    new Strategy(\n      {\n        client,\n        passReqToCallback: true,\n      },\n      callbackify(verify),\n    ),\n  );\n\n  return localPassport;\n}\n\nasync function verify(req: Request, tokenSet: TokenSet) {\n  const lti13_claims = Lti13ClaimSchema.passthrough().parse(tokenSet.claims());\n\n  // Check nonce to protect against reuse\n  const nonceKey = `lti13auth-nonce:${req.params.lti13_instance_id}:${lti13_claims['nonce']}`;\n  const cacheResult = await cache.get(nonceKey);\n  if (cacheResult) {\n    throw new HttpStatusError(500, 'Cannot reuse LTI 1.3 nonce, try login again');\n  }\n  await cache.set(nonceKey, true, 60 * 60 * 1000); // 60 minutes\n  // Canvas OIDC logins expire after 3600 seconds\n\n  // Save parameters about the platform back to the lti13_instance\n  // https://www.imsglobal.org/spec/lti/v1p3#platform-instance-claim\n  const params = {\n    lti13_instance_id: req.params.lti13_instance_id,\n    tool_platform_name:\n      lti13_claims['https://purl.imsglobal.org/spec/lti/claim/tool_platform']?.name ?? null,\n  };\n  await queryAsync(sql.verify_upsert, params);\n\n  return lti13_claims;\n}\n"]}