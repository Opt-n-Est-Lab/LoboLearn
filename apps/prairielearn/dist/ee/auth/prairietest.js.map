{"version":3,"file":"prairietest.js","sourceRoot":"","sources":["../../../src/ee/auth/prairietest.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAEtC,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AACjD,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,2BAA2B,EAAE,MAAM,iBAAiB,CAAC;AAE9D,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAExD,MAAM,MAAM,GAAG,MAAM,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAE7C,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,wEAAwE;IACxE,eAAe;IACf,IAAI,YAAY,EAAE,EAAE,CAAC;QACnB,MAAM,2BAA2B,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;IACzF,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;IAE1E,0EAA0E;IAC1E,4EAA4E;IAC5E,0CAA0C;IAC1C,MAAM,GAAG,GAAG,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;SAC3E,kBAAkB,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;SACpC,WAAW,EAAE;SACb,iBAAiB,CAAC,IAAI,CAAC;SACvB,IAAI,CAAC,GAAG,CAAC,CAAC;IAEb,+EAA+E;IAC/E,kFAAkF;IAClF,mCAAmC;IACnC,GAAG,CAAC,IAAI,CACN,eAAe,CAAC;QACd,GAAG;QACH,mBAAmB,EAAE,GAAG,MAAM,CAAC,MAAM,gCAAgC;QACrE,SAAS,EAAE,GAAG,CAAC,MAAM;KACtB,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import * as crypto from 'node:crypto';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport * as jose from 'jose';\n\nimport { config } from '../../lib/config.js';\nimport { isEnterprise } from '../../lib/license.js';\nimport { redirectToTermsPageIfNeeded } from '../lib/terms.js';\n\nimport { AuthPrairieTest } from './prairietest.html.js';\n\nconst router = Router({ mergeParams: true });\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    // Potentially prompt the user to accept the terms before redirecting to\n    // PrairieTest.\n    if (isEnterprise()) {\n      await redirectToTermsPageIfNeeded(res, res.locals.authn_user, req.ip, req.originalUrl);\n    }\n\n    const key = crypto.createSecretKey(config.prairieTestAuthSecret, 'utf-8');\n\n    // Generate a signed JWT containing just the user ID. PrairieTest shares a\n    // database with PrairieLearn, so it can use the same user ID to look up any\n    // relevant information about PrairieTest.\n    const jwt = await new jose.SignJWT({ user_id: res.locals.authn_user.user_id })\n      .setProtectedHeader({ alg: 'HS512' })\n      .setIssuedAt()\n      .setExpirationTime('1m')\n      .sign(key);\n\n    // This renders a self-submitting form that will submit the JWT to PrairieTest.\n    // Doing this via a form instead of a redirect+query params avoids the possibility\n    // of leaking JWTs in request logs.\n    res.send(\n      AuthPrairieTest({\n        jwt,\n        prairieTestCallback: `${config.ptHost}/pt/auth/prairielearn/callback`,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nexport default router;\n"]}