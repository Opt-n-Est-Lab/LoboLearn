{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/ee/auth/saml/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { MultiSamlStrategy, type SamlConfig } from '@node-saml/passport-saml';\n\nimport {\n  getInstitutionAuthenticationProviders,\n  getInstitutionSamlProvider,\n} from '../../lib/institution.js';\n\nexport async function getSamlOptions({\n  institution_id,\n  host,\n  strictMode,\n}: {\n  institution_id: string;\n  host: string | undefined;\n  strictMode: boolean;\n}): Promise<SamlConfig> {\n  const samlProvider = await getInstitutionSamlProvider(institution_id);\n  const authenticationProviders = await getInstitutionAuthenticationProviders(institution_id);\n  if (!samlProvider || !authenticationProviders.some((p) => p.name === 'SAML')) {\n    throw new Error('No SAML provider found for given institution');\n  }\n\n  // It's most convenient if folks can pass in `req.headers.host` directly,\n  // but that's typed as `string | undefined`. So, we'll accept that type\n  // and throw an error on on the off-change it's undefined.\n  if (!host) throw new Error('Missing host header');\n\n  // This is also known as our Entity ID.\n  const issuer = `https://${host}/saml/institution/${institution_id}`;\n\n  return {\n    callbackUrl: `https://${host}/pl/auth/institution/${institution_id}/saml/callback`,\n    entryPoint: samlProvider.sso_login_url,\n    issuer,\n    idpIssuer: samlProvider.issuer,\n\n    // TODO: once all existing IdPs are updated to use the stricter,\n    // more secure defaults, enable all these by default.\n    audience: samlProvider.validate_audience || strictMode ? issuer : false,\n    wantAssertionsSigned: samlProvider.want_assertions_signed || strictMode,\n    wantAuthnResponseSigned: samlProvider.want_authn_response_signed || strictMode,\n\n    // TODO: do these two need to be configurable?\n    signatureAlgorithm: 'sha256',\n    digestAlgorithm: 'sha256',\n\n    // Identity Provider's public key.\n    idpCert: samlProvider.certificate,\n\n    // Service Provider's public key.\n    publicCert: samlProvider.public_key,\n\n    // Service Provider's private key.\n    privateKey: samlProvider.private_key,\n    decryptionPvk: samlProvider.private_key,\n\n    // The identifier format will vary from institution to institution. Remove\n    // the default to avoid confusing SSO staff at institutions.\n    identifierFormat: null,\n\n    // By default, `node-saml` will include a `RequestedAuthnContext`\n    // element that requests password-based authentication. However,\n    // some institutions use passwordless auth, so we disable this and\n    // allow any authentication context.\n    disableRequestedAuthnContext: true,\n  };\n}\n\nexport const strategy = new MultiSamlStrategy(\n  {\n    passReqToCallback: true,\n    getSamlOptions(req, done) {\n      // v4 of `@node-saml/node-saml` made some breaking changes that could\n      // result in broken logins if IdPs aren't configured correctly. In\n      // particular:\n      //\n      // - `wantAssertionsSigned` is now true by default\n      // - `wantAuthnResponseSigned` is now true by default\n      // - The audience of the SAML response is now validated by default\n      //\n      // To continue supporting existing IdPs, we introduced configuration\n      // options for SAML providers that default to the older, less strict\n      // behavior. However, we want to encourage IdPs to meet the more\n      // strict default behavior. We want to allow institutional IT folks\n      // to see if they can comply with the new defaults without changing\n      // our own configuration (which would risk breaking existing logins).\n      //\n      // To support this, we allow authentication requests to be made in\n      // an optional \"strict\" mode. This is done by including the value\n      // `strict` in the `RelayState` parameter of the SAML request, which\n      // will also be included in the SAML response.\n      const relayState = req.query?.RelayState || req.body?.RelayState || '';\n      const relayStateItems = relayState.split(',');\n      const strictMode = relayStateItems.includes('strict');\n\n      getSamlOptions({\n        institution_id: req.params.institution_id,\n        host: req.headers.host,\n        strictMode,\n      })\n        .then((options) => done(null, options))\n        .catch((err) => done(err));\n    },\n  },\n  function (req, profile, done) {\n    done(null, profile ?? undefined);\n  },\n  function (req, profile, done) {\n    done(null, profile ?? undefined);\n  },\n);\n"]}