{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../src/ee/auth/saml/router.ts"],"names":[],"mappings":"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","sourcesContent":["import util from 'node:util';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport passport from 'passport';\n\nimport { HttpStatusError } from '@prairielearn/error';\n\nimport * as authnLib from '../../../lib/authn.js';\nimport { getInstitutionSamlProvider } from '../../lib/institution.js';\n\nimport { SamlTest } from './router.html.js';\n\nimport { strategy } from './index.js';\n\nconst router = Router({ mergeParams: true });\n\nrouter.get('/login', (req, res, next) => {\n  // @ts-expect-error Missing `additionalParams` on the type.\n  passport.authenticate('saml', {\n    failureRedirect: '/pl',\n    session: false,\n    additionalParams: req.query.RelayState\n      ? {\n          // This is used be the SAML configuration page to test SAML. It includes\n          // `?RelayState=test` in the login request. When the callback page receives\n          // that value, it displays the received attributes instead of creating a\n          // new session for the user.\n          RelayState: req.query.RelayState,\n        }\n      : undefined,\n  })(req, res, next);\n});\n\nfunction authenticate(req, res): Promise<any> {\n  return new Promise((resolve, reject) => {\n    passport.authenticate(\n      'saml',\n      {\n        failureRedirect: '/pl',\n        session: false,\n      },\n      (err, user) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(user);\n        }\n      },\n    )(req, res);\n  });\n}\n\nrouter.post(\n  '/callback',\n  asyncHandler(async (req, res) => {\n    const user = await authenticate(req, res);\n\n    if (!user) {\n      // We shouldn't hit this case very often in practice, but if we do, we have\n      // no control over it, so we'll report the error as a 200 to avoid it\n      // contributing to error metrics.\n      throw new HttpStatusError(200, 'Login failed. Please try again.');\n    }\n\n    // Fetch this institution's attribute mappings.\n    const institutionId = req.params.institution_id;\n    const institutionSamlProvider = await getInstitutionSamlProvider(institutionId);\n    if (!institutionSamlProvider) {\n      throw new HttpStatusError(404, 'Institution does not support SAML authentication');\n    }\n\n    const uidAttribute = institutionSamlProvider.uid_attribute;\n    const uinAttribute = institutionSamlProvider.uin_attribute;\n    const nameAttribute = institutionSamlProvider.name_attribute;\n    const emailAttribute = institutionSamlProvider.email_attribute;\n\n    // Read the appropriate attributes.\n    const authnUid = uidAttribute ? user.attributes[uidAttribute]?.trim() : null;\n    const authnUin = uinAttribute ? user.attributes[uinAttribute]?.trim() : null;\n    const authnName = nameAttribute ? user.attributes[nameAttribute]?.trim() : null;\n    const authnEmail = emailAttribute ? user.attributes[emailAttribute]?.trim() : null;\n\n    if (req.body.RelayState === 'test') {\n      res.send(\n        SamlTest({\n          uid: authnUid,\n          uin: authnUin,\n          name: authnName,\n          email: authnEmail,\n          uidAttribute,\n          uinAttribute,\n          nameAttribute,\n          emailAttribute,\n          attributes: user.attributes,\n          resLocals: res.locals,\n        }),\n      );\n      return;\n    }\n\n    // Only perform validation if we aren't rendering the above test page.\n    //\n    // Support for pulling in email from an attribute was added after all initial\n    // attributes, so we can't yet require it to be present. In the future, once\n    // we've specified such an attribute for all institutions, we can assert that\n    // the email attribute mapping and the corresponding value are both present.\n    //\n    if (!uidAttribute || !uinAttribute || !nameAttribute) {\n      throw new Error('Missing one or more SAML attribute mappings');\n    }\n    if (!authnUid || !authnUin || !authnName) {\n      throw new Error('Missing one or more SAML attributes');\n    }\n\n    const authnParams = {\n      uid: authnUid,\n      name: authnName,\n      uin: authnUin,\n      email: authnEmail,\n      provider: 'SAML',\n      institution_id: institutionId,\n    };\n\n    await authnLib.loadUser(req, res, authnParams, {\n      redirect: true,\n    });\n  }),\n);\n\nrouter.get(\n  '/metadata',\n  asyncHandler(async (req, res) => {\n    const samlProvider = await getInstitutionSamlProvider(req.params.institution_id);\n    if (!samlProvider) {\n      throw new HttpStatusError(404, 'Institution does not support SAML authentication');\n    }\n\n    const metadata = await util.promisify(strategy.generateServiceProviderMetadata.bind(strategy))(\n      req,\n      samlProvider.public_key,\n      samlProvider.public_key,\n    );\n    res.type('application/xml');\n    res.send(metadata);\n  }),\n);\n\nexport default router;\n"]}