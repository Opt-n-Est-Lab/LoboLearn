{"version":3,"file":"chunksHostAutoScaling.js","sourceRoot":"","sources":["../../../src/ee/cron/chunksHostAutoScaling.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,UAAU,EAAkB,MAAM,4BAA4B,CAAC;AAExE,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAE7C,8EAA8E;AAC9E,yEAAyE;AACzE,MAAM,qBAAqB,GAAG,oBAAoB,CAAC;AACnD,MAAM,yBAAyB,GAAG,wBAAwB,CAAC;AAC3D,MAAM,iCAAiC,GAAG,+BAA+B,CAAC;AAE1E,MAAM,CAAC,KAAK,UAAU,GAAG;IACvB,IACE,CAAC,MAAM,CAAC,YAAY;QACpB,CAAC,MAAM,CAAC,+BAA+B;QACvC,CAAC,MAAM,CAAC,8BAA8B;QACtC,CAAC,MAAM,CAAC,0BAA0B,EAClC,CAAC;QACD,OAAO;IACT,CAAC;IAED,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;IAEzD,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC;QAC7C,SAAS,EAAE,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,MAAM,CAAC,uCAAuC,CAAC;QAChF,OAAO,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC;QACtB,iBAAiB,EAAE;YACjB;gBACE,EAAE,EAAE,qBAAqB;gBACzB,UAAU,EAAE;oBACV,MAAM,EAAE;wBACN,SAAS,EAAE,cAAc;wBACzB,UAAU,EAAE,oBAAoB;wBAChC,UAAU,EAAE;4BACV;gCACE,IAAI,EAAE,cAAc;gCACpB,KAAK,EAAE,MAAM,CAAC,SAAS;6BACxB;yBACF;qBACF;oBACD,MAAM,EAAE,EAAE;oBACV,IAAI,EAAE,SAAS;iBAChB;aACF;YACD;gBACE,EAAE,EAAE,yBAAyB;gBAC7B,UAAU,EAAE;oBACV,MAAM,EAAE;wBACN,SAAS,EAAE,cAAc;wBACzB,UAAU,EAAE,aAAa;wBACzB,UAAU,EAAE;4BACV;gCACE,IAAI,EAAE,cAAc;gCACpB,KAAK,EAAE,MAAM,CAAC,SAAS;6BACxB;4BACD;gCACE,IAAI,EAAE,UAAU;gCAChB,KAAK,EAAE,sBAAsB;6BAC9B;yBACF;qBACF;oBACD,MAAM,EAAE,EAAE;oBACV,IAAI,EAAE,SAAS;iBAChB;aACF;YACD;gBACE,EAAE,EAAE,iCAAiC;gBACrC,UAAU,EAAE;oBACV,MAAM,EAAE;wBACN,SAAS,EAAE,oBAAoB;wBAC/B,UAAU,EAAE,cAAc;wBAC1B,UAAU,EAAE;4BACV;gCACE,IAAI,EAAE,cAAc;gCACpB,KAAK,EAAE,MAAM,CAAC,+BAA+B;6BAC9C;4BACD;gCACE,IAAI,EAAE,aAAa;gCACnB,KAAK,EAAE,MAAM,CAAC,8BAA8B;6BAC7C;yBACF;qBACF;oBACD,MAAM,EAAE,EAAE;oBACV,IAAI,EAAE,KAAK;iBACZ;aACF;SACF;KACF,CAAC,CAAC;IAEH,MAAM,wBAAwB,GAAG,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAC9D,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,qBAAqB,CACtC,CAAC;IACF,MAAM,4BAA4B,GAAG,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAClE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,yBAAyB,CAC1C,CAAC;IACF,MAAM,mCAAmC,GAAG,OAAO,CAAC,iBAAiB,EAAE,IAAI,CACzE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,iCAAiC,CAClD,CAAC;IAEF,MAAM,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,wBAAwB,EAAE,MAAM,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACvF,MAAM,yBAAyB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,4BAA4B,EAAE,MAAM,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/F,MAAM,gCAAgC,GAAG,IAAI,CAAC,GAAG,CAC/C,GAAG,CAAC,mCAAmC,EAAE,MAAM,IAAI,EAAE,CAAC,EACtD,CAAC,CACF,CAAC;IAEF,MAAM,2BAA2B,GAAG,qBAAqB,GAAG,MAAM,CAAC,6BAA6B,CAAC;IACjG,MAAM,+BAA+B,GACnC,yBAAyB,GAAG,MAAM,CAAC,iCAAiC,CAAC;IACvE,MAAM,sCAAsC,GAC1C,gCAAgC,GAAG,MAAM,CAAC,wCAAwC,CAAC;IAErF,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAChC,IAAI,CAAC,GAAG,CACN,2BAA2B,EAC3B,+BAA+B,EAC/B,sCAAsC,EACtC,CAAC,CACF,CACF,CAAC;IAEF,MAAM,UAAU,GAAgB,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;IAEpF,MAAM,UAAU,CAAC,aAAa,CAAC;QAC7B,UAAU,EAAE;YACV;gBACE,UAAU,EAAE,6BAA6B;gBACzC,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC;gBACxB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,2BAA2B;aACnC;YACD;gBACE,UAAU,EAAE,iCAAiC;gBAC7C,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC;gBACxB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,+BAA+B;aACvC;YACD;gBACE,UAAU,EAAE,wCAAwC;gBACpD,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC;gBACxB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,sCAAsC;aAC9C;YACD;gBACE,UAAU,EAAE,kBAAkB;gBAC9B,UAAU,EAAE,UAAU;gBACtB,iBAAiB,EAAE,CAAC;gBACpB,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC;gBACxB,KAAK,EAAE,gBAAgB;aACxB;SACF;QACD,SAAS,EAAE,QAAQ;KACpB,CAAC,CAAC;IAEH,MAAM,2BAA2B,CAAC,MAAM,CAAC,0BAA0B,EAAE,gBAAgB,CAAC,CAAC;AACzF,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,2BAA2B,CAAC,SAAiB,EAAE,QAAgB;IAC5E,IAAI,CAAC,SAAS;QAAE,OAAO;IAEvB,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,mBAAmB,EAAE,CAAC,CAAC;IAC3D,MAAM,WAAW,CAAC,kBAAkB,CAAC;QACnC,oBAAoB,EAAE,SAAS;QAC/B,eAAe,EAAE,QAAQ;KAC1B,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { AutoScaling } from '@aws-sdk/client-auto-scaling';\nimport { CloudWatch, type Dimension } from '@aws-sdk/client-cloudwatch';\n\nimport { makeAwsClientConfig } from '../../lib/aws.js';\nimport { config } from '../../lib/config.js';\n\n// These are used as IDs when reading CloudWatch metrics. They must start with\n// a lowercase letter and contain only numbers, letters, and underscores.\nconst PAGE_VIEWS_PER_SECOND = 'pageViewsPerSecond';\nconst ACTIVE_WORKERS_PER_SECOND = 'activeWorkersPerSecond';\nconst LOAD_BALANCER_REQUESTS_PER_MINUTE = 'loadBalancerRequestsPerMinute';\n\nexport async function run() {\n  if (\n    !config.runningInEc2 ||\n    !config.chunksLoadBalancerDimensionName ||\n    !config.chunksTargetGroupDimensionName ||\n    !config.chunksAutoScalingGroupName\n  ) {\n    return;\n  }\n\n  const now = Date.now();\n  const cloudwatch = new CloudWatch(makeAwsClientConfig());\n\n  const metrics = await cloudwatch.getMetricData({\n    StartTime: new Date(now - 1000 * config.chunksHostAutoScalingHistoryIntervalSec),\n    EndTime: new Date(now),\n    MetricDataQueries: [\n      {\n        Id: PAGE_VIEWS_PER_SECOND,\n        MetricStat: {\n          Metric: {\n            Namespace: 'PrairieLearn',\n            MetricName: 'PageViewsPerSecond',\n            Dimensions: [\n              {\n                Name: 'Server Group',\n                Value: config.groupName,\n              },\n            ],\n          },\n          Period: 10,\n          Stat: 'Maximum',\n        },\n      },\n      {\n        Id: ACTIVE_WORKERS_PER_SECOND,\n        MetricStat: {\n          Metric: {\n            Namespace: 'PrairieLearn',\n            MetricName: 'CurrentJobs',\n            Dimensions: [\n              {\n                Name: 'Server Group',\n                Value: config.groupName,\n              },\n              {\n                Name: 'Job Type',\n                Value: 'python_worker_active',\n              },\n            ],\n          },\n          Period: 10,\n          Stat: 'Maximum',\n        },\n      },\n      {\n        Id: LOAD_BALANCER_REQUESTS_PER_MINUTE,\n        MetricStat: {\n          Metric: {\n            Namespace: 'AWS/ApplicationELB',\n            MetricName: 'RequestCount',\n            Dimensions: [\n              {\n                Name: 'LoadBalancer',\n                Value: config.chunksLoadBalancerDimensionName,\n              },\n              {\n                Name: 'TargetGroup',\n                Value: config.chunksTargetGroupDimensionName,\n              },\n            ],\n          },\n          Period: 60,\n          Stat: 'Sum',\n        },\n      },\n    ],\n  });\n\n  const pageViewsPerSecondMetric = metrics.MetricDataResults?.find(\n    (m) => m.Id === PAGE_VIEWS_PER_SECOND,\n  );\n  const activeWorkersPerSecondMetric = metrics.MetricDataResults?.find(\n    (m) => m.Id === ACTIVE_WORKERS_PER_SECOND,\n  );\n  const loadBalancerRequestsPerMinuteMetric = metrics.MetricDataResults?.find(\n    (m) => m.Id === LOAD_BALANCER_REQUESTS_PER_MINUTE,\n  );\n\n  const maxPageViewsPerSecond = Math.max(...(pageViewsPerSecondMetric?.Values ?? []), 0);\n  const maxActiveWorkersPerSecond = Math.max(...(activeWorkersPerSecondMetric?.Values ?? []), 0);\n  const maxLoadBalancerRequestsPerMinute = Math.max(\n    ...(loadBalancerRequestsPerMinuteMetric?.Values ?? []),\n    0,\n  );\n\n  const desiredInstancesByPageViews = maxPageViewsPerSecond / config.chunksPageViewsCapacityFactor;\n  const desiredInstancesByActiveWorkers =\n    maxActiveWorkersPerSecond / config.chunksActiveWorkersCapacityFactor;\n  const desiredInstancesByLoadBalancerRequests =\n    maxLoadBalancerRequestsPerMinute / config.chunksLoadBalancerRequestsCapacityFactor;\n\n  const desiredInstances = Math.ceil(\n    Math.max(\n      desiredInstancesByPageViews,\n      desiredInstancesByActiveWorkers,\n      desiredInstancesByLoadBalancerRequests,\n      1,\n    ),\n  );\n\n  const dimensions: Dimension[] = [{ Name: 'Server Group', Value: config.groupName }];\n\n  await cloudwatch.putMetricData({\n    MetricData: [\n      {\n        MetricName: 'DesiredInstancesByPageViews',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: new Date(now),\n        Unit: 'Count',\n        Value: desiredInstancesByPageViews,\n      },\n      {\n        MetricName: 'DesiredInstancesByActiveWorkers',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: new Date(now),\n        Unit: 'Count',\n        Value: desiredInstancesByActiveWorkers,\n      },\n      {\n        MetricName: 'DesiredInstancesByLoadBalancerRequests',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: new Date(now),\n        Unit: 'Count',\n        Value: desiredInstancesByLoadBalancerRequests,\n      },\n      {\n        MetricName: 'DesiredInstances',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Unit: 'Count',\n        Timestamp: new Date(now),\n        Value: desiredInstances,\n      },\n    ],\n    Namespace: 'Chunks',\n  });\n\n  await setAutoScalingGroupCapacity(config.chunksAutoScalingGroupName, desiredInstances);\n}\n\n/**\n * Sets the desired capacity of the given autoscaling group.\n */\nasync function setAutoScalingGroupCapacity(groupName: string, capacity: number) {\n  if (!groupName) return;\n\n  const autoscaling = new AutoScaling(makeAwsClientConfig());\n  await autoscaling.setDesiredCapacity({\n    AutoScalingGroupName: groupName,\n    DesiredCapacity: capacity,\n  });\n}\n"]}