{"version":3,"file":"externalGraderLoad.js","sourceRoot":"","sources":["../../../src/ee/cron/externalGraderLoad.ts"],"names":[],"mappings":"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","sourcesContent":["import { AutoScaling } from '@aws-sdk/client-auto-scaling';\nimport { CloudWatch } from '@aws-sdk/client-cloudwatch';\n\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { makeAwsClientConfig } from '../../lib/aws.js';\nimport { config } from '../../lib/config.js';\n\nexport async function run() {\n  if (!config.runningInEc2) return;\n\n  const stats = await getLoadStats();\n  await sendStatsToCloudWatch(stats);\n  await setAutoScalingGroupCapacity(stats);\n}\n\nasync function getLoadStats() {\n  const params = [\n    config.externalGradingJobsQueueName,\n    config.externalGradingLoadAverageIntervalSec,\n    config.externalGradingHistoryLoadIntervalSec,\n    config.externalGradingCurrentCapacityFactor,\n    config.externalGradingHistoryCapacityFactor,\n  ];\n  const result = await sqldb.callOneRowAsync('grader_loads_current', params);\n  return result.rows[0];\n}\n\nasync function sendStatsToCloudWatch(stats) {\n  const dimensions = [{ Name: 'By Queue', Value: config.externalGradingJobsQueueName }];\n  const timestamp = new Date(stats.timestamp_formatted);\n\n  const cloudwatch = new CloudWatch(makeAwsClientConfig());\n  await cloudwatch.putMetricData({\n    // AWS limits to 20 items within each MetricData list\n    MetricData: [\n      {\n        MetricName: 'InstanceCount',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.instance_count,\n      },\n      {\n        MetricName: 'InstanceCountLaunching',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.instance_count_launching,\n      },\n      {\n        MetricName: 'InstanceCountInService',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.instance_count_in_service,\n      },\n      {\n        MetricName: 'InstanceCountAbandoningLaunch',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.instance_count_abandoning_launch,\n      },\n      {\n        MetricName: 'InstanceCountUnhealthy',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.instance_count_unhealthy,\n      },\n      {\n        MetricName: 'CurrentJobs',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.current_jobs,\n      },\n      {\n        MetricName: 'MaxJobs',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.max_jobs,\n      },\n      {\n        MetricName: 'LoadPercentage',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Percent',\n        Value: stats.load_perc,\n      },\n      {\n        MetricName: 'UngradedJobs',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.ungraded_jobs,\n      },\n      {\n        MetricName: 'UngradedJobsInSubmit',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.ungraded_jobs_in_submit,\n      },\n      {\n        MetricName: 'UngradedJobsInQueue',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.ungraded_jobs_in_queue,\n      },\n      {\n        MetricName: 'UngradedJobsInPrepare',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.ungraded_jobs_in_prepare,\n      },\n      {\n        MetricName: 'UngradedJobsInRun',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.ungraded_jobs_in_run,\n      },\n      {\n        MetricName: 'UngradedJobsInReport',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.ungraded_jobs_in_report,\n      },\n      {\n        MetricName: 'AgeOfOldestJob',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Seconds',\n        Value: stats.age_of_oldest_job_sec,\n      },\n      {\n        MetricName: 'AgeOfOldestJobInSubmit',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Seconds',\n        Value: stats.age_of_oldest_job_in_submit_sec,\n      },\n      {\n        MetricName: 'AgeOfOldestJobInQueue',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Seconds',\n        Value: stats.age_of_oldest_job_in_queue_sec,\n      },\n      {\n        MetricName: 'AgeOfOldestJobInPrepare',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Seconds',\n        Value: stats.age_of_oldest_job_in_prepare_sec,\n      },\n      {\n        MetricName: 'AgeOfOldestJobInRun',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Seconds',\n        Value: stats.age_of_oldest_job_in_run_sec,\n      },\n      {\n        MetricName: 'AgeOfOldestJobInReport',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Seconds',\n        Value: stats.age_of_oldest_job_in_report_sec,\n      },\n    ],\n    Namespace: 'Grader',\n  });\n\n  // AWS limits to 20 items within each MetricData list, so we split up the\n  // metrics into two batches.\n  await cloudwatch.putMetricData({\n    MetricData: [\n      {\n        MetricName: 'HistoryJobs',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.history_jobs,\n      },\n      {\n        MetricName: 'CurrentUsers',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.current_users,\n      },\n      {\n        MetricName: 'GradingJobsPerUser',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.grading_jobs_per_user,\n      },\n      {\n        MetricName: 'AverageGradingJobsPerUser',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.average_grading_jobs_per_user,\n      },\n      {\n        MetricName: 'HistoryGradingJobsPerUser',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.history_grading_jobs_per_user,\n      },\n      {\n        MetricName: 'PredictedJobsByCurrentUsers',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.predicted_jobs_by_current_users,\n      },\n      {\n        MetricName: 'PredictedJobsByHistoryUsers',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.predicted_jobs_by_history_users,\n      },\n      {\n        MetricName: 'JobsPerInstance',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.jobs_per_instance,\n      },\n      {\n        MetricName: 'DesiredInstancesByUngradedJobs',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.desired_instances_by_ungraded_jobs,\n      },\n      {\n        MetricName: 'DesiredInstancesByCurrentJobs',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.desired_instances_by_current_jobs,\n      },\n      {\n        MetricName: 'DesiredInstancesByHistoryJobs',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.desired_instances_by_history_jobs,\n      },\n      {\n        MetricName: 'DesiredInstancesByCurrentUsers',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.desired_instances_by_current_users,\n      },\n      {\n        MetricName: 'DesiredInstancesByHistoryUsers',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.desired_instances_by_history_users,\n      },\n      {\n        MetricName: 'DesiredInstancesCurrent',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.desired_instances_current,\n      },\n      {\n        MetricName: 'DesiredInstancesHistory',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.desired_instances_history,\n      },\n      {\n        MetricName: 'DesiredInstances',\n        Dimensions: dimensions,\n        StorageResolution: 1,\n        Timestamp: timestamp,\n        Unit: 'Count',\n        Value: stats.desired_instances,\n      },\n    ],\n    Namespace: 'Grader',\n  });\n}\n\nasync function setAutoScalingGroupCapacity(stats) {\n  if (!config.externalGradingAutoScalingGroupName) return;\n  if (!Number.isInteger(stats.desired_instances)) return;\n  if (stats.desired_instances < 1 || stats.desired_instances > 1e6) return;\n  if (stats.desired_instances === stats.instance_count) return;\n\n  const autoscaling = new AutoScaling(makeAwsClientConfig());\n  logger.verbose(`setting AutoScalingGroup capacity to ${stats.desired_instances}`);\n  await autoscaling.setDesiredCapacity({\n    AutoScalingGroupName: config.externalGradingAutoScalingGroupName,\n    DesiredCapacity: stats.desired_instances,\n    HonorCooldown: false,\n  });\n}\n"]}