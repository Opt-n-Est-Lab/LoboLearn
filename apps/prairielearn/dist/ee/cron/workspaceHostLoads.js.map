{"version":3,"file":"workspaceHostLoads.js","sourceRoot":"","sources":["../../../src/ee/cron/workspaceHostLoads.ts"],"names":[],"mappings":"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","sourcesContent":["import { CloudWatch } from '@aws-sdk/client-cloudwatch';\nimport { EC2 } from '@aws-sdk/client-ec2';\n\nimport { callOneRowAsync, loadSqlEquiv, queryAsync } from '@prairielearn/postgres';\n\nimport { makeAwsClientConfig } from '../../lib/aws.js';\nimport { config } from '../../lib/config.js';\nimport * as workspaceHostUtils from '../../lib/workspaceHost.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\ntype WorkspaceLoadStats = Record<string, any>;\n\nexport async function run() {\n  if (!config.runningInEc2) return;\n  const stats = await getLoadStats();\n  await sendStatsToCloudwatch(stats);\n  await handleWorkspaceAutoscaling(stats);\n}\n\nasync function getLoadStats(): Promise<WorkspaceLoadStats> {\n  const params = [config.workspaceLoadCapacityFactor, config.workspaceLoadHostCapacity];\n  return (await callOneRowAsync('workspace_loads_current', params)).rows[0];\n}\n\nconst cloudwatch_definitions = {\n  workspace_jobs_capacity_desired: {\n    name: 'DesiredJobCapacity',\n    unit: 'Count',\n  },\n  workspace_hosts_desired: {\n    name: 'DesiredHosts',\n    unit: 'Count',\n  },\n  workspace_hosts_launching_count: {\n    name: 'HostsLaunching',\n    unit: 'Count',\n  },\n  workspace_hosts_ready_count: {\n    name: 'HostsReady',\n    unit: 'Count',\n  },\n  workspace_hosts_draining_count: {\n    name: 'HostsDraining',\n    unit: 'Count',\n  },\n  workspace_hosts_unhealthy_count: {\n    name: 'HostsUnhealthy',\n    unit: 'Count',\n  },\n  workspace_hosts_terminating_count: {\n    name: 'HostsTerminating',\n    unit: 'Count',\n  },\n  workspace_hosts_active_count: {\n    name: 'HostsActive',\n    unit: 'Count',\n  },\n  workspace_hosts_longest_launching_sec: {\n    name: 'MaxLaunchingHostAge',\n    unit: 'Seconds',\n  },\n  workspace_hosts_longest_ready_sec: {\n    name: 'MaxReadyHostAge',\n    unit: 'Seconds',\n  },\n  workspace_hosts_longest_draining_sec: {\n    name: 'MaxDrainingHostAge',\n    unit: 'Seconds',\n  },\n  workspace_hosts_longest_unhealthy_sec: {\n    name: 'MaxUnhealthyHostAge',\n    unit: 'Seconds',\n  },\n  workspace_hosts_longest_terminating_sec: {\n    name: 'MaxTerminatingHostAge',\n    unit: 'Seconds',\n  },\n  workspace_uninitialized_count: {\n    name: 'WorkspacesUninitialized',\n    unit: 'Count',\n  },\n  workspace_launching_count: {\n    name: 'WorkspacesLaunching',\n    unit: 'Count',\n  },\n  workspace_relaunching_count: {\n    name: 'WorkspacesRelaunching',\n    unit: 'Count',\n  },\n  workspace_running_count: {\n    name: 'WorkspacesRunning',\n    unit: 'Count',\n  },\n  workspace_running_on_healthy_hosts_count: {\n    name: 'WorkspacesRunningOnHealthyHosts',\n    unit: 'Count',\n  },\n  workspace_active_count: {\n    name: 'WorkspacesActive',\n    unit: 'Count',\n  },\n  workspace_active_on_healthy_hosts_count: {\n    name: 'WorkspacesActiveOnHealthyHosts',\n    unit: 'Count',\n  },\n  workspace_longest_launching_sec: {\n    name: 'MaxLaunchingWorkspaceAge',\n    unit: 'Seconds',\n  },\n  workspace_longest_running_sec: {\n    name: 'MaxRunningWorkspaceAge',\n    unit: 'Seconds',\n  },\n};\n\nasync function sendStatsToCloudwatch(stats: WorkspaceLoadStats) {\n  const cloudwatch = new CloudWatch(makeAwsClientConfig());\n  const dimensions = [{ Name: 'By Server', Value: config.workspaceCloudWatchName }];\n  const cloudwatch_metricdata_limit = 20; // AWS limits to 20 items within each list\n  const entries = Object.entries(stats).filter(([key, _value]) => {\n    return key !== 'timestamp_formatted';\n  });\n\n  for (let i = 0; i < entries.length; i += cloudwatch_metricdata_limit) {\n    const data = entries.slice(i, i + cloudwatch_metricdata_limit).map(([key, value]) => {\n      if (!(key in cloudwatch_definitions)) {\n        throw new Error(`Unknown datapoint ${key}!`);\n      }\n      const def = cloudwatch_definitions[key];\n      return {\n        MetricName: def.name,\n        Dimensions: dimensions,\n        Timestamp: new Date(stats.timestamp_formatted),\n        Unit: def.unit,\n        Value: value,\n        StorageResolution: 1,\n      };\n    });\n    await cloudwatch.putMetricData({ MetricData: data, Namespace: 'Workspaces' });\n  }\n}\n\nasync function handleWorkspaceAutoscaling(stats: WorkspaceLoadStats) {\n  if (!config.workspaceAutoscalingEnabled || !config.workspaceLoadLaunchTemplateId) return;\n\n  const desired_hosts = stats.workspace_hosts_desired;\n  const ready_hosts = stats.workspace_hosts_ready_count;\n  const launching_hosts = stats.workspace_hosts_launching_count;\n  if (desired_hosts > ready_hosts + launching_hosts) {\n    let needed = desired_hosts - (ready_hosts + launching_hosts);\n    // First thing we can try is to \"re-capture\" draining hosts to be ready.\n    // This is very cheap to do because we don't need to call out to AWS.\n    const recapturedHostCount = await workspaceHostUtils.recaptureDrainingWorkspaceHosts(needed);\n    needed -= recapturedHostCount;\n    if (needed > 0) {\n      // We couldn't get enough hosts, so lets spin up some more and insert them into the DB.\n      const ec2 = new EC2(makeAwsClientConfig());\n      const data = await ec2.runInstances({\n        MaxCount: needed,\n        MinCount: 1,\n        LaunchTemplate: {\n          LaunchTemplateId: config.workspaceLoadLaunchTemplateId,\n        },\n      });\n      const instance_ids = (data.Instances ?? []).map((instance) => instance.InstanceId);\n      await queryAsync(sql.insert_new_instances, { instance_ids });\n    }\n  } else if (desired_hosts < ready_hosts) {\n    const surplus = ready_hosts - desired_hosts;\n    await workspaceHostUtils.drainExtraWorkspaceHosts(surplus);\n  }\n}\n"]}