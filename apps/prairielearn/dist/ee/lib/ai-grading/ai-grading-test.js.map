{"version":3,"file":"ai-grading-test.js","sourceRoot":"","sources":["../../../../src/ee/lib/ai-grading/ai-grading-test.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'node:assert';\n\nimport { OpenAI } from 'openai';\nimport { zodResponseFormat } from 'openai/helpers/zod';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport {\n  loadSqlEquiv,\n  queryAsync,\n  queryOptionalRow,\n  queryRow,\n  queryRows,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\n\nimport { config } from '../../../lib/config.js';\nimport {\n  type AssessmentQuestion,\n  type Course,\n  IdSchema,\n  InstanceQuestionSchema,\n  type Question,\n  RubricItemSchema,\n  SubmissionGradingContextEmbeddingSchema,\n} from '../../../lib/db-types.js';\nimport * as manualGrading from '../../../lib/manualGrading.js';\nimport { buildQuestionUrls } from '../../../lib/question-render.js';\nimport { getQuestionCourse } from '../../../lib/question-variant.js';\nimport { createServerJob } from '../../../lib/server-jobs.js';\nimport * as questionServers from '../../../question-servers/index.js';\n\nimport * as aiGradingUtil from './ai-grading-util.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function aiGradeTest({\n  course,\n  course_instance_id,\n  question,\n  assessment_question,\n  urlPrefix,\n  authn_user_id,\n  user_id,\n}: {\n  question: Question;\n  course: Course;\n  course_instance_id?: string;\n  assessment_question: AssessmentQuestion;\n  urlPrefix: string;\n  authn_user_id: string;\n  user_id: string;\n}): Promise<string> {\n  // If OpenAI API Key and Organization are not provided, throw error\n  if (!config.openAiApiKey || !config.openAiOrganization) {\n    throw new error.HttpStatusError(403, 'Not implemented (feature not available)');\n  }\n  const openai = new OpenAI({\n    apiKey: config.openAiApiKey,\n    organization: config.openAiOrganization,\n  });\n\n  const question_course = await getQuestionCourse(question, course);\n\n  const serverJob = await createServerJob({\n    courseId: course.id,\n    courseInstanceId: course_instance_id,\n    assessmentId: assessment_question.assessment_id,\n    authnUserId: authn_user_id,\n    userId: user_id,\n    type: 'ai_grading_test',\n    description: 'Test accuracy for AI grading',\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    if (!assessment_question.max_manual_points) {\n      job.fail('The tested question has no manual grading');\n    }\n\n    const instance_questions = await queryRows(\n      sql.select_instance_questions_for_assessment_question,\n      {\n        assessment_question_id: assessment_question.id,\n      },\n      InstanceQuestionSchema,\n    );\n\n    job.info('Checking for embeddings for all submissions.');\n    let newEmbeddingsCount = 0;\n    for (const instance_question of instance_questions) {\n      const submission_id = await queryRow(\n        sql.select_last_submission_id,\n        { instance_question_id: instance_question.id },\n        IdSchema,\n      );\n      const submission_embedding = await queryOptionalRow(\n        sql.select_embedding_for_submission,\n        { submission_id },\n        SubmissionGradingContextEmbeddingSchema,\n      );\n      if (!submission_embedding) {\n        await aiGradingUtil.generateSubmissionEmbedding({\n          course,\n          question,\n          instance_question,\n          urlPrefix,\n          openai,\n        });\n        newEmbeddingsCount++;\n      }\n    }\n    job.info(`Calculated ${newEmbeddingsCount} embeddings.`);\n\n    let number_to_test = 0;\n    for (const instance_question of instance_questions) {\n      if (\n        !instance_question.requires_manual_grading &&\n        instance_question.status !== 'unanswered' &&\n        !instance_question.is_ai_graded\n      ) {\n        number_to_test++;\n      }\n    }\n    job.info(`Found ${number_to_test} submissions to test!`);\n\n    const rubric_items = await queryRows(\n      sql.select_rubric_for_grading,\n      {\n        assessment_question_id: assessment_question.id,\n      },\n      RubricItemSchema,\n    );\n    const rubric_id = rubric_items.length ? rubric_items[0].rubric_id : null;\n\n    let error_count = 0;\n    const testRubricResults: {\n      reference_items: Set<string>;\n      ai_items: Set<string>;\n    }[] = [];\n    const testScoreResults: {\n      reference_score: number;\n      ai_score: number;\n    }[] = [];\n\n    // Test each instance question\n    for (const instance_question of instance_questions) {\n      if (\n        instance_question.status === 'unanswered' ||\n        instance_question.requires_manual_grading ||\n        instance_question.is_ai_graded\n      ) {\n        // Only test on instance questions that have been submitted and graded by a human\n        continue;\n      }\n\n      job.info(`\\nInstance question ${instance_question.id}`);\n\n      const { variant, submission } = await queryRow(\n        sql.select_last_variant_and_submission,\n        { instance_question_id: instance_question.id },\n        aiGradingUtil.SubmissionVariantSchema,\n      );\n\n      const grading_rubric_id = await queryOptionalRow(\n        sql.select_rubric_id_from_grading,\n        { manual_rubric_grading_id: submission.manual_rubric_grading_id },\n        IdSchema,\n      );\n\n      if (rubric_id !== grading_rubric_id) {\n        job.info(\n          'Rubric used for this submission does not match the current rubric in use. Skipping test.',\n        );\n        continue;\n      }\n\n      const locals = {\n        ...buildQuestionUrls(urlPrefix, variant, question, instance_question),\n        questionRenderContext: 'ai_grading',\n      };\n      // Get question html\n      const questionModule = questionServers.getModule(question.type);\n      const render_question_results = await questionModule.render(\n        { question: true, submissions: false, answer: false },\n        variant,\n        question,\n        null,\n        [],\n        question_course,\n        locals,\n      );\n      if (render_question_results.courseIssues.length > 0) {\n        job.info(render_question_results.courseIssues.toString());\n        job.error('Error occurred');\n        job.fail('Errors occurred while AI grading, see output for details');\n      }\n      const questionPrompt = render_question_results.data.questionHtml;\n\n      let submission_embedding = await queryOptionalRow(\n        sql.select_embedding_for_submission,\n        { submission_id: submission.id },\n        SubmissionGradingContextEmbeddingSchema,\n      );\n      if (!submission_embedding) {\n        submission_embedding = await aiGradingUtil.generateSubmissionEmbedding({\n          course,\n          question,\n          instance_question,\n          urlPrefix,\n          openai,\n        });\n      }\n      const submission_text = submission_embedding.submission_text;\n\n      const example_submissions = await queryRows(\n        sql.select_closest_submission_info,\n        {\n          submission_id: submission.id,\n          assessment_question_id: assessment_question.id,\n          embedding: submission_embedding.embedding,\n          limit: 5,\n        },\n        aiGradingUtil.GradedExampleSchema,\n      );\n\n      const { messages } = await aiGradingUtil.generatePrompt({\n        questionPrompt,\n        submission_text,\n        example_submissions,\n        rubric_items,\n      });\n\n      if (rubric_id) {\n        const rubric_grading_items = await queryRows(\n          sql.select_rubric_grading_items,\n          { manual_rubric_grading_id: submission.manual_rubric_grading_id },\n          RubricItemSchema,\n        );\n        const referenceRubricDescriptions = new Set<string>();\n        rubric_grading_items.forEach((item) => {\n          referenceRubricDescriptions.add(item.description);\n        });\n\n        // Dynamically generate the rubric schema based on the rubric items.\n        let RubricGradingItemsSchema = z.object({}) as z.ZodObject<Record<string, z.ZodBoolean>>;\n        for (const item of rubric_items) {\n          RubricGradingItemsSchema = RubricGradingItemsSchema.merge(\n            z.object({\n              [item.description]: z.boolean(),\n            }),\n          );\n        }\n        const RubricGradingResultSchema = z.object({\n          rubric_items: RubricGradingItemsSchema,\n        });\n        const completion = await openai.beta.chat.completions.parse({\n          messages,\n          model: aiGradingUtil.OPEN_AI_MODEL,\n          user: `course_${course.id}`,\n          response_format: zodResponseFormat(RubricGradingResultSchema, 'score'),\n          temperature: aiGradingUtil.API_TEMPERATURE,\n        });\n        try {\n          job.info(`Tokens used for prompt: ${completion.usage?.prompt_tokens ?? 0}`);\n          job.info(`Tokens used for completion: ${completion.usage?.completion_tokens ?? 0}`);\n          job.info(`Tokens used in total: ${completion.usage?.total_tokens ?? 0}`);\n          const response = completion.choices[0].message;\n          job.info(`Raw response:\\n${response.content}`);\n\n          if (response.parsed) {\n            const { appliedRubricItems, appliedRubricDescription } =\n              aiGradingUtil.parseAiRubricItems({\n                ai_rubric_items: response.parsed.rubric_items,\n                rubric_items,\n              });\n            testRubricResults.push({\n              reference_items: referenceRubricDescriptions,\n              ai_items: appliedRubricDescription,\n            });\n\n            await runInTransactionAsync(async () => {\n              assert(assessment_question.max_manual_points);\n              const manual_rubric_grading = await manualGrading.insertRubricGrading(\n                rubric_id,\n                assessment_question.max_points ?? 0,\n                assessment_question.max_manual_points,\n                appliedRubricItems,\n                0,\n              );\n              const score =\n                manual_rubric_grading.computed_points / assessment_question.max_manual_points;\n              const grading_job_id = await queryRow(\n                sql.insert_grading_job,\n                {\n                  submission_id: submission.id,\n                  authn_user_id: user_id,\n                  grading_method: 'AI',\n                  correct: null,\n                  score,\n                  auto_points: 0,\n                  manual_points: manual_rubric_grading.computed_points,\n                  manual_rubric_grading_id: manual_rubric_grading.id,\n                  feedback: null,\n                },\n                IdSchema,\n              );\n              await queryAsync(sql.insert_ai_grading_job, {\n                grading_job_id,\n                job_sequence_id: serverJob.jobSequenceId,\n                prompt: messages,\n                completion,\n                model: aiGradingUtil.OPEN_AI_MODEL,\n                prompt_tokens: completion.usage?.prompt_tokens ?? 0,\n                completion_tokens: completion.usage?.completion_tokens ?? 0,\n                cost: aiGradingUtil.calculateApiCost(completion.usage),\n                course_id: course.id,\n                course_instance_id,\n              });\n            });\n\n            job.info('Reference rubric items:');\n            for (const item of referenceRubricDescriptions) {\n              job.info(`- ${item}`);\n            }\n            job.info('AI rubric items:');\n            for (const item of appliedRubricDescription) {\n              job.info(`- ${item}`);\n            }\n          } else if (response.refusal) {\n            job.error(`ERROR AI grading for ${instance_question.id}`);\n            job.error(response.refusal);\n            error_count++;\n          }\n        } catch (err) {\n          job.error(`ERROR AI grading for ${instance_question.id}`);\n          job.error(err);\n          error_count++;\n        }\n      } else {\n        const score_perc = instance_question.score_perc ?? 0;\n        const completion = await openai.beta.chat.completions.parse({\n          messages,\n          model: aiGradingUtil.OPEN_AI_MODEL,\n          user: `course_${course.id}`,\n          response_format: zodResponseFormat(aiGradingUtil.GradingResultSchema, 'score'),\n          temperature: aiGradingUtil.API_TEMPERATURE,\n        });\n        try {\n          job.info(`Tokens used for prompt: ${completion.usage?.prompt_tokens ?? 0}`);\n          job.info(`Tokens used for completion: ${completion.usage?.completion_tokens ?? 0}`);\n          job.info(`Tokens used in total: ${completion.usage?.total_tokens ?? 0}`);\n          const response = completion.choices[0].message;\n          job.info(`Raw response:\\n${response.content}`);\n          if (response.parsed) {\n            const score = response.parsed.score;\n            testScoreResults.push({\n              reference_score: score_perc,\n              ai_score: score,\n            });\n\n            await runInTransactionAsync(async () => {\n              assert(assessment_question.max_manual_points);\n              const grading_job_id = await queryRow(\n                sql.insert_grading_job,\n                {\n                  submission_id: submission.id,\n                  authn_user_id: user_id,\n                  grading_method: 'AI',\n                  correct: null,\n                  score: score / 100,\n                  auto_points: 0,\n                  manual_points: (score * assessment_question.max_manual_points) / 100,\n                  manual_rubric_grading_id: null,\n                  feedback: null,\n                },\n                IdSchema,\n              );\n              await queryAsync(sql.insert_ai_grading_job, {\n                grading_job_id,\n                job_sequence_id: serverJob.jobSequenceId,\n                prompt: messages,\n                completion,\n                model: aiGradingUtil.OPEN_AI_MODEL,\n                prompt_tokens: completion.usage?.prompt_tokens ?? 0,\n                completion_tokens: completion.usage?.completion_tokens ?? 0,\n                cost: aiGradingUtil.calculateApiCost(completion.usage),\n                course_id: course.id,\n                course_instance_id,\n              });\n            });\n\n            job.info(`Reference score: ${score_perc}`);\n            job.info(`AI score: ${response.parsed.score}`);\n          } else if (response.refusal) {\n            job.error(`ERROR AI grading for ${instance_question.id}`);\n            job.error(response.refusal);\n            error_count++;\n          }\n        } catch (err) {\n          job.error(`ERROR AI grading for ${instance_question.id}`);\n          job.error(err);\n          error_count++;\n        }\n      }\n    }\n\n    if (error_count > 0) {\n      job.error('Number of errors: ' + error_count);\n      job.fail('Errors occurred while AI grading, see output for details');\n    } else {\n      job.info('\\n----------------Test results----------------');\n      if (rubric_id) {\n        job.info(`Test size: ${testRubricResults.length}`);\n        rubric_items.forEach((item) => {\n          const accuracy = aiGradingUtil.rubricItemAccuracy(testRubricResults, item);\n          job.info(`Rubric item: ${item.description}, accuracy: ${accuracy}%`);\n        });\n      } else {\n        job.info(`Test size: ${testScoreResults.length}`);\n        const rmse = aiGradingUtil.rootMeanSquaredError(\n          testScoreResults.map((item) => item.reference_score),\n          testScoreResults.map((item) => item.ai_score),\n        );\n        job.info(`RMSE: ${rmse}`);\n        const r = aiGradingUtil.pearsonCorrelation(\n          testScoreResults.map((item) => item.reference_score),\n          testScoreResults.map((item) => item.ai_score),\n        );\n        job.info(`Pearson's r: ${r}`);\n      }\n    }\n  });\n  return serverJob.jobSequenceId;\n}\n"]}