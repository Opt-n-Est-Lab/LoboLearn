{"version":3,"file":"aiQuestionGeneration.js","sourceRoot":"","sources":["../../../src/ee/lib/aiQuestionGeneration.ts"],"names":[],"mappings":"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","sourcesContent":["import { type OpenAI } from 'openai';\nimport * as parse5 from 'parse5';\n\nimport { loadSqlEquiv, queryAsync, queryRow, queryRows } from '@prairielearn/postgres';\n\nimport * as b64Util from '../../lib/base64-util.js';\nimport { getCourseFilesClient } from '../../lib/course-files-api.js';\nimport { type Issue, QuestionGenerationContextEmbeddingSchema } from '../../lib/db-types.js';\nimport { getAndRenderVariant } from '../../lib/question-render.js';\nimport { type ServerJob, createServerJob } from '../../lib/server-jobs.js';\nimport { selectCourseById } from '../../models/course.js';\nimport { selectQuestionById, selectQuestionByQid } from '../../models/question.js';\nimport { selectUserById } from '../../models/user.js';\n\nimport { createEmbedding, openAiUserFromAuthn, vectorToString } from './contextEmbeddings.js';\nimport { validateHTML } from './validateHTML.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst MODEL_NAME: OpenAI.Chat.ChatModel = 'gpt-4o';\n\nconst NUM_TOTAL_ATTEMPTS = 2;\n\n/**\n * Generates the common preamble with general PrairieLearn information for the LLM\n *\n * @param context Relevant example documents, formatted into one string.\n * @returns A string, the prompt preamble.\n */\nfunction promptPreamble(context: string): string {\n  return `# Introduction\n\nYou are an assistant that helps instructors write questions for PrairieLearn.\n\nA question has a \\`question.html\\` file that can contain standard HTML, CSS, and JavaScript. It can also include PrairieLearn elements like \\`<pl-multiple-choice>\\` and \\`<pl-number-input>\\`.\n\nA question may also have a \\`server.py\\` file that can randomly generate unique parameters and answers, and which can also assign grades to student submissions.\n\n## Generating and using random parameters\n\n\\`server.py\\` may define a \\`generate\\` function. \\`generate\\` has a single parameter \\`data\\` which can be modified by reference. It has the following properties:\n\n- \\`params\\`: A dictionary. Random parameters, choices, etc. can be written here for later retrieval.\n- \\`correct_answers\\`: A dictionary. Correct answers can be written here for later retrieval, if needed.\n\nParameters can be read in \\`question.html\\` with Mustache syntax. For instance, if \\`server.py\\` contains \\`data[\"params\"][\"answer\"]\\`, it can be read with \\`{{ params.answer }}\\` in \\`question.html\\`.\n\nIf a \\`question.html\\` file includes Mustache templates, a \\`server.py\\` should be provided to generate the necessary parameters.\n\nIf the question does not use random parameters, \\`server.py\\` can be omitted.\n\n## Formatting\n\nYou can use LaTeX to format numerical quantities, equations, formulas, and so on. For inline LaTeX, use \\`$...$\\`. For block LaTeX, use \\`$$...$$\\`.\n\n# Context\n\nHere is some context that may help you respond to the user. This context may include example questions, documentation, or other information that may be helpful.\n\n${context}\n\n`;\n}\n\nasync function checkRender(\n  status: 'success' | 'error',\n  errors: string[],\n  courseId: string,\n  userId: string,\n  questionId: string,\n) {\n  // If there was any issue generating the question, we won't yet check rendering.\n  if (status === 'error' || errors.length > 0) return [];\n\n  const question = await selectQuestionById(questionId);\n  const course = await selectCourseById(courseId);\n  const user = await selectUserById(userId);\n\n  const locals = {\n    // The URL prefix doesn't matter here since we won't ever show the result to the user.\n    urlPrefix: '',\n    question,\n    course,\n    user,\n    authn_user: user, // We don't have a separate authn user in this case.\n    is_administrator: false,\n  };\n  await getAndRenderVariant(null, null, locals);\n\n  // Errors should generally have stack traces. If they don't, we'll filter\n  // them out, but they may not help us much.\n  return ((locals as any).issues as Issue[])\n    .map((issue) => issue.system_data?.courseErrData?.outputBoth as string)\n    .filter((output) => output !== undefined)\n    .map((output) => {\n      return `When trying to render, your code created an error with the following output: \\`\\`\\`${output}\\`\\`\\`\\n\\nPlease fix it.`;\n    });\n}\n\n/**\n * Builds the context string, consisting of relevant documents.\n *\n * @param client The OpenAI client to use.\n * @param prompt The user's question generation prompt.\n * @param mandatoryElementNames Elements that we must pull documentation for.\n * @param authnUserId The user's authenticated user ID.\n * @returns A string of all relevant context documents.\n */\nexport async function makeContext(\n  client: OpenAI,\n  prompt: string,\n  mandatoryElementNames: string[],\n  authnUserId: string,\n): Promise<string> {\n  const embedding = await createEmbedding(client, prompt, openAiUserFromAuthn(authnUserId));\n\n  // Identify all elements that we are using *and* have documentation document chunks.\n  const mandatoryElements =\n    mandatoryElementNames.length > 0\n      ? await queryRows(\n          sql.select_documents_by_chunk_id,\n          {\n            doc_path: 'docs/elements.md',\n            chunk_ids: mandatoryElementNames,\n          },\n          QuestionGenerationContextEmbeddingSchema,\n        )\n      : [];\n\n  // The number of additional elements and documentation document chunks to include after accounting for all mandatory elements.\n  const numAdditionalDocs = Math.max(5 - mandatoryElements.length, 0);\n\n  const docs = await queryRows(\n    sql.select_nearby_documents,\n    { embedding: vectorToString(embedding), limit: numAdditionalDocs },\n    QuestionGenerationContextEmbeddingSchema,\n  );\n\n  // Ensure that documentation for at least one element is always included.\n  const elementDoc = await queryRow(\n    sql.select_nearby_documents_from_file,\n    {\n      embedding: vectorToString(embedding),\n      doc_path: 'docs/elements.md',\n      limit: 1,\n    },\n    QuestionGenerationContextEmbeddingSchema,\n  );\n  if (numAdditionalDocs > 0 && !docs.some((doc) => doc.doc_text === elementDoc.doc_text)) {\n    // Override the last (least relevant) doc.\n    docs[numAdditionalDocs - 1] = elementDoc;\n  }\n\n  return docs\n    .concat(mandatoryElements)\n    .map((doc) => doc.doc_text)\n    .join('\\n\\n');\n}\n\n/**\n * Extracts the generated HTML and Python code from an OpenAI completion into job parameters.\n *\n * @param completion The completion to extract from.\n * @param job The job whose data we want to extract into.\n */\nfunction extractFromCompletion(\n  completion: OpenAI.Chat.Completions.ChatCompletion,\n  job: ServerJob,\n): { html?: string; python?: string } {\n  const completionText = completion.choices[0].message.content;\n\n  job.info(`completion is ${completionText}`);\n\n  job.info(`used ${completion?.usage?.total_tokens} OpenAI tokens to generate response.`);\n\n  const pythonSelector = /```python\\n(?<code>([^`]|`[^`]|``[^`]|\\n)*)```/;\n  const htmlSelector = /```html\\n(?<code>([^`]|`[^`]|``[^`]|\\n)*)```/;\n\n  const html = completionText?.match(htmlSelector)?.groups?.code;\n  const python = completionText?.match(pythonSelector)?.groups?.code;\n\n  const out = {};\n\n  if (html !== undefined) {\n    job.info(`extracted html file: ${html}`);\n    out['html'] = html;\n  }\n\n  if (python !== undefined) {\n    job.info(`extracted python file: ${python}`);\n    out['python'] = python;\n  }\n\n  return out;\n}\n\n/**\n * Generates the HTML and Python code for a new question using an LLM.\n *\n * @param client The OpenAI client to use.\n * @param courseId The ID of the current course.\n * @param authnUserId The authenticated user's ID.\n * @param prompt The prompt for how to generate a question.\n * @param userId The ID of the generating/saving user.\n * @param hasCoursePermissionEdit Whether the saving generating/saving has course permission edit privlidges.\n * @returns A server job ID for the generation task and a promise to return the associated saved data on completion.\n */\nexport async function generateQuestion({\n  client,\n  courseId,\n  authnUserId,\n  prompt,\n  userId,\n  hasCoursePermissionEdit,\n}: {\n  client: OpenAI;\n  courseId: string;\n  authnUserId: string;\n  prompt: string;\n  userId: string;\n  hasCoursePermissionEdit: boolean;\n}): Promise<{\n  jobSequenceId: string;\n  questionId: string;\n  htmlResult: string | undefined;\n  pythonResult: string | undefined;\n  /**\n   * The context about our elements and example questions that was provided\n   * to the LLM.\n   */\n  context: string | undefined;\n}> {\n  const serverJob = await createServerJob({\n    courseId,\n    type: 'ai_question_generate',\n    description: 'Generate a question with AI',\n    authnUserId,\n  });\n\n  const jobData = await serverJob.execute(async (job) => {\n    job.info(`Prompt: \"${prompt}\"`);\n\n    const context = await makeContext(client, prompt, [], authnUserId);\n\n    const sysPrompt = `\n${promptPreamble(context)}\n# Prompt\n\nA user will now request your help in creating a question. Respond in a friendly but concise way. Include \\`question.html\\` and \\`server.py\\` in Markdown code fences in your response, and tag each code fence with the language (either \\`html\\` or \\`python\\`). Omit \\`server.py\\` if the question does not require it (for instance, if the question does not require randomization). In their prompt, they may explain how to calculate the correct answer; this is just for the backend. Do NOT display the method to calculate the correct answer in your \\`question.html\\` unless otherwise requested.\n\nKeep in mind you are not just generating an example; you are generating an actual question that the user will use directly.`;\n\n    job.info(`system prompt is: ${sysPrompt}`);\n\n    // TODO [very important]: normalize to prevent prompt injection attacks\n    const completion = await client.chat.completions.create({\n      model: MODEL_NAME,\n      messages: [\n        { role: 'system', content: sysPrompt },\n        { role: 'user', content: prompt },\n      ],\n      user: openAiUserFromAuthn(authnUserId),\n    });\n\n    const results = extractFromCompletion(completion, job);\n    const html = results?.html;\n\n    let errors: string[] = [];\n    if (html && typeof html === 'string') {\n      errors = validateHTML(html, false, !!results?.python);\n    } else {\n      errors = ['Please generate a question.html file.'];\n    }\n\n    const files = {};\n\n    if (results?.html) {\n      files['question.html'] = results?.html;\n    }\n\n    if (results?.python) {\n      files['server.py'] = results?.python;\n    }\n\n    const courseFilesClient = getCourseFilesClient();\n\n    const saveResults = await courseFilesClient.createQuestion.mutate({\n      course_id: courseId,\n      user_id: userId,\n      authn_user_id: authnUserId,\n      has_course_permission_edit: hasCoursePermissionEdit,\n      is_draft: true,\n      files,\n    });\n\n    if (saveResults.status === 'error') {\n      job.fail(`Adding question as draft failed (job sequence: ${saveResults.job_sequence_id})`);\n      return;\n    }\n\n    await queryAsync(sql.insert_draft_question_metadata, {\n      question_id: saveResults.question_id,\n      creator_id: authnUserId,\n    });\n\n    await queryAsync(sql.insert_ai_question_generation_prompt, {\n      question_id: saveResults.question_id,\n      prompting_user_id: authnUserId,\n      prompt_type: 'initial',\n      user_prompt: prompt,\n      system_prompt: sysPrompt,\n      response: completion.choices[0].message.content,\n      html: results?.html,\n      python: results?.python,\n      errors,\n      completion,\n      job_sequence_id: serverJob.jobSequenceId,\n    });\n    job.data['questionId'] = saveResults.question_id;\n    job.data['questionQid'] = saveResults.question_qid;\n\n    job.data.html = html;\n    job.data.python = results?.python;\n    job.data.context = context;\n\n    errors.push(\n      ...(await checkRender(saveResults.status, errors, courseId, userId, saveResults.question_id)),\n    );\n\n    if (\n      saveResults.status === 'success' &&\n      errors.length > 0 &&\n      typeof job.data.questionQid === 'string'\n    ) {\n      await regenInternal({\n        job,\n        client,\n        authnUserId,\n        originalPrompt: prompt,\n        revisionPrompt: `Please fix the following issues: \\n${errors.join('\\n')}`,\n        originalHTML: html || '',\n        originalPython: typeof results?.python === 'string' ? results?.python : undefined,\n        remainingAttempts: NUM_TOTAL_ATTEMPTS - 1,\n        isAutomated: true,\n        questionId: saveResults.question_id,\n        courseId,\n        userId,\n        hasCoursePermissionEdit,\n        questionQid: saveResults.question_qid,\n        jobSequenceId: serverJob.jobSequenceId,\n      });\n    }\n  });\n\n  return {\n    jobSequenceId: serverJob.jobSequenceId,\n    questionId: jobData.data.questionId,\n    htmlResult: jobData.data.html,\n    pythonResult: jobData.data.python,\n    context: jobData.data.context,\n  };\n}\n\n/**\n * Gets all of the tag names in an HTML parse tree.\n * @param ast The tree to use.\n * @returns All tag names in the tree.\n */\nfunction traverseForTagNames(ast: any): Set<string> {\n  const nodeNames = new Set<string>([ast.nodeName]);\n  if (ast.childNodes) {\n    for (const child of ast.childNodes) {\n      traverseForTagNames(child).forEach((name) => nodeNames.add(name));\n    }\n  }\n  return nodeNames;\n}\n\n/**\n * Revises a question using the LLM based on user input.\n *\n * @param client The OpenAI client to use.\n * @param authnUserId The authenticated user's ID.\n * @param originalPrompt The prompt creating the original generation.\n * @param revisionPrompt A prompt with user instructions on how to revise the question.\n * @param originalHTML The question.html file to revise.\n * @param originalPython The server.py file to revise.\n * @param remainingAttempts Number of times that regen could be called.\n * @param isAutomated Whether the regeneration was the result of an automated check or a human revision prompt.\n * @param questionQid The qid of the question to edit.\n * @param courseId The ID of the current course.\n * @param userId The ID of the generating/saving user.\n * @param hasCoursePermissionEdit Whether the saving generating/saving has course permission edit privlidges.\n */\nasync function regenInternal({\n  job,\n  client,\n  authnUserId,\n  originalPrompt,\n  revisionPrompt,\n  originalHTML,\n  originalPython,\n  remainingAttempts,\n  isAutomated,\n  questionId,\n  questionQid,\n  courseId,\n  userId,\n  hasCoursePermissionEdit,\n  jobSequenceId,\n}: {\n  job: ServerJob;\n  client: OpenAI;\n  authnUserId: string;\n  originalPrompt: string;\n  revisionPrompt: string;\n  originalHTML: string;\n  originalPython: string | undefined;\n  remainingAttempts: number;\n  isAutomated: boolean;\n  questionId: string;\n  questionQid: string | undefined;\n  courseId: string;\n  userId: string;\n  hasCoursePermissionEdit: boolean;\n  jobSequenceId: string;\n}) {\n  job.info(`prompt is ${revisionPrompt}`);\n\n  let tags: string[] = [];\n  if (originalHTML) {\n    const ast = parse5.parseFragment(originalHTML);\n    tags = Array.from(traverseForTagNames(ast));\n  }\n\n  const context = await makeContext(client, originalPrompt, tags, authnUserId);\n\n  const sysPrompt = `\n${promptPreamble(context)}\n# Previous Generations\n\nA user previously used the assistant to generate a question with following prompt:\n\n${originalPrompt}\n\nYou generated the following:\n\n${\n  originalHTML === undefined\n    ? ''\n    : `\\`\\`\\`html\n${originalHTML}\n\\`\\`\\``\n}\n\n${\n  originalPython === undefined\n    ? ''\n    : `\\`\\`\\`python\n${originalPython}\n\\`\\`\\``\n}\n\n# Prompt\n\nA user will now request your help in in revising the question that you generated. Respond in a friendly but concise way. Include \\`question.html\\` and \\`server.py\\` in Markdown code fences in your response, and tag each code fence with the language (either \\`html\\` or \\`python\\`). Omit \\`server.py\\` if the question does not require it (for instance, if the question does not require randomization).\n\nKeep in mind you are not just generating an example; you are generating an actual question that the user will use directly.\n`;\n\n  job.info(`system prompt is: ${sysPrompt}`);\n\n  // TODO [very important]: normalize to prevent prompt injection attacks\n\n  const completion = await client.chat.completions.create({\n    model: MODEL_NAME,\n    messages: [\n      { role: 'system', content: sysPrompt },\n      { role: 'user', content: revisionPrompt },\n    ],\n    user: openAiUserFromAuthn(authnUserId),\n  });\n\n  const results = extractFromCompletion(completion, job);\n\n  const html = results?.html || originalHTML;\n  const python = results?.python || originalPython;\n\n  let errors: string[] = [];\n\n  if (html && typeof html === 'string') {\n    errors = validateHTML(html, false, !!python);\n  }\n\n  await queryAsync(sql.insert_ai_question_generation_prompt, {\n    question_id: questionId,\n    prompting_user_id: authnUserId,\n    prompt_type: isAutomated ? 'auto_revision' : 'human_revision',\n    user_prompt: revisionPrompt,\n    system_prompt: sysPrompt,\n    response: completion.choices[0].message.content,\n    html,\n    python,\n    errors,\n    completion,\n    job_sequence_id: jobSequenceId,\n  });\n\n  const files: Record<string, string> = {};\n  if (results?.html) {\n    files['question.html'] = b64Util.b64EncodeUnicode(html);\n  }\n\n  if (results?.python && python !== undefined) {\n    files['server.py'] = b64Util.b64EncodeUnicode(python);\n  }\n\n  const courseFilesClient = getCourseFilesClient();\n\n  const result = await courseFilesClient.updateQuestionFiles.mutate({\n    course_id: courseId,\n    user_id: userId,\n    authn_user_id: authnUserId,\n    has_course_permission_edit: hasCoursePermissionEdit,\n    question_id: questionId,\n    files,\n  });\n\n  if (result.status === 'error') {\n    job.fail(`Draft mutation failed (job sequence: ${result.job_sequence_id})`);\n    return;\n  }\n\n  job.data.html = html;\n  job.data.python = python;\n\n  errors.push(...(await checkRender(result.status, errors, courseId, userId, questionId)));\n\n  if (errors.length > 0 && remainingAttempts > 0) {\n    const auto_revisionPrompt = `Please fix the following issues: \\n${errors.join('\\n')}`;\n    await regenInternal({\n      job,\n      client,\n      authnUserId,\n      originalPrompt,\n      revisionPrompt: auto_revisionPrompt,\n      originalHTML: html,\n      originalPython: python,\n      remainingAttempts: remainingAttempts - 1,\n      isAutomated: true,\n      questionId,\n      questionQid,\n      courseId,\n      userId,\n      hasCoursePermissionEdit,\n      jobSequenceId,\n    });\n  }\n}\n\n/**\n * Revises a question using the LLM based on user input.\n *\n * @param client The OpenAI client to use.\n * @param courseId The ID of the current course.\n * @param authnUserId The authenticated user's ID.\n * @param originalPrompt The prompt creating the original generation.\n * @param revisionPrompt A prompt with user instructions on how to revise the question.\n * @param originalHTML The question.html file to revise.\n * @param originalPython The server.py file to revise.\n * @param userId The ID of the generating/saving user.\n * @param hasCoursePermissionEdit Whether the saving generating/saving has course permission edit privileges.\n * @returns A server job ID for the generation task and a promise to return the associated saved data on completion.\n */\nexport async function regenerateQuestion(\n  client: OpenAI,\n  courseId: string,\n  authnUserId: string,\n  originalPrompt: string,\n  revisionPrompt: string,\n  originalHTML: string,\n  originalPython: string,\n  questionQid: string,\n  userId: string,\n  hasCoursePermissionEdit: boolean,\n): Promise<{\n  jobSequenceId: string;\n  htmlResult: string | undefined;\n  pythonResult: string | undefined;\n}> {\n  const serverJob = await createServerJob({\n    courseId,\n    type: 'ai_question_regenerate',\n    description: 'Revise a question using the LLM',\n    authnUserId,\n  });\n\n  const question = await selectQuestionByQid({ qid: questionQid, course_id: courseId });\n\n  const jobData = await serverJob.execute(async (job) => {\n    job.data['questionQid'] = questionQid;\n    await regenInternal({\n      job,\n      client,\n      authnUserId,\n      originalPrompt,\n      revisionPrompt,\n      originalHTML,\n      originalPython,\n      remainingAttempts: NUM_TOTAL_ATTEMPTS,\n      isAutomated: false,\n      questionId: question.id,\n      questionQid,\n      courseId,\n      userId,\n      hasCoursePermissionEdit,\n      jobSequenceId: serverJob.jobSequenceId,\n    });\n  });\n\n  return {\n    jobSequenceId: serverJob.jobSequenceId,\n    htmlResult: jobData.data.html,\n    pythonResult: jobData.data.python,\n  };\n}\n"]}