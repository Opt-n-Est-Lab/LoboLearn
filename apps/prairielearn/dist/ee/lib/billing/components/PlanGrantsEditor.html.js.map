{"version":3,"file":"PlanGrantsEditor.html.js","sourceRoot":"","sources":["../../../../../src/ee/lib/billing/components/PlanGrantsEditor.html.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAE1C,OAAO,EAAkB,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EAAE,KAAK,EAAE,UAAU,EAAiB,MAAM,mBAAmB,CAAC;AACrE,OAAO,EAAoB,MAAM,aAAa,CAAC;AAE/C,MAAM,UAAU,gBAAgB,CAAC,EAC/B,UAAU,EACV,SAAS,EACT,iBAAiB,GAKlB;IACC,OAAO,IAAI,CAAA;;;UAGH,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;QAC5B,IAAI,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACzC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAC9C,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC;QAC3E,MAAM,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC;QACjC,MAAM,aAAa,GAAG,SAAS,EAAE,IAAI,IAAI,OAAO,CAAC;QAEjD,OAAO,IAAI,CAAA;;;;;;+BAMU,QAAQ;oBACnB,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;;6BAEpB,QAAQ;;2EAEsC,QAAQ;oBAC/D,QAAQ;;;oBAGR,YAAY,CAAC,GAAG,CAChB,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAA;;0BAEX,OAAO;;qBAEZ,CACF;;;;;;6BAMU,QAAQ;kBACnB,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI;;wCAEX,aAAa,KAAK,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI;;;yCAG5C,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI;;;0CAG7C,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI;;;uCAGlD,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI;;;WAGxE,CAAC;IACJ,CAAC,CAAC;;wDAE8C,SAAS;;;;;GAK9D,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,EACrC,IAAI,EACJ,YAAY,GAIb;IACC,MAAM,YAAY,GAAkB,EAAE,CAAC;IACvC,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE,CAAC;QAChC,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;QAC3C,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC,CAAC;QACtD,IAAI,WAAW,EAAE,CAAC;YAChB,YAAY,CAAC,IAAI,CAAC;gBAChB,IAAI;gBACJ,SAAS,EAAE,aAAa;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import { html } from '@prairielearn/html';\n\nimport { type PlanGrant } from '../../../../lib/db-types.js';\nimport { PLANS, PLAN_NAMES, type PlanName } from '../plans-types.js';\nimport { type DesiredPlan } from '../plans.js';\n\nexport function PlanGrantsEditor({\n  planGrants,\n  csrfToken,\n  excludedPlanNames,\n}: {\n  planGrants: PlanGrant[];\n  csrfToken: string;\n  excludedPlanNames: PlanName[];\n}) {\n  return html`\n    <form method=\"POST\">\n      <ul class=\"list-group mb-3\">\n        ${PLAN_NAMES.map((planName) => {\n          if (excludedPlanNames.includes(planName)) {\n            return null;\n          }\n\n          const planFeatures = PLANS[planName].features;\n          const planGrant = planGrants.find((grant) => grant.plan_name === planName);\n          const hasPlanGrant = !!planGrant;\n          const planGrantType = planGrant?.type ?? 'trial';\n\n          return html`\n            <li class=\"list-group-item d-flex flex-row align-items-center js-plan\">\n              <div class=\"form-check flex-grow-1\">\n                <input\n                  class=\"form-check-input js-plan-enabled\"\n                  type=\"checkbox\"\n                  name=\"plan_${planName}\"\n                  ${hasPlanGrant ? 'checked' : ''}\n                  value=\"1\"\n                  id=\"plan_${planName}\"\n                />\n                <label class=\"form-check-label font-monospace\" for=\"plan_${planName}\">\n                  ${planName}\n                </label>\n                <div>\n                  ${planFeatures.map(\n                    (feature) => html`\n                      <span class=\"badge rounded-pill text-bg-secondary font-monospace me-1\">\n                        ${feature}\n                      </span>\n                    `,\n                  )}\n                </div>\n              </div>\n\n              <select\n                class=\"form-select w-auto js-plan-type\"\n                name=\"plan_${planName}_grant_type\"\n                ${!hasPlanGrant ? 'disabled' : null}\n              >\n                <option value=\"trial\" ${planGrantType === 'trial' ? 'selected' : null}>\n                  trial\n                </option>\n                <option value=\"stripe\" ${planGrantType === 'stripe' ? 'selected' : null}>\n                  stripe\n                </option>\n                <option value=\"invoice\" ${planGrantType === 'invoice' ? 'selected' : null}>\n                  invoice\n                </option>\n                <option value=\"gift\" ${planGrantType === 'gift' ? 'selected' : null}>gift</option>\n              </select>\n            </li>\n          `;\n        })}\n      </ul>\n      <input type=\"hidden\" name=\"__csrf_token\" value=\"${csrfToken}\" />\n      <button type=\"submit\" name=\"__action\" value=\"update_plans\" class=\"btn btn-primary\">\n        Save\n      </button>\n    </form>\n  `;\n}\n\nexport function parseDesiredPlanGrants({\n  body,\n  allowedPlans,\n}: {\n  body: any;\n  allowedPlans: PlanName[];\n}) {\n  const desiredPlans: DesiredPlan[] = [];\n  for (const plan of allowedPlans) {\n    const planGranted = !!body[`plan_${plan}`];\n    const planGrantType = body[`plan_${plan}_grant_type`];\n    if (planGranted) {\n      desiredPlans.push({\n        plan,\n        grantType: planGrantType,\n      });\n    }\n  }\n  return desiredPlans;\n}\n"]}