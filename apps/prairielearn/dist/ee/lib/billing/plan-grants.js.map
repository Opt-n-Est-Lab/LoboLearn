{"version":3,"file":"plan-grants.js","sourceRoot":"","sources":["../../../../src/ee/lib/billing/plan-grants.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Response } from 'express';\n\nimport {\n  type CourseInstance,\n  CourseInstanceSchema,\n  type Institution,\n  InstitutionSchema,\n  QuestionSchema,\n  UserSchema,\n} from '../../../lib/db-types.js';\nimport { features } from '../../../lib/features/index.js';\nimport {\n  getPlanGrantsForPartialContexts,\n  getPlanNamesFromPlanGrants,\n  getRequiredPlansForCourseInstance,\n  planGrantsMatchFeatures,\n} from '../../lib/billing/plans.js';\n\nimport { type PlanFeatureName, planGrantsMatchPlanFeatures } from './plans-types.js';\n\ntype ResLocals = Record<string, any>;\n\nfunction userHasRole(authz_data: any) {\n  // We won't check plan grants if the user has a specific role in the course\n  // or course instance. We always grant instructor-like users access to all\n  // features.\n  //\n  // This function should always be run after the `authzCourseOrInstance`\n  // middleware, which will have taken into account the effective user\n  // and any overridden roles.\n  return authz_data.course_role !== 'None' || authz_data.course_instance_role !== 'None';\n}\n\nexport async function checkPlanGrantsForLocals(locals: ResLocals) {\n  const institution = InstitutionSchema.parse(locals.institution);\n  const course_instance = CourseInstanceSchema.parse(locals.course_instance);\n\n  return await checkPlanGrants({\n    institution,\n    course_instance,\n    authz_data: locals.authz_data,\n  });\n}\n\nexport async function checkPlanGrants({\n  institution,\n  course_instance,\n  authz_data,\n}: {\n  institution: Institution;\n  course_instance: CourseInstance;\n  authz_data: any;\n}): Promise<boolean> {\n  if (userHasRole(authz_data)) {\n    return true;\n  }\n\n  const requiredPlans = await getRequiredPlansForCourseInstance(course_instance.id);\n\n  if (requiredPlans.length === 0) {\n    // If there aren't any required plans, no need to check plan grants!\n    return true;\n  }\n\n  // We use `getPlanGrantsForContextRecursive` to get all plan grants that apply\n  // to the institution, *or* the course instance, *or* a user within a course instance,\n  // *or* the user directly.\n  const planGrants = await getPlanGrantsForPartialContexts({\n    institution_id: institution.id,\n    course_instance_id: course_instance.id,\n    user_id: authz_data.user.user_id,\n  });\n  const planGrantNames = getPlanNamesFromPlanGrants(planGrants);\n\n  return planGrantsMatchPlanFeatures(planGrantNames, requiredPlans);\n}\n\nexport async function checkPlanGrantsForQuestion(res: Response) {\n  if (userHasRole(res)) {\n    return true;\n  }\n\n  const question = QuestionSchema.parse(res.locals.question);\n  const requiredFeatures: PlanFeatureName[] = [];\n  if (question.external_grading_enabled) {\n    requiredFeatures.push('external-grading');\n  }\n  if (question.workspace_image) {\n    requiredFeatures.push('workspaces');\n  }\n\n  // If there aren't any features to check, don't even bother hitting the database.\n  if (requiredFeatures.length === 0) {\n    return true;\n  }\n\n  // For the time being, put this behind a feature flag so that we can land\n  // this change before we've created plan grants for all existing institutions.\n  const shouldCheck = await features.enabledFromLocals(\n    'enforce-plan-grants-for-questions',\n    res.locals,\n  );\n  if (!shouldCheck) {\n    return true;\n  }\n\n  const institution = InstitutionSchema.parse(res.locals.institution);\n  const course_instance = CourseInstanceSchema.parse(res.locals.course_instance);\n  const user = UserSchema.parse(res.locals.user);\n\n  const planGrants = await getPlanGrantsForPartialContexts({\n    institution_id: institution.id,\n    course_instance_id: course_instance.id,\n    user_id: user.user_id,\n  });\n\n  return planGrantsMatchFeatures(planGrants, requiredFeatures);\n}\n"]}