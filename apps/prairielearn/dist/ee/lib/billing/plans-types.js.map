{"version":3,"file":"plans-types.js","sourceRoot":"","sources":["../../../../src/ee/lib/billing/plans-types.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,kBAAkB,GAAG;IAChC,wBAAwB;IACxB,kBAAkB;IAClB,YAAY;CACJ,CAAC;AACX,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,YAAY,CAAU,CAAC;AAUtE,MAAM,CAAC,MAAM,KAAK,GAAG;IACnB,iFAAiF;IACjF,KAAK,EAAE;QACL,QAAQ,EAAE,CAAC,wBAAwB,CAAC;KACrC;IACD,2EAA2E;IAC3E,2EAA2E;IAC3E,6EAA6E;IAC7E,yEAAyE;IACzE,OAAO,EAAE;QACP,QAAQ,EAAE,CAAC,YAAY,EAAE,kBAAkB,CAAC;KAC7C;IACD,2BAA2B;IAC3B,UAAU,EAAE;QACV,QAAQ,EAAE,CAAC,YAAY,EAAE,kBAAkB,CAAC;KAC7C;CAC+B,CAAC;AAEnC,MAAM,UAAU,mBAAmB,CAAC,KAAiB;IACnD,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAmB,CAAC;IAC5C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACnE,CAAC;IACD,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,YAAwB,EAAE,KAAiB;IACrF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAC7D,MAAM,YAAY,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAChD,OAAO,CACL,kBAAkB,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM;QACjD,kBAAkB,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CACtE,CAAC;AACJ,CAAC","sourcesContent":["export const PLAN_FEATURE_NAMES = [\n  'course-instance-access',\n  'external-grading',\n  'workspaces',\n] as const;\nexport const PLAN_NAMES = ['basic', 'compute', 'everything'] as const;\n\nexport type PlanFeatureName = (typeof PLAN_FEATURE_NAMES)[number];\nexport type PlanName = (typeof PLAN_NAMES)[number];\n\ninterface Plan {\n  features: PlanFeatureName[];\n  initialEnrollmentLimit?: number;\n}\n\nexport const PLANS = {\n  // Enabled when student billing for enrollments is enabled for a course instance.\n  basic: {\n    features: ['course-instance-access'],\n  },\n  // Enables workspaces and external grading. Can be used in combination with\n  // the `basic` plan (for a course using student billing for enrollments) or\n  // in isolation (a course instance's institution is paying for the basic plan\n  // but the course instance wants to use workspaces and external grading).\n  compute: {\n    features: ['workspaces', 'external-grading'],\n  },\n  // All features that exist.\n  everything: {\n    features: ['workspaces', 'external-grading'],\n  },\n} satisfies Record<PlanName, Plan>;\n\nexport function getFeaturesForPlans(plans: PlanName[]): PlanFeatureName[] {\n  const features = new Set<PlanFeatureName>();\n  for (const plan of plans) {\n    PLANS[plan].features.forEach((feature) => features.add(feature));\n  }\n  return Array.from(features);\n}\n\nexport function planGrantsMatchPlanFeatures(grantedPlans: PlanName[], plans: PlanName[]): boolean {\n  const planGrantsFeatures = getFeaturesForPlans(grantedPlans);\n  const planFeatures = getFeaturesForPlans(plans);\n  return (\n    planGrantsFeatures.length === planFeatures.length &&\n    planGrantsFeatures.every((feature) => planFeatures.includes(feature))\n  );\n}\n"]}