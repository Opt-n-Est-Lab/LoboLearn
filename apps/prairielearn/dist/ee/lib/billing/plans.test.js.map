{"version":3,"file":"plans.test.js","sourceRoot":"","sources":["../../../../src/ee/lib/billing/plans.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport * as helperDb from '../../../tests/helperDb.js';\nimport * as helperServer from '../../../tests/helperServer.js';\nimport { ensurePlanGrant } from '../../models/plan-grants.js';\n\nimport {\n  getPlanGrantsForContext,\n  getPlanGrantsForCourseInstance,\n  getPlanGrantsForPartialContexts,\n  getPlanNamesFromPlanGrants,\n  getRequiredPlansForCourseInstance,\n  reconcilePlanGrantsForCourseInstance,\n  reconcilePlanGrantsForInstitution,\n  updateRequiredPlansForCourseInstance,\n} from './plans.js';\n\ndescribe('plans', () => {\n  before(helperServer.before());\n  after(helperServer.after);\n\n  describe('reconcilePlanGrantsForInstitution', () => {\n    it('persists updates', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await reconcilePlanGrantsForInstitution(\n          '1',\n          [{ plan: 'compute', grantType: 'invoice' }],\n          '1',\n        );\n        let planGrants = await getPlanGrantsForContext({ institution_id: '1' });\n        assert.isOk(planGrants.find((pg) => pg.plan_name === 'compute' && pg.type === 'invoice'));\n\n        await reconcilePlanGrantsForInstitution('1', [{ plan: 'compute', grantType: 'gift' }], '1');\n        planGrants = await getPlanGrantsForContext({ institution_id: '1' });\n        assert.isOk(planGrants.find((pg) => pg.plan_name === 'compute' && pg.type === 'gift'));\n\n        await reconcilePlanGrantsForInstitution('1', [], '1');\n        planGrants = await getPlanGrantsForContext({ institution_id: '1' });\n        assert.sameDeepMembers(planGrants, []);\n      });\n    });\n  });\n\n  describe('reconcilePlanGrantsForCourseInstance', () => {\n    it('persists updates', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await reconcilePlanGrantsForCourseInstance(\n          '1',\n          [{ plan: 'compute', grantType: 'invoice' }],\n          '1',\n        );\n        let planGrants = await getPlanGrantsForCourseInstance({\n          institution_id: '1',\n          course_instance_id: '1',\n        });\n        assert.isOk(planGrants.find((pg) => pg.plan_name === 'compute' && pg.type === 'invoice'));\n\n        await reconcilePlanGrantsForCourseInstance(\n          '1',\n          [{ plan: 'compute', grantType: 'gift' }],\n          '1',\n        );\n        planGrants = await getPlanGrantsForCourseInstance({\n          institution_id: '1',\n          course_instance_id: '1',\n        });\n        assert.isOk(planGrants.find((pg) => pg.plan_name === 'compute' && pg.type === 'gift'));\n\n        await reconcilePlanGrantsForCourseInstance('1', [], '1');\n        planGrants = await getPlanGrantsForCourseInstance({\n          institution_id: '1',\n          course_instance_id: '1',\n        });\n        assert.sameDeepMembers(planGrants, []);\n      });\n    });\n\n    it('does not modify institution plan grants', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        // Manually insert an institution plan grant.\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'everything',\n            type: 'gift',\n            institution_id: '1',\n          },\n          authn_user_id: '1',\n        });\n\n        await reconcilePlanGrantsForCourseInstance(\n          '1',\n          [{ plan: 'compute', grantType: 'invoice' }],\n          '1',\n        );\n\n        const institutionPlanGrants = await getPlanGrantsForContext({ institution_id: '1' });\n        assert.lengthOf(institutionPlanGrants, 1);\n        assert.equal(institutionPlanGrants[0].plan_name, 'everything');\n      });\n    });\n  });\n\n  describe('updateRequiredPlansForCourseInstance', () => {\n    it('persists updates', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await updateRequiredPlansForCourseInstance('1', ['compute'], '1');\n        let requiredPlans = await getRequiredPlansForCourseInstance('1');\n        assert.sameDeepMembers(requiredPlans, ['compute']);\n\n        await updateRequiredPlansForCourseInstance('1', [], '1');\n        requiredPlans = await getRequiredPlansForCourseInstance('1');\n        assert.sameDeepMembers(requiredPlans, []);\n      });\n    });\n  });\n\n  describe('getPlanGrantsForCourseInstance', () => {\n    it('only returns plan grants directly associated with the course instance', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        // Institution plan grant\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'everything',\n            type: 'gift',\n            institution_id: '1',\n          },\n          authn_user_id: '1',\n        });\n\n        // Course instance plan grant\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'compute',\n            type: 'invoice',\n            institution_id: '1',\n            course_instance_id: '1',\n          },\n          authn_user_id: '1',\n        });\n\n        // Course instance user plan grant\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'basic',\n            type: 'stripe',\n            institution_id: '1',\n            course_instance_id: '1',\n            user_id: '1',\n          },\n          authn_user_id: '1',\n        });\n\n        const planGrants = await getPlanGrantsForCourseInstance({\n          institution_id: '1',\n          course_instance_id: '1',\n        });\n        assert.lengthOf(planGrants, 1);\n        assert.equal(planGrants[0].plan_name, 'compute');\n      });\n    });\n  });\n\n  describe('getPlanGrantsForContext', () => {\n    it('returns institution plan grants', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'compute',\n            type: 'invoice',\n            institution_id: '1',\n          },\n          authn_user_id: '1',\n        });\n\n        const planGrants = await getPlanGrantsForContext({ institution_id: '1' });\n        const grantedPlans = getPlanNamesFromPlanGrants(planGrants);\n        assert.sameDeepMembers(grantedPlans, ['compute']);\n\n        const allPlanGrants = await getPlanGrantsForPartialContexts({ institution_id: '1' });\n        const recursiveGrantedPlans = getPlanNamesFromPlanGrants(allPlanGrants);\n        assert.sameDeepMembers(recursiveGrantedPlans, ['compute']);\n      });\n    });\n\n    it('returns course instance plan grants', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'basic',\n            type: 'invoice',\n            institution_id: '1',\n          },\n          authn_user_id: '1',\n        });\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'compute',\n            type: 'gift',\n            institution_id: '1',\n            course_instance_id: '1',\n          },\n          authn_user_id: '1',\n        });\n\n        const planGrants = await getPlanGrantsForContext({\n          institution_id: '1',\n          course_instance_id: '1',\n        });\n        const grantedPlans = getPlanNamesFromPlanGrants(planGrants);\n        assert.sameDeepMembers(grantedPlans, ['compute']);\n\n        const allPlanGrants = await getPlanGrantsForPartialContexts({\n          institution_id: '1',\n          course_instance_id: '1',\n        });\n        const recursiveGrantedPlans = getPlanNamesFromPlanGrants(allPlanGrants);\n        assert.sameDeepMembers(recursiveGrantedPlans, ['basic', 'compute']);\n      });\n    });\n\n    it('returns course instance user plan grants', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'basic',\n            type: 'invoice',\n            institution_id: '1',\n          },\n          authn_user_id: '1',\n        });\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'compute',\n            type: 'gift',\n            institution_id: '1',\n            course_instance_id: '1',\n          },\n          authn_user_id: '1',\n        });\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: 'everything',\n            type: 'stripe',\n            institution_id: '1',\n            course_instance_id: '1',\n            user_id: '1',\n          },\n          authn_user_id: '1',\n        });\n\n        const planGrants = await getPlanGrantsForContext({\n          institution_id: '1',\n          course_instance_id: '1',\n          user_id: '1',\n        });\n        const grantedPlans = getPlanNamesFromPlanGrants(planGrants);\n        assert.sameDeepMembers(grantedPlans, ['everything']);\n\n        const allPlanGrants = await getPlanGrantsForPartialContexts({\n          institution_id: '1',\n          course_instance_id: '1',\n          user_id: '1',\n        });\n        const recursiveGrantedPlans = getPlanNamesFromPlanGrants(allPlanGrants);\n        assert.sameDeepMembers(recursiveGrantedPlans, ['basic', 'compute', 'everything']);\n      });\n    });\n  });\n});\n"]}