{"version":3,"file":"purchases.js","sourceRoot":"","sources":["../../../../src/ee/lib/billing/purchases.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEjE,OAAO,EACL,oBAAoB,EACpB,YAAY,EACZ,2BAA2B,GAC5B,MAAM,0BAA0B,CAAC;AAElC,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C;;;;GAIG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC;IACrC,uBAAuB,EAAE,2BAA2B;IACpD,eAAe,EAAE,oBAAoB,CAAC,QAAQ,EAAE;IAChD,MAAM,EAAE,YAAY,CAAC,QAAQ,EAAE;CAChC,CAAC,CAAC;AAGH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,OAAe;IACvD,mCAAmC;IACnC,MAAM,YAAY,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,EAAE,cAAc,CAAC,CAAC;IAExF,uEAAuE;IACvE,sEAAsE;IACtE,wEAAwE;IACxE,+BAA+B;IAC/B,EAAE;IACF,0EAA0E;IAC1E,0EAA0E;IAC1E,MAAM,kBAAkB,GAAG,YAAY,CAAC,MAAM,CAC5C,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,KAAK,UAAU,CAC1E,CAAC;IAEF,OAAO,kBAAkB,CAAC;AAC5B,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { loadSqlEquiv, queryRows } from '@prairielearn/postgres';\n\nimport {\n  CourseInstanceSchema,\n  CourseSchema,\n  StripeCheckoutSessionSchema,\n} from '../../../lib/db-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\n/**\n * A `Purchase` contains a Stripe checkout session and possible the course and\n * course instance that the purchase is associated with. This is used to display\n * information about purchases on the user settings page.\n */\nexport const PurchaseSchema = z.object({\n  stripe_checkout_session: StripeCheckoutSessionSchema,\n  course_instance: CourseInstanceSchema.nullable(),\n  course: CourseSchema.nullable(),\n});\nexport type Purchase = z.infer<typeof PurchaseSchema>;\n\nexport async function getPurchasesForUser(user_id: string) {\n  // Get all purchases for this user.\n  const allPurchases = await queryRows(sql.select_purchases, { user_id }, PurchaseSchema);\n\n  // Only show completed checkout Sessions. If the user clicks through to\n  // Stripe but never actually fills in their payment info and completes\n  // the checkout, we'll still have a session in the database but we don't\n  // want to show it to the user.\n  //\n  // Note that the status we check for here is independent of if the payment\n  // has actually come through; that's stored in the `payment_status` field.\n  const completedPurchases = allPurchases.filter(\n    (purchase) => purchase.stripe_checkout_session.data.status === 'complete',\n  );\n\n  return completedPurchases;\n}\n"]}