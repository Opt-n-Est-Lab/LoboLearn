{"version":3,"file":"institution.js","sourceRoot":"","sources":["../../../src/ee/lib/institution.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAE7F,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAEL,mBAAmB,EAEnB,iBAAiB,EAEjB,kBAAkB,GACnB,MAAM,uBAAuB,CAAC;AAE/B,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,cAAsB;IACzD,OAAO,MAAM,QAAQ,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE,EAAE,iBAAiB,CAAC,CAAC;AAC3F,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,cAAsB;IAEtB,OAAO,MAAM,gBAAgB,CAC3B,GAAG,CAAC,gCAAgC,EACpC,EAAE,cAAc,EAAE,EAClB,kBAAkB,CACnB,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qCAAqC,CACzD,cAAsB;IAEtB,OAAO,MAAM,SAAS,CACpB,GAAG,CAAC,kCAAkC,EACtC,EAAE,cAAc,EAAE,EAClB,mBAAmB,CACpB,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mCAAmC;IACvD,MAAM,aAAa,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,+BAA+B,EAAE,mBAAmB,CAAC,CAAC;IAChG,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;QAClC,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;YAC9B,OAAO,MAAM,CAAC,OAAO,CAAC;QACxB,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC1B,OAAO,MAAM,CAAC,QAAQ,CAAC;QACzB,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACzB,OAAO,MAAM,CAAC,QAAQ,CAAC;QACzB,CAAC;QAED,2CAA2C;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { loadSqlEquiv, queryOptionalRow, queryRow, queryRows } from '@prairielearn/postgres';\n\nimport { config } from '../../lib/config.js';\nimport {\n  type AuthnProvider,\n  AuthnProviderSchema,\n  type Institution,\n  InstitutionSchema,\n  type SamlProvider,\n  SamlProviderSchema,\n} from '../../lib/db-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function getInstitution(institution_id: string): Promise<Institution> {\n  return await queryRow(sql.select_institution, { id: institution_id }, InstitutionSchema);\n}\n\nexport async function getInstitutionSamlProvider(\n  institution_id: string,\n): Promise<SamlProvider | null> {\n  return await queryOptionalRow(\n    sql.select_institution_saml_provider,\n    { institution_id },\n    SamlProviderSchema,\n  );\n}\n\nexport async function getInstitutionAuthenticationProviders(\n  institution_id: string,\n): Promise<AuthnProvider[]> {\n  return await queryRows(\n    sql.select_institution_authn_providers,\n    { institution_id },\n    AuthnProviderSchema,\n  );\n}\n\nexport async function getSupportedAuthenticationProviders(): Promise<AuthnProvider[]> {\n  const authProviders = await queryRows(sql.select_authentication_providers, AuthnProviderSchema);\n  return authProviders.filter((row) => {\n    if (row.name === 'Shibboleth') {\n      return config.hasShib;\n    }\n    if (row.name === 'Google') {\n      return config.hasOauth;\n    }\n    if (row.name === 'Azure') {\n      return config.hasAzure;\n    }\n\n    // Default to true for all other providers.\n    return true;\n  });\n}\n"]}