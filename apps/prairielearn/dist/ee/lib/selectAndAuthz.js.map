{"version":3,"file":"selectAndAuthz.js","sourceRoot":"","sources":["../../../src/ee/lib/selectAndAuthz.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAExE,OAAO,EAAE,mBAAmB,EAAoB,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAEjG,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,gCAAgC,CAAC,EACrD,cAAc,EACd,OAAO,EACP,uBAAuB,GAKxB;IACC,MAAM,MAAM,GAAG,MAAM,gBAAgB,CACnC,GAAG,CAAC,2BAA2B,EAC/B,EAAE,cAAc,EAAE,OAAO,EAAE,EAC3B,CAAC,CAAC,MAAM,CAAC;QACP,WAAW,EAAE,iBAAiB;QAC9B,aAAa,EAAE,mBAAmB,CAAC,QAAQ,EAAE;QAC7C,yBAAyB,EAAE,mBAAmB,CAAC,QAAQ,EAAE;KAC1D,CAAC,CACH,CAAC;IAEF,IACE,MAAM;QACN,CAAC,MAAM,CAAC,yBAAyB,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,uBAAuB,CAAC,CAAC,EACvF,CAAC;QACD,OAAO,MAAM,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { loadSqlEquiv, queryOptionalRow } from '@prairielearn/postgres';\n\nimport { AdministratorSchema, type Institution, InstitutionSchema } from '../../lib/db-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function selectAndAuthzInstitutionAsAdmin({\n  institution_id,\n  user_id,\n  access_as_administrator,\n}: {\n  institution_id: string;\n  user_id: string;\n  access_as_administrator: boolean;\n}): Promise<Institution> {\n  const result = await queryOptionalRow(\n    sql.select_institution_as_admin,\n    { institution_id, user_id },\n    z.object({\n      institution: InstitutionSchema,\n      administrator: AdministratorSchema.nullable(),\n      institution_administrator: AdministratorSchema.nullable(),\n    }),\n  );\n\n  if (\n    result &&\n    (result.institution_administrator || (result.administrator && access_as_administrator))\n  ) {\n    return result.institution;\n  }\n\n  throw new HttpStatusError(403, 'Not authorized');\n}\n"]}