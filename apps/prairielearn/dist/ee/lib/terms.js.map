{"version":3,"file":"terms.js","sourceRoot":"","sources":["../../../src/ee/lib/terms.ts"],"names":[],"mappings":"AAAA,OAAO,EAAiB,MAAM,SAAS,CAAC;AAExC,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAa,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAErD,SAAS,oBAAoB,CAAC,IAAU;IACtC,2EAA2E;IAC3E,6EAA6E;IAC7E,wEAAwE;IACxE,4EAA4E;IAC5E,OAAO,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC;AACzC,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAAC,IAAU,EAAE,EAAU;IACpE,IAAI,CAAC,MAAM,CAAC,sBAAsB,IAAI,oBAAoB,CAAC,IAAI,CAAC;QAAE,OAAO,KAAK,CAAC;IAE/E,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,CAAC;QAC9B,EAAE;QACF,IAAI,EAAE,IAAI,IAAI,EAAE;QAChB,aAAa,EAAE,IAAI,CAAC,OAAO;KAC5B,CAAC,CAAC;IACH,OAAO,IAAI,KAAK,QAAQ,CAAC;AAC3B,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,mBAAmB,CAAC,GAAa,EAAE,WAAoB;IACrE,IAAI,WAAW,EAAE,CAAC;QAChB,SAAS,CAAC,GAAG,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,WAAW,EAAE;YACrE,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE;SACvB,CAAC,CAAC;IACL,CAAC;IACD,MAAM,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC;AACtC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAC/C,GAAa,EACb,IAAU,EACV,EAAU,EACV,WAAoB;IAEpB,IAAI,MAAM,yBAAyB,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC;QAC9C,mBAAmB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACxC,CAAC;AACH,CAAC","sourcesContent":["import { type Response } from 'express';\n\nimport { config } from '../../lib/config.js';\nimport { setCookie } from '../../lib/cookie.js';\nimport { type User } from '../../lib/db-types.js';\nimport { ipToMode } from '../../lib/exam-mode.js';\nimport { HttpRedirect } from '../../lib/redirect.js';\n\nfunction hasUserAcceptedTerms(user: User): boolean {\n  // At the moment, we only have one revision of our terms and conditions, so\n  // all we care about is whether the user has accepted the terms at any point.\n  // In the future, if we add revisions, we could change this to check for\n  // acceptance after the date that the most recent revision went into effect.\n  return user.terms_accepted_at !== null;\n}\n\n/**\n * Determines whether the user should be redirected to the terms acceptance page.\n * This is the case if the user has not yet accepted the terms and the user is\n * accessing the site in Public mode. We want to avoid prompting for terms\n * acceptance if the user is accessing the site in Exam mode, since they may not\n * have time to read the terms or accept them before the exam starts, or the network\n * may not even allow them to access the terms pages.\n *\n * @param user The user to check\n * @param ip The IP address of the request\n * @returns Whether the user should be redirected to the terms acceptance page\n */\nexport async function shouldRedirectToTermsPage(user: User, ip: string) {\n  if (!config.requireTermsAcceptance || hasUserAcceptedTerms(user)) return false;\n\n  const { mode } = await ipToMode({\n    ip,\n    date: new Date(),\n    authn_user_id: user.user_id,\n  });\n  return mode === 'Public';\n}\n\n/**\n * Redirects the response to the terms acceptance page. If a `redirectUrl` is\n * provided, the original URL will be stored in a cookie and the user will be\n * redirected to the terms page. After accepting the terms, the user will be\n * redirected back to the original URL.\n */\nexport function redirectToTermsPage(res: Response, redirectUrl?: string): void {\n  if (redirectUrl) {\n    setCookie(res, ['pl_pre_terms_url', 'pl2_pre_terms_url'], redirectUrl, {\n      maxAge: 1000 * 60 * 60,\n    });\n  }\n  throw new HttpRedirect('/pl/terms');\n}\n\nexport async function redirectToTermsPageIfNeeded(\n  res: Response,\n  user: User,\n  ip: string,\n  redirectUrl?: string,\n): Promise<void> {\n  if (await shouldRedirectToTermsPage(user, ip)) {\n    redirectToTermsPage(res, redirectUrl);\n  }\n}\n"]}