{"version":3,"file":"validateHTML.js","sourceRoot":"","sources":["../../../src/ee/lib/validateHTML.ts"],"names":[],"mappings":"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","sourcesContent":["import * as parse5 from 'parse5';\n\ntype DocumentFragment = parse5.DefaultTreeAdapterMap['documentFragment'];\ntype ChildNode = parse5.DefaultTreeAdapterMap['childNode'];\n\nconst mustacheTemplateRegex = /^\\{\\{.*\\}\\}$/;\nconst mustacheTemplateExtractorRegex = /\\{\\{((?:[^}]|\\}[^}])*)\\}\\}/g;\n\ninterface ValidationResult {\n  /** Array of errors that we'll instruct the LLM to fix. */\n  errors: string[];\n  /**\n   * Contains a set of correct answers that must be generated by `server.py`.\n   * These are expected to be set in `params[\"correct_answers\"]`. Typically,\n   * this corresponds to an `answers-name` attribute.\n   *\n   * Should be set even if there are other errors.\n   */\n  mandatoryPythonCorrectAnswers?: Set<string>;\n}\n\n/**\n * Checks that the required attribute is an int (or mustache template) or adds an error to the provided list.\n * @param tag The name of the tag being checked.\n * @param key The attribute name.\n * @param val The attribute value.\n * @param errors The list of errors to add to.\n */\nfunction assertInt(tag: string, key: string, val: string, errors: string[]) {\n  if (!(/^\\d+$/.test(val) || mustacheTemplateRegex.test(val))) {\n    errors.push(\n      `${tag}: value for attribute ${key} must be an integer, but value provided is \"${val}\"`,\n    );\n  }\n}\n\n/**\n * Checks that the required attribute is an float (or mustache template) or adds an error to the provided list.\n * @param tag The name of the tag being checked.\n * @param key The attribute name.\n * @param val The attribute value.\n * @param errors The list of errors to add to.\n */\nfunction assertFloat(tag: string, key: string, val: string, errors: string[]) {\n  if (!(/^(\\d+)\\.?(\\d*)(e-\\d+)?$/.test(val) || mustacheTemplateRegex.test(val))) {\n    errors.push(\n      `${tag}: value for attribute ${key} must be an floating-point number, but value provided is \"${val}\"`,\n    );\n  }\n}\n\n/**\n * Checks that the required attribute is in a list of possibilities (or mustache template) or adds an error to the provided list.\n * @param tag The name of the tag being checked.\n * @param key The attribute name.\n * @param val The attribute value.\n * @param choices The list of potential choices for the attribute.\n * @param errors The list of errors to add to.\n */\nfunction assertInChoices(\n  tag: string,\n  key: string,\n  val: string,\n  choices: string[],\n  errors: string[],\n) {\n  if (!(choices.includes(val) || mustacheTemplateRegex.test(val))) {\n    errors.push(\n      `${tag}: value for attribute ${key} must be in ${choices}, but value provided is ${val}`,\n    );\n  }\n}\n\n/**\n * Checks that the required attribute is a boolean (or mustache template) or adds an error to the provided list.\n * @param tag The name of the tag being checked.\n * @param key The attribute name.\n * @param val The attribute value.\n * @param choices The list of potential choices for the attribute.\n * @param errors The list of errors to add to.\n */\nfunction assertBool(tag: string, key: string, val: string, errors: string[]) {\n  assertInChoices(\n    tag,\n    key,\n    val,\n    [\n      'true',\n      't',\n      '1',\n      'True',\n      'T',\n      'TRUE',\n      'yes',\n      'y',\n      'Yes',\n      'Y',\n      'YES',\n      'false',\n      'f',\n      '0',\n      'False',\n      'F',\n      'FALSE',\n      'no',\n      'n',\n      'No',\n      'N',\n      'NO',\n    ],\n    errors,\n  );\n}\n\n/**\n * Checks that a tag has valid attributes.\n * @param ast The tree to consider, rooted at the tag.\n * @param optimistic True if tags outside the subset are allowed, else false.\n * @returns The list of errors for the tag, if any.\n */\nfunction checkTag(ast: DocumentFragment | ChildNode, optimistic: boolean): ValidationResult {\n  if ('tagName' in ast) {\n    switch (ast.tagName) {\n      case 'pl-multiple-choice':\n        return checkMultipleChoice(ast);\n      case 'pl-integer-input':\n        return checkIntegerInput(ast);\n      case 'pl-number-input':\n        return checkNumericalInput(ast);\n      case 'pl-string-input':\n        return checkStringInput(ast);\n      case 'pl-checkbox':\n        return checkCheckbox(ast);\n      case 'pl-question-panel':\n        return { errors: [] };\n      case 'pl-answer':\n        return { errors: [] }; // covered elsewhere\n      default:\n        if (ast.tagName && ast.tagName.substring(0, 3) === 'pl-' && !optimistic) {\n          return {\n            errors: [\n              `${ast.tagName} is not a valid tag. Please use tags from the following: \\`pl-question-panel\\`, \\`pl-multiple-choice\\`, \\`pl-checkbox\\`, \\`pl-integer-input\\`, \\`pl-number-input\\`,\\`pl-string-input\\``,\n            ],\n          };\n        }\n    }\n  }\n  return { errors: [] };\n}\n\n/**\n * Checks that a `pl-multiple-choice` element has valid attributes.\n * @param ast The tree to consider, rooted at the tag.\n * @returns The list of errors for the tag, if any.\n */\nfunction checkMultipleChoice(ast: DocumentFragment | ChildNode): ValidationResult {\n  const errors: string[] = [];\n  let usedAnswersName = false;\n  let displayDropdown = false;\n  let usedAllOfTheAbove = false;\n  let usedNoneOfTheAbove = false;\n  let usedAllOfTheAboveFeedback = false;\n  let usedNoneOfTheAboveFeedback = false;\n  let usedSize = false;\n  const optionsOfTheAbove = ['false', 'random', 'correct', 'incorrect'];\n  if ('attrs' in ast) {\n    for (const attr of ast.attrs) {\n      const key = attr.name;\n      const val = attr.value;\n      switch (key) {\n        case 'answers-name':\n          usedAnswersName = true;\n          break;\n        case 'weight':\n          assertInt('pl-multiple-choice', key, val, errors);\n          break;\n        case 'display':\n          assertInChoices('pl-multiple-choice', key, val, ['block', 'inline', 'dropdown'], errors);\n          if (val === 'dropdown') {\n            displayDropdown = true;\n          }\n          break;\n        case 'number-answers':\n          assertInt('pl-multiple-choice', key, val, errors);\n          break;\n        case 'order':\n          assertInChoices(\n            'pl-multiple-choice',\n            key,\n            val,\n            ['random', 'ascend', 'descend', 'fixed'],\n            errors,\n          );\n          break;\n        case 'hide-letter-keys':\n          assertBool('pl-multiple-choice', key, val, errors);\n          break;\n        case 'all-of-the-above':\n          assertInChoices('pl-multiple-choice', key, val, optionsOfTheAbove, errors);\n          if (optionsOfTheAbove.includes(val) && val !== 'false') {\n            usedAllOfTheAbove = true;\n          }\n          break;\n        case 'none-of-the-above':\n          assertInChoices('pl-multiple-choice', key, val, optionsOfTheAbove, errors);\n          if (optionsOfTheAbove.includes(val) && val !== 'false') {\n            usedNoneOfTheAbove = true;\n          }\n          break;\n        case 'all-of-the-above-feedback':\n          usedAllOfTheAboveFeedback = true;\n          break;\n        case 'none-of-the-above-feedback':\n          usedNoneOfTheAboveFeedback = true;\n          break;\n        case 'allow-blank':\n          assertBool('pl-multiple-choice', key, val, errors);\n          break;\n        case 'size':\n          usedSize = true;\n          assertInt('pl-multiple-choice', key, val, errors);\n          break;\n        default:\n          errors.push(`pl-multiple-choice: ${key} is not a valid attribute.`);\n      }\n    }\n  }\n  if (!usedAnswersName) {\n    errors.push('pl-multiple-choice: answers-name is a required attribute.');\n  }\n  if (!usedAllOfTheAbove && usedAllOfTheAboveFeedback) {\n    errors.push(\n      'pl-multiple-choice: if using all-of-the-above-feedback, you must also use all-of-the-above.',\n    );\n  }\n  if (!usedNoneOfTheAbove && usedNoneOfTheAboveFeedback) {\n    errors.push(\n      'pl-multiple-choice: if using none-of-the-above-feedback, you must also use none-of-the-above.',\n    );\n  }\n  if (!displayDropdown && usedSize) {\n    errors.push('pl-multiple-choice: if using size, you must also use set display to \"dropdown\".');\n  }\n\n  let errorsChildren: string[] = [];\n  if ('childNodes' in ast) {\n    for (const child of ast.childNodes) {\n      if ('tagName' in child && child.tagName) {\n        if (child.tagName === 'pl-answer') {\n          errorsChildren = errorsChildren.concat(checkAnswerMultipleChoice(child));\n        } else {\n          errorsChildren.push(`pl-multiple-choice: ${child.tagName} is not a valid child tag.`);\n        }\n      }\n    }\n  }\n\n  return { errors: errors.concat(errorsChildren) };\n}\n\n/**\n * Checks that a `pl-integer-input` element has valid attributes.\n * @param ast The tree to consider, rooted at the tag to consider.\n * @returns The list of errors for the tag, if any.\n */\nfunction checkIntegerInput(ast: DocumentFragment | ChildNode): ValidationResult {\n  const errors: string[] = [];\n  let answersName: string | null = null;\n  if ('attrs' in ast) {\n    for (const attr of ast.attrs) {\n      const key = attr.name;\n      const val = attr.value;\n      switch (key) {\n        case 'answers-name':\n          answersName = val;\n          break;\n        case 'weight':\n        case 'blank-answer':\n        case 'size':\n          assertInt('pl-integer-input', key, val, errors);\n          break;\n        // string inputs are valid as strings, and these don't affect other tags, so no validation required\n        case 'correct-answer':\n          if (val.match(mustacheTemplateExtractorRegex)) {\n            errors.push(\n              \"pl-integer-input: correct-answer attribute value must not be a Mustache template. If the correct answer depends on dynamic parameters, set `data['correct_answers']` accordingly in `server.py` and remove this attribute.\",\n            );\n          }\n          break;\n        case 'label':\n        case 'suffix':\n        case 'placeholder':\n          break;\n        case 'allow-blank':\n        case 'show-help-text':\n        case 'show-score':\n          assertBool('pl-integer-input', key, val, errors);\n          break;\n        case 'base':\n          // TODO: validate that correct-answer is the right base\n          assertInt('pl-integer-input', key, val, errors);\n          break;\n        case 'display':\n          assertInChoices('pl-integer-input', key, val, ['block', 'inline'], errors);\n          break;\n        default:\n          errors.push(`pl-integer-input: ${key} is not a valid attribute.`);\n      }\n    }\n  }\n  if (!answersName) {\n    errors.push('pl-integer-input: answers-name is a required attribute.');\n  }\n  return {\n    errors,\n    mandatoryPythonCorrectAnswers: answersName ? new Set([answersName]) : undefined,\n  };\n}\n\n/**\n * Checks that a `pl-number-input` element has valid attributes.\n * @param ast The tree to consider, rooted at the tag to consider.\n * @returns The list of errors for the tag, if any.\n */\nfunction checkNumericalInput(ast: DocumentFragment | ChildNode): ValidationResult {\n  const errors: string[] = [];\n  let answersName: string | null = null;\n  let usedRelabs = true;\n  let usedRtol = false;\n  let usedAtol = false;\n  let usedDigits = false;\n  let allowsBlank = false;\n  let usedBlankValue = false;\n\n  if ('attrs' in ast) {\n    for (const attr of ast.attrs) {\n      const key = attr.name;\n      const val = attr.value;\n      switch (key) {\n        case 'answers-name':\n          answersName = val;\n          break;\n        case 'weight':\n        case 'size':\n          assertInt('pl-number-input', key, val, errors);\n          break;\n        case 'correct-answer':\n          assertFloat('pl-number-input', key, val, errors);\n          if (val.match(mustacheTemplateExtractorRegex)) {\n            errors.push(\n              \"pl-number-input: correct-answer attribute value must not be a Mustache template. If the correct answer depends on dynamic parameters, set `data['correct_answers']` accordingly in `server.py` and remove this attribute.\",\n            );\n          }\n          break;\n        case 'label':\n        case 'suffix':\n        case 'placeholder':\n        case 'custom-format':\n          break;\n        case 'display':\n          assertInChoices('pl-number-input', key, val, ['block', 'inline'], errors);\n          break;\n        case 'comparison':\n          assertInChoices('pl-number-input', key, val, ['relabs', 'sigfig', 'decdig'], errors);\n          if (val !== 'relabs') {\n            usedRelabs = false;\n          }\n          break;\n        case 'rtol':\n          assertFloat('pl-number-input', key, val, errors);\n          usedRtol = true;\n          break;\n        case 'atol':\n          assertFloat('pl-number-input', key, val, errors);\n          usedAtol = true;\n          break;\n        case 'digits':\n          assertInt('pl-number-input', key, val, errors);\n          usedDigits = true;\n          break;\n        case 'allow-complex':\n        case 'show-correct-answer':\n        case 'allow-fractions':\n        case 'show-help-text':\n          assertBool('pl-number-input', key, val, errors);\n          break;\n        case 'allow-blank':\n          assertBool('pl-number-input', key, val, errors);\n          if (val !== 'false') {\n            allowsBlank = true;\n          }\n          break;\n        case 'blank-value':\n          usedBlankValue = true;\n          break;\n        default:\n          errors.push(`pl-number-input: ${key} is not a valid attribute.`);\n      }\n    }\n  }\n  if (!answersName) {\n    errors.push('pl-number-input: answers-name is a required attribute.');\n  }\n  if ((usedRtol || usedAtol) && !usedRelabs) {\n    errors.push(\n      'pl-number-input: comparison modes decdigs and sigfigs use digits, not rtol or atol.',\n    );\n  }\n  if (usedDigits && usedRelabs) {\n    errors.push('pl-number-input: comparison mode relabs uses rtol and atol, not digits.');\n  }\n  if (usedBlankValue && !allowsBlank) {\n    errors.push('pl-number-input: you must set allow-blank to true to use blank-value.');\n  }\n  return {\n    errors,\n    mandatoryPythonCorrectAnswers: answersName ? new Set([answersName]) : undefined,\n  };\n}\n\n/**\n * Checks that a `pl-answer` element in a multiple choice tag has valid attributes.\n * @param ast The tree to consider, rooted at the tag to consider.\n * @returns The list of errors for the tag, if any.\n */\nfunction checkAnswerMultipleChoice(ast: DocumentFragment | ChildNode): string[] {\n  const errors: string[] = [];\n  if ('attrs' in ast) {\n    for (const attr of ast.attrs) {\n      switch (attr.name) {\n        case 'correct':\n          assertBool('pl-answer (for pl-multiple-choice)', attr.name, attr.value, errors);\n          break;\n        case 'feedback':\n          break;\n        case 'score':\n          assertFloat('pl-answer (for pl-multiple-choice)', attr.name, attr.value, errors);\n          break;\n        default:\n          errors.push(`pl-answer (for pl-multiple-choice): ${attr.name} is not a valid attribute.`);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Checks that a `pl-answer` element in a multiple choice tag has valid attributes.\n * @param ast The tree to consider, rooted at the tag to consider.\n * @returns The list of errors for the tag, if any.\n */\nfunction checkAnswerCheckbox(ast: DocumentFragment | ChildNode): string[] {\n  const errors: string[] = [];\n  if ('attrs' in ast) {\n    for (const attr of ast.attrs) {\n      switch (attr.name) {\n        case 'correct':\n          assertBool('pl-answer (for pl-checkbox)', attr.name, attr.value, errors);\n          break;\n        case 'feedback':\n          break;\n        default:\n          errors.push(`pl-answer (for pl-checkbox): ${attr.name} is not a valid attribute.`);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Checks that a `pl-string-input` element has valid attributes.\n * @param ast The tree to consider, rooted at the tag to consider.\n * @returns The list of errors for the tag, if any.\n */\nfunction checkStringInput(ast: DocumentFragment | ChildNode): ValidationResult {\n  const errors: string[] = [];\n  let answersName: string | null = null;\n  let usedCorrectAnswer = false;\n  if ('attrs' in ast) {\n    for (const attr of ast.attrs) {\n      const key = attr.name;\n      const val = attr.value;\n      switch (key) {\n        case 'answers-name':\n          answersName = val;\n          break;\n        case 'weight':\n        case 'size':\n          assertInt('pl-string-input', key, val, errors);\n          break;\n        case 'correct-answer':\n          usedCorrectAnswer = true;\n          break;\n        case 'label':\n        case 'suffix':\n        case 'placeholder':\n          break;\n        case 'display':\n          assertInChoices('pl-string-input', key, val, ['block', 'inline'], errors);\n          break;\n        case 'remove-leading-trailing':\n        case 'remove-spaces':\n        case 'allow-blank':\n        case 'ignore-case':\n        case 'normalize-to-ascii':\n        case 'show-help-text':\n          assertBool('pl-string-input', key, val, errors);\n          break;\n        default:\n          errors.push(`pl-string-input: ${attr.name} is not a valid attribute.`);\n      }\n    }\n  }\n  if (!answersName) {\n    errors.push('pl-string-input: answers-name is a required attribute.');\n  }\n  return {\n    errors,\n    // If a correct answer was not specified with the `correct-answer` attribute,\n    // then the `answers-name` attribute must be generated in Python.\n    mandatoryPythonCorrectAnswers:\n      !usedCorrectAnswer && answersName ? new Set([answersName]) : undefined,\n  };\n}\n\n/**\n * Checks that a `pl-checkbox` element has valid attributes.\n * @param ast The tree to consider, rooted at the tag to consider.\n * @returns The list of errors for the tag, if any.\n */\nfunction checkCheckbox(ast: DocumentFragment | ChildNode): ValidationResult {\n  const errors: string[] = [];\n  let usedAnswersName = false;\n  let usedPartialCredit = true;\n  let usedPartialCreditMethod = false;\n  if ('attrs' in ast) {\n    for (const attr of ast.attrs) {\n      const key = attr.name;\n      const val = attr.value;\n      switch (key) {\n        case 'answers-name':\n          usedAnswersName = true;\n          break;\n        case 'weight':\n        case 'number-answers':\n        case 'min-correct':\n        case 'max-correct':\n        case 'min-select':\n        case 'max-select':\n          assertInt('pl-checkbox', key, val, errors);\n          break;\n        case 'inline':\n        case 'fixed-order':\n        case 'hide-help-text':\n        case 'detailed-help-text':\n        case 'hide-answer-panel':\n        case 'hide-score-badge':\n          assertBool('pl-checkbox', key, val, errors);\n          break;\n\n        case 'partial-credit':\n          assertBool('pl-checkbox', key, val, errors);\n          if (\n            ['false', 'f', '0', 'False', 'F', 'FALSE', 'no', 'n', 'No', 'N', 'NO'].includes(val)\n          ) {\n            usedPartialCredit = false;\n          }\n          break;\n        case 'partial-credit-method':\n          assertInChoices('pl-checkbox', key, val, ['COV', 'EDC', 'PC'], errors);\n          usedPartialCreditMethod = true;\n          break;\n        default:\n          errors.push(`pl-checkbox: ${key} is not a valid attribute.`);\n      }\n    }\n  }\n  if (!usedAnswersName) {\n    errors.push('pl-checkbox: answers-name is a required attribute.');\n  }\n  if (usedPartialCreditMethod && !usedPartialCredit) {\n    errors.push(\n      'pl-checkbox: if partial-credit-method is set, then partial-credit must be set to true.',\n    );\n  }\n\n  let errorsChildren: string[] = [];\n  if ('childNodes' in ast) {\n    for (const child of ast.childNodes) {\n      if ('tagName' in child && child.tagName) {\n        if (child.tagName === 'pl-answer') {\n          errorsChildren = errorsChildren.concat(checkAnswerCheckbox(child));\n        } else {\n          errorsChildren.push(`pl-multiple-choice: ${child.tagName} is not a valid child tag.`);\n        }\n      }\n    }\n  }\n\n  return { errors: errors.concat(errorsChildren) };\n}\n\n/**\n * Optimistically checks the entire parse tree for errors in common PL tags recursively.\n * @param ast The tree to consider.\n * @param optimistic True if tags outside the subset are allowed, else false.\n * @returns A list of human-readable error messages, if any.\n */\nfunction dfsCheckParseTree(\n  ast: DocumentFragment | ChildNode,\n  optimistic: boolean,\n): ValidationResult {\n  let { errors, mandatoryPythonCorrectAnswers } = checkTag(ast, optimistic);\n\n  mandatoryPythonCorrectAnswers ??= new Set<string>();\n\n  if ('childNodes' in ast && ast.childNodes) {\n    for (const child of ast.childNodes) {\n      const childResult = dfsCheckParseTree(child, optimistic);\n      errors = errors.concat(childResult.errors);\n      childResult.mandatoryPythonCorrectAnswers?.forEach((x) =>\n        mandatoryPythonCorrectAnswers.add(x),\n      );\n    }\n  }\n\n  return { errors, mandatoryPythonCorrectAnswers };\n}\n\n/**\n * Checks for errors in common PL elements in an index.html file.\n * @param file The raw text of the file to use.\n * @param optimistic True if tags outside the subset are allowed, else false.\n * @returns A list of human-readable render error messages, if any.\n */\nexport function validateHTML(file: string, optimistic: boolean, usesServerPy: boolean): string[] {\n  const tree = parse5.parseFragment(file);\n  const { errors, mandatoryPythonCorrectAnswers } = dfsCheckParseTree(tree, optimistic);\n\n  const templates = [...file.matchAll(mustacheTemplateExtractorRegex)]\n    .map((x) => x[1])\n    .concat([...(mandatoryPythonCorrectAnswers ?? [])].map((x) => `correct_answers.${x}`));\n\n  if (!usesServerPy && templates.length > 0) {\n    errors.push(`Create a server.py file to generate the following: ${templates.join(', ')}`);\n  }\n\n  return errors;\n}\n"]}