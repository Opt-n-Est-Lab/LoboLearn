{"version":3,"file":"enrollment.js","sourceRoot":"","sources":["../../../src/ee/models/enrollment.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport { loadSqlEquiv, queryOptionalRow } from '@prairielearn/postgres';\n\nimport { type Course, type CourseInstance, type Institution } from '../../lib/db-types.js';\nimport { checkPlanGrants } from '../lib/billing/plan-grants.js';\nimport { planGrantsMatchPlanFeatures } from '../lib/billing/plans-types.js';\nimport { getPlanGrantsForContext, getPlanNamesFromPlanGrants } from '../lib/billing/plans.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst EnrollmentCountsSchema = z.object({\n  paid: z.number().nullable(),\n  free: z.number().nullable(),\n});\n\ninterface EnrollmentCounts {\n  paid: number;\n  free: number;\n}\n\n/**\n * Returns counts of free and paid enrollments for the given institution.\n * Enrollments are counted during the time period spanning from the current\n * time back to the given `created_since` time, which is a Postgres interval\n * string like '1 year' or '6 months'.\n */\nexport async function getEnrollmentCountsForInstitution({\n  institution_id,\n  created_since,\n}: {\n  institution_id: string;\n  created_since: string;\n}): Promise<EnrollmentCounts> {\n  const result = await queryOptionalRow(\n    sql.select_enrollment_counts_for_institution,\n    { institution_id, created_since },\n    EnrollmentCountsSchema,\n  );\n\n  return {\n    paid: result?.paid ?? 0,\n    free: result?.free ?? 0,\n  };\n}\n\n/**\n * Returns counts of free and paid enrollments for the given course.\n * Enrollments are counted during the time period spanning from the current\n * time back to the given `created_since` time, which is a Postgres interval\n * string like '1 year' or '6 months'.\n */\nexport async function getEnrollmentCountsForCourse({\n  course_id,\n  created_since,\n}: {\n  course_id: string;\n  created_since: string;\n}): Promise<EnrollmentCounts> {\n  const result = await queryOptionalRow(\n    sql.select_enrollment_counts_for_course,\n    {\n      course_id,\n      created_since,\n    },\n    EnrollmentCountsSchema,\n  );\n\n  return {\n    paid: result?.paid ?? 0,\n    free: result?.free ?? 0,\n  };\n}\n\n/**\n * Returns counts of free and paid enrollments for the given course instance.\n */\nexport async function getEnrollmentCountsForCourseInstance(\n  course_instance_id: string,\n): Promise<EnrollmentCounts> {\n  const result = await queryOptionalRow(\n    sql.select_enrollment_counts_for_course_instance,\n    { course_instance_id },\n    EnrollmentCountsSchema,\n  );\n\n  return {\n    paid: result?.paid ?? 0,\n    free: result?.free ?? 0,\n  };\n}\n\nexport enum PotentialEnterpriseEnrollmentStatus {\n  ALLOWED = 'allowed',\n  LIMIT_EXCEEDED = 'limit_exceeded',\n  PLAN_GRANTS_REQUIRED = 'plan_grants_required',\n}\n\n/**\n * Performs enterprise-specific checks for a potential enrollment:\n *\n * - The new enrollment must not push either the institution or the course instance\n *   over either of their enrollment limits.\n * - The user must have any necessary plan grants.\n *\n * This function will return `true` if the enrollment would be allowed.\n * Otherwise, it will redirect the user to the appropriate page and\n * return `false`.\n */\nexport async function checkPotentialEnterpriseEnrollment({\n  institution,\n  course,\n  course_instance,\n  authz_data,\n}: {\n  institution: Institution;\n  course: Course;\n  course_instance: CourseInstance;\n  authz_data: any;\n}): Promise<PotentialEnterpriseEnrollmentStatus> {\n  const hasPlanGrants = await checkPlanGrants({\n    institution,\n    course_instance,\n    authz_data,\n  });\n\n  if (!hasPlanGrants) {\n    return PotentialEnterpriseEnrollmentStatus.PLAN_GRANTS_REQUIRED;\n  }\n\n  // Check if the user is a paid user. If they are, we'll bypass any enrollment\n  // limits entirely.\n  //\n  // This helps avoid a specific edge case. Consider a course instance with an\n  // enrollment limit of 20 where 20 free users have enrolled. Next, we enable\n  // student billing. If we then have a user pay and try to enroll, we need to\n  // ensure that they can enroll even though the enrollment limit has been\n  // reached. In the past, without specifically checking if the user was a paid\n  // user, we would have blocked the enrollment.\n  const planGrants = await getPlanGrantsForContext({\n    institution_id: institution.id,\n    course_instance_id: course_instance.id,\n    user_id: authz_data.user.user_id,\n  });\n  const planNames = getPlanNamesFromPlanGrants(planGrants);\n  if (planGrantsMatchPlanFeatures(planNames, ['basic'])) {\n    return PotentialEnterpriseEnrollmentStatus.ALLOWED;\n  }\n\n  // Note that this check is susceptible to race conditions: if two users\n  // enroll at the same time, they may both be able to enroll even if the\n  // enrollment limit would be exceeded. We've decided that this is\n  // acceptable behavior as we don't really care if the enrollment limit is\n  // exceeded by one or two users. Future enrollments will still be blocked,\n  // which will prompt course/institution staff to seek an increase in their\n  // enrollment limit.\n  const institutionEnrollmentCounts = await getEnrollmentCountsForInstitution({\n    institution_id: institution.id,\n    created_since: '1 year',\n  });\n  const courseEnrollmentCounts = await getEnrollmentCountsForCourse({\n    course_id: course_instance.course_id,\n    created_since: '1 year',\n  });\n  const courseInstanceEnrollmentCounts = await getEnrollmentCountsForCourseInstance(\n    course_instance.id,\n  );\n\n  const freeInstitutionEnrollmentCount = institutionEnrollmentCounts.free;\n  const freeCourseEnrollmentCount = courseEnrollmentCounts.free;\n  const freeCourseInstanceEnrollmentCount = courseInstanceEnrollmentCounts.free;\n\n  // If both an institutional and course yearly enrollment limit are defined, we'll\n  // always enforce both of them. That is, the institutional yearly enrollment limit\n  // always applies, and the course yearly enrollment can only serve as a tighter\n  // bound on that.\n  //\n  // If a course yearly enrollment limit is not defined, we'll use the institutional\n  // enrollment limit as the upper bound, as the number of enrollments in the course\n  // must by definition be less than or equal to the number of enrollments in the\n  // institution as a whole.\n  const institutionYearlyEnrollmentLimit = institution.yearly_enrollment_limit;\n  const courseYearlyEnrollmentLimit =\n    course.yearly_enrollment_limit ?? institutionYearlyEnrollmentLimit;\n  const courseInstanceEnrollmentLimit =\n    course_instance.enrollment_limit ??\n    course.course_instance_enrollment_limit ??\n    institution.course_instance_enrollment_limit;\n\n  if (\n    freeInstitutionEnrollmentCount + 1 > institutionYearlyEnrollmentLimit ||\n    freeCourseEnrollmentCount + 1 > courseYearlyEnrollmentLimit ||\n    freeCourseInstanceEnrollmentCount + 1 > courseInstanceEnrollmentLimit\n  ) {\n    return PotentialEnterpriseEnrollmentStatus.LIMIT_EXCEEDED;\n  }\n\n  return PotentialEnterpriseEnrollmentStatus.ALLOWED;\n}\n"]}