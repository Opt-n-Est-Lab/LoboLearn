{"version":3,"file":"enrollment.test.js","sourceRoot":"","sources":["../../../src/ee/models/enrollment.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAC7D,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAC;AAC9D,OAAO,KAAK,YAAY,MAAM,6BAA6B,CAAC;AAC5D,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAE5D,OAAO,EACL,4BAA4B,EAC5B,oCAAoC,EACpC,iCAAiC,GAClC,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AAEnD,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IACjD,UAAU,CAAC,KAAK;QACd,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,YAAY,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK;QACb,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,MAAM,GAAG,MAAM,iCAAiC,CAAC;YACrD,cAAc,EAAE,GAAG;YACnB,aAAa,EAAE,QAAQ;SACxB,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,uEAAuE;QACvE,sCAAsC;QACtC,MAAM,cAAc,GAAG,MAAM,QAAQ,CACnC,0FAA0F,EAC1F,EAAE,EACF,oBAAoB,CACrB,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC;YACrC,GAAG,EAAE,kBAAkB;YACvB,IAAI,EAAE,cAAc;YACpB,GAAG,EAAE,OAAO;YACZ,KAAK,EAAE,kBAAkB;SAC1B,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC;YACtC,GAAG,EAAE,mBAAmB;YACxB,IAAI,EAAE,gBAAgB;YACtB,GAAG,EAAE,OAAO;YACZ,KAAK,EAAE,mBAAmB;SAC3B,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC;YACtC,GAAG,EAAE,mBAAmB;YACxB,IAAI,EAAE,gBAAgB;YACtB,GAAG,EAAE,OAAO;YACZ,KAAK,EAAE,mBAAmB;SAC3B,CAAC,CAAC;QAEH,MAAM,gBAAgB,CAAC;YACrB,kBAAkB,EAAE,GAAG;YACvB,OAAO,EAAE,QAAQ,CAAC,OAAO;SAC1B,CAAC,CAAC;QACH,MAAM,gBAAgB,CAAC;YACrB,kBAAkB,EAAE,GAAG;YACvB,OAAO,EAAE,SAAS,CAAC,OAAO;SAC3B,CAAC,CAAC;QACH,MAAM,gBAAgB,CAAC;YACrB,kBAAkB,EAAE,cAAc,CAAC,EAAE;YACrC,OAAO,EAAE,SAAS,CAAC,OAAO;SAC3B,CAAC,CAAC;QAEH,MAAM,eAAe,CAAC;YACpB,UAAU,EAAE;gBACV,cAAc,EAAE,GAAG;gBACnB,kBAAkB,EAAE,GAAG;gBACvB,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,wEAAwE;gBACxE,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,QAAQ;aACf;YACD,aAAa,EAAE,GAAG;SACnB,CAAC,CAAC;QAEH,MAAM,eAAe,CAAC;YACpB,UAAU,EAAE;gBACV,cAAc,EAAE,GAAG;gBACnB,kBAAkB,EAAE,GAAG;gBACvB,OAAO,EAAE,SAAS,CAAC,OAAO;gBAC1B,SAAS,EAAE,OAAO;gBAClB,IAAI,EAAE,QAAQ;aACf;YACD,aAAa,EAAE,GAAG;SACnB,CAAC,CAAC;QAEH,MAAM,eAAe,CAAC;YACpB,UAAU,EAAE;gBACV,cAAc,EAAE,GAAG;gBACnB,kBAAkB,EAAE,cAAc,CAAC,EAAE;gBACrC,OAAO,EAAE,SAAS,CAAC,OAAO;gBAC1B,SAAS,EAAE,OAAO;gBAClB,IAAI,EAAE,QAAQ;aACf;YACD,aAAa,EAAE,GAAG;SACnB,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,iCAAiC,CAAC;YACrD,cAAc,EAAE,GAAG;YACnB,aAAa,EAAE,QAAQ;SACxB,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,UAAU,CAAC,KAAK;QACd,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,YAAY,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK;QACb,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,MAAM,GAAG,MAAM,4BAA4B,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;QAE/F,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC;YACjC,GAAG,EAAE,qBAAqB;YAC1B,IAAI,EAAE,iBAAiB;YACvB,GAAG,EAAE,SAAS;YACd,KAAK,EAAE,qBAAqB;SAC7B,CAAC,CAAC;QACH,MAAM,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE3E,MAAM,MAAM,GAAG,MAAM,4BAA4B,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;QAE/F,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC;YACjC,GAAG,EAAE,qBAAqB;YAC1B,IAAI,EAAE,iBAAiB;YACvB,GAAG,EAAE,SAAS;YACd,KAAK,EAAE,qBAAqB;SAC7B,CAAC,CAAC;QAEH,MAAM,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE3E,MAAM,eAAe,CAAC;YACpB,UAAU,EAAE;gBACV,cAAc,EAAE,GAAG;gBACnB,kBAAkB,EAAE,GAAG;gBACvB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,SAAS,EAAE,OAAO;gBAClB,IAAI,EAAE,QAAQ;aACf;YACD,aAAa,EAAE,GAAG;SACnB,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,4BAA4B,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC/F,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC;YACjC,GAAG,EAAE,qBAAqB;YAC1B,IAAI,EAAE,iBAAiB;YACvB,GAAG,EAAE,SAAS;YACd,KAAK,EAAE,qBAAqB;SAC7B,CAAC,CAAC;QAEH,MAAM,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE3E,MAAM,eAAe,CAAC;YACpB,UAAU,EAAE;gBACV,cAAc,EAAE,GAAG;gBACnB,kBAAkB,EAAE,GAAG;gBACvB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,QAAQ;aACf;YACD,aAAa,EAAE,GAAG;SACnB,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,4BAA4B,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC/F,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;IACpD,UAAU,CAAC,KAAK;QACd,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,YAAY,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK;QACb,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,MAAM,GAAG,MAAM,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAE/D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC;YACjC,GAAG,EAAE,qBAAqB;YAC1B,IAAI,EAAE,iBAAiB;YACvB,GAAG,EAAE,SAAS;YACd,KAAK,EAAE,qBAAqB;SAC7B,CAAC,CAAC;QACH,MAAM,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE3E,MAAM,MAAM,GAAG,MAAM,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAE/D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC;YACjC,GAAG,EAAE,qBAAqB;YAC1B,IAAI,EAAE,iBAAiB;YACvB,GAAG,EAAE,SAAS;YACd,KAAK,EAAE,qBAAqB;SAC7B,CAAC,CAAC;QAEH,MAAM,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE3E,MAAM,eAAe,CAAC;YACpB,UAAU,EAAE;gBACV,cAAc,EAAE,GAAG;gBACnB,kBAAkB,EAAE,GAAG;gBACvB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,SAAS,EAAE,OAAO;gBAClB,IAAI,EAAE,QAAQ;aACf;YACD,aAAa,EAAE,GAAG;SACnB,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAC/D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC;YACjC,GAAG,EAAE,qBAAqB;YAC1B,IAAI,EAAE,iBAAiB;YACvB,GAAG,EAAE,SAAS;YACd,KAAK,EAAE,qBAAqB;SAC7B,CAAC,CAAC;QAEH,MAAM,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE3E,MAAM,eAAe,CAAC;YACpB,UAAU,EAAE;gBACV,cAAc,EAAE,GAAG;gBACnB,kBAAkB,EAAE,GAAG;gBACvB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,QAAQ;aACf;YACD,aAAa,EAAE,GAAG;SACnB,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAC/D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport { queryRow } from '@prairielearn/postgres';\n\nimport { CourseInstanceSchema } from '../../lib/db-types.js';\nimport { ensureEnrollment } from '../../models/enrollment.js';\nimport * as helperCourse from '../../tests/helperCourse.js';\nimport * as helperDb from '../../tests/helperDb.js';\nimport { getOrCreateUser } from '../../tests/utils/auth.js';\n\nimport {\n  getEnrollmentCountsForCourse,\n  getEnrollmentCountsForCourseInstance,\n  getEnrollmentCountsForInstitution,\n} from './enrollment.js';\nimport { ensurePlanGrant } from './plan-grants.js';\n\ndescribe('getEnrollmentCountsForInstitution', () => {\n  beforeEach(async function () {\n    await helperDb.before.call(this);\n    await helperCourse.syncCourse();\n  });\n\n  afterEach(async function () {\n    await helperDb.after.call(this);\n  });\n\n  it('returns zero enrollments by default', async () => {\n    const result = await getEnrollmentCountsForInstitution({\n      institution_id: '1',\n      created_since: '1 year',\n    });\n\n    assert.equal(result.free, 0);\n    assert.equal(result.paid, 0);\n  });\n\n  it('returns correct counts across course instances', async () => {\n    // The test course only has a single course instance, so we'll create a\n    // second one for more complete tests.\n    const courseInstance = await queryRow(\n      \"INSERT INTO course_instances (course_id, display_timezone) VALUES (1, 'UTC') RETURNING *\",\n      {},\n      CourseInstanceSchema,\n    );\n\n    const freeUser = await getOrCreateUser({\n      uid: 'free@example.com',\n      name: 'Free Student',\n      uin: 'free1',\n      email: 'free@example.com',\n    });\n    const paidUser1 = await getOrCreateUser({\n      uid: 'paid1@example.com',\n      name: 'Paid Student 1',\n      uin: 'paid1',\n      email: 'paid1@example.com',\n    });\n    const paidUser2 = await getOrCreateUser({\n      uid: 'paid2@example.com',\n      name: 'Paid Student 2',\n      uin: 'paid2',\n      email: 'paid2@example.com',\n    });\n\n    await ensureEnrollment({\n      course_instance_id: '1',\n      user_id: freeUser.user_id,\n    });\n    await ensureEnrollment({\n      course_instance_id: '1',\n      user_id: paidUser1.user_id,\n    });\n    await ensureEnrollment({\n      course_instance_id: courseInstance.id,\n      user_id: paidUser2.user_id,\n    });\n\n    await ensurePlanGrant({\n      plan_grant: {\n        institution_id: '1',\n        course_instance_id: '1',\n        user_id: freeUser.user_id,\n        // This plan grant should not make this user count as a paid enrollment.\n        plan_name: 'compute',\n        type: 'stripe',\n      },\n      authn_user_id: '1',\n    });\n\n    await ensurePlanGrant({\n      plan_grant: {\n        institution_id: '1',\n        course_instance_id: '1',\n        user_id: paidUser1.user_id,\n        plan_name: 'basic',\n        type: 'stripe',\n      },\n      authn_user_id: '1',\n    });\n\n    await ensurePlanGrant({\n      plan_grant: {\n        institution_id: '1',\n        course_instance_id: courseInstance.id,\n        user_id: paidUser2.user_id,\n        plan_name: 'basic',\n        type: 'stripe',\n      },\n      authn_user_id: '1',\n    });\n\n    const result = await getEnrollmentCountsForInstitution({\n      institution_id: '1',\n      created_since: '1 year',\n    });\n\n    assert.equal(result.free, 1);\n    assert.equal(result.paid, 2);\n  });\n});\n\ndescribe('getEnrollmentCountsForCourse', () => {\n  beforeEach(async function () {\n    await helperDb.before.call(this);\n    await helperCourse.syncCourse();\n  });\n\n  afterEach(async function () {\n    await helperDb.after.call(this);\n  });\n\n  it('returns zero enrollments by default', async () => {\n    const result = await getEnrollmentCountsForCourse({ course_id: '1', created_since: '1 year' });\n\n    assert.equal(result.free, 0);\n    assert.equal(result.paid, 0);\n  });\n\n  it('returns a single free enrollment', async () => {\n    const user = await getOrCreateUser({\n      uid: 'student@example.com',\n      name: 'Example Student',\n      uin: 'student',\n      email: 'student@example.com',\n    });\n    await ensureEnrollment({ course_instance_id: '1', user_id: user.user_id });\n\n    const result = await getEnrollmentCountsForCourse({ course_id: '1', created_since: '1 year' });\n\n    assert.equal(result.free, 1);\n    assert.equal(result.paid, 0);\n  });\n\n  it('returns a single paid enrollment', async () => {\n    const user = await getOrCreateUser({\n      uid: 'student@example.com',\n      name: 'Example Student',\n      uin: 'student',\n      email: 'student@example.com',\n    });\n\n    await ensureEnrollment({ course_instance_id: '1', user_id: user.user_id });\n\n    await ensurePlanGrant({\n      plan_grant: {\n        institution_id: '1',\n        course_instance_id: '1',\n        user_id: user.user_id,\n        plan_name: 'basic',\n        type: 'stripe',\n      },\n      authn_user_id: '1',\n    });\n\n    const result = await getEnrollmentCountsForCourse({ course_id: '1', created_since: '1 year' });\n    assert.equal(result.free, 0);\n    assert.equal(result.paid, 1);\n  });\n\n  it('does not include non-basic plan grants', async () => {\n    const user = await getOrCreateUser({\n      uid: 'student@example.com',\n      name: 'Example Student',\n      uin: 'student',\n      email: 'student@example.com',\n    });\n\n    await ensureEnrollment({ course_instance_id: '1', user_id: user.user_id });\n\n    await ensurePlanGrant({\n      plan_grant: {\n        institution_id: '1',\n        course_instance_id: '1',\n        user_id: user.user_id,\n        plan_name: 'compute',\n        type: 'stripe',\n      },\n      authn_user_id: '1',\n    });\n\n    const result = await getEnrollmentCountsForCourse({ course_id: '1', created_since: '1 year' });\n    assert.equal(result.free, 1);\n    assert.equal(result.paid, 0);\n  });\n});\n\ndescribe('getEnrollmentCountsForCourseInstance', () => {\n  beforeEach(async function () {\n    await helperDb.before.call(this);\n    await helperCourse.syncCourse();\n  });\n\n  afterEach(async function () {\n    await helperDb.after.call(this);\n  });\n\n  it('returns zero enrollments by default', async () => {\n    const result = await getEnrollmentCountsForCourseInstance('1');\n\n    assert.equal(result.free, 0);\n    assert.equal(result.paid, 0);\n  });\n\n  it('returns a single free enrollment', async () => {\n    const user = await getOrCreateUser({\n      uid: 'student@example.com',\n      name: 'Example Student',\n      uin: 'student',\n      email: 'student@example.com',\n    });\n    await ensureEnrollment({ course_instance_id: '1', user_id: user.user_id });\n\n    const result = await getEnrollmentCountsForCourseInstance('1');\n\n    assert.equal(result.free, 1);\n    assert.equal(result.paid, 0);\n  });\n\n  it('returns a single paid enrollment', async () => {\n    const user = await getOrCreateUser({\n      uid: 'student@example.com',\n      name: 'Example Student',\n      uin: 'student',\n      email: 'student@example.com',\n    });\n\n    await ensureEnrollment({ course_instance_id: '1', user_id: user.user_id });\n\n    await ensurePlanGrant({\n      plan_grant: {\n        institution_id: '1',\n        course_instance_id: '1',\n        user_id: user.user_id,\n        plan_name: 'basic',\n        type: 'stripe',\n      },\n      authn_user_id: '1',\n    });\n\n    const result = await getEnrollmentCountsForCourseInstance('1');\n    assert.equal(result.free, 0);\n    assert.equal(result.paid, 1);\n  });\n\n  it('does not include non-basic plan grants', async () => {\n    const user = await getOrCreateUser({\n      uid: 'student@example.com',\n      name: 'Example Student',\n      uin: 'student',\n      email: 'student@example.com',\n    });\n\n    await ensureEnrollment({ course_instance_id: '1', user_id: user.user_id });\n\n    await ensurePlanGrant({\n      plan_grant: {\n        institution_id: '1',\n        course_instance_id: '1',\n        user_id: user.user_id,\n        plan_name: 'compute',\n        type: 'stripe',\n      },\n      authn_user_id: '1',\n    });\n\n    const result = await getEnrollmentCountsForCourseInstance('1');\n    assert.equal(result.free, 1);\n    assert.equal(result.paid, 0);\n  });\n});\n"]}