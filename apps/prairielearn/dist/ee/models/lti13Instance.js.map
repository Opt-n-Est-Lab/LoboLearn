{"version":3,"file":"lti13Instance.js","sourceRoot":"","sources":["../../../src/ee/models/lti13Instance.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAExE,OAAO,EAAsB,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAEhF,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,iBAAyB;IACjE,MAAM,cAAc,GAAG,MAAM,gBAAgB,CAC3C,GAAG,CAAC,qBAAqB,EACzB;QACE,iBAAiB;KAClB,EACD,mBAAmB,CACpB,CAAC;IAEF,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,uBAAuB,iBAAiB,iBAAiB,CAAC,CAAC;IAC7E,CAAC;IAED,OAAO,cAAc,CAAC;AACxB,CAAC","sourcesContent":["import { loadSqlEquiv, queryOptionalRow } from '@prairielearn/postgres';\n\nimport { type Lti13Instance, Lti13InstanceSchema } from '../../lib/db-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function selectLti13Instance(lti13_instance_id: string): Promise<Lti13Instance> {\n  const lti13_instance = await queryOptionalRow(\n    sql.select_lti13_instance,\n    {\n      lti13_instance_id,\n    },\n    Lti13InstanceSchema,\n  );\n\n  if (!lti13_instance) {\n    throw new Error(`LTI 1.3 instance ID ${lti13_instance_id} is unavailable`);\n  }\n\n  return lti13_instance;\n}\n"]}