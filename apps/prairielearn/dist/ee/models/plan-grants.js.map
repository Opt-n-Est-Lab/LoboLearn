{"version":3,"file":"plan-grants.js","sourceRoot":"","sources":["../../../src/ee/models/plan-grants.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAEhE,OAAO,EAA0C,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAChG,OAAO,EAAyB,MAAM,oBAAoB,CAAC;AAC3D,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAE3D,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAoB1C,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,EACpC,UAAU,EACV,aAAa,GAId;IACC,MAAM,YAAY,GAAG,MAAM,QAAQ,CACjC,GAAG,CAAC,iBAAiB,EACrB;QACE,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,SAAS,EAAE,UAAU,CAAC,SAAS;QAC/B,cAAc,EAAE,UAAU,CAAC,cAAc,IAAI,IAAI;QACjD,kBAAkB,EAAE,UAAU,CAAC,kBAAkB,IAAI,IAAI;QACzD,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,IAAI;KACpC,EACD,eAAe,CAChB,CAAC;IACF,MAAM,cAAc,CAAC;QACnB,aAAa;QACb,UAAU,EAAE,aAAa;QACzB,MAAM,EAAE,QAAQ;QAChB,cAAc,EAAE,YAAY,CAAC,cAAc;QAC3C,kBAAkB,EAAE,YAAY,CAAC,kBAAkB;QACnD,OAAO,EAAE,YAAY,CAAC,OAAO;QAC7B,SAAS,EAAE,YAAY;QACvB,MAAM,EAAE,YAAY,CAAC,EAAE;KACxB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,EACpC,UAAU,EACV,IAAI,EACJ,aAAa,GAKd;IACC,MAAM,gBAAgB,GAAG,MAAM,QAAQ,CACrC,GAAG,CAAC,iBAAiB,EACrB,EAAE,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,EAC3B,eAAe,CAChB,CAAC;IACF,MAAM,cAAc,CAAC;QACnB,aAAa;QACb,UAAU,EAAE,aAAa;QACzB,MAAM,EAAE,QAAQ;QAChB,WAAW,EAAE,MAAM;QACnB,cAAc,EAAE,gBAAgB,CAAC,cAAc;QAC/C,kBAAkB,EAAE,gBAAgB,CAAC,kBAAkB;QACvD,OAAO,EAAE,gBAAgB,CAAC,OAAO;QACjC,SAAS,EAAE,UAAU;QACrB,SAAS,EAAE,gBAAgB;QAC3B,MAAM,EAAE,gBAAgB,CAAC,EAAE;KAC5B,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,EACpC,UAAU,EACV,aAAa,GAId;IACC,MAAM,gBAAgB,GAAG,MAAM,QAAQ,CACrC,GAAG,CAAC,iBAAiB,EACrB,EAAE,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE,EACrB,eAAe,CAChB,CAAC;IACF,MAAM,cAAc,CAAC;QACnB,aAAa;QACb,UAAU,EAAE,aAAa;QACzB,MAAM,EAAE,QAAQ;QAChB,cAAc,EAAE,gBAAgB,CAAC,cAAc;QAC/C,kBAAkB,EAAE,gBAAgB,CAAC,kBAAkB;QACvD,OAAO,EAAE,gBAAgB,CAAC,OAAO;QACjC,SAAS,EAAE,gBAAgB;QAC3B,MAAM,EAAE,gBAAgB,CAAC,EAAE;KAC5B,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { loadSqlEquiv, queryRow } from '@prairielearn/postgres';\n\nimport { type EnumPlanGrantType, type PlanGrant, PlanGrantSchema } from '../../lib/db-types.js';\nimport { type WithRequiredKeys } from '../../lib/types.js';\nimport { insertAuditLog } from '../../models/audit-log.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\ntype NewBasePlanGrant = Omit<PlanGrant, 'created_at' | 'id'>;\ntype NewInstitutionPlanGrant = WithRequiredKeys<NewBasePlanGrant, 'institution_id'>;\ntype NewCourseInstancePlanGrant = WithRequiredKeys<\n  NewBasePlanGrant,\n  'institution_id' | 'course_instance_id'\n>;\ntype NewCourseInstanceUserPlanGrant = WithRequiredKeys<\n  NewBasePlanGrant,\n  'institution_id' | 'course_instance_id' | 'user_id'\n>;\ntype NewUserPlanGrant = WithRequiredKeys<NewBasePlanGrant, 'user_id'>;\n\ntype NewPlanGrant =\n  | NewInstitutionPlanGrant\n  | NewCourseInstancePlanGrant\n  | NewCourseInstanceUserPlanGrant\n  | NewUserPlanGrant;\n\nexport async function ensurePlanGrant({\n  plan_grant,\n  authn_user_id,\n}: {\n  plan_grant: NewPlanGrant;\n  authn_user_id: string;\n}): Promise<void> {\n  const newPlanGrant = await queryRow(\n    sql.ensure_plan_grant,\n    {\n      type: plan_grant.type,\n      plan_name: plan_grant.plan_name,\n      institution_id: plan_grant.institution_id ?? null,\n      course_instance_id: plan_grant.course_instance_id ?? null,\n      user_id: plan_grant.user_id ?? null,\n    },\n    PlanGrantSchema,\n  );\n  await insertAuditLog({\n    authn_user_id,\n    table_name: 'plan_grants',\n    action: 'insert',\n    institution_id: newPlanGrant.institution_id,\n    course_instance_id: newPlanGrant.course_instance_id,\n    user_id: newPlanGrant.user_id,\n    new_state: newPlanGrant,\n    row_id: newPlanGrant.id,\n  });\n}\n\nexport async function updatePlanGrant({\n  plan_grant,\n  type,\n  authn_user_id,\n}: {\n  plan_grant: PlanGrant;\n  type: EnumPlanGrantType;\n  authn_user_id: string;\n}): Promise<void> {\n  const updatedPlanGrant = await queryRow(\n    sql.update_plan_grant,\n    { id: plan_grant.id, type },\n    PlanGrantSchema,\n  );\n  await insertAuditLog({\n    authn_user_id,\n    table_name: 'plan_grants',\n    action: 'update',\n    column_name: 'type',\n    institution_id: updatedPlanGrant.institution_id,\n    course_instance_id: updatedPlanGrant.course_instance_id,\n    user_id: updatedPlanGrant.user_id,\n    old_state: plan_grant,\n    new_state: updatedPlanGrant,\n    row_id: updatedPlanGrant.id,\n  });\n}\n\nexport async function deletePlanGrant({\n  plan_grant,\n  authn_user_id,\n}: {\n  plan_grant: PlanGrant;\n  authn_user_id: string;\n}): Promise<void> {\n  const deletedPlanGrant = await queryRow(\n    sql.delete_plan_grant,\n    { id: plan_grant.id },\n    PlanGrantSchema,\n  );\n  await insertAuditLog({\n    authn_user_id,\n    table_name: 'plan_grants',\n    action: 'delete',\n    institution_id: deletedPlanGrant.institution_id,\n    course_instance_id: deletedPlanGrant.course_instance_id,\n    user_id: deletedPlanGrant.user_id,\n    old_state: deletedPlanGrant,\n    row_id: deletedPlanGrant.id,\n  });\n}\n"]}