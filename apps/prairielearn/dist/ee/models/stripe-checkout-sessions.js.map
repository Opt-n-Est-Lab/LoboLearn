{"version":3,"file":"stripe-checkout-sessions.js","sourceRoot":"","sources":["../../../src/ee/models/stripe-checkout-sessions.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAE9F,OAAO,EAA8B,2BAA2B,EAAE,MAAM,uBAAuB,CAAC;AAChG,OAAO,EAAiB,MAAM,+BAA+B,CAAC;AAE9D,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,kDAAkD,CAAC,EACvE,aAAa,EACb,gBAAgB,EAChB,cAAc,EACd,kBAAkB,EAClB,eAAe,EACf,IAAI,EACJ,UAAU,GASX;IACC,MAAM,UAAU,CAAC,GAAG,CAAC,0DAA0D,EAAE;QAC/E,aAAa;QACb,gBAAgB;QAChB,cAAc;QACd,kBAAkB;QAClB,eAAe;QACf,IAAI;QACJ,UAAU;KACX,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wCAAwC,CAC5D,gBAAwB;IAExB,OAAO,MAAM,gBAAgB,CAC3B,GAAG,CAAC,+CAA+C,EACnD;QACE,gBAAgB;KACjB,EACD,2BAA2B,CAC5B,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,kCAAkC,CAAC,gBAAwB;IAC/E,MAAM,UAAU,CAAC,GAAG,CAAC,sCAAsC,EAAE;QAC3D,gBAAgB;KACjB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,+BAA+B,CAAC,EACpD,gBAAgB,EAChB,IAAI,GAIL;IACC,OAAO,MAAM,QAAQ,CACnB,GAAG,CAAC,mCAAmC,EACvC;QACE,gBAAgB;QAChB,IAAI;KACL,EACD,2BAA2B,CAC5B,CAAC;AACJ,CAAC","sourcesContent":["import type Stripe from 'stripe';\n\nimport { loadSqlEquiv, queryAsync, queryOptionalRow, queryRow } from '@prairielearn/postgres';\n\nimport { type StripeCheckoutSession, StripeCheckoutSessionSchema } from '../../lib/db-types.js';\nimport { type PlanName } from '../lib/billing/plans-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function insertStripeCheckoutSessionForUserInCourseInstance({\n  agent_user_id,\n  stripe_object_id,\n  institution_id,\n  course_instance_id,\n  subject_user_id,\n  data,\n  plan_names,\n}: {\n  agent_user_id: string;\n  stripe_object_id: string;\n  institution_id: string;\n  course_instance_id: string;\n  subject_user_id: string;\n  data: any;\n  plan_names: PlanName[];\n}) {\n  await queryAsync(sql.insert_stripe_checkout_session_for_user_in_course_instance, {\n    agent_user_id,\n    stripe_object_id,\n    institution_id,\n    course_instance_id,\n    subject_user_id,\n    data,\n    plan_names,\n  });\n}\n\nexport async function getStripeCheckoutSessionByStripeObjectId(\n  stripe_object_id: string,\n): Promise<StripeCheckoutSession | null> {\n  return await queryOptionalRow(\n    sql.get_stripe_checkout_session_by_stripe_object_id,\n    {\n      stripe_object_id,\n    },\n    StripeCheckoutSessionSchema,\n  );\n}\n\n/**\n * Marks a Stripe checkout session as completed. It's considered completed when\n * we've received payment and all plan grants have been created.\n *\n * @param stripe_object_id Stripe's ID for the checkout session object\n */\nexport async function markStripeCheckoutSessionCompleted(stripe_object_id: string) {\n  await queryAsync(sql.mark_stripe_checkout_session_completed, {\n    stripe_object_id,\n  });\n}\n\nexport async function updateStripeCheckoutSessionData({\n  stripe_object_id,\n  data,\n}: {\n  stripe_object_id: string;\n  data: Stripe.Checkout.Session;\n}): Promise<StripeCheckoutSession> {\n  return await queryRow(\n    sql.update_stripe_checkout_session_data,\n    {\n      stripe_object_id,\n      data,\n    },\n    StripeCheckoutSessionSchema,\n  );\n}\n"]}