{"version":3,"file":"administratorInstitutionGeneral.js","sourceRoot":"","sources":["../../../../src/ee/pages/administratorInstitutionGeneral/administratorInstitutionGeneral.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport { loadSqlEquiv, queryRow, runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { InstitutionSchema } from '../../../lib/db-types.js';\nimport { getCanonicalTimezones } from '../../../lib/timezones.js';\nimport { insertAuditLog } from '../../../models/audit-log.js';\nimport { parseDesiredPlanGrants } from '../../lib/billing/components/PlanGrantsEditor.html.js';\nimport {\n  getPlanGrantsForContext,\n  reconcilePlanGrantsForInstitution,\n} from '../../lib/billing/plans.js';\nimport { getInstitution } from '../../lib/institution.js';\n\nimport {\n  AdministratorInstitutionGeneral,\n  InstitutionStatisticsSchema,\n} from './administratorInstitutionGeneral.html.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router({ mergeParams: true });\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const institution = await getInstitution(req.params.institution_id);\n    const availableTimezones = await getCanonicalTimezones([institution.display_timezone]);\n    const statistics = await queryRow(\n      sql.select_institution_statistics,\n      { institution_id: req.params.institution_id },\n      InstitutionStatisticsSchema,\n    );\n    const planGrants = await getPlanGrantsForContext({ institution_id: req.params.institution_id });\n    res.send(\n      AdministratorInstitutionGeneral({\n        institution,\n        availableTimezones,\n        statistics,\n        planGrants,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (req.body.__action === 'update_enrollment_limits') {\n      await runInTransactionAsync(async () => {\n        const institution = await getInstitution(req.params.institution_id);\n        const updatedInstitution = await queryRow(\n          sql.update_institution,\n          {\n            institution_id: req.params.institution_id,\n            short_name: req.body.short_name,\n            long_name: req.body.long_name,\n            display_timezone: req.body.display_timezone,\n            uid_regexp: req.body.uid_regexp,\n            yearly_enrollment_limit: req.body.yearly_enrollment_limit || null,\n            course_instance_enrollment_limit: req.body.course_instance_enrollment_limit || null,\n          },\n          InstitutionSchema,\n        );\n        await insertAuditLog({\n          authn_user_id: res.locals.authn_user.user_id,\n          table_name: 'institutions',\n          action: 'update',\n          institution_id: req.params.institution_id,\n          old_state: institution,\n          new_state: updatedInstitution,\n          row_id: req.params.institution_id,\n        });\n      });\n      flash('success', 'Successfully updated institution settings.');\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'update_plans') {\n      const desiredPlans = parseDesiredPlanGrants({\n        body: req.body,\n        // We exclude `basic` from the list of allowed plans because it should\n        // only ever be used for student billing for enrollments.\n        allowedPlans: ['compute', 'everything'],\n      });\n      await reconcilePlanGrantsForInstitution(\n        req.params.institution_id,\n        desiredPlans,\n        res.locals.authn_user.user_id,\n      );\n      flash('success', 'Successfully updated institution plan grants.');\n      res.redirect(req.originalUrl);\n    } else {\n      throw new error.HttpStatusError(400, `Unknown action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}