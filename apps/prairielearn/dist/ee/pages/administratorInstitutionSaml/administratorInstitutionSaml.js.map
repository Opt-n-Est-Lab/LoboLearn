{"version":3,"file":"administratorInstitutionSaml.js","sourceRoot":"","sources":["../../../../src/ee/pages/administratorInstitutionSaml/administratorInstitutionSaml.ts"],"names":[],"mappings":"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","sourcesContent":["import { SAML } from '@node-saml/passport-saml';\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n// We import from this instead of `pem` directly because the latter includes\n// code that messes up the display of source maps in dev mode:\n// https://github.com/Dexus/pem/issues/389#issuecomment-2043258753\nimport * as pem from 'pem/lib/pem.js';\nimport formatXml from 'xml-formatter';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { loadSqlEquiv, queryAsync, runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { getSamlOptions } from '../../auth/saml/index.js';\nimport {\n  getInstitution,\n  getInstitutionAuthenticationProviders,\n  getInstitutionSamlProvider,\n} from '../../lib/institution.js';\n\nimport {\n  AdministratorInstitutionSaml,\n  DecodedAssertion,\n} from './administratorInstitutionSaml.html.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router({ mergeParams: true });\n\nfunction createCertificate(\n  options: pem.CertificateCreationOptions,\n): Promise<pem.CertificateCreationResult> {\n  return new Promise((resolve, reject) => {\n    pem.createCertificate(options, (err, keys) => {\n      if (err) return reject(err);\n      resolve(keys);\n    });\n  });\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const institution = await getInstitution(req.params.institution_id);\n    const samlProvider = await getInstitutionSamlProvider(req.params.institution_id);\n    const institutionAuthenticationProviders = await getInstitutionAuthenticationProviders(\n      req.params.institution_id,\n    );\n\n    res.send(\n      AdministratorInstitutionSaml({\n        institution,\n        samlProvider,\n        institutionAuthenticationProviders,\n        host: z.string().parse(req.headers.host),\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (req.body.__action === 'save') {\n      await runInTransactionAsync(async () => {\n        // Check if there's an existing SAML provider configured. We'll use\n        // that to determine if we need to create a new keypair. That is, we'll\n        // only create a new keypair if there's no existing provider.\n        const samlProvider = await getInstitutionSamlProvider(req.params.institution_id);\n\n        let publicKey, privateKey;\n        if (!samlProvider) {\n          // No existing provider; create a new keypair with OpenSSL.\n          const keys = await createCertificate({\n            selfSigned: true,\n            // Make certificate valid for 30 years.\n            // TODO: persist expiry time in database so that in the future,\n            // we can automatically warn users about expiring certificates.\n            days: 265 * 30,\n            // We use the host header as a shortcut to avoid the need to know\n            // a given installation's domain name.\n            commonName: req.headers.host,\n          });\n          publicKey = keys.certificate;\n          privateKey = keys.serviceKey;\n        }\n\n        await queryAsync(sql.insert_institution_saml_provider, {\n          institution_id: req.params.institution_id,\n          sso_login_url: req.body.sso_login_url,\n          issuer: req.body.issuer,\n          certificate: req.body.certificate,\n          validate_audience: req.body.validate_audience === '1',\n          want_assertions_signed: req.body.want_assertions_signed === '1',\n          want_authn_response_signed: req.body.want_authn_response_signed === '1',\n          // Normalize empty strings to `null`.\n          uin_attribute: req.body.uin_attribute || null,\n          uid_attribute: req.body.uid_attribute || null,\n          name_attribute: req.body.name_attribute || null,\n          email_attribute: req.body.email_attribute || null,\n          // The upsert query is configured to ignore these values if they're null.\n          public_key: publicKey,\n          private_key: privateKey,\n          // For audit logs\n          authn_user_id: res.locals.authn_user.user_id,\n        });\n      });\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'delete') {\n      await queryAsync(sql.delete_institution_saml_provider, {\n        institution_id: req.params.institution_id,\n        // For audit logs\n        authn_user_id: res.locals.authn_user.user_id,\n      });\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'decode_assertion') {\n      const samlConfig = await getSamlOptions({\n        institution_id: req.params.institution_id,\n        host: req.headers.host,\n        strictMode: req.body.strict_mode === '1',\n      });\n      const saml = new SAML({\n        ...samlConfig,\n        // Disable clock skew checking; we might be testing with a very old SAML response.\n        acceptedClockSkewMs: -1,\n      });\n\n      let xml: string;\n      try {\n        // @ts-expect-error https://github.com/chrisbottin/xml-formatter/issues/72\n        xml = formatXml(Buffer.from(req.body.encoded_assertion, 'base64').toString('utf8'));\n      } catch (err) {\n        res.send(DecodedAssertion({ xml: err.message, profile: '' }));\n        return;\n      }\n\n      const profile = await saml\n        .validatePostResponseAsync({\n          SAMLResponse: req.body.encoded_assertion,\n        })\n        .catch((err) => {\n          return {\n            error: err.message,\n          };\n        });\n\n      res.send(DecodedAssertion({ xml, profile: JSON.stringify(profile, null, 2) }));\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}