{"version":3,"file":"administratorInstitutionSso.js","sourceRoot":"","sources":["../../../../src/ee/pages/administratorInstitutionSso/administratorInstitutionSso.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport { loadSqlEquiv, queryAsync } from '@prairielearn/postgres';\n\nimport {\n  getInstitution,\n  getInstitutionAuthenticationProviders,\n  getInstitutionSamlProvider,\n  getSupportedAuthenticationProviders,\n} from '../../lib/institution.js';\n\nimport { AdministratorInstitutionSso } from './administratorInstitutionSso.html.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router({ mergeParams: true });\n\nconst enabledProvidersSchema = z.array(z.string());\n\nfunction ensureArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  return [value];\n}\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    const supportedAuthenticationProviders = await getSupportedAuthenticationProviders();\n    const supportedAuthenticationProviderIds = new Set(\n      supportedAuthenticationProviders.map((p) => p.id),\n    );\n\n    const rawEnabledAuthnProviderIds = ensureArray(req.body.enabled_authn_provider_ids ?? []);\n    const enabledProviders = enabledProvidersSchema\n      .parse(rawEnabledAuthnProviderIds)\n      .filter((id) => supportedAuthenticationProviderIds.has(id));\n    if (enabledProviders.length === 0) {\n      throw new Error('At least one authentication provider must be enabled');\n    }\n\n    let defaultProvider = req.body.default_authn_provider_id;\n    if (defaultProvider === '') defaultProvider = null;\n\n    await queryAsync(sql.update_institution_sso_config, {\n      institution_id: req.params.institution_id,\n      enabled_authn_provider_ids: enabledProviders,\n      default_authn_provider_id: defaultProvider,\n      // For audit logs\n      authn_user_id: res.locals.authn_user.user_id,\n    });\n\n    res.redirect(req.originalUrl);\n  }),\n);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const supportedAuthenticationProviders = await getSupportedAuthenticationProviders();\n\n    const institution = await getInstitution(req.params.institution_id);\n    const institutionSamlProvider = await getInstitutionSamlProvider(req.params.institution_id);\n    const institutionAuthenticationProviders = await getInstitutionAuthenticationProviders(\n      req.params.institution_id,\n    );\n\n    res.send(\n      AdministratorInstitutionSso({\n        supportedAuthenticationProviders,\n        institution,\n        institutionSamlProvider,\n        institutionAuthenticationProviders,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nexport default router;\n"]}