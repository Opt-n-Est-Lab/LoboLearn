{"version":3,"file":"institutionAdminAdmins.js","sourceRoot":"","sources":["../../../../src/ee/pages/institutionAdminAdmins/institutionAdminAdmins.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport { loadSqlEquiv, queryValidatedRows, runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { parseUidsString } from '../../../lib/user.js';\nimport { selectOptionalUserByUid } from '../../../models/user.js';\nimport { selectAndAuthzInstitutionAsAdmin } from '../../lib/selectAndAuthz.js';\nimport {\n  deleteInstitutionAdministrator,\n  ensureInstitutionAdministrator,\n} from '../../models/institution-administrator.js';\n\nimport {\n  InstitutionAdminAdmins,\n  InstitutionAdminAdminsRowSchema,\n} from './institutionAdminAdmins.html.js';\n\nconst router = Router({ mergeParams: true });\nconst sql = loadSqlEquiv(import.meta.url);\n\n/**\n * The maximum number of UIDs that can be provided in a single request.\n */\nconst MAX_UIDS = 10;\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const institution = await selectAndAuthzInstitutionAsAdmin({\n      institution_id: req.params.institution_id,\n      user_id: res.locals.authn_user.user_id,\n      access_as_administrator: res.locals.access_as_administrator,\n    });\n\n    const rows = await queryValidatedRows(\n      sql.select_admins,\n      { institution_id: institution.id },\n      InstitutionAdminAdminsRowSchema,\n    );\n\n    res.send(\n      InstitutionAdminAdmins({\n        institution,\n        rows,\n        uidsLimit: MAX_UIDS,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    const institution = await selectAndAuthzInstitutionAsAdmin({\n      institution_id: req.params.institution_id,\n      user_id: res.locals.authn_user.user_id,\n      access_as_administrator: res.locals.access_as_administrator,\n    });\n\n    if (req.body.__action === 'addAdmins') {\n      const uids = parseUidsString(req.body.uids, MAX_UIDS);\n      const validUids: string[] = [];\n      const invalidUids: string[] = [];\n      await runInTransactionAsync(async () => {\n        for (const uid of uids) {\n          const user = await selectOptionalUserByUid(uid);\n\n          // Specifically check that the user is in the institution to prevent\n          // someone from enumerating users in other institutions.\n          if (!user || user.institution_id !== institution.id) {\n            invalidUids.push(uid);\n            continue;\n          }\n\n          await ensureInstitutionAdministrator({\n            user_id: user.user_id,\n            institution_id: institution.id,\n            authn_user_id: res.locals.authn_user.user_id,\n          });\n\n          validUids.push(uid);\n        }\n      });\n\n      if (validUids.length > 0) {\n        flash('success', `Successfully added institution admins: ${validUids.join(', ')}`);\n      }\n\n      if (invalidUids.length > 0) {\n        flash(\n          'error',\n          `The following users either don't exist or aren't in this institution: ${invalidUids.join(', ')}`,\n        );\n      }\n\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'removeAdmin') {\n      await deleteInstitutionAdministrator({\n        institution_id: institution.id,\n        unsafe_institution_administrator_id: req.body.unsafe_institution_administrator_id,\n        authn_user_id: res.locals.authn_user.user_id,\n      });\n      flash('notice', 'Removed institution administrator.');\n      res.redirect(req.originalUrl);\n    } else {\n      throw new HttpStatusError(400, `Unknown action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}