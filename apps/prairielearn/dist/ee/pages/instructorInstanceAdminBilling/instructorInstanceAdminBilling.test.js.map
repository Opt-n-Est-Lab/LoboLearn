{"version":3,"file":"instructorInstanceAdminBilling.test.js","sourceRoot":"","sources":["../../../../src/ee/pages/instructorInstanceAdminBilling/instructorInstanceAdminBilling.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetch from 'node-fetch';\n\nimport { queryAsync } from '@prairielearn/postgres';\n\nimport { config } from '../../../lib/config.js';\nimport { features } from '../../../lib/features/index.js';\nimport * as helperServer from '../../../tests/helperServer.js';\nimport { getCsrfToken } from '../../../tests/utils/csrf.js';\nimport { enrollRandomUsers } from '../../../tests/utils/enrollments.js';\nimport {\n  reconcilePlanGrantsForCourseInstance,\n  reconcilePlanGrantsForInstitution,\n  updateRequiredPlansForCourseInstance,\n} from '../../lib/billing/plans.js';\nimport { enableEnterpriseEdition, withoutEnterpriseEdition } from '../../tests/ee-helpers.js';\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst pageUrl = siteUrl + '/pl/course_instance/1/instructor/instance_admin/billing';\n\nasync function updateCourseInstanceEnrollmentLimit(limit: number) {\n  await queryAsync('UPDATE course_instances SET enrollment_limit = $limit;', { limit });\n}\n\ndescribe('instructorInstanceAdminBilling', () => {\n  enableEnterpriseEdition();\n\n  beforeEach(helperServer.before());\n  afterEach(helperServer.after);\n\n  it('404s if feature is not enabled', async () => {\n    await features.runWithGlobalOverrides({ 'course-instance-billing': false }, async () => {\n      const res = await fetch(pageUrl);\n      assert.isFalse(res.ok);\n      assert.equal(res.status, 404);\n    });\n  });\n\n  it('404s if not enterprise edition', async () => {\n    await withoutEnterpriseEdition(async () => {\n      await features.runWithGlobalOverrides({ 'course-instance-billing': true }, async () => {\n        const res = await fetch(pageUrl);\n        assert.isFalse(res.ok);\n        assert.equal(res.status, 404);\n      });\n    });\n  });\n\n  it('shows current state', async () => {\n    await features.runWithGlobalOverrides({ 'course-instance-billing': true }, async () => {\n      await updateRequiredPlansForCourseInstance('1', ['basic', 'compute'], '1');\n\n      const res = await fetch(pageUrl);\n      assert.isTrue(res.ok);\n      const $ = cheerio.load(await res.text());\n      assert.equal($('#studentBillingEnabled').attr('checked'), 'checked');\n      assert.equal($('#computeEnabled').attr('checked'), 'checked');\n    });\n  });\n\n  it('forbids disabling student billing if enrollment limit exceeded', async () => {\n    await features.runWithGlobalOverrides({ 'course-instance-billing': true }, async () => {\n      await enrollRandomUsers('1', 10);\n      await updateCourseInstanceEnrollmentLimit(1);\n      await updateRequiredPlansForCourseInstance('1', ['basic', 'compute'], '1');\n\n      const csrfToken = await getCsrfToken(pageUrl);\n      const res = await fetch(pageUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          // Omitting `student_billing_enabled` to disable it.\n          __csrf_token: csrfToken,\n        }),\n      });\n      assert.isFalse(res.ok);\n      assert.equal(res.status, 400);\n    });\n  });\n\n  it('forbids enabling compute if already granted to the institution', async () => {\n    await features.runWithGlobalOverrides({ 'course-instance-billing': true }, async () => {\n      await reconcilePlanGrantsForInstitution(\n        '1',\n        [{ plan: 'compute', grantType: 'invoice' }],\n        '1',\n      );\n\n      const csrfToken = await getCsrfToken(pageUrl);\n      const res = await fetch(pageUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          compute_enabled: '1',\n          __csrf_token: csrfToken,\n        }),\n      });\n      assert.isFalse(res.ok);\n      assert.equal(res.status, 400);\n    });\n  });\n\n  it('forbids enabling compute if already granted to the course instance', async () => {\n    await features.runWithGlobalOverrides({ 'course-instance-billing': true }, async () => {\n      await reconcilePlanGrantsForCourseInstance(\n        '1',\n        [{ plan: 'compute', grantType: 'invoice' }],\n        '1',\n      );\n\n      const csrfToken = await getCsrfToken(pageUrl);\n      const res = await fetch(pageUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          compute_enabled: '1',\n          __csrf_token: csrfToken,\n        }),\n      });\n      assert.isFalse(res.ok);\n      assert.equal(res.status, 400);\n    });\n  });\n});\n"]}