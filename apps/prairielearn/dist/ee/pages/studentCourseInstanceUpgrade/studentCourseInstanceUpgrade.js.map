{"version":3,"file":"studentCourseInstanceUpgrade.js","sourceRoot":"","sources":["../../../../src/ee/pages/studentCourseInstanceUpgrade/studentCourseInstanceUpgrade.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport type Stripe from 'stripe';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { config } from '../../../lib/config.js';\nimport {\n  CourseInstanceSchema,\n  CourseSchema,\n  InstitutionSchema,\n  UserSchema,\n} from '../../../lib/db-types.js';\nimport { getCanonicalHost } from '../../../lib/url.js';\nimport { checkPlanGrantsForLocals } from '../../lib/billing/plan-grants.js';\nimport {\n  getMissingPlanGrants,\n  getPlanGrantsForPartialContexts,\n  getRequiredPlansForCourseInstance,\n} from '../../lib/billing/plans.js';\nimport {\n  getOrCreateStripeCustomerId,\n  getPriceForPlan,\n  getPricesForPlans,\n  getStripeClient,\n} from '../../lib/billing/stripe.js';\nimport { ensurePlanGrant } from '../../models/plan-grants.js';\nimport {\n  getStripeCheckoutSessionByStripeObjectId,\n  insertStripeCheckoutSessionForUserInCourseInstance,\n  markStripeCheckoutSessionCompleted,\n  updateStripeCheckoutSessionData,\n} from '../../models/stripe-checkout-sessions.js';\n\nimport {\n  CourseInstanceStudentUpdateSuccess,\n  StudentCourseInstanceUpgrade,\n} from './studentCourseInstanceUpgrade.html.js';\n\nconst router = Router({ mergeParams: true });\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    // Check if the student is *actually* missing plan grants, or if they just\n    // came across this URL on accident. If they have all the necessary plan grants,\n    // redirect them back to the assessments page.\n    const hasPlanGrants = await checkPlanGrantsForLocals(res.locals);\n    if (hasPlanGrants) {\n      res.redirect(`/pl/course_instance/${res.locals.course_instance.id}/assessments`);\n      return;\n    }\n\n    const institution = InstitutionSchema.parse(res.locals.institution);\n    const course = CourseSchema.parse(res.locals.course);\n    const course_instance = CourseInstanceSchema.parse(res.locals.course_instance);\n    const user = UserSchema.parse(res.locals.authn_user);\n\n    const planGrants = await getPlanGrantsForPartialContexts({\n      institution_id: institution.id,\n      course_instance_id: course_instance.id,\n      user_id: user.user_id,\n    });\n    const requiredPlans = await getRequiredPlansForCourseInstance(res.locals.course_instance.id);\n    const missingPlans = getMissingPlanGrants(planGrants, requiredPlans);\n\n    // Prices may be cached; if they are not, they will be fetched from Stripe.\n    const planPrices = config.stripeSecretKey ? await getPricesForPlans(missingPlans) : null;\n\n    res.send(\n      StudentCourseInstanceUpgrade({\n        course,\n        course_instance,\n        missingPlans,\n        planPrices,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nconst UpgradeBodySchema = z.object({\n  terms_agreement: z.literal('1').optional(),\n  unsafe_plan_names: z.union([z.string(), z.array(z.string())]).transform((val) => {\n    return Array.isArray(val) ? val : [val];\n  }),\n});\n\n// Only a subset of all plans are allowed to be paid for on this page.\nconst PlanNamesSchema = z.array(z.enum(['basic', 'compute']));\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (req.body.__action === 'upgrade') {\n      const institution = InstitutionSchema.parse(res.locals.institution);\n      const course = CourseSchema.parse(res.locals.course);\n      const course_instance = CourseInstanceSchema.parse(res.locals.course_instance);\n      const user = UserSchema.parse(res.locals.authn_user);\n\n      const body = UpgradeBodySchema.parse(req.body);\n\n      if (!body.terms_agreement) {\n        throw new error.HttpStatusError(400, 'You must agree to the terms and conditions.');\n      }\n\n      const planNames = PlanNamesSchema.parse(body.unsafe_plan_names);\n\n      const lineItems: Stripe.Checkout.SessionCreateParams.LineItem[] = [];\n\n      if (planNames.includes('basic')) {\n        const price = await getPriceForPlan('basic');\n        lineItems.push({\n          price: price.id,\n          quantity: 1,\n        });\n      }\n\n      if (planNames.includes('compute')) {\n        const price = await getPriceForPlan('compute');\n        lineItems.push({\n          price: price.id,\n          quantity: 1,\n        });\n      }\n\n      // Validate that the plan names from the client are actually valid. We\n      // consider them to be valid if they are in the list of missing plans,\n      // which in turn is defined as a plan that is required for the current\n      // course instance and isn't already granted to the user.\n      const planGrants = await getPlanGrantsForPartialContexts({\n        institution_id: institution.id,\n        course_instance_id: course_instance.id,\n        user_id: user.user_id,\n      });\n      const requiredPlans = await getRequiredPlansForCourseInstance(res.locals.course_instance.id);\n      const missingPlans = getMissingPlanGrants(planGrants, requiredPlans);\n      if (!planNames.every((planName) => missingPlans.includes(planName))) {\n        throw new error.HttpStatusError(400, 'Invalid plan selection.');\n      }\n\n      const host = getCanonicalHost(req);\n      const urlBase = `${host}/pl/course_instance/${course_instance.id}/upgrade`;\n\n      const stripe = getStripeClient();\n      const customerId = await getOrCreateStripeCustomerId(user.user_id, {\n        name: user.name,\n      });\n      const metadata = {\n        prairielearn_institution_id: institution.id,\n        prairielearn_institution_name: `${institution.long_name} (${institution.short_name})`,\n        prairielearn_course_id: course.id,\n        prairielearn_course_name: `${course.short_name}: ${course.title}`,\n        prairielearn_course_instance_id: course_instance.id,\n        prairielearn_course_instance_name: `${course_instance.long_name} (${course_instance.short_name})`,\n        prairielearn_user_id: user.user_id,\n      };\n      const session = await stripe.checkout.sessions.create({\n        customer: customerId,\n        customer_update: {\n          name: 'auto',\n          address: 'auto',\n        },\n        line_items: lineItems,\n        mode: 'payment',\n        success_url: `${urlBase}/success?session_id={CHECKOUT_SESSION_ID}`,\n        cancel_url: urlBase,\n        metadata,\n        payment_intent_data: {\n          metadata,\n        },\n      });\n\n      await insertStripeCheckoutSessionForUserInCourseInstance({\n        agent_user_id: user.user_id,\n        stripe_object_id: session.id,\n        institution_id: institution.id,\n        course_instance_id: course_instance.id,\n        subject_user_id: user.user_id,\n        data: session,\n        plan_names: planNames,\n      });\n\n      if (!session.url) throw new error.HttpStatusError(500, 'Stripe session URL not found');\n\n      res.redirect(session.url);\n    } else {\n      throw new error.HttpStatusError(400, `Unknown action: ${req.body.__action}`);\n    }\n  }),\n);\n\nrouter.get(\n  '/success',\n  asyncHandler(async (req, res) => {\n    const institution = InstitutionSchema.parse(res.locals.institution);\n    const course = CourseSchema.parse(res.locals.course);\n    const course_instance = CourseInstanceSchema.parse(res.locals.course_instance);\n    const authn_user = UserSchema.parse(res.locals.authn_user);\n\n    if (!req.query.session_id) throw new error.HttpStatusError(400, 'Missing session_id');\n\n    const stripeSessionId = z.string().parse(req.query.session_id);\n\n    const localSession = await getStripeCheckoutSessionByStripeObjectId(stripeSessionId);\n    if (!localSession) {\n      throw new Error(`Unknown Stripe session: ${stripeSessionId}`);\n    }\n    if (localSession.completed_at) {\n      // We already processed this session; just show them the success page.\n      res.send(\n        CourseInstanceStudentUpdateSuccess({\n          course,\n          course_instance,\n          paid: true,\n          resLocals: res.locals,\n        }),\n      );\n      return;\n    }\n\n    const stripe = getStripeClient();\n    const session = await stripe.checkout.sessions.retrieve(stripeSessionId);\n\n    // Verify that the session is associated with the current course instance\n    // and user. We shouldn't hit this during normal operations, but an attacker\n    // could try to replay a session ID from a different course instance or user.\n    if (\n      localSession.course_instance_id !== course_instance.id ||\n      localSession.agent_user_id !== res.locals.authn_user.user_id\n    ) {\n      throw new error.HttpStatusError(400, 'Invalid session');\n    }\n\n    if (session.payment_status === 'paid') {\n      if (!localSession.plan_grants_created) {\n        // Create plan grants and mark the session as completed.\n        //\n        // Doing these mutations in a GET handler isn't great, but we have\n        // reasonable protection in place against replay attacks, and it would\n        // be difficult to perform a CSRF attack because the session must have\n        // been created in Stripe and must refer to the same user and course instance.\n        await runInTransactionAsync(async () => {\n          for (const planName of localSession.plan_names) {\n            await ensurePlanGrant({\n              plan_grant: {\n                plan_name: planName,\n                type: 'stripe',\n                institution_id: institution.id,\n                course_instance_id: course_instance.id,\n                user_id: authn_user.user_id,\n              },\n              authn_user_id: authn_user.user_id,\n            });\n          }\n\n          await updateStripeCheckoutSessionData({\n            stripe_object_id: stripeSessionId,\n            data: session,\n          });\n          await markStripeCheckoutSessionCompleted(session.id);\n        });\n      }\n\n      res.send(\n        CourseInstanceStudentUpdateSuccess({\n          course,\n          course_instance,\n          paid: true,\n          resLocals: res.locals,\n        }),\n      );\n    } else {\n      // The user paid with an asynchronous payment method (e.g. ACH), so we\n      // can't immediately grant them any plans. Instead, we'll show a thanks\n      // page and let them know that their plans will be granted once the\n      // payment is complete.\n      //\n      // We don't expect to hit this case, since we're only offering credit\n      // card payments at the moment, but this at least allows us to behave\n      // sensibly if something goes very wrong.\n      res.send(\n        CourseInstanceStudentUpdateSuccess({\n          course,\n          course_instance,\n          paid: false,\n          resLocals: res.locals,\n        }),\n      );\n    }\n  }),\n);\n\nexport default router;\n"]}