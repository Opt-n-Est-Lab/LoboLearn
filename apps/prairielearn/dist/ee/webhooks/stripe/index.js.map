{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/ee/webhooks/stripe/index.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport type Stripe from 'stripe';\n\nimport * as error from '@prairielearn/error';\nimport { runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { config } from '../../../lib/config.js';\nimport { selectInstitutionForCourseInstance } from '../../../models/institution.js';\nimport { clearStripeProductCache, getStripeClient } from '../../lib/billing/stripe.js';\nimport { ensurePlanGrant } from '../../models/plan-grants.js';\nimport {\n  getStripeCheckoutSessionByStripeObjectId,\n  markStripeCheckoutSessionCompleted,\n  updateStripeCheckoutSessionData,\n} from '../../models/stripe-checkout-sessions.js';\n\nconst router = express.Router({ mergeParams: true });\n\nfunction constructEvent(req: express.Request) {\n  if (!config.stripeWebhookSigningSecret) {\n    throw new Error('Stripe is not configured.');\n  }\n\n  const stripe = getStripeClient();\n  try {\n    return stripe.webhooks.constructEvent(\n      req.body,\n      req.headers['stripe-signature'] as string,\n      config.stripeWebhookSigningSecret,\n    );\n  } catch (err) {\n    throw new error.HttpStatusError(400, `Webhook error: ${err.message}`);\n  }\n}\n\nasync function handleSessionUpdate(session: Stripe.Checkout.Session) {\n  // If the order is paid, ensure that plan grants are created. We may have\n  // already done this in the success page for the session, so we need to\n  // gracefully handle duplicate plan grants.\n  if (session.payment_status === 'paid') {\n    const localSession = await getStripeCheckoutSessionByStripeObjectId(session.id);\n\n    if (!localSession) {\n      // We got a webhook for a session that we don't know about. It was likely\n      // created by a different PrairieLearn instance, so we can safely ignore.\n      return;\n    }\n\n    if (localSession.plan_grants_created) {\n      // We already handled the results from this session, so we don't have to\n      // do anything else.\n      return;\n    }\n\n    const course_instance_id = localSession.course_instance_id;\n    if (!course_instance_id) {\n      throw new Error('Stripe checkout session missing course_instance_id');\n    }\n\n    const subject_user_id = localSession.subject_user_id;\n    if (!subject_user_id) {\n      throw new Error('Stripe checkout session missing subject_user_id');\n    }\n\n    const institution = await selectInstitutionForCourseInstance({ course_instance_id });\n\n    await runInTransactionAsync(async () => {\n      for (const planName of localSession.plan_names) {\n        await ensurePlanGrant({\n          plan_grant: {\n            plan_name: planName,\n            type: 'stripe',\n            institution_id: institution.id,\n            course_instance_id,\n            user_id: subject_user_id,\n          },\n          authn_user_id: localSession.agent_user_id,\n        });\n      }\n\n      await updateStripeCheckoutSessionData({\n        stripe_object_id: session.id,\n        data: session,\n      });\n      await markStripeCheckoutSessionCompleted(session.id);\n    });\n  }\n}\n\nrouter.post(\n  '/',\n  express.raw({ type: 'application/json' }),\n  asyncHandler(async (req, res) => {\n    const event = constructEvent(req);\n\n    if (\n      event.type === 'checkout.session.completed' ||\n      event.type === 'checkout.session.async_payment_succeeded'\n    ) {\n      const session = event.data.object as Stripe.Checkout.Session;\n      await handleSessionUpdate(session);\n    } else if (event.type === 'product.updated') {\n      const product = event.data.object as Stripe.Product;\n      const productId = product.id;\n      await clearStripeProductCache(productId);\n    } else if (event.type === 'price.updated') {\n      const price = event.data.object as Stripe.Price;\n      const productId = typeof price.product === 'string' ? price.product : price.product.id;\n      await clearStripeProductCache(productId);\n    }\n\n    res.sendStatus(204);\n  }),\n);\n\nexport default router;\n"]}