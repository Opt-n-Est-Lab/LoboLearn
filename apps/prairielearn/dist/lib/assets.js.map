{"version":3,"file":"assets.js","sourceRoot":"","sources":["../../src/lib/assets.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from 'node:crypto';\nimport * as fs from 'node:fs';\nimport { createRequire } from 'node:module';\nimport * as path from 'node:path';\n\nimport express from 'express';\nimport { type HashElementNode, hashElement } from 'folder-hash';\nimport { v4 as uuid } from 'uuid';\n\nimport * as compiledAssets from '@prairielearn/compiled-assets';\nimport { type HtmlSafeString } from '@prairielearn/html';\n\nimport staticNodeModules from '../middlewares/staticNodeModules.js';\nimport elementFiles from '../pages/elementFiles/elementFiles.js';\n\nimport { config } from './config.js';\nimport { APP_ROOT_PATH } from './paths.js';\n\nlet assetsPrefix: string | null = null;\nlet elementsHash: HashElementNode | null = null;\nlet publicHash: HashElementNode | null = null;\nconst cachedPackageVersionHashes: Record<string, string> = {};\n\nasync function computeElementsHash() {\n  elementsHash = await hashElement(path.join(APP_ROOT_PATH, 'elements'), { encoding: 'hex' });\n}\n\nasync function computePublicHash() {\n  publicHash = await hashElement(path.join(APP_ROOT_PATH, 'public'), { encoding: 'hex' });\n}\n\n/**\n * With a {@link HashElementNode} representing the hash of a directory, returns\n * a hash of a file within that directory.\n */\nfunction getHashForPath(hashes: HashElementNode, assetPath: string): string {\n  const components = assetPath.split('/');\n  let currentHashes = hashes;\n  for (const component of components) {\n    const child = currentHashes.children.find((c) => c.name === component);\n    if (!child) {\n      // If we can't find a hash, the file probably doesn't exist. Use the highest\n      // level hash we have.\n      break;\n    }\n    currentHashes = child;\n  }\n\n  return currentHashes.hash.slice(0, 16);\n}\n\n/**\n * For an asset path to a file within a `node_modules` directory, returns the\n * name of the package that contains the file. For instance, for an asset path\n * `foo/bar.js`, returns `foo`, and for an asset path `@scope/foo/bar/baz.js`,\n * returns `@scope/foo`.\n */\nfunction getPackageNameForAssetPath(assetPath: string): string {\n  const [maybeScope, maybeModule] = assetPath.split('/');\n  if (maybeScope.indexOf('@') === 0) {\n    // This is a scoped module\n    return `${maybeScope}/${maybeModule}`;\n  } else {\n    return maybeScope;\n  }\n}\n\n/**\n * Returns the version of the given package within `node_modules`.\n */\nfunction getPackageVersion(packageName: string): string {\n  const require = createRequire(import.meta.url);\n\n  try {\n    return require(`${packageName}/package.json`).version;\n  } catch (e) {\n    if (e.code !== 'ERR_PACKAGE_PATH_NOT_EXPORTED') {\n      throw e;\n    }\n\n    // If we can't directly resolve the package's `package.json` file, we'll\n    // `require.resolve` the package itself, and then do a little manipulation\n    // to get the `package.json` path from there.\n\n    // Get the resolved path to the package entrypoint, which will look something\n    // like `/absolute/path/to/node_modules/package-name/index.js`.\n    const pkgPath = require.resolve(packageName);\n\n    // Strip off everything after the last `/node_modules/`, then append the\n    // package name.\n    const nodeModulesToken = '/node_modules/';\n    const lastNodeModulesIndex = pkgPath.lastIndexOf(nodeModulesToken);\n    const pkgJsonPath = path.resolve(\n      pkgPath.slice(0, lastNodeModulesIndex + nodeModulesToken.length),\n      packageName,\n      'package.json',\n    );\n\n    const pkgJson = JSON.parse(fs.readFileSync(pkgJsonPath, 'utf-8'));\n    return pkgJson.version;\n  }\n}\n\n/**\n * For an asset path to a file within a `node_modules` directory, returns a\n * hash of the version of the package that contains the file.\n */\nfunction getNodeModulesAssetHash(assetPath: string): string {\n  const packageName = getPackageNameForAssetPath(assetPath);\n\n  if (config.devMode && packageName.startsWith('@prairielearn/')) {\n    // In dev mode, we don't want to cache the hash of our own packages, or use\n    // a repeatable hash that would cause the browser to cache the asset. This\n    // is because we want to be able to change them without changing the package\n    // version number.\n    return uuid();\n  }\n\n  // Reading files synchronously and computing cryptographic hashes are both\n  // relatively expensive; cache the hashes for each package.\n  let hash = cachedPackageVersionHashes[packageName];\n  if (!hash) {\n    const version = getPackageVersion(packageName);\n    hash = crypto.createHash('sha256').update(version).digest('hex').slice(0, 16);\n    cachedPackageVersionHashes[packageName] = hash;\n  }\n  return hash;\n}\n\nfunction assertAssetsPrefix(): string {\n  if (!assetsPrefix) {\n    throw new Error('init() must be called before accessing assets');\n  }\n  return assetsPrefix;\n}\n\n/**\n * Computes the hashes of directories from which we serve cacheable assets.\n * Should be run at server startup before any responses are served.\n *\n * Also initializes the assets compiler.\n */\nexport async function init() {\n  await Promise.all([computeElementsHash(), computePublicHash()]);\n  assetsPrefix = config.assetsPrefix;\n\n  await compiledAssets.init({\n    dev: config.devMode,\n    sourceDirectory: path.resolve(APP_ROOT_PATH, 'assets'),\n    buildDirectory: path.resolve(APP_ROOT_PATH, 'public/build'),\n    publicPath: `${assetsPrefix}/build`,\n  });\n}\n\n/**\n * Shuts down the development assets compiler if it is running.\n */\nexport async function close() {\n  await compiledAssets.close();\n}\n\n/**\n * Applies middleware to the given Express app to serve static assets.\n */\nexport function applyMiddleware(app: express.Application) {\n  const assetsPrefix = assertAssetsPrefix();\n  const router = express.Router();\n\n  // Compiled assets have a digest/hash embedded in their filenames, so they\n  // don't require a separate cachebuster.\n  router.use('/build', compiledAssets.handler());\n\n  router.use(\n    '/node_modules/:cachebuster',\n    staticNodeModules('.', {\n      // In dev mode, we assume that `node_modules` won't change while the server\n      // is running, so we'll enable long-term caching.\n      maxAge: '1y',\n      immutable: true,\n    }),\n  );\n  router.use(\n    '/public/:cachebuster',\n    express.static(path.join(APP_ROOT_PATH, 'public'), {\n      // In dev mode, assets are likely to change while the server is running,\n      // so we'll prevent them from being cached.\n      maxAge: config.devMode ? 0 : '1y',\n      immutable: !config.devMode,\n    }),\n  );\n  router.use(\n    '/elements/:cachebuster',\n    elementFiles({\n      publicQuestionEndpoint: false,\n      coreElements: true,\n    }),\n  );\n\n  app.use(assetsPrefix, router);\n}\n\n/**\n * Returns the path that the given asset should be accessed from by clients.\n *\n * @param assetPath The path to the file inside the `/public` directory.\n */\nexport function assetPath(assetPath: string): string {\n  const assetsPrefix = assertAssetsPrefix();\n  const hash = getHashForPath(publicHash as HashElementNode, assetPath);\n  return `${assetsPrefix}/public/${hash}/${assetPath}`;\n}\n\n/**\n * Returns the path that the given asset in node_modules should be accessed\n * from by clients.\n *\n * @param assetPath The path to the file inside the `/node_modules` directory.\n */\nexport function nodeModulesAssetPath(assetPath: string): string {\n  const assetsPrefix = assertAssetsPrefix();\n  const hash = getNodeModulesAssetHash(assetPath);\n  return `${assetsPrefix}/node_modules/${hash}/${assetPath}`;\n}\n\n/**\n * Returns the path a given core element asset should be loaded from.\n * Will include a hash of the `/elements` directory in the URL to allow for\n * assets to be immutably cached by clients.\n */\nexport function coreElementAssetPath(assetPath: string): string {\n  const assetsPrefix = assertAssetsPrefix();\n  const hash = getHashForPath(elementsHash as HashElementNode, assetPath);\n  return `${assetsPrefix}/elements/${hash}/${assetPath}`;\n}\n\n/**\n * Returns the path that client files for a given course element should\n * be loaded from. Takes into account the URL prefix and course hash to\n * allow for clients to immutably cache assets.\n */\nexport function courseElementAssetBasePath(courseHash: string | null, urlPrefix: string): string {\n  if (!courseHash) {\n    // If for some reason we don't have a course hash, fall back to the\n    // non-cached path so that we don't accidentally instruct the client\n    // to indefinitely cache a file without a proper cachebuster.\n    return `${urlPrefix}/elements`;\n  }\n\n  return `${urlPrefix}/cacheableElements/${courseHash}`;\n}\n\n/**\n * Returns the path a given course element asset should be loaded from.\n * Takes into account the URL prefix and course hash to allow for clients to\n * immutably cache assets.\n */\nexport function courseElementAssetPath(\n  courseHash: string | null,\n  urlPrefix: string,\n  assetPath: string,\n): string {\n  return `${courseElementAssetBasePath(courseHash, urlPrefix)}/${assetPath}`;\n}\n\n/**\n * Returns the path that client files for a given course element extension should\n * be loaded from. Takes into account the URL prefix and course hash to\n * allow for clients to immutably cache assets.\n */\nexport function courseElementExtensionAssetBasePath(\n  courseHash: string | null,\n  urlPrefix: string,\n): string {\n  if (!courseHash) {\n    // If for some reason we don't have a course hash, fall back to the\n    // non-cached path so that we don't accidentally instruct the client\n    // to indefinitely cache a file without a proper cachebuster.\n    return `${urlPrefix}/elementExtensions`;\n  }\n\n  return `${urlPrefix}/cacheableElementExtensions/${courseHash}`;\n}\n\n/**\n * Returns the path a given course element extension asset should be loaded from.\n * Takes into account the URL prefix and course hash to allow for clients to\n * immutably cache assets.\n */\nexport function courseElementExtensionAssetPath(\n  courseHash: string | null,\n  urlPrefix: string,\n  assetPath: string,\n): string {\n  return `${courseElementExtensionAssetBasePath(courseHash, urlPrefix)}/${assetPath}`;\n}\n\nexport function compiledScriptTag(sourceFile: string): HtmlSafeString {\n  return compiledAssets.compiledScriptTag(sourceFile);\n}\n\nexport function compiledStylesheetTag(sourceFile: string): HtmlSafeString {\n  return compiledAssets.compiledStylesheetTag(sourceFile);\n}\n\nexport function compiledScriptPath(sourceFile: string): string {\n  return compiledAssets.compiledScriptPath(sourceFile);\n}\n\nexport function compiledStylesheetPath(sourceFile: string): string {\n  return compiledAssets.compiledStylesheetPath(sourceFile);\n}\n"]}