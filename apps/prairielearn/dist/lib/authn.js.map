{"version":3,"file":"authn.js","sourceRoot":"","sources":["../../src/lib/authn.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,2BAA2B,EAAE,MAAM,oBAAoB,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/C,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAE7C,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAkBhD,MAAM,CAAC,KAAK,UAAU,QAAQ,CAC5B,GAAY,EACZ,GAAa,EACb,WAAyB,EACzB,gBAAiC,EAAE;IAEnC,MAAM,OAAO,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,aAAa,EAAE,CAAC;IAEtD,IAAI,OAAwB,CAAC;IAC7B,IAAI,WAAW,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;QACtC,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC;IAChC,CAAC;SAAM,CAAC;QACN,MAAM,MAAM,GAAG;YACb,WAAW,CAAC,GAAG;YACf,WAAW,CAAC,IAAI;YAChB,WAAW,CAAC,GAAG;YACf,WAAW,CAAC,KAAK;YACjB,WAAW,CAAC,QAAQ;YACpB,WAAW,CAAC,cAAc;SAC3B,CAAC;QAEF,MAAM,qBAAqB,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC;QAEtF,OAAO,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAChD,MAAM,EAAE,MAAM,EAAE,mBAAmB,EAAE,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,MAAM,KAAK,wBAAwB,EAAE,CAAC;YACxC,MAAM,IAAI,YAAY,CACpB,sDAAsD,mBAAmB,EAAE,CAC5E,CAAC;QACJ,CAAC;IACH,CAAC;IAED,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,gBAAgB,CAC/C,GAAG,CAAC,WAAW,EACf,EAAE,OAAO,EAAE,EACX,CAAC,CAAC,MAAM,CAAC;QACP,IAAI,EAAE,UAAU;QAChB,WAAW,EAAE,iBAAiB;QAC9B,gBAAgB,EAAE,CAAC,CAAC,OAAO,EAAE;QAC7B,4BAA4B,EAAE,CAAC,CAAC,MAAM,EAAE;KACzC,CAAC,CACH,CAAC;IAEF,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,OAAO,CAAC,CAAC;IAC5D,CAAC;IAED,0FAA0F;IAC1F,GAAG,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;IAE9B,sDAAsD;IACtD,GAAG,CAAC,OAAO,CAAC,mBAAmB,GAAG,WAAW,CAAC,QAAQ,CAAC;IAEvD,kEAAkE;IAClE,4BAA4B;IAC5B,IAAI,GAAG,CAAC,OAAO,CAAC,qBAAqB,IAAI,GAAG,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC;QAC5E,WAAW,CAAC,GAAG,EAAE,CAAC,uBAAuB,EAAE,wBAAwB,CAAC,CAAC,CAAC;IACxE,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;QACrB,IAAI,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,kBAAkB,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;YACtC,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC;YACxC,WAAW,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACvD,CAAC;QAED,2EAA2E;QAC3E,IAAI,YAAY,EAAE,EAAE,CAAC;YACnB,MAAM,2BAA2B,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC9E,CAAC;QAED,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACvB,OAAO;IACT,CAAC;IAED,gFAAgF;IAEhF,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC;IAC1C,GAAG,CAAC,MAAM,CAAC,iBAAiB,GAAG,YAAY,CAAC,WAAW,CAAC;IACxD,GAAG,CAAC,MAAM,CAAC,mBAAmB,GAAG,WAAW,CAAC,QAAQ,CAAC;IACtD,GAAG,CAAC,MAAM,CAAC,sBAAsB,GAAG,YAAY,CAAC,gBAAgB,CAAC;IAElE,MAAM,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC;IACjE,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,2BAA2B,IAAI,iBAAiB,CAAC;IAChF,GAAG,CAAC,MAAM,CAAC,uBAAuB,GAAG,UAAU,KAAK,QAAQ,CAAC;IAC7D,GAAG,CAAC,MAAM,CAAC,gBAAgB;QACzB,GAAG,CAAC,MAAM,CAAC,sBAAsB,IAAI,GAAG,CAAC,MAAM,CAAC,uBAAuB,CAAC;IAE1E,GAAG,CAAC,MAAM,CAAC,4BAA4B;QACrC,GAAG,CAAC,MAAM,CAAC,gBAAgB;YAC3B,CAAC,MAAM,KAAK,CAAC,QAAQ,CACnB,GAAG,CAAC,2BAA2B,EAC/B;gBACE,cAAc,EAAE,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE;gBAC/C,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;aACvC,EACD,CAAC,CAAC,OAAO,EAAE,CACZ,CAAC,CAAC;IAEL,GAAG,CAAC,MAAM,CAAC,4BAA4B,GAAG,YAAY,CAAC,4BAA4B,CAAC;AACtF,CAAC","sourcesContent":["// @ts-check\nimport type { Request, Response } from 'express';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { redirectToTermsPageIfNeeded } from '../ee/lib/terms.js';\nimport { clearCookie } from '../lib/cookie.js';\n\nimport { config } from './config.js';\nimport { InstitutionSchema, UserSchema } from './db-types.js';\nimport { isEnterprise } from './license.js';\nimport { HttpRedirect } from './redirect.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ninterface LoadUserOptions {\n  /** Redirect after processing? */\n  redirect?: boolean;\n}\n\nexport interface LoadUserAuth {\n  uid?: string;\n  uin?: string | null;\n  name?: string | null;\n  email?: string | null;\n  provider: string;\n  /** If present, skip the users_select_or_insert call */\n  user_id?: number | string;\n  institution_id?: number | string | null;\n}\n\nexport async function loadUser(\n  req: Request,\n  res: Response,\n  authnParams: LoadUserAuth,\n  optionsParams: LoadUserOptions = {},\n) {\n  const options = { redirect: false, ...optionsParams };\n\n  let user_id: number | string;\n  if (authnParams.user_id !== undefined) {\n    user_id = authnParams.user_id;\n  } else {\n    const params = [\n      authnParams.uid,\n      authnParams.name,\n      authnParams.uin,\n      authnParams.email,\n      authnParams.provider,\n      authnParams.institution_id,\n    ];\n\n    const userSelectOrInsertRes = await sqldb.callAsync('users_select_or_insert', params);\n\n    user_id = userSelectOrInsertRes.rows[0].user_id;\n    const { result, user_institution_id } = userSelectOrInsertRes.rows[0];\n    if (result === 'invalid_authn_provider') {\n      throw new HttpRedirect(\n        `/pl/login?unsupported_provider=true&institution_id=${user_institution_id}`,\n      );\n    }\n  }\n\n  const selectedUser = await sqldb.queryOptionalRow(\n    sql.select_user,\n    { user_id },\n    z.object({\n      user: UserSchema,\n      institution: InstitutionSchema,\n      is_administrator: z.boolean(),\n      news_item_notification_count: z.number(),\n    }),\n  );\n\n  if (!selectedUser) {\n    throw new Error('user not found with user_id ' + user_id);\n  }\n\n  // The session store will pick this up and store it in the `user_sessions.user_id` column.\n  req.session.user_id = user_id;\n\n  // Our authentication middleware will read this value.\n  req.session.authn_provider_name = authnParams.provider;\n\n  // After explicitly authenticating, clear the cookie that disables\n  // automatic authentication.\n  if (req.cookies.pl_disable_auto_authn || req.cookies.pl2_disable_auto_authn) {\n    clearCookie(res, ['pl_disable_auto_authn', 'pl2_disable_auto_authn']);\n  }\n\n  if (options.redirect) {\n    let redirUrl = config.homeUrl;\n    if ('pl2_pre_auth_url' in req.cookies) {\n      redirUrl = req.cookies.pl2_pre_auth_url;\n      clearCookie(res, ['preAuthUrl', 'pl2_pre_auth_url']);\n    }\n\n    // Potentially prompt the user to accept the terms before redirecting them.\n    if (isEnterprise()) {\n      await redirectToTermsPageIfNeeded(res, selectedUser.user, req.ip, redirUrl);\n    }\n\n    res.redirect(redirUrl);\n    return;\n  }\n\n  // If we fall-through here, set the res.locals.authn_user variables (middleware)\n\n  res.locals.authn_user = selectedUser.user;\n  res.locals.authn_institution = selectedUser.institution;\n  res.locals.authn_provider_name = authnParams.provider;\n  res.locals.authn_is_administrator = selectedUser.is_administrator;\n\n  const defaultAccessType = config.devMode ? 'active' : 'inactive';\n  const accessType = req.cookies.pl2_access_as_administrator || defaultAccessType;\n  res.locals.access_as_administrator = accessType === 'active';\n  res.locals.is_administrator =\n    res.locals.authn_is_administrator && res.locals.access_as_administrator;\n\n  res.locals.is_institution_administrator =\n    res.locals.is_administrator ||\n    (await sqldb.queryRow(\n      sql.select_is_institution_admin,\n      {\n        institution_id: res.locals.authn_institution.id,\n        user_id: res.locals.authn_user.user_id,\n      },\n      z.boolean(),\n    ));\n\n  res.locals.news_item_notification_count = selectedUser.news_item_notification_count;\n}\n"]}