{"version":3,"file":"aws.js","sourceRoot":"","sources":["../../src/lib/aws.ts"],"names":[],"mappings":"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","sourcesContent":["import { type IncomingMessage } from 'node:http';\nimport { pipeline } from 'node:stream/promises';\nimport * as path from 'path';\n\nimport { type CompleteMultipartUploadCommandOutput, S3 } from '@aws-sdk/client-s3';\nimport { fromNodeProviderChain } from '@aws-sdk/credential-providers';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { type NodeJsClient, type SdkStream } from '@smithy/types';\nimport debugfn from 'debug';\nimport fs from 'fs-extra';\n\nimport { makeAwsConfigProvider } from '@prairielearn/aws';\nimport { logger } from '@prairielearn/logger';\n\nimport { config } from './config.js';\n\nconst debug = debugfn('prairielearn:aws');\n\nconst awsConfigProvider = makeAwsConfigProvider({\n  credentials: fromNodeProviderChain(),\n  getClientConfig: () => ({\n    region: config.awsRegion,\n    ...config.awsServiceGlobalOptions,\n  }),\n  getS3ClientConfig: () => {\n    if (!config.runningInEc2) {\n      // If we're not running in EC2, assume we're running with a local s3rver instance.\n      // See https://github.com/jamhall/s3rver for more details.\n      return {\n        forcePathStyle: true,\n        credentials: {\n          accessKeyId: 'S3RVER',\n          secretAccessKey: 'S3RVER',\n        },\n        endpoint: 'http://127.0.0.1:5000',\n      };\n    }\n\n    return {};\n  },\n});\n\nexport const makeS3ClientConfig = awsConfigProvider.makeS3ClientConfig;\n\nexport const makeAwsClientConfig = awsConfigProvider.makeAwsClientConfig;\n\n/**\n * Upload a local file or directory to S3.\n *\n * @param s3Bucket - The S3 bucket name.\n * @param s3Path - The S3 destination path.\n * @param localPath - The local source path.\n * @param isDirectory - Whether the upload source is a directory (defaults to false).\n * @param buffer - A file buffer if local source path falsy.\n */\nexport async function uploadToS3(\n  s3Bucket: string,\n  s3Path: string,\n  localPath: string | null,\n  isDirectory = false,\n  buffer: Buffer | null = null,\n): Promise<CompleteMultipartUploadCommandOutput> {\n  const s3 = new S3(makeS3ClientConfig());\n\n  let body: fs.ReadStream | string | Buffer;\n  if (isDirectory) {\n    body = '';\n    s3Path += s3Path.endsWith('/') ? '' : '/';\n  } else {\n    if (localPath) {\n      body = fs.createReadStream(localPath);\n    } else if (buffer) {\n      body = buffer;\n    } else {\n      throw new Error('must specify localPath or buffer');\n    }\n  }\n\n  const res = await new Upload({\n    client: s3,\n    params: {\n      Bucket: s3Bucket,\n      Key: s3Path,\n      Body: body,\n    },\n  }).done();\n  if (localPath) {\n    logger.verbose(`Uploaded localPath=${localPath} to s3://${s3Bucket}/${s3Path}`);\n  } else {\n    logger.verbose(`Uploaded buffer to s3://${s3Bucket}/${s3Path}`);\n  }\n  return res;\n}\n\n/**\n * Download a file or directory from S3.\n *\n * @param s3Bucket - The S3 bucket name.\n * @param s3Path - The S3 source path.\n * @param localPath - The local target path.\n */\nexport async function downloadFromS3(s3Bucket: string, s3Path: string, localPath: string) {\n  if (localPath.endsWith('/')) {\n    debug(`downloadFromS3: bypassing S3 and creating directory localPath=${localPath}`);\n    await fs.promises.mkdir(localPath, { recursive: true });\n    return;\n  }\n\n  debug(`downloadFromS3: creating containing directory for file localPath=${localPath}`);\n  await fs.promises.mkdir(path.dirname(localPath), { recursive: true });\n\n  const s3 = new S3(makeS3ClientConfig()) as NodeJsClient<S3>;\n  const res = await s3.getObject({\n    Bucket: s3Bucket,\n    Key: s3Path,\n  });\n  if (res.Body === undefined) {\n    throw new Error('No data returned from S3');\n  }\n  const s3Stream = res.Body;\n  const fileStream = fs.createWriteStream(localPath);\n\n  await pipeline(s3Stream, fileStream);\n}\n\n/**\n * Delete a file or directory from S3.\n *\n * @param s3Bucket - The S3 bucket name.\n * @param s3Path - The S3 target path.\n * @param isDirectory - Whether the deletion target is a directory (defaults to false).\n */\nexport async function deleteFromS3(s3Bucket: string, s3Path: string, isDirectory = false) {\n  const s3 = new S3(makeS3ClientConfig());\n\n  if (isDirectory) {\n    s3Path += s3Path.endsWith('/') ? '' : '/';\n  }\n  await s3.deleteObject({\n    Bucket: s3Bucket,\n    Key: s3Path,\n  });\n  debug(`Deleted s3://${s3Bucket}/${s3Path}`);\n}\n\nexport async function getFromS3(bucket: string, key: string, buffer: true): Promise<Buffer>;\nexport async function getFromS3(\n  bucket: string,\n  key: string,\n  buffer: false,\n): Promise<SdkStream<IncomingMessage>>;\n/**\n * Get a file from S3.\n *\n * @param bucket - S3 bucket name.\n * @param key - The S3 target path.\n * @param buffer - Defaults to true to return buffer.\n * @return Buffer or ReadableStream type from S3 file contents.\n */\nexport async function getFromS3(\n  bucket: string,\n  key: string,\n  buffer = true,\n): Promise<Buffer | SdkStream<IncomingMessage>> {\n  const s3 = new S3(makeS3ClientConfig()) as NodeJsClient<S3>;\n  const res = await s3.getObject({ Bucket: bucket, Key: key });\n  if (!res.Body) throw new Error('No data returned from S3');\n  logger.verbose(`Fetched data from s3://${bucket}/${key}`);\n\n  if (buffer) {\n    return Buffer.from(await res.Body.transformToByteArray());\n  } else {\n    return res.Body;\n  }\n}\n"]}