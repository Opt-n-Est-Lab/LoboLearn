{"version":3,"file":"canonical-logger.js","sourceRoot":"","sources":["../../src/lib/canonical-logger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAErD,OAAO,EAAkD,MAAM,SAAS,CAAC;AAEzE,MAAM,GAAG,GAAG,IAAI,iBAAiB,EAAmB,CAAC;AAQrD,MAAM,OAAO,eAAe;IAClB,KAAK,GAAwB,EAAE,CAAC;IAExC,MAAM,CAAC,OAA4B;QACjC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,SAAS,CAAC,GAAW,EAAE,KAAK,GAAG,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;IACnD,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AAED,MAAM,UAAU,kBAAkB;IAChC,OAAO,GAAG,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC;AAChC,CAAC;AAED,MAAM,UAAU,yBAAyB;IACvC,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACzD,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC9C,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,MAAM,eAAe,GAAqB;IAC/C,MAAM,CAAC,OAA4B;QACjC,kBAAkB,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACD,SAAS,CAAC,GAAW,EAAE,KAAc;QACnC,kBAAkB,EAAE,EAAE,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;IACD,IAAI;QACF,OAAO,kBAAkB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAC5C,CAAC;CACF,CAAC","sourcesContent":["import { AsyncLocalStorage } from 'node:async_hooks';\n\nimport { type NextFunction, type Request, type Response } from 'express';\n\nconst als = new AsyncLocalStorage<CanonicalLogger>();\n\nexport interface ICanonicalLogger {\n  append(entries: Record<string, any>): void;\n  increment(key: string, value?: number): void;\n  data(): Record<string, any>;\n}\n\nexport class CanonicalLogger implements ICanonicalLogger {\n  private _data: Record<string, any> = {};\n\n  append(entries: Record<string, any>) {\n    Object.assign(this._data, entries);\n  }\n\n  increment(key: string, value = 1) {\n    this._data[key] = (this._data[key] || 0) + value;\n  }\n\n  data() {\n    return this._data;\n  }\n}\n\nexport function getCanonicalLogger(): CanonicalLogger | null {\n  return als.getStore() ?? null;\n}\n\nexport function canonicalLoggerMiddleware() {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const canonicalLogger = new CanonicalLogger();\n    als.run(canonicalLogger, () => next());\n  };\n}\n\nexport const canonicalLogger: ICanonicalLogger = {\n  append(entries: Record<string, any>) {\n    getCanonicalLogger()?.append(entries);\n  },\n  increment(key: string, value?: number) {\n    getCanonicalLogger()?.increment(key, value);\n  },\n  data() {\n    return getCanonicalLogger()?.data() ?? {};\n  },\n};\n"]}