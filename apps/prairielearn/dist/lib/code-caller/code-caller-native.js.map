{"version":3,"file":"code-caller-native.js","sourceRoot":"","sources":["../../../src/lib/code-caller/code-caller-native.ts"],"names":[],"mappings":"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","sourcesContent":["import { type ChildProcess } from 'child_process';\nimport * as child_process from 'node:child_process';\nimport { type SpawnOptions } from 'node:child_process';\nimport * as path from 'node:path';\nimport { type Readable, type Writable } from 'stream';\n\nimport debugfn from 'debug';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { run } from '@prairielearn/run';\n\nimport { deferredPromise } from '../deferred.js';\nimport { APP_ROOT_PATH, REPOSITORY_ROOT_PATH } from '../paths.js';\n\nimport {\n  type CallType,\n  type CodeCaller,\n  type CodeCallerResult,\n  FunctionMissingError,\n  type PrepareForCourseOptions,\n} from './code-caller-shared.js';\n\ninterface CodeCallerNativeChildProcess extends ChildProcess {\n  stdio: [Writable, Readable, Readable, Readable, Readable];\n}\n\nconst CREATED = Symbol('CREATED');\nconst WAITING = Symbol('WAITING');\nconst IN_CALL = Symbol('IN_CALL');\nconst EXITING = Symbol('EXITING');\nconst EXITED = Symbol('EXITED');\nconst RESTARTING = Symbol('RESTARTING');\n\ntype CodeCallerState =\n  | typeof CREATED\n  | typeof WAITING\n  | typeof IN_CALL\n  | typeof EXITING\n  | typeof EXITED\n  | typeof RESTARTING;\n\nconst debug = debugfn('prairielearn:code-caller-native');\n\ninterface CodeCallerNativeOptions {\n  dropPrivileges: boolean;\n  questionTimeoutMilliseconds: number;\n  pingTimeoutMilliseconds: number;\n  pythonVenvSearchPaths: string[];\n  errorLogger: (msg: string, data?: any) => void;\n}\n\ninterface CodeCallerNativeOptionsInternal extends Required<CodeCallerNativeOptions> {\n  pythonExecutable: string;\n}\n\nexport interface ErrorData {\n  state: CodeCallerState;\n  childIsNull: boolean;\n  callbackIsNull: boolean;\n  timeoutIDIsNull: boolean;\n  outputStdout: string;\n  outputStderr: string;\n  outputBoth: string;\n  outputData: string;\n  stack: string;\n  lastCallData: any;\n}\n\nexport type CodeCallerError = Error & { data?: ErrorData };\n\n/**\n  Internal state machine\n  ======================\n\n  The list of internal states and the possible transitions are:\n\n  CREATED: Child process is not yet started.\n    -> WAITING, EXITED\n\n  WAITING: Child process is running but no call is active, everything is healthy.\n    -> IN_CALL, RESTARTING, EXITING, EXITED\n\n  IN_CALL: A call is currently running.\n    -> WAITING, EXITING, EXITED\n\n  RESTARTING: The worker is restarting; waiting for confirmation of successful restart.\n    -> WAITING, EXITING\n\n  EXITING: The child process is being terminated.\n    -> EXITED\n\n  EXITED: The child process has exited.\n    -> none\n\n*/\n\nexport class CodeCallerNative implements CodeCaller {\n  state: CodeCallerState;\n  uuid: string;\n  child: CodeCallerNativeChildProcess | null;\n  callback: ((err: CodeCallerError | null, data?: any, output?: string) => void) | null;\n  timeoutID: NodeJS.Timeout | null;\n  options: CodeCallerNativeOptionsInternal;\n  outputStdout: string[];\n  outputStderr: string[];\n  outputBoth: string[];\n  outputData: string[];\n  outputRestart: string;\n  lastCallData: any;\n  coursePath: string | null;\n  forbiddenModules: string[];\n\n  /**\n   * Creating a new {@link CodeCallerNative} instance requires some async work,\n   * so we use this static method to create a new instance since a constructor\n   * cannot be async.\n   */\n  static async create(options: CodeCallerNativeOptions): Promise<CodeCallerNative> {\n    const pythonExecutable = await run(async () => {\n      for (const p of options.pythonVenvSearchPaths) {\n        const venvPython = path.resolve(REPOSITORY_ROOT_PATH, path.join(p, 'bin', 'python3.10'));\n        if (await fs.pathExists(venvPython)) return venvPython;\n      }\n\n      // Assume we're using the system Python.\n      return 'python3.10';\n    });\n\n    const codeCaller = new CodeCallerNative({\n      pythonExecutable,\n      ...options,\n    });\n    await codeCaller.ensureChild();\n    return codeCaller;\n  }\n\n  /**\n   * Creates a new {@link CodeCallerNative} with the specified options.\n   */\n  private constructor(options: CodeCallerNativeOptionsInternal) {\n    this.state = CREATED;\n    this.uuid = uuidv4();\n\n    this.debug('enter constructor()');\n\n    this.child = null;\n    this.callback = null;\n    this.timeoutID = null;\n\n    this.options = options;\n\n    // Accumulators for output from the child process.\n    this.outputStdout = [];\n    this.outputStderr = [];\n    this.outputBoth = [];\n    this.outputData = [];\n    this.outputRestart = '';\n\n    // for error logging\n    this.lastCallData = null;\n\n    this.coursePath = null;\n    this.forbiddenModules = [];\n\n    this._checkState();\n\n    this.debug('exit constructor()');\n  }\n\n  getCoursePath() {\n    return this.coursePath;\n  }\n\n  /**\n   * Wrapper around `debug` that automatically includes UUID and the caller state.\n   */\n  debug(message: string) {\n    const paddedState = this.state.toString().padEnd(18);\n    debug(`[${this.uuid} ${paddedState}] ${message}`);\n  }\n\n  async prepareForCourse({ coursePath, forbiddenModules }: PrepareForCourseOptions) {\n    this.debug('enter prepareForCourse()');\n    this.coursePath = coursePath;\n    this.forbiddenModules = forbiddenModules;\n    this.debug('exit prepareForCourse()');\n  }\n\n  /**\n   * Calls the function in the specified Python file.\n   */\n  async call(\n    type: CallType,\n    directory: string | null,\n    file: string | null,\n    fcn: string | null,\n    args: any[],\n  ): Promise<CodeCallerResult> {\n    this.debug('enter call()');\n\n    // Reset this so that we don't include old data if the checks below fail.\n    this.lastCallData = null;\n\n    if (!this._checkState([WAITING])) {\n      throw new Error(`Invalid CodeCallerNative state: ${String(this.state)}`);\n    }\n\n    let cwd: string | undefined;\n    const paths = [path.join(APP_ROOT_PATH, 'python')];\n    if (type === 'question') {\n      if (!directory) throw new Error('Missing directory');\n      if (!this.coursePath) throw new Error('Missing course path');\n      cwd = path.join(this.coursePath, 'questions', directory);\n      paths.push(path.join(this.coursePath, 'serverFilesCourse'));\n    } else if (type === 'v2-question') {\n      // v2 questions always use the root of the PrairieLearn repository as their\n      // working directory.\n      cwd = REPOSITORY_ROOT_PATH;\n    } else if (type === 'course-element') {\n      if (!directory) throw new Error('Missing directory');\n      if (!this.coursePath) throw new Error('Missing course path');\n      cwd = path.join(this.coursePath, 'elements', directory);\n      paths.push(path.join(this.coursePath, 'serverFilesCourse'));\n    } else if (type === 'core-element') {\n      if (!directory) throw new Error('Missing directory');\n      cwd = path.join(APP_ROOT_PATH, 'elements', directory);\n    } else if (type === 'restart' || type === 'ping') {\n      // Doesn't need a working directory\n    } else {\n      throw new Error(`Unknown function call type: ${type}`);\n    }\n\n    const callData = { file, fcn, args, cwd, paths, forbidden_modules: this.forbiddenModules };\n    const callDataString = JSON.stringify(callData);\n\n    const deferred = deferredPromise<CodeCallerResult>();\n    this.callback = (err, data, output) => {\n      if (err) {\n        deferred.reject(err);\n      } else {\n        deferred.resolve({ result: data, output: output ?? '' });\n      }\n    };\n\n    const timeout =\n      type === 'ping'\n        ? this.options.pingTimeoutMilliseconds\n        : this.options.questionTimeoutMilliseconds;\n    this.timeoutID = setTimeout(this._timeout.bind(this), timeout);\n\n    // Reset output accumulators.\n    this.outputStdout = [];\n    this.outputStderr = [];\n    this.outputBoth = [];\n    this.outputData = [];\n    this.outputRestart = '';\n\n    this.lastCallData = callData;\n\n    this.child?.stdin?.write(callDataString);\n    this.child?.stdin?.write('\\n');\n\n    this.state = IN_CALL;\n    this._checkState();\n    this.debug('exit call()');\n\n    return deferred.promise;\n  }\n\n  /**\n   * Instructs the caller to restart, which means exiting the forked process\n   * and forking a new one from the zygote.\n   */\n  async restart(): Promise<boolean> {\n    debug(`enter restart(), state: ${String(this.state)}, uuid: ${this.uuid}`);\n    this._checkState([CREATED, WAITING, EXITING, EXITED]);\n\n    if (this.state === CREATED) {\n      // no need to restart if we don't have a worker\n      this.debug('exit restart()');\n      return true;\n    } else if (this.state === WAITING) {\n      const { result } = await this.call('restart', null, null, 'restart', []);\n      this.coursePath = null;\n      this.forbiddenModules = [];\n      if (result !== 'success') throw new Error(`Error while restarting: ${result}`);\n      this.debug('exit restart()');\n      this.state = RESTARTING;\n      return new Promise((resolve, reject) => {\n        this.callback = (err) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(true);\n          }\n        };\n        this.timeoutID = setTimeout(this._restartTimeout.bind(this), 1000);\n\n        // Before reporting the restart as successful, we need to wait\n        // for a confirmation message to ensure that control has actually\n        // been returned to the Zygote. There's a potential race condition\n        // where we receive this confirmation before we actually enter the\n        // official RESTARTING stage. To account for this, we check if\n        // there was a correct restart confirmation delivered at this point.\n        // If there was, we can immediately report the restart as successful.\n        // Otherwise, we defer control to either the output handler or the\n        // timeout; eventually, one of them will complete and allow us to exit\n        // the restarting stage.\n        if (this._restartWasSuccessful()) {\n          this._restartIsFinished();\n        }\n      });\n    } else if (this.state === EXITING || this.state === EXITED) {\n      this.debug('exit restart()');\n      return false;\n    } else {\n      this.debug('exit restart()');\n      throw new Error(`Invalid CodeCallerNative state: ${String(this.state)}`);\n    }\n  }\n\n  done() {\n    this.debug('enter done()');\n    this._checkState([CREATED, WAITING, EXITING, EXITED]);\n\n    if (this.state === CREATED) {\n      this.state = EXITED;\n    } else if (this.state === WAITING) {\n      this.child?.kill();\n      this.state = EXITING;\n    }\n    this._checkState();\n    this.debug('exit done()');\n  }\n\n  private async ensureChild() {\n    this.debug('enter ensureChild()');\n    this._checkState();\n\n    if (this.state === CREATED) {\n      this._startChild();\n      await this.call('ping', null, null, 'ping', []);\n    }\n\n    this._checkState();\n    this.debug('exit ensureChild()');\n  }\n\n  _startChild() {\n    this.debug('enter _startChild()');\n    this._checkState([CREATED]);\n\n    const cmd = this.options.pythonExecutable;\n    const pythonZygote = path.join(APP_ROOT_PATH, 'python', 'zygote.py');\n    const args = ['-B', pythonZygote];\n    const env = structuredClone(process.env);\n    // PYTHONIOENCODING might not be needed once we switch to Python 3.7\n    // https://www.python.org/dev/peps/pep-0538/\n    // https://www.python.org/dev/peps/pep-0540/\n    env.PYTHONIOENCODING = 'utf-8';\n    if (this.options.dropPrivileges) {\n      // This instructs the Python process to switch to a deprivileged user before\n      // executing any user code.\n      env.DROP_PRIVILEGES = '1';\n    }\n\n    const options: SpawnOptions = {\n      cwd: import.meta.dirname,\n      // stdin, stdout, stderr, data, and restart confirmations\n      stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe'],\n      env,\n    };\n    const child = child_process.spawn(cmd, args, options) as CodeCallerNativeChildProcess;\n    this.debug(`started child pid ${child.pid}`);\n\n    child.stdio[1].setEncoding('utf8');\n    child.stdio[2].setEncoding('utf8');\n    child.stdio[3].setEncoding('utf8');\n    child.stdio[4].setEncoding('utf8');\n\n    child.stdio[1].on('data', this._handleStdoutData.bind(this));\n    child.stdio[2].on('data', this._handleStderrData.bind(this));\n    child.stdio[3].on('data', this._handleStdio3Data.bind(this));\n    child.stdio[4].on('data', this._handleStdio4Data.bind(this));\n\n    child.on('exit', this._handleChildExit.bind(this));\n    child.on('error', this._handleChildError.bind(this));\n\n    this.child = child;\n    this.state = WAITING;\n    this._checkState();\n    this.debug('exit _startChild()');\n  }\n\n  _handleStdoutData(data: string) {\n    this.debug('enter _handleStdoutData()');\n    this._checkState([IN_CALL, EXITING]);\n    if (this.state === IN_CALL) {\n      this.outputStdout.push(data);\n      this.outputBoth.push(data);\n    } else {\n      this._logError(`Unexpected STDOUT data: ${data}`);\n    }\n    this.debug('exit _handleStdoutData()');\n  }\n\n  _handleStderrData(data: string) {\n    this.debug('enter _handleStderrData()');\n    this.debug(`_handleStderrData(), data: ${data}`);\n    this._checkState([IN_CALL, EXITING, WAITING]);\n    if (this.state === IN_CALL) {\n      this.outputStderr.push(data);\n      this.outputBoth.push(data);\n    } else {\n      this._logError(`Unexpected STDERR data: ${data}`);\n    }\n    this.debug('exit _handleStderrData()');\n  }\n\n  _handleStdio3Data(data: string) {\n    this.debug('enter _handleStdio3Data()');\n    this._checkState([IN_CALL, EXITING]);\n    if (this.state === IN_CALL) {\n      this.outputData.push(data);\n      // If `data` contains a newline, then `outputData` must contain a newline as well.\n      // We avoid looking in `outputData` because it's a potentially very large string.\n      if (data.indexOf('\\n') >= 0) {\n        this._callIsFinished();\n      }\n    }\n    this.debug('exit _handleStdio3Data()');\n  }\n\n  _handleStdio4Data(data: string) {\n    this.debug('enter _handleStdio4Data()');\n    // Unlike in other calls, we'll allow data in any state since this data\n    // will come in outside the normal \"call\" flow and isn't guaranteed to\n    // be received in the RESTARTING state.\n    this.outputRestart += data;\n\n    // If this data is received while not in the RESTARTING state, it will\n    // be handled by the restart() function itself.\n    if (this.state === RESTARTING && this._restartWasSuccessful()) {\n      this._restartIsFinished();\n    }\n    this.debug('exit _handleStdio4Data()');\n  }\n\n  _handleChildExit(code: number, signal: number) {\n    this.debug('enter _handleChildExit()');\n    this._checkState([WAITING, IN_CALL, EXITING]);\n    if (this.state === WAITING) {\n      this._logError(\n        'CodeCallerNative child process exited while in state = WAITING, code = ' +\n          String(code) +\n          ', signal = ' +\n          String(signal),\n      );\n      this.child = null;\n      this.state = EXITED;\n    } else if (this.state === IN_CALL) {\n      this._clearTimeout();\n      this.child = null;\n      this.state = EXITED;\n      this._callCallback(\n        new Error(\n          'CodeCallerNative child process exited unexpectedly, code = ' +\n            String(code) +\n            ', signal = ' +\n            String(signal),\n        ),\n      );\n    } else if (this.state === EXITING) {\n      // no error, this is the good case\n      this.child = null;\n      this.state = EXITED;\n    }\n    this.debug('exit _handleChildExit()');\n  }\n\n  _handleChildError(error: Error) {\n    this.debug('enter _handleChildError()');\n    this._checkState([WAITING, IN_CALL, EXITING]);\n    if (this.state === WAITING) {\n      this._logError(\n        'CodeCallerNative child process raised error while in state = WAITING, message = ' +\n          String(error),\n      );\n      this.state = EXITING;\n      this.child?.kill('SIGTERM');\n    } else if (this.state === IN_CALL) {\n      this._logError(\n        'CodeCallerNative child process raised error while in state = IN_CALL, message = ' +\n          String(error),\n      );\n      this._clearTimeout();\n      this.state = EXITING;\n      this.child?.kill('SIGTERM');\n      const err = new Error('CodeCallerNative child process error: ' + String(error));\n      this._callCallback(err);\n    } else if (this.state === EXITING) {\n      this._logError(\n        'CodeCallerNative child process raised error while in state = EXITING, message = ' +\n          String(error),\n      );\n    }\n    this._checkState();\n    this.debug('exit _handleChildError()');\n  }\n\n  _timeout() {\n    this.debug('enter _timeout()');\n    this._checkState([IN_CALL]);\n    this.timeoutID = null;\n    const err = new Error('timeout exceeded, killing CodeCallerNative child');\n    this.child?.kill('SIGTERM');\n    this.state = EXITING;\n    this._callCallback(err);\n    this.debug('exit _timeout()');\n  }\n\n  _clearTimeout() {\n    this.debug('enter _clearTimeout()');\n    clearTimeout(this.timeoutID ?? undefined);\n    this.timeoutID = null;\n    this.debug('exit _clearTimeout()');\n  }\n\n  _restartTimeout() {\n    this.debug('enter _restartTimeout()');\n    this._checkState([RESTARTING]);\n    this.timeoutID = null;\n    const err = new Error('restart timeout exceeded, killing CodeCallerNative child');\n    this.child?.kill('SIGTERM');\n    this.state = EXITING;\n    this._callCallback(err);\n    this.debug('exit _restartTimeout()');\n  }\n\n  _clearRestartTimeout() {\n    this.debug('enter _clearRestartTimeout()');\n    clearTimeout(this.timeoutID ?? undefined);\n    this.timeoutID = null;\n    this.debug('exit _clearRestartTimeout()');\n  }\n\n  _callCallback(err: CodeCallerError | null, data?: any, output?: string) {\n    this.debug('enter _callCallback()');\n    if (err) err.data = this._errorData();\n    const c = this.callback;\n    this.callback = null;\n    c?.(err, data, output);\n    this.debug('exit _callCallback()');\n  }\n\n  _callIsFinished() {\n    this.debug('enter _callIsFinished()');\n    if (!this._checkState([IN_CALL])) return;\n    this._clearTimeout();\n    let data: {\n      val: any;\n      present: boolean;\n    } | null = null;\n    let err: Error | null = null;\n    try {\n      data = JSON.parse(this.outputData.join(''));\n    } catch (e) {\n      err = new Error('Error decoding CodeCallerNative JSON: ' + e.message);\n    }\n    if (err) {\n      this.state = EXITING;\n      this.child?.kill('SIGTERM');\n      this._callCallback(err);\n    } else {\n      this.state = WAITING;\n      if (data?.present) {\n        this._callCallback(null, data.val, this.outputBoth.join(''));\n      } else {\n        this._callCallback(new FunctionMissingError('Function not found in module'));\n      }\n    }\n\n    // This is potentially quite a large object. Drop our reference to it to\n    // allow this memory to be quickly garbage collected.\n    this.lastCallData = null;\n\n    this.debug('exit _callIsFinished()');\n  }\n\n  /**\n   * Returns true if a restart was successfully confirmed. A return value of\n   * false doesn't necessarily mean that the restart has failed; we just may\n   * not yet have enough information to determine if it was successful. We\n   * always let the restart timeout handle the unsuccessful case to simplify\n   * code.\n   */\n  _restartWasSuccessful() {\n    if (this.outputRestart.indexOf('\\n') === -1) {\n      // We haven't yet gotten enough output to know if the restart\n      // was successful.\n      return false;\n    }\n    try {\n      const data = JSON.parse(this.outputRestart);\n      return data.exited === true;\n    } catch {\n      return false;\n    }\n  }\n\n  _restartIsFinished() {\n    this.debug('enter _restartIsFinished()');\n    if (!this._checkState([RESTARTING])) return;\n    this._clearRestartTimeout();\n    this.state = WAITING;\n    const c = this.callback;\n    this.callback = null;\n    // This function is guaranteed to only be called if there was a successful\n    // restart, so we don't have to do any checking here.\n    c?.(null, true);\n    this.debug('exit _restartIsFinished()');\n  }\n\n  _errorData(): ErrorData {\n    const errForStack = new Error();\n    return {\n      state: this.state,\n      childIsNull: this.child == null,\n      callbackIsNull: this.callback == null,\n      timeoutIDIsNull: this.timeoutID == null,\n      outputStdout: this.outputStdout.join(''),\n      outputStderr: this.outputStderr.join(''),\n      outputBoth: this.outputBoth.join(''),\n      outputData: this.outputData.join(''),\n      stack: errForStack.stack ?? '',\n      lastCallData: this.lastCallData,\n    };\n  }\n\n  _logError(msg: string) {\n    this.debug('enter _logError()');\n    const errData = this._errorData();\n    this.options.errorLogger(msg, errData);\n    this.debug('exit _logError()');\n    return false;\n  }\n\n  _checkState(allowedStates?: CodeCallerState[]) {\n    if (allowedStates && !allowedStates.includes(this.state)) {\n      const allowedStatesList = '[' + allowedStates.map(String).join(',') + ']';\n      return this._logError(\n        'Expected CodeCallerNative states ' +\n          allowedStatesList +\n          ' but actually have state ' +\n          String(this.state),\n      );\n    }\n\n    let childNull: boolean, callbackNull: boolean, timeoutIDNull: boolean;\n    if (this.state === CREATED) {\n      childNull = true;\n      callbackNull = true;\n      timeoutIDNull = true;\n    } else if (this.state === WAITING) {\n      childNull = false;\n      callbackNull = true;\n      timeoutIDNull = true;\n    } else if (this.state === IN_CALL) {\n      childNull = false;\n      callbackNull = false;\n      timeoutIDNull = false;\n    } else if (this.state === RESTARTING) {\n      childNull = false;\n      callbackNull = false;\n      timeoutIDNull = false;\n    } else if (this.state === EXITING) {\n      childNull = false;\n      callbackNull = true;\n      timeoutIDNull = true;\n    } else if (this.state === EXITED) {\n      childNull = true;\n      callbackNull = true;\n      timeoutIDNull = true;\n    } else {\n      return this._logError('Invalid CodeCallerNative state: ' + String(this.state));\n    }\n\n    if (childNull != null) {\n      if (childNull && this.child != null) {\n        return this._logError(\n          'CodeCallerNative state \"' + String(this.state) + '\": child should be null',\n        );\n      }\n      if (!childNull && this.child == null) {\n        return this._logError(\n          'CodeCallerNative state \"' + String(this.state) + '\": child should not be null',\n        );\n      }\n    }\n    if (callbackNull != null) {\n      if (callbackNull && this.callback != null) {\n        return this._logError(\n          'CodeCallerNative state \"' + String(this.state) + '\": callback should be null',\n        );\n      }\n      if (!callbackNull && this.callback == null) {\n        return this._logError(\n          'CodeCallerNative state \"' + String(this.state) + '\": callback should not be null',\n        );\n      }\n    }\n    if (timeoutIDNull != null) {\n      if (timeoutIDNull && this.timeoutID != null) {\n        return this._logError(\n          'CodeCallerNative state \"' + String(this.state) + '\": timeoutID should be null',\n        );\n      }\n      if (!timeoutIDNull && this.timeoutID == null) {\n        return this._logError(\n          'CodeCallerNative state \"' + String(this.state) + '\": timeoutID should not be null',\n        );\n      }\n    }\n\n    return true;\n  }\n}\n"]}