{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/lib/code-caller/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as os from 'node:os';\n\nimport debugfn from 'debug';\nimport { type Pool, createPool } from 'generic-pool';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { logger } from '@prairielearn/logger';\nimport { run } from '@prairielearn/run';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport * as chunks from '../chunks.js';\nimport { config } from '../config.js';\nimport { type Course } from '../db-types.js';\nimport * as load from '../load.js';\n\nimport { CodeCallerContainer, init as initCodeCallerDocker } from './code-caller-container.js';\nimport { CodeCallerNative } from './code-caller-native.js';\nimport { type CodeCaller, FunctionMissingError } from './code-caller-shared.js';\n\nconst debug = debugfn('prairielearn:code-caller');\n\n/**\n * This module maintains a pool of CodeCaller workers, which are used any\n * time we need to execute Python code (elements, question code, etc.).\n *\n * Load is reported in:\n * - python_worker_active: number of python workers currently processing jobs/callbacks\n * - python_worker_idle: number of python workers available for incoming jobs/callbacks\n * - python_callback_waiting: number of queued jobs/callbacks waiting for an available worker\n */\n\nlet pool: Pool<CodeCaller> | null = null;\n\nexport async function init() {\n  debug('init()');\n\n  const { workersExecutionMode } = config;\n  if (!['container', 'native', 'disabled'].includes(workersExecutionMode)) {\n    throw new Error(`unknown config.workersExecutionMode: ${workersExecutionMode}`);\n  }\n\n  if (workersExecutionMode === 'disabled') {\n    return;\n  }\n\n  if (workersExecutionMode === 'container') {\n    await initCodeCallerDocker();\n  }\n\n  const numWorkers = config.workersCount ?? Math.ceil(config.workersPerCpu * os.cpus().length);\n  pool = createPool<CodeCaller>(\n    {\n      create: async () => {\n        const codeCallerOptions = {\n          dropPrivileges: false,\n          questionTimeoutMilliseconds: config.questionTimeoutMilliseconds,\n          pingTimeoutMilliseconds: config.workerPingTimeoutMilliseconds,\n        };\n\n        const codeCaller = await run(async () => {\n          if (workersExecutionMode === 'container') {\n            return await CodeCallerContainer.create(codeCallerOptions);\n          } else if (workersExecutionMode === 'native') {\n            return await CodeCallerNative.create({\n              ...codeCallerOptions,\n              pythonVenvSearchPaths: config.pythonVenvSearchPaths,\n              errorLogger: logger.error.bind(logger),\n              // We can only drop privileges if this code caller is running in a container.\n              dropPrivileges: false,\n            });\n          } else {\n            throw new Error(`Unexpected workersExecutionMode: ${workersExecutionMode}`);\n          }\n        });\n\n        load.startJob('python_worker_idle', codeCaller.uuid);\n        return codeCaller;\n      },\n      destroy: async (codeCaller) => {\n        logger.info(\n          `Destroying Python worker ${codeCaller.uuid} (last course path: ${codeCaller.getCoursePath()})`,\n        );\n        load.endJob('python_worker_idle', codeCaller.uuid);\n        codeCaller.done();\n      },\n    },\n    {\n      min: numWorkers,\n      max: numWorkers,\n    },\n  );\n\n  pool.on('factoryCreateError', (err) => {\n    logger.error('Error creating Python worker', err);\n    Sentry.captureException(err);\n  });\n\n  pool.on('factoryDestroyError', (err) => {\n    logger.error('Error destroying Python worker', err);\n    Sentry.captureException(err);\n  });\n\n  // Ensure that the workers are ready; this will ensure that we're ready to\n  // execute code as soon as we start processing requests.\n  //\n  // We skip this if we're running in dev mode, as we want to prioritize the\n  // speed of starting up the server to ensure running in watch mode is as\n  // fast as possible.\n  //\n  // Note: if resource creation fails for any reason, this will never resolve\n  // or reject. This is unfortunate, but we'll still log and report the error\n  // above, so it won't fail totally silently. If we fail to create workers,\n  // we have a bigger problem.\n  if (!config.devMode) {\n    await pool.ready();\n  }\n}\n\nexport async function finish() {\n  debug('finish(): waiting for pool to drain');\n  await pool?.drain();\n  await pool?.clear();\n  pool = null;\n  debug('finish(): pool finished draining');\n}\n\nexport function getMetrics() {\n  return {\n    size: pool?.size ?? 0,\n    available: pool?.available ?? 0,\n    borrowed: pool?.borrowed ?? 0,\n    pending: pool?.pending ?? 0,\n  };\n}\n\n/**\n * Acquires a Python worker and automatically returns it to the pool or\n * disposes of it once it has been used.\n */\nexport async function withCodeCaller<T>(\n  course: Course,\n  fn: (codeCaller: CodeCaller) => Promise<T>,\n): Promise<T> {\n  if (config.workersExecutionMode === 'disabled') {\n    throw new Error('Code execution is disabled');\n  }\n\n  if (!pool) {\n    throw new Error('CodeCaller pool not initialized');\n  }\n\n  if (pool.available === 0 && !config.workerUseQueue) {\n    debug('getPythonCaller(): no workers available, waiting to error');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('Server is overloaded. Please try again.'));\n      }, config.workerOverloadDelayMS);\n    });\n  }\n\n  const jobUuid = uuidv4();\n  load.startJob('python_callback_waiting', jobUuid);\n\n  const codeCaller = await pool.acquire();\n\n  try {\n    const coursePath = chunks.getRuntimeDirectoryForCourse(course);\n    await codeCaller.prepareForCourse({\n      coursePath,\n      forbiddenModules: [],\n    });\n  } catch (err) {\n    // If we fail to prepare for a course, assume that the code caller is\n    // broken and dispose of it.\n    await pool.destroy(codeCaller);\n    throw err;\n  } finally {\n    load.endJob('python_callback_waiting', jobUuid);\n  }\n\n  debug(`getPythonCaller(): got ${codeCaller.uuid}`);\n  load.endJob('python_worker_idle', codeCaller.uuid);\n  load.startJob('python_worker_active', codeCaller.uuid);\n\n  let fnResult, fnErr;\n  try {\n    fnResult = await fn(codeCaller);\n  } catch (err) {\n    fnErr = err;\n  }\n\n  debug('returnPythonCaller()');\n  load.endJob('python_worker_active', codeCaller.uuid);\n\n  let needsFullRestart = false;\n  let restartErr;\n  try {\n    const restartSuccess = await codeCaller.restart();\n    if (!restartSuccess) {\n      debug('returnPythonCaller(): restart requested a full restart');\n      // no error logged here, everything is still ok\n      needsFullRestart = true;\n    }\n  } catch (err) {\n    restartErr = err;\n    debug(`returnPythonCaller(): restart errored: ${err}`);\n    logger.error('Error restarting pythonCaller', err);\n    needsFullRestart = true;\n  }\n\n  load.startJob('python_worker_idle', codeCaller.uuid);\n\n  if (needsFullRestart) {\n    await pool.destroy(codeCaller);\n  } else {\n    await pool.release(codeCaller);\n  }\n\n  const overallErr = fnErr ?? restartErr;\n  if (overallErr) {\n    throw overallErr;\n  } else {\n    // TypeScript doesn't understand our error-handling logic above. If\n    // `overallErr` is falsy, `fnResult` will indeed have type `T`. We'll\n    // cast it to `T` to appease TypeScript.\n    return fnResult as T;\n  }\n}\n\nexport { FunctionMissingError, type CodeCaller };\n"]}