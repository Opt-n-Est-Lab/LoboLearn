{"version":3,"file":"cookie.js","sourceRoot":"","sources":["../../src/lib/cookie.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,MAAM,UAAU,kBAAkB,CAAC,GAAY;IAC7C,4EAA4E;IAC5E,kCAAkC;IAClC,EAAE;IACF,6EAA6E;IAC7E,mEAAmE;IACnE,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,GAAG,CAAC,QAAQ,KAAK,OAAO,CAAC;AACrD,CAAC;AAID;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,GAAa,EAAE,IAAmC;IAC5E,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAClD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACtB,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,YAAY,IAAI,SAAS,EAAE,CAAC,CAAC;IACtE,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,SAAS,CACvB,GAAa,EACb,KAA2B,EAC3B,KAAa,EACb,UAAyC,EAAE;IAE3C,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACrC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE;QAC1B,MAAM,EAAE,MAAM,CAAC,YAAY,IAAI,SAAS;QACxC,GAAG,OAAO;KACX,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { CookieOptions, Request, Response } from 'express';\n\nimport { config } from './config.js';\n\nexport function shouldSecureCookie(req: Request): boolean {\n  // In production, always set secure: true. Otherwise, only set it to true if\n  // the request is made over HTTPS.\n  //\n  // `req.protocol` should reflect Express' `trust proxy` setting, which should\n  // be used when the app is behind a reverse proxy or load balancer.\n  return !config.devMode || req.protocol === 'https';\n}\n\ntype OldAndNewCookieNames = [string, string];\n\n/**\n * Helper function to clear a cookie regardless of if it was set with an\n * explicit domain or not.\n */\nexport function clearCookie(res: Response, name: string | OldAndNewCookieNames): void {\n  const names = Array.isArray(name) ? name : [name];\n  for (const name of names) {\n    res.clearCookie(name);\n    res.clearCookie(name, { domain: config.cookieDomain ?? undefined });\n  }\n}\n\n/**\n * Helper function to set both \"old\" and \"new\" cookies. The \"old\" cookie is\n * typically something like `pl_foo`, and the \"new\" cookie is `pl2_foo`. Old\n * cookies do not have an explicit domain, while new cookies do.\n */\nexport function setCookie(\n  res: Response,\n  names: OldAndNewCookieNames,\n  value: string,\n  options: Omit<CookieOptions, 'domain'> = {},\n) {\n  res.cookie(names[0], value, options);\n  res.cookie(names[1], value, {\n    domain: config.cookieDomain ?? undefined,\n    ...options,\n  });\n}\n"]}