{"version":3,"file":"copy-question.js","sourceRoot":"","sources":["../../src/lib/copy-question.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'node:path';\n\nimport { type Response } from 'express';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\nimport { generateSignedToken } from '@prairielearn/signed-token';\n\nimport { selectCoursesWithEditAccess } from '../models/course.js';\n\nimport { config } from './config.js';\nimport { type Course, type Question } from './db-types.js';\nimport { idsEqual } from './id.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport async function setQuestionCopyTargets(res: Response) {\n  // Avoid querying for editable courses if we won't be able to copy this\n  // question anyways.\n  if (!res.locals.course.template_course && !res.locals.question.share_source_publicly) {\n    return;\n  }\n\n  const editableCourses = await selectCoursesWithEditAccess({\n    user_id: res.locals.user.user_id,\n    is_administrator: res.locals.is_administrator,\n  });\n  res.locals.question_copy_targets = editableCourses\n    .filter(\n      (course) =>\n        // The example course cannot be updated in the web interface.\n        !course.example_course &&\n        // Question copying cannot be done within the same course.\n        !idsEqual(course.id, res.locals.course.id),\n    )\n    .map((course) => {\n      const copyUrl = `/pl/course/${course.id}/copy_public_question`;\n\n      // The question copy form will POST to a different URL for each course, so\n      // we need to generate a corresponding CSRF token for each one.\n      const csrfToken = generateSignedToken(\n        {\n          url: copyUrl,\n          authn_user_id: res.locals.authn_user.user_id,\n        },\n        config.secretKey,\n      );\n\n      return {\n        id: course.id,\n        short_name: course.short_name,\n        copy_url: copyUrl,\n        __csrf_token: csrfToken,\n      };\n    });\n}\n\nexport async function copyQuestionBetweenCourses(\n  res: Response,\n  {\n    fromCourse,\n    toCourseId,\n    question,\n  }: {\n    fromCourse: Course;\n    toCourseId: string;\n    question: Question;\n  },\n) {\n  // In this case, we are sending a copy of this question to a different course.\n  //\n  // Note that we *always* allow copying from a template course, even if the user\n  // does not have explicit view permissions.\n  if (!res.locals.authz_data.has_course_permission_view && !fromCourse.template_course) {\n    throw new error.HttpStatusError(403, 'Access denied (must be a course Viewer)');\n  }\n\n  if (!question.qid) {\n    throw new Error(`Question ${question.id} does not have a qid`);\n  }\n\n  const f = uuidv4();\n  const relDir = path.join(f.slice(0, 3), f.slice(3, 6));\n  const params = {\n    from_course_id: fromCourse.id,\n    to_course_id: toCourseId,\n    user_id: res.locals.user.user_id,\n    transfer_type: 'CopyQuestion',\n    from_filename: path.join(fromCourse.path, 'questions', question.qid),\n    storage_filename: path.join(relDir, f.slice(6)),\n  };\n\n  if (config.filesRoot == null) throw new Error('config.filesRoot is null');\n  await fs.copy(params.from_filename, path.join(config.filesRoot, params.storage_filename), {\n    errorOnExist: true,\n  });\n\n  const result = await sqldb.queryOneRowAsync(sql.insert_file_transfer, params);\n  res.redirect(\n    `${res.locals.plainUrlPrefix}/course/${params.to_course_id}/file_transfer/${result.rows[0].id}`,\n  );\n}\n"]}