{"version":3,"file":"course-files-api.js","sourceRoot":"","sources":["../../src/lib/course-files-api.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAEtC,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAC/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AAClE,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAA0B,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAEjF,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAIrC,SAAS,kBAAkB;IACzB,IAAI,MAAM,CAAC,uBAAuB,KAAK,SAAS,EAAE,CAAC;QACjD,0CAA0C;QAC1C,2CAA2C;QAC3C,OAAO,QAAQ,CAAC;YACd,qCAAqC;YACrC,GAAG,EAAE,eAAe;YACpB,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI;gBACjB,OAAO,MAAM,mBAAmB,CAAC;oBAC/B,QAAQ,EAAE,EAAE;oBACZ,GAAG,EAAE,IAAI,OAAO,CAAC,GAAG,IAAI,CAAC;oBACzB,MAAM,EAAE,iBAAiB;oBACzB,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;iBACtD,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,MAAM,EAAE,iBAAiB,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC;IAErD,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC5D,CAAC;IAED,IAAI,CAAC,cAAc,EAAE,MAAM,EAAE,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC;IAED,wEAAwE;IACxE,uCAAuC;IACvC,MAAM,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAEpC,OAAO,QAAQ,CAAC;QACd,GAAG,EAAE,iBAAiB;QACtB,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,MAAM,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC1D,MAAM,GAAG,GAAG,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;iBACnC,kBAAkB,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;iBACpC,SAAS,CAAC,cAAc,CAAC;iBACzB,IAAI,CAAC,MAAM,CAAC,CAAC;YAEhB,OAAO;gBACL,aAAa,EAAE,UAAU,GAAG,EAAE;aAC/B,CAAC;QACJ,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAED,IAAI,uBAAuB,GAA6B,IAAI,CAAC;AAE7D,MAAM,UAAU,oBAAoB;IAClC,uBAAuB,KAAK,qBAAqB,CAAoB;QACnE,KAAK,EAAE,CAAC,kBAAkB,EAAE,CAAC;KAC9B,CAAC,CAAC;IAEH,OAAO,uBAAuB,CAAC;AACjC,CAAC","sourcesContent":["import * as crypto from 'node:crypto';\n\nimport { createTRPCProxyClient, httpLink } from '@trpc/client';\nimport { fetchRequestHandler } from '@trpc/server/adapters/fetch';\nimport * as jose from 'jose';\n\nimport { type CourseFilesRouter, courseFilesRouter } from '../api/trpc/index.js';\n\nimport { config } from './config.js';\n\nexport type CourseFilesClient = ReturnType<typeof createTRPCProxyClient<CourseFilesRouter>>;\n\nfunction getCourseFilesLink() {\n  if (config.courseFilesApiTransport === 'process') {\n    // Based on code from the following issue:\n    // https://github.com/trpc/trpc/issues/3768\n    return httpLink({\n      // Dummy URL; won't actually be used.\n      url: 'https://local',\n      async fetch(...args) {\n        return await fetchRequestHandler({\n          endpoint: '',\n          req: new Request(...args),\n          router: courseFilesRouter,\n          createContext: () => ({ jwt: null, bypassJwt: true }),\n        });\n      },\n    });\n  }\n\n  const { courseFilesApiUrl, trpcSecretKeys } = config;\n\n  if (!courseFilesApiUrl) {\n    throw new Error('Course files API URL is not configured');\n  }\n\n  if (!trpcSecretKeys?.length) {\n    throw new Error('Internal API secret keys are not configured');\n  }\n\n  // The first secret key is always used for signing. Multiple keys can be\n  // specified to allow for key rotation.\n  const secretKey = trpcSecretKeys[0];\n\n  return httpLink({\n    url: courseFilesApiUrl,\n    headers: async () => {\n      const secret = crypto.createSecretKey(secretKey, 'utf-8');\n      const jwt = await new jose.SignJWT({})\n        .setProtectedHeader({ alg: 'HS256' })\n        .setIssuer('PrairieLearn')\n        .sign(secret);\n\n      return {\n        Authorization: `Bearer ${jwt}`,\n      };\n    },\n  });\n}\n\nlet cachedCourseFilesClient: CourseFilesClient | null = null;\n\nexport function getCourseFilesClient() {\n  cachedCourseFilesClient ??= createTRPCProxyClient<CourseFilesRouter>({\n    links: [getCourseFilesLink()],\n  });\n\n  return cachedCourseFilesClient;\n}\n"]}