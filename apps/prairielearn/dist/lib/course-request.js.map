{"version":3,"file":"course-request.js","sourceRoot":"","sources":["../../src/lib/course-request.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport { logger } from '@prairielearn/logger';\nimport { loadSqlEquiv, queryAsync, queryRows } from '@prairielearn/postgres';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport { DateFromISOString, IdSchema, JobSequenceSchema } from '../lib/db-types.js';\nimport { createCourseRepoJob } from '../lib/github.js';\nimport { sendCourseRequestMessage } from '../lib/opsbot.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst JobsRowSchema = z.object({\n  authn_user_id: IdSchema.nullable(),\n  authn_user_name: z.string().nullable(),\n  finish_date: DateFromISOString.nullable(),\n  id: IdSchema,\n  number: z.number(),\n  start_date: DateFromISOString,\n  status: JobSequenceSchema.shape.status,\n});\n\nconst CourseRequestRowSchema = z.object({\n  approved_by_name: z.string().nullable(),\n  approved_status: z.enum(['pending', 'approved', 'denied', 'creating', 'failed']),\n  created_at: DateFromISOString,\n  first_name: z.string().nullable(),\n  github_user: z.string().nullable(),\n  id: IdSchema,\n  institution: z.string().nullable(),\n  jobs: z.array(JobsRowSchema),\n  last_name: z.string().nullable(),\n  referral_source: z.string().nullable(),\n  short_name: z.string(),\n  title: z.string(),\n  user_name: z.string().nullable(),\n  user_uid: z.string(),\n  work_email: z.string().nullable(),\n});\nexport type CourseRequestRow = z.infer<typeof CourseRequestRowSchema>;\n\nasync function selectCourseRequests(show_all: boolean) {\n  return await queryRows(sql.select_course_requests, { show_all }, CourseRequestRowSchema);\n}\n\nexport async function selectAllCourseRequests() {\n  return await selectCourseRequests(true);\n}\n\nexport async function selectPendingCourseRequests() {\n  return await selectCourseRequests(false);\n}\n\nexport async function updateCourseRequest(req, res) {\n  let action = req.body.approve_deny_action;\n  if (action === 'deny') {\n    action = 'denied';\n  } else {\n    throw new Error(`Unknown course request action \"${action}\"`);\n  }\n\n  await queryAsync(sql.update_course_request, {\n    id: req.body.request_id,\n    user_id: res.locals.authn_user.user_id,\n    action,\n  });\n  res.redirect(req.originalUrl);\n}\n\nexport async function createCourseFromRequest(req, res) {\n  await queryAsync(sql.update_course_request, {\n    id: req.body.request_id,\n    user_id: res.locals.authn_user.user_id,\n    action: 'creating',\n  });\n\n  // Create the course in the background\n  const jobSequenceId = await createCourseRepoJob(\n    {\n      short_name: req.body.short_name,\n      title: req.body.title,\n      institution_id: req.body.institution_id,\n      display_timezone: req.body.display_timezone,\n      path: req.body.path,\n      repo_short_name: req.body.repository_short_name,\n      github_user: req.body.github_user.length > 0 ? req.body.github_user : null,\n      course_request_id: req.body.request_id,\n    },\n    res.locals.authn_user,\n  );\n\n  res.redirect(`/pl/administrator/jobSequence/${jobSequenceId}/`);\n\n  // Do this in the background once we've redirected the response.\n\n  try {\n    await sendCourseRequestMessage(\n      '*Creating course*\\n' +\n        `Course rubric: ${req.body.repository_short_name}\\n` +\n        `Course title: ${req.body.title}\\n` +\n        `Approved by: ${res.locals.authn_user.name}`,\n    );\n  } catch (err) {\n    logger.error('Error sending course request message to Slack', err);\n    Sentry.captureException(err);\n  }\n}\n"]}