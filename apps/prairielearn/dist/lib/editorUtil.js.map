{"version":3,"file":"editorUtil.js","sourceRoot":"","sources":["../../src/lib/editorUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ninterface CourseInfo {\n  type: 'course';\n}\n\nexport interface QuestionInfo {\n  type: 'question';\n  qid: string;\n}\n\nexport interface CourseInstanceInfo {\n  type: 'courseInstance';\n  ciid: string;\n}\n\nexport interface AssessmentInfo {\n  type: 'assessment';\n  ciid: string;\n  aid: string;\n}\n\ninterface File {\n  type: 'file';\n}\n\ntype FileDetails = CourseInfo | QuestionInfo | CourseInstanceInfo | AssessmentInfo | File;\n\nexport function getDetailsForFile(filePath: string): FileDetails {\n  const normalizedPath = path.normalize(filePath);\n  const pathComponents = normalizedPath.split(path.posix.sep);\n  if (pathComponents.length === 1 && pathComponents[0] === 'infoCourse.json') {\n    return { type: 'course' };\n  } else if (\n    pathComponents.length >= 3 &&\n    pathComponents[0] === 'courseInstances' &&\n    pathComponents[pathComponents.length - 1] === 'infoCourseInstance.json'\n  ) {\n    const ciid = pathComponents.slice(1, pathComponents.length - 1).join(path.posix.sep);\n    return { type: 'courseInstance', ciid };\n  } else if (\n    pathComponents.length >= 3 &&\n    pathComponents[0] === 'questions' &&\n    pathComponents[pathComponents.length - 1] === 'info.json'\n  ) {\n    const qid = pathComponents.slice(1, pathComponents.length - 1).join(path.posix.sep);\n    return { type: 'question', qid };\n  } else if (\n    pathComponents.length >= 5 &&\n    pathComponents[0] === 'courseInstances' &&\n    pathComponents.slice(2, pathComponents.length - 2).some((e) => e === 'assessments') &&\n    pathComponents[pathComponents.length - 1] === 'infoAssessment.json'\n  ) {\n    const assessment_index =\n      pathComponents.slice(2, pathComponents.length - 2).findIndex((e) => e === 'assessments') + 2;\n    const ciid = pathComponents.slice(1, assessment_index).join(path.posix.sep);\n    const aid = pathComponents\n      .slice(assessment_index + 1, pathComponents.length - 1)\n      .join(path.posix.sep);\n    return { type: 'assessment', ciid, aid };\n  } else {\n    return { type: 'file' };\n  }\n}\n\nexport async function getErrorsAndWarningsForFilePath(\n  courseId: any,\n  filePath: string,\n): Promise<{ errors: string | null; warnings: string | null }> {\n  const details = getDetailsForFile(filePath);\n  let queryName: string | null = null;\n  const queryParams: Record<string, any> = { course_id: courseId };\n  switch (details.type) {\n    case 'course':\n      queryName = 'select_errors_and_warnings_for_course';\n      break;\n    case 'question':\n      queryName = 'select_errors_and_warnings_for_question';\n      queryParams.qid = details.qid;\n      break;\n    case 'courseInstance':\n      queryName = 'select_errors_and_warnings_for_course_instance';\n      queryParams.ciid = details.ciid;\n      break;\n    case 'assessment':\n      queryName = 'select_errors_and_warnings_for_assessment';\n      queryParams.ciid = details.ciid;\n      queryParams.aid = details.aid;\n      break;\n    default:\n      return { errors: null, warnings: null };\n  }\n\n  const res = await sqldb.queryZeroOrOneRowAsync(sql[queryName], queryParams);\n  if (res.rowCount === 0) {\n    return { errors: null, warnings: null };\n  }\n  return {\n    errors: res.rows[0].sync_errors,\n    warnings: res.rows[0].sync_warnings,\n  };\n}\n"]}