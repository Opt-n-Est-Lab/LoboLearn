{"version":3,"file":"editors.js","sourceRoot":"","sources":["../../src/lib/editors.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'node:assert';\nimport * as path from 'path';\n\nimport { type Temporal } from '@js-temporal/polyfill';\nimport * as async from 'async';\nimport sha256 from 'crypto-js/sha256.js';\nimport debugfn from 'debug';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\nimport { z } from 'zod';\n\nimport { AugmentedError, HttpStatusError } from '@prairielearn/error';\nimport { formatDate } from '@prairielearn/formatter';\nimport { html } from '@prairielearn/html';\nimport { logger } from '@prairielearn/logger';\nimport * as namedLocks from '@prairielearn/named-locks';\nimport { contains } from '@prairielearn/path-utils';\nimport * as sqldb from '@prairielearn/postgres';\nimport { run } from '@prairielearn/run';\nimport { escapeRegExp } from '@prairielearn/sanitize';\n\nimport {\n  getCourseCommitHash,\n  getLockNameForCoursePath,\n  getOrUpdateCourseCommitHash,\n  updateCourseCommitHash,\n} from '../models/course.js';\nimport * as courseDB from '../sync/course-db.js';\nimport * as syncFromDisk from '../sync/syncFromDisk.js';\n\nimport * as b64Util from './base64-util.js';\nimport { logChunkChangesToJob, updateChunksForCourse } from './chunks.js';\nimport { config } from './config.js';\nimport {\n  type Assessment,\n  type Course,\n  type CourseInstance,\n  type Question,\n  type User,\n} from './db-types.js';\nimport { EXAMPLE_COURSE_PATH } from './paths.js';\nimport { formatJsonWithPrettier } from './prettier.js';\nimport { type ServerJob, type ServerJobExecutor, createServerJob } from './server-jobs.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst debug = debugfn('prairielearn:editors');\n\nasync function syncCourseFromDisk(\n  course: Course,\n  startGitHash: string,\n  job: ServerJob,\n  courseData?: courseDB.CourseData,\n) {\n  const endGitHash = await getCourseCommitHash(course.path);\n\n  const syncResult = await syncFromDisk.syncDiskToSqlWithLock(\n    course.id,\n    course.path,\n    job,\n    courseData,\n  );\n\n  if (syncResult.status === 'sharing_error') {\n    throw new Error('Sync completely failed due to invalid question sharing edit.');\n  }\n\n  if (config.chunksGenerator) {\n    const chunkChanges = await updateChunksForCourse({\n      coursePath: course.path,\n      courseId: course.id,\n      courseData: syncResult.courseData,\n      oldHash: startGitHash,\n      newHash: endGitHash,\n    });\n    logChunkChangesToJob(chunkChanges, job);\n  }\n\n  await updateCourseCommitHash(course);\n\n  if (syncResult.hadJsonErrors) {\n    throw new Error('One or more JSON files contained errors and were unable to be synced');\n  }\n}\n\nasync function cleanAndResetRepository(\n  course: Course,\n  revision: string,\n  env: NodeJS.ProcessEnv,\n  job: ServerJob,\n) {\n  job.info('Clean local files not in remote git repository');\n  await job.exec('git', ['clean', '-fdx'], { cwd: course.path, env });\n  job.info('Reset state to remote git repository');\n  await job.exec('git', ['reset', '--hard', revision], {\n    cwd: course.path,\n    env,\n  });\n}\n\nexport function getUniqueNames({\n  shortNames,\n  longNames,\n  shortName = 'New',\n  longName = 'New',\n}: {\n  shortNames: string[];\n  longNames: string[];\n  /**\n   * Defaults to 'New' because this function previously only handled the case where the shortName was 'New'\n   * Long name is matched case-sensitively\n   */\n  shortName?: string;\n  /**\n   * Defaults to 'New' because this function previously only handled the case where the longName was 'New'\n   * Short name is always matched case-insensitively, as it is generally used to construct file paths\n   */\n  longName?: string;\n}): { shortName: string; longName: string } {\n  function getNumberShortName(oldShortNames: string[]): number {\n    let numberOfMostRecentCopy = 1;\n\n    const shortNameCompare = shortName.toLowerCase();\n\n    oldShortNames.forEach((oldShortName) => {\n      // shortName is a copy of oldShortName if:\n      // it matches (case-sensitively), or\n      // if oldShortName matches {shortName}_{number from 0-9}\n\n      const oldShortNameCompare = oldShortName.toLowerCase();\n      const found =\n        shortNameCompare === oldShortNameCompare ||\n        oldShortNameCompare.match(new RegExp(`^${shortNameCompare}_([0-9]+)$`));\n      if (found) {\n        const foundNumber = shortNameCompare === oldShortNameCompare ? 1 : parseInt(found[1]);\n        if (foundNumber >= numberOfMostRecentCopy) {\n          numberOfMostRecentCopy = foundNumber + 1;\n        }\n      }\n    });\n    return numberOfMostRecentCopy;\n  }\n\n  function getNumberLongName(oldLongNames: string[]): number {\n    let numberOfMostRecentCopy = 1;\n    // longName is a copy of oldLongName if:\n    // it matches exactly, or\n    // if oldLongName matches {longName} ({number from 0-9})\n\n    oldLongNames.forEach((oldLongName) => {\n      if (typeof oldLongName !== 'string') return;\n      const found =\n        oldLongName === longName || oldLongName.match(new RegExp(`^${longName} \\\\(([0-9]+)\\\\)$`));\n      if (found) {\n        const foundNumber = oldLongName === longName ? 1 : parseInt(found[1]);\n        if (foundNumber >= numberOfMostRecentCopy) {\n          numberOfMostRecentCopy = foundNumber + 1;\n        }\n      }\n    });\n    return numberOfMostRecentCopy;\n  }\n\n  const numberShortName = getNumberShortName(shortNames);\n  const numberLongName = getNumberLongName(longNames);\n  const number = numberShortName > numberLongName ? numberShortName : numberLongName;\n\n  if (number === 1 && shortName !== 'New' && longName !== 'New') {\n    // If there are no existing copies, and the shortName/longName aren't the default ones, no number is needed at the end of the names\n    return {\n      shortName,\n      longName,\n    };\n  } else {\n    // If there are existing copies, a number is needed at the end of the names\n    return {\n      shortName: `${shortName}_${number}`,\n      longName: `${longName} (${number})`,\n    };\n  }\n}\n\n/**\n * Returns the new value if it differs from the default value. Otherwise, returns undefined.\n * This is helpful for setting JSON properties that we only want to write to if they are different\n * than the default value.\n */\nexport function propertyValueWithDefault(existingValue, newValue, defaultValue) {\n  if (existingValue === undefined) {\n    if (newValue !== defaultValue) {\n      return newValue;\n    }\n  } else {\n    if (existingValue !== defaultValue && newValue === defaultValue) {\n      return undefined;\n    } else {\n      return newValue;\n    }\n  }\n}\n\ninterface BaseEditorOptions<ResLocals = object> {\n  locals: {\n    authz_data: Record<string, any>;\n    course: Course;\n    user: User;\n  } & ResLocals;\n}\n\ninterface BaseEditorOptionsInternal extends BaseEditorOptions {\n  description: string;\n}\n\ninterface WriteResult {\n  pathsToAdd: string[];\n  commitMessage: string;\n}\n\nexport abstract class Editor {\n  protected authz_data: Record<string, any>;\n  protected course: Course;\n  protected user: User;\n  public readonly description: string;\n\n  protected constructor(params: BaseEditorOptionsInternal) {\n    this.authz_data = params.locals.authz_data;\n    this.course = params.locals.course;\n    this.user = params.locals.user;\n    this.description = params.description;\n  }\n\n  /**\n   * Write changes to disk. Returns an object with that paths that `git` should\n   * add and the commit message that should be used.\n   *\n   * If no files were changed, return null.\n   */\n  abstract write(): Promise<WriteResult | null>;\n\n  assertCanEdit() {\n    // Do not allow users to edit without permission\n    if (!this.authz_data.has_course_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be course editor)');\n    }\n\n    // Do not allow users to edit the exampleCourse\n    if (this.course.example_course) {\n      throw new HttpStatusError(403, 'Access denied (cannot edit the example course)');\n    }\n  }\n\n  async prepareServerJob() {\n    this.assertCanEdit();\n    const serverJob = await createServerJob({\n      courseId: this.course.id,\n      userId: this.user.user_id,\n      authnUserId: this.authz_data.authn_user.user_id,\n      type: 'sync',\n      description: this.description,\n    });\n    return serverJob;\n  }\n\n  async executeWithServerJob(serverJob: ServerJobExecutor) {\n    // We deliberately use `executeUnsafe` here because we want to wait\n    // for the edit to complete during the request during which it was\n    // made. We use `executeUnsafe` instead of `execute` because we want\n    // errors to be thrown and handled by the caller.\n    await serverJob.executeUnsafe(async (job) => {\n      const gitEnv = process.env;\n      if (config.gitSshCommand != null) {\n        gitEnv.GIT_SSH_COMMAND = config.gitSshCommand;\n      }\n\n      const lockName = getLockNameForCoursePath(this.course.path);\n      await namedLocks.doWithLock(lockName, { timeout: 5000 }, async () => {\n        const startGitHash = await getOrUpdateCourseCommitHash(this.course);\n\n        if (!config.fileEditorUseGit) {\n          // If we are not using git (e.g., if we are running locally), then we:\n          //\n          // - Write changes to disk\n          // - Sync changes from disk\n          //\n          // Either the job ends with a thrown error or with the return statement.\n\n          job.info('Write changes to disk');\n          job.data.saveAttempted = true;\n          await this.write();\n          job.data.saveSucceeded = true;\n\n          job.info('Sync changes from disk');\n          job.data.syncAttempted = true;\n          await syncCourseFromDisk(this.course, startGitHash, job);\n          job.data.syncSucceeded = true;\n\n          return;\n        }\n\n        // If we are using git (e.g., if we are running in production), then we:\n        //\n        // - Clean and reset the repository\n        // - Write changes to disk\n        // - Commit changes to the repository\n        // - Push to remote\n        //   - If the push fails, pull from remote, clean, reset, write, commit, and push\n        // - Clean and reset the repository\n        // - Sync changes from disk\n        //\n        // Note that we only fetch from the remote if the push fails. This avoids an\n        // expensive `fetch` operation in the majority of cases where the local course\n        // repository is up to date with the remote. If the push fails, we assume that\n        // the remote has changes that we need to pull in before we can push.\n        //\n        // If anything goes wrong in the write or push, we make sure to clean/reset\n        // (removing changes made by this edit) and sync (because changes were made\n        // by the pull) before we error and exit.\n\n        // Safety check: make sure the course has a defined branch and repository.\n        if (!this.course.branch || !this.course.repository) {\n          job.fail('Git repository or branch are not set for this course. Exiting...');\n          return;\n        }\n\n        job.info('Update to latest remote origin address');\n        await job.exec('git', ['remote', 'set-url', 'origin', this.course.repository], {\n          cwd: this.course.path,\n          env: gitEnv,\n        });\n\n        await cleanAndResetRepository(this.course, `origin/${this.course.branch}`, gitEnv, job);\n\n        const writeAndCommitChanges = async () => {\n          job.data.saveAttempted = true;\n\n          job.info('Write changes to disk');\n          const writeResult = await this.write();\n\n          if (!writeResult) {\n            job.info('No files were changed');\n            return;\n          }\n\n          job.info('Commit changes');\n          await job.exec('git', ['add', ...writeResult.pathsToAdd], {\n            cwd: this.course.path,\n            env: gitEnv,\n          });\n          await job.exec(\n            'git',\n            [\n              '-c',\n              `user.name=\"${this.user.name}\"`,\n              '-c',\n              `user.email=\"${this.user.email || this.user.uid}\"`,\n              'commit',\n              '-m',\n              writeResult.commitMessage,\n            ],\n            {\n              cwd: this.course.path,\n              env: gitEnv,\n            },\n          );\n        };\n\n        let courseData: courseDB.CourseData | undefined;\n        try {\n          await writeAndCommitChanges();\n\n          await cleanAndResetRepository(this.course, 'HEAD', gitEnv, job);\n          // Before pushing the changes, ensure that we don't allow someone\n          // to put their course into an invalid state by deleting a shared\n          // question or otherwise breaking the invariants we rely upon for\n          // question sharing.\n          const possibleCourseData = await courseDB.loadFullCourse(\n            this.course.id,\n            this.course.path,\n          );\n          const sharingConfigurationValid = await syncFromDisk.checkSharingConfigurationValid(\n            this.course.id,\n            possibleCourseData,\n            logger,\n          );\n          if (!sharingConfigurationValid) {\n            await cleanAndResetRepository(this.course, startGitHash, gitEnv, job);\n            throw new Error('Invalid sharing operation, reverted to last known good state.');\n          }\n\n          try {\n            job.info('Push changes to remote git repository');\n            await job.exec('git', ['push'], {\n              cwd: this.course.path,\n              env: gitEnv,\n            });\n            job.data.saveSucceeded = true;\n\n            // If we were able to push the change to GitHub, we can safely\n            // use the course data that we already loaded from disk because\n            // we can be sure that there weren't any further changes to the\n            // files on disk. This helps keep syncing fast by avoiding loading\n            // all course JSON files twice.\n            //\n            // If pushing fails, we'll need to incorporate the latest changes\n            // from the remote repository, so we'll have to load the latest\n            // course data from disk after we do so.\n            courseData = possibleCourseData;\n          } catch {\n            job.info('Failed to push changes to remote git repository');\n            job.info('Pulling changes from remote git repository and trying again');\n\n            job.info('Fetch from remote git repository');\n            await job.exec('git', ['fetch'], {\n              cwd: this.course.path,\n              env: gitEnv,\n            });\n\n            // This will both discard the commit we made locally and also pull\n            // in any new changes from the remote.\n            await cleanAndResetRepository(this.course, `origin/${this.course.branch}`, gitEnv, job);\n\n            await writeAndCommitChanges();\n\n            try {\n              job.info('Push changes to remote git repository');\n              await job.exec('git', ['push'], {\n                cwd: this.course.path,\n                env: gitEnv,\n              });\n              job.data.saveSucceeded = true;\n            } finally {\n              // Clean up to remove any empty directories that might have been\n              // left behind by operations like renames. This will also ensure\n              // that we get back to a good state if the changes couldn't be\n              // pushed to the remote.\n              await cleanAndResetRepository(\n                this.course,\n                `origin/${this.course.branch}`,\n                gitEnv,\n                job,\n              );\n            }\n          }\n        } finally {\n          // Whether or not we error, we'll sync the course.\n          //\n          // If pushing succeeded, then we will be syncing the changes made\n          // by this edit.\n          //\n          // If pushing (or anything before pushing) failed, then we will be\n          // syncing the changes we pulled from the remote git repository.\n          job.info('Sync changes from disk');\n          job.data.syncAttempted = true;\n          await syncCourseFromDisk(this.course, startGitHash, job, courseData);\n          job.data.syncSucceeded = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Remove empty preceding subfolders for a question, assessment, etc. based on its ID.\n   * This should be run after renames or deletes to prevent syncing issues.\n   * @param rootDirectory Root directory that the items are being stored in.\n   * @param id Item to delete root subfolders for, relative from the root directory.\n   */\n  async removeEmptyPrecedingSubfolders(rootDirectory: string, id: string) {\n    const idSplit = id.split(path.sep);\n\n    // Start deleting subfolders in reverse order\n    const reverseFolders = idSplit.slice(0, -1).reverse();\n    debug('Checking folders', reverseFolders);\n\n    let seenNonemptyFolder = false;\n    for (const [index] of reverseFolders.entries()) {\n      if (!seenNonemptyFolder) {\n        const delPath = path.join(rootDirectory, ...idSplit.slice(0, idSplit.length - 1 - index));\n        debug('Checking', delPath);\n\n        const files = await fs.readdir(delPath);\n\n        // Delete the subfolder if it's empty, otherwise stop here\n        if (files.length > 0) {\n          debug(delPath, 'is nonempty, stopping here.');\n          debug('Folder contains', files);\n          seenNonemptyFolder = true;\n        } else {\n          debug('No files, deleting', delPath);\n          await fs.remove(delPath);\n        }\n      }\n    }\n  }\n\n  /**\n   * Get all existing shortnames, recursing on nonempty directories that do not contain\n   * an \".info\" file.\n   * @param rootDirectory Directory to start searching from.\n   * @param infoFile Name of the info file, will stop recursing once a directory contains this.\n   */\n  async getExistingShortNames(rootDirectory: string, infoFile: string) {\n    const files: string[] = [];\n    const walk = async (relativeDir) => {\n      const directories = await fs.readdir(path.join(rootDirectory, relativeDir)).catch((err) => {\n        // If the directory doesn't exist, then we have nothing to load\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {\n          return [] as string[];\n        }\n        throw err;\n      });\n\n      // For each subdirectory, try to find an Info file\n      await async.each(directories, async (dir) => {\n        // Relative path to the current folder\n        const subdirPath = path.join(relativeDir, dir);\n        // Absolute path to the info file\n        const infoPath = path.join(rootDirectory, subdirPath, infoFile);\n        const hasInfoFile = await fs.pathExists(infoPath);\n        if (hasInfoFile) {\n          // Info file exists, we can use this directory\n          files.push(subdirPath);\n        } else {\n          // No info file, let's try recursing\n          await walk(subdirPath);\n        }\n      });\n    };\n\n    await walk('');\n    debug('getExistingShortNames() returning', files);\n    return files;\n  }\n\n  getNamesForCopy(\n    oldShortName: string,\n    shortNames: string[],\n    oldLongName: string | null,\n    longNames: string[],\n  ): { shortName: string; longName: string } {\n    function getBaseShortName(oldname: string): string {\n      const found = oldname.match(new RegExp('^(.*)_copy[0-9]+$'));\n      if (found) {\n        return found[1];\n      } else {\n        return oldname;\n      }\n    }\n\n    function getBaseLongName(oldname: string | null): string {\n      if (typeof oldname !== 'string') return 'Unknown';\n      debug(oldname);\n      const found = oldname.match(new RegExp('^(.*) \\\\(copy [0-9]+\\\\)$'));\n      debug(found);\n      if (found) {\n        return found[1];\n      } else {\n        return oldname;\n      }\n    }\n\n    function getNumberShortName(basename: string, oldnames: string[]): number {\n      let number = 1;\n      oldnames.forEach((oldname) => {\n        const found = oldname.match(new RegExp(`^${escapeRegExp(basename)}_copy([0-9]+)$`));\n        if (found) {\n          const foundNumber = parseInt(found[1]);\n          if (foundNumber >= number) {\n            number = foundNumber + 1;\n          }\n        }\n      });\n      return number;\n    }\n\n    function getNumberLongName(basename: string, oldnames: string[]): number {\n      let number = 1;\n      oldnames.forEach((oldname) => {\n        if (typeof oldname !== 'string') return;\n        const found = oldname.match(new RegExp(`^${escapeRegExp(basename)} \\\\(copy ([0-9]+)\\\\)$`));\n        if (found) {\n          const foundNumber = parseInt(found[1]);\n          if (foundNumber >= number) {\n            number = foundNumber + 1;\n          }\n        }\n      });\n      return number;\n    }\n\n    const baseShortName = getBaseShortName(oldShortName);\n    const baseLongName = getBaseLongName(oldLongName);\n    const numberShortName = getNumberShortName(baseShortName, shortNames);\n    const numberLongName = getNumberLongName(baseLongName, longNames);\n    const number = numberShortName > numberLongName ? numberShortName : numberLongName;\n    return {\n      shortName: `${baseShortName}_copy${number}`,\n      longName: `${baseLongName} (copy ${number})`,\n    };\n  }\n}\n\nexport class AssessmentCopyEditor extends Editor {\n  private assessment: Assessment;\n  private course_instance: CourseInstance;\n\n  public readonly uuid: string;\n\n  constructor(\n    params: BaseEditorOptions<{ course_instance: CourseInstance; assessment: Assessment }>,\n  ) {\n    const { course_instance, assessment } = params.locals;\n\n    super({\n      ...params,\n      description: `${course_instance.short_name}: Copy assessment ${assessment.tid}`,\n    });\n\n    this.assessment = assessment;\n    this.course_instance = course_instance;\n\n    this.uuid = uuidv4();\n  }\n\n  async write() {\n    assert(this.course_instance.short_name, 'course_instance.short_name is required');\n    assert(this.assessment.tid, 'assessment.tid is required');\n\n    debug('AssessmentCopyEditor: write()');\n    const assessmentsPath = path.join(\n      this.course.path,\n      'courseInstances',\n      this.course_instance.short_name,\n      'assessments',\n    );\n\n    debug('Get all existing long names');\n    const result = await sqldb.queryAsync(sql.select_assessments_with_course_instance, {\n      course_instance_id: this.course_instance.id,\n    });\n    const oldNamesLong = result.rows.map((row) => row.title);\n\n    debug('Get all existing short names');\n    const oldNamesShort = await this.getExistingShortNames(assessmentsPath, 'infoAssessment.json');\n\n    debug('Generate TID and Title');\n    const names = this.getNamesForCopy(\n      this.assessment.tid,\n      oldNamesShort,\n      this.assessment.title,\n      oldNamesLong,\n    );\n    const tid = names.shortName;\n    const assessmentTitle = names.longName;\n    const assessmentPath = path.join(assessmentsPath, tid);\n\n    const fromPath = path.join(assessmentsPath, this.assessment.tid);\n    const toPath = assessmentPath;\n\n    debug(`Copy template\\n from ${fromPath}\\n to ${toPath}`);\n    await fs.copy(fromPath, toPath, { overwrite: false, errorOnExist: true });\n\n    debug('Read infoAssessment.json');\n    const infoJson = await fs.readJson(path.join(assessmentPath, 'infoAssessment.json'));\n\n    delete infoJson['shareSourcePublicly'];\n\n    debug('Write infoAssessment.json with new title and uuid');\n    infoJson.title = assessmentTitle;\n    infoJson.uuid = this.uuid;\n\n    const formattedJson = await formatJsonWithPrettier(JSON.stringify(infoJson));\n    await fs.writeFile(path.join(assessmentPath, 'infoAssessment.json'), formattedJson);\n\n    return {\n      pathsToAdd: [assessmentPath],\n      commitMessage: `${this.course_instance.short_name}: copy assessment ${this.assessment.tid} to ${tid}`,\n    };\n  }\n}\n\nexport class AssessmentDeleteEditor extends Editor {\n  private course_instance: CourseInstance;\n  private assessment: Assessment;\n\n  constructor(\n    params: BaseEditorOptions<{ course_instance: CourseInstance; assessment: Assessment }>,\n  ) {\n    const { course_instance, assessment } = params.locals;\n\n    super({\n      ...params,\n      description: `${course_instance.short_name}: Delete assessment ${assessment.tid}`,\n    });\n\n    this.course_instance = course_instance;\n    this.assessment = assessment;\n  }\n\n  async write() {\n    assert(this.course_instance.short_name, 'course_instance.short_name is required');\n    assert(this.assessment.tid, 'assessment.tid is required');\n\n    debug('AssessmentDeleteEditor: write()');\n    const deletePath = path.join(\n      this.course.path,\n      'courseInstances',\n      this.course_instance.short_name,\n      'assessments',\n    );\n    await fs.remove(path.join(deletePath, this.assessment.tid));\n    await this.removeEmptyPrecedingSubfolders(deletePath, this.assessment.tid);\n\n    return {\n      pathsToAdd: [path.join(deletePath, this.assessment.tid)],\n      commitMessage: `${this.course_instance.short_name}: delete assessment ${this.assessment.tid}`,\n    };\n  }\n}\n\nexport class AssessmentRenameEditor extends Editor {\n  private tid_new: string;\n  private course_instance: CourseInstance;\n  private assessment: Assessment;\n\n  constructor(\n    params: BaseEditorOptions<{ course_instance: CourseInstance; assessment: Assessment }> & {\n      tid_new: string;\n    },\n  ) {\n    const { course_instance, assessment } = params.locals;\n\n    super({\n      ...params,\n      description: `${course_instance.short_name}: Rename assessment ${assessment.tid}`,\n    });\n\n    this.tid_new = params.tid_new;\n    this.course_instance = course_instance;\n    this.assessment = assessment;\n  }\n\n  async write() {\n    assert(this.course_instance.short_name, 'course_instance.short_name is required');\n    assert(this.assessment.tid, 'assessment.tid is required');\n\n    debug('AssessmentRenameEditor: write()');\n    const assessmentsPath = path.join(\n      this.course.path,\n      'courseInstances',\n      this.course_instance.short_name,\n      'assessments',\n    );\n    const oldPath = path.normalize(path.join(assessmentsPath, this.assessment.tid));\n    const newPath = path.normalize(path.join(assessmentsPath, this.tid_new));\n\n    // Skip editing if the paths are the same.\n    if (oldPath === newPath) return null;\n\n    // Ensure that the assessment folder path is fully contained in the assessments directory\n    if (!contains(assessmentsPath, newPath)) {\n      throw new AugmentedError('Invalid folder path', {\n        info: html`\n          <p>The updated path of the assessments folder</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${newPath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${assessmentsPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    debug(`Move files\\n from ${oldPath}\\n to ${newPath}`);\n    await fs.move(oldPath, newPath, { overwrite: false });\n    await this.removeEmptyPrecedingSubfolders(assessmentsPath, this.assessment.tid);\n\n    return {\n      pathsToAdd: [oldPath, newPath],\n      commitMessage: `${this.course_instance.short_name}: rename assessment ${this.assessment.tid} to ${this.tid_new}`,\n    };\n  }\n}\n\nexport class AssessmentAddEditor extends Editor {\n  private course_instance: CourseInstance;\n\n  public readonly uuid: string;\n  private aid: string;\n  private title: string;\n  private type: 'Homework' | 'Exam';\n  private set: string;\n  private module?: string;\n\n  constructor(\n    params: BaseEditorOptions<{ course_instance: CourseInstance }> & {\n      aid: string;\n      title: string;\n      type: 'Homework' | 'Exam';\n      set: string;\n      module?: string;\n    },\n  ) {\n    const { course_instance } = params.locals;\n\n    super({\n      ...params,\n      description: `${course_instance.short_name}: Add assessment`,\n    });\n\n    this.course_instance = course_instance;\n\n    this.uuid = uuidv4();\n\n    this.aid = params.aid;\n    this.title = params.title;\n    this.type = params.type;\n    this.set = params.set;\n    this.module = params.module;\n  }\n\n  async write() {\n    assert(this.course_instance.short_name, 'course_instance.short_name is required');\n\n    debug('AssessmentAddEditor: write()');\n    const assessmentsPath = path.join(\n      this.course.path,\n      'courseInstances',\n      this.course_instance.short_name,\n      'assessments',\n    );\n\n    debug('Get all existing long names');\n    const result = await sqldb.queryAsync(sql.select_assessments_with_course_instance, {\n      course_instance_id: this.course_instance.id,\n    });\n    const oldNamesLong = result.rows.map((row) => row.title);\n\n    debug('Get all existing short names');\n    const oldNamesShort = await this.getExistingShortNames(assessmentsPath, 'infoAssessment.json');\n\n    debug('Generate TID and Title');\n    const { shortName: tid, longName: assessmentTitle } = getUniqueNames({\n      shortNames: oldNamesShort,\n      longNames: oldNamesLong,\n      shortName: this.aid,\n      longName: this.title,\n    });\n\n    const assessmentPath = path.join(assessmentsPath, tid);\n\n    // Ensure that the assessment folder path is fully contained in the assessments directory\n    if (!contains(assessmentsPath, assessmentPath)) {\n      throw new AugmentedError('Invalid folder path', {\n        info: html`\n          <p>The path of the assessments folder to add</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${assessmentPath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${assessmentsPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    debug('Write infoAssessment.json');\n\n    const infoJson = {\n      uuid: this.uuid,\n      type: this.type,\n      title: assessmentTitle,\n      set: this.set,\n      module: this.module,\n      number: '1',\n      allowAccess: [],\n      zones: [],\n    };\n\n    // We use outputJson to create the directory this.assessmentsPath if it\n    // does not exist (which it shouldn't). We use the file system flag 'wx'\n    // to throw an error if `assessmentPath` already exists.\n    await fs.outputJson(path.join(assessmentPath, 'infoAssessment.json'), infoJson, {\n      spaces: 4,\n      flag: 'wx',\n    });\n\n    return {\n      pathsToAdd: [assessmentPath],\n      commitMessage: `${this.course_instance.short_name}: add assessment ${tid}`,\n    };\n  }\n}\n\nexport class CourseInstanceCopyEditor extends Editor {\n  private course_instance: CourseInstance;\n\n  public readonly uuid: string;\n\n  constructor(params: BaseEditorOptions<{ course_instance: CourseInstance }>) {\n    const { course_instance } = params.locals;\n\n    super({\n      ...params,\n      description: `Copy course instance ${course_instance.short_name}`,\n    });\n\n    this.course_instance = course_instance;\n\n    this.uuid = uuidv4();\n  }\n\n  async write() {\n    assert(this.course_instance.short_name, 'course_instance.short_name is required');\n\n    debug('CourseInstanceCopyEditor: write()');\n    const courseInstancesPath = path.join(this.course.path, 'courseInstances');\n\n    debug('Get all existing long names');\n    const result = await sqldb.queryAsync(sql.select_course_instances_with_course, {\n      course_id: this.course.id,\n    });\n    const oldNamesLong = result.rows.map((row) => row.long_name);\n\n    debug('Get all existing short names');\n    const oldNamesShort = await this.getExistingShortNames(\n      courseInstancesPath,\n      'infoCourseInstance.json',\n    );\n\n    debug('Generate short_name and long_name');\n    const names = this.getNamesForCopy(\n      this.course_instance.short_name,\n      oldNamesShort,\n      this.course_instance.long_name,\n      oldNamesLong,\n    );\n    const short_name = names.shortName;\n    const courseInstancePath = path.join(courseInstancesPath, short_name);\n\n    const fromPath = path.join(courseInstancesPath, this.course_instance.short_name);\n    const toPath = courseInstancePath;\n\n    debug(`Copy template\\n from ${fromPath}\\n to ${toPath}`);\n    await fs.copy(fromPath, toPath, { overwrite: false, errorOnExist: true });\n\n    debug('Read infoCourseInstance.json');\n    const infoJson = await fs.readJson(path.join(courseInstancePath, 'infoCourseInstance.json'));\n\n    debug('Write infoCourseInstance.json with new longName and uuid');\n    infoJson.longName = names.longName;\n    infoJson.uuid = this.uuid;\n\n    const formattedJson = await formatJsonWithPrettier(JSON.stringify(infoJson));\n    await fs.writeFile(path.join(courseInstancePath, 'infoCourseInstance.json'), formattedJson);\n\n    return {\n      pathsToAdd: [courseInstancePath],\n      commitMessage: `copy course instance ${this.course_instance.short_name} to ${short_name}`,\n    };\n  }\n}\n\nexport class CourseInstanceDeleteEditor extends Editor {\n  private course_instance: CourseInstance;\n\n  constructor(params: BaseEditorOptions<{ course_instance: CourseInstance }>) {\n    const { course_instance } = params.locals;\n\n    super({\n      ...params,\n      description: `Delete course instance ${course_instance.short_name}`,\n    });\n\n    this.course_instance = course_instance;\n  }\n\n  async write() {\n    assert(this.course_instance.short_name, 'course_instance.short_name is required');\n\n    debug('CourseInstanceDeleteEditor: write()');\n    const deletePath = path.join(this.course.path, 'courseInstances');\n    await fs.remove(path.join(deletePath, this.course_instance.short_name));\n    await this.removeEmptyPrecedingSubfolders(deletePath, this.course_instance.short_name);\n\n    return {\n      pathsToAdd: [path.join(deletePath, this.course_instance.short_name)],\n      commitMessage: `delete course instance ${this.course_instance.short_name}`,\n    };\n  }\n}\n\nexport class CourseInstanceRenameEditor extends Editor {\n  private ciid_new: string;\n  private course_instance: CourseInstance;\n\n  constructor(\n    params: BaseEditorOptions<{ course_instance: CourseInstance }> & { ciid_new: string },\n  ) {\n    const {\n      locals: { course_instance },\n      ciid_new,\n    } = params;\n\n    super({\n      ...params,\n      description: `Rename course instance ${course_instance.short_name} to ${ciid_new}`,\n    });\n\n    this.ciid_new = ciid_new;\n    this.course_instance = course_instance;\n  }\n\n  async write() {\n    assert(this.course_instance.short_name, 'course_instance.short_name is required');\n\n    debug('CourseInstanceRenameEditor: write()');\n    const courseInstancesPath = path.join(this.course.path, 'courseInstances');\n    const oldPath = path.join(courseInstancesPath, this.course_instance.short_name);\n    const newPath = path.join(courseInstancesPath, this.ciid_new);\n\n    // Skip editing if the paths are the same.\n    if (oldPath === newPath) return null;\n\n    // Ensure that the updated course instance folder path is fully contained in the course instances directory\n    if (!contains(courseInstancesPath, newPath)) {\n      throw new AugmentedError('Invalid folder path', {\n        info: html`\n          <p>The updated path of the course instance folder</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${newPath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${courseInstancesPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    debug(`Move files\\n from ${oldPath}\\n to ${newPath}`);\n    await fs.move(oldPath, newPath, { overwrite: false });\n    await this.removeEmptyPrecedingSubfolders(\n      path.join(this.course.path, 'courseInstances'),\n      this.course_instance.short_name,\n    );\n\n    return {\n      pathsToAdd: [oldPath, newPath],\n      commitMessage: `rename course instance ${this.course_instance.short_name} to ${this.ciid_new}`,\n    };\n  }\n}\n\nexport class CourseInstanceAddEditor extends Editor {\n  public readonly uuid: string;\n  private short_name: string;\n  private long_name: string;\n  private start_access_date?: Temporal.ZonedDateTime;\n  private end_access_date?: Temporal.ZonedDateTime;\n\n  constructor(\n    params: BaseEditorOptions & {\n      short_name: string;\n      long_name: string;\n      start_access_date?: Temporal.ZonedDateTime;\n      end_access_date?: Temporal.ZonedDateTime;\n    },\n  ) {\n    super({\n      ...params,\n      description: 'Add course instance',\n    });\n\n    this.uuid = uuidv4();\n\n    this.short_name = params.short_name;\n    this.long_name = params.long_name;\n\n    if (\n      params.start_access_date &&\n      params.end_access_date &&\n      params.start_access_date.epochMilliseconds > params.end_access_date.epochMilliseconds\n    ) {\n      throw new HttpStatusError(400, 'Start date must be before end date');\n    }\n\n    this.start_access_date = params.start_access_date;\n    this.end_access_date = params.end_access_date;\n  }\n\n  async write() {\n    debug('CourseInstanceAddEditor: write()');\n    const courseInstancesPath = path.join(this.course.path, 'courseInstances');\n\n    debug('Get all existing long names');\n    const result = await sqldb.queryAsync(sql.select_course_instances_with_course, {\n      course_id: this.course.id,\n    });\n    const oldNamesLong = result.rows.map((row) => row.long_name);\n\n    debug('Get all existing short names');\n    const oldNamesShort = await this.getExistingShortNames(\n      courseInstancesPath,\n      'infoCourseInstance.json',\n    );\n\n    debug('Generate short_name and long_name');\n    const { shortName, longName } = getUniqueNames({\n      shortNames: oldNamesShort,\n      longNames: oldNamesLong,\n      shortName: this.short_name,\n      longName: this.long_name,\n    });\n\n    const courseInstancePath = path.join(courseInstancesPath, shortName);\n\n    // Ensure that the new course instance folder path is fully contained in the course instances directory\n    if (!contains(courseInstancesPath, courseInstancePath)) {\n      throw new AugmentedError('Invalid folder path', {\n        info: html`\n          <p>The path of the course instance folder to add</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${courseInstancePath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${courseInstancesPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    debug('Write infoCourseInstance.json');\n\n    let allowAccess: { startDate?: string; endDate?: string } | undefined = undefined;\n\n    if (this.start_access_date || this.end_access_date) {\n      allowAccess = {\n        startDate: this.start_access_date\n          ? formatDate(\n              new Date(this.start_access_date.epochMilliseconds),\n              this.course.display_timezone,\n              {\n                includeTz: false,\n              },\n            )\n          : undefined,\n        endDate: this.end_access_date\n          ? formatDate(\n              new Date(this.end_access_date.epochMilliseconds),\n              this.course.display_timezone,\n              {\n                includeTz: false,\n              },\n            )\n          : undefined,\n      };\n    }\n\n    const infoJson = {\n      uuid: this.uuid,\n      longName,\n      allowAccess: allowAccess !== undefined ? [allowAccess] : [],\n    };\n\n    // We use outputJson to create the directory this.courseInstancePath if it\n    // does not exist (which it shouldn't). We use the file system flag 'wx' to\n    // throw an error if this.courseInstancePath already exists.\n    await fs.outputJson(path.join(courseInstancePath, 'infoCourseInstance.json'), infoJson, {\n      spaces: 4,\n      flag: 'wx',\n    });\n\n    return {\n      pathsToAdd: [courseInstancePath],\n      commitMessage: `add course instance ${shortName}`,\n    };\n  }\n}\n\nexport class QuestionAddEditor extends Editor {\n  public readonly uuid: string;\n\n  private qid?: string;\n  private title?: string;\n  private template_qid?: string;\n  private files?: Record<string, string>;\n  private isDraft?: boolean;\n\n  constructor(\n    params: BaseEditorOptions & {\n      qid?: string;\n      title?: string;\n      template_qid?: string;\n      files?: Record<string, string>;\n      isDraft?: boolean;\n    },\n  ) {\n    super({\n      ...params,\n      description: 'Add question',\n    });\n\n    this.uuid = uuidv4();\n    this.qid = params.qid;\n    this.title = params.title;\n    this.template_qid = params.template_qid;\n    this.files = params.files;\n    this.isDraft = params.isDraft;\n  }\n\n  async write() {\n    debug('QuestionAddEditor: write()');\n    const questionsPath = path.join(this.course.path, 'questions');\n\n    const { qid, title } = await run(async () => {\n      if (!(this.qid && this.title) && this.isDraft) {\n        let draftNumber = await sqldb.queryRow(\n          sql.update_draft_number,\n          { course_id: this.course.id },\n          z.number(),\n        );\n\n        while (fs.existsSync(path.join(questionsPath, '__drafts__', `draft_${draftNumber}`))) {\n          //increment and sync to postgres\n          draftNumber = await sqldb.queryRow(\n            sql.update_draft_number,\n            { course_id: this.course.id },\n            z.number(),\n          );\n        }\n\n        return { qid: `__drafts__/draft_${draftNumber}`, title: `draft #${draftNumber}` };\n      }\n\n      debug('Get all existing long names');\n      const result = await sqldb.queryAsync(sql.select_questions_with_course, {\n        course_id: this.course.id,\n      });\n      const oldNamesLong = result.rows.map((row) => row.title);\n\n      debug('Get all existing short names');\n      const oldNamesShort = await this.getExistingShortNames(questionsPath, 'info.json');\n\n      debug('Generate qid and title');\n      const { shortName, longName } = getUniqueNames({\n        shortNames: oldNamesShort,\n        longNames: oldNamesLong,\n        shortName: this.qid,\n        longName: this.title,\n      });\n\n      return { qid: shortName, title: longName };\n    });\n\n    const newQuestionPath = path.join(questionsPath, qid);\n\n    // Ensure that the question folder path is fully contained in the questions directory of the course\n    if (!contains(questionsPath, newQuestionPath)) {\n      throw new AugmentedError('Invalid folder path', {\n        info: html`\n          <p>The path of the question folder to add</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${newQuestionPath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${questionsPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    if (this.template_qid) {\n      const exampleCourseQuestionsPath = path.join(EXAMPLE_COURSE_PATH, 'questions');\n      const fromPath = path.join(exampleCourseQuestionsPath, this.template_qid);\n\n      // Ensure that the template_qid folder path is fully contained in the example course questions directory\n      if (!contains(exampleCourseQuestionsPath, fromPath)) {\n        throw new AugmentedError('Invalid folder path', {\n          info: html`\n            <p>The path of the template question folder</p>\n            <div class=\"container\">\n              <pre class=\"bg-dark text-white rounded p-2\">${fromPath}</pre>\n            </div>\n            <p>must be inside the root directory</p>\n            <div class=\"container\">\n              <pre class=\"bg-dark text-white rounded p-2\">${exampleCourseQuestionsPath}</pre>\n            </div>\n          `,\n        });\n      }\n\n      // Ensure that the question folder path is fully contained in the questions directory of the course\n      if (!contains(questionsPath, newQuestionPath)) {\n        throw new AugmentedError('Invalid folder path', {\n          info: html`\n            <p>The path of the question folder to add</p>\n            <div class=\"container\">\n              <pre class=\"bg-dark text-white rounded p-2\">${newQuestionPath}</pre>\n            </div>\n            <p>must be inside the root directory</p>\n            <div class=\"container\">\n              <pre class=\"bg-dark text-white rounded p-2\">${questionsPath}</pre>\n            </div>\n          `,\n        });\n      }\n\n      debug(`Copy template\\n from ${fromPath}\\n to ${newQuestionPath}`);\n      await fs.copy(fromPath, newQuestionPath, { overwrite: false, errorOnExist: true });\n\n      debug('Read info.json');\n      const infoJson = await fs.readJson(path.join(newQuestionPath, 'info.json'));\n\n      debug('Write info.json with the new title and uuid');\n      infoJson.title = this.title;\n      infoJson.uuid = this.uuid;\n\n      // Reset the topic.\n      infoJson.topic = 'Default';\n\n      // Delete values that might not make sense in the target course.\n      delete infoJson.tags;\n      delete infoJson.shareSourcePublicly;\n      delete infoJson.sharingSets;\n      delete infoJson.sharePublicly;\n\n      const formattedJson = await formatJsonWithPrettier(JSON.stringify(infoJson));\n\n      await fs.writeFile(path.join(newQuestionPath, 'info.json'), formattedJson);\n    } else {\n      debug(`Create an empty question at ${newQuestionPath}`);\n\n      const newQuestionInfoFilePath = path.join(newQuestionPath, 'info.json');\n      const newQuestionHtmlFilePath = path.join(newQuestionPath, 'question.html');\n      const newQuestionScriptFilePath = path.join(newQuestionPath, 'server.py');\n\n      const data = {\n        uuid: this.uuid,\n        title,\n        topic: 'Default',\n        type: 'v3',\n      };\n\n      const formattedJson = await formatJsonWithPrettier(JSON.stringify(data));\n\n      await fs.ensureDir(newQuestionPath);\n      await fs.writeFile(newQuestionInfoFilePath, formattedJson);\n      await fs.ensureFile(newQuestionHtmlFilePath);\n      await fs.ensureFile(newQuestionScriptFilePath);\n    }\n\n    if (this.files != null) {\n      debug('Remove template files when file texts provided');\n      await fs.remove(path.join(newQuestionPath, 'question.html'));\n      await fs.remove(path.join(newQuestionPath, 'server.py'));\n\n      if ('info.json' in this.files) {\n        await fs.remove(path.join(newQuestionPath, 'info.json'));\n      }\n\n      debug('Load files from text');\n      for (const file of Object.keys(this.files)) {\n        const newPath = path.join(newQuestionPath, file);\n\n        // Ensure that files are fully contained in the question directory.\n        if (contains(newQuestionPath, newPath)) {\n          await fs.writeFile(newPath, this.files[file]);\n        } else {\n          throw new AugmentedError('Invalid file path', {\n            info: html`\n              <p>The path of the file to add</p>\n              <div class=\"container\">\n                <pre class=\"bg-dark text-white rounded p-2\">${newPath}</pre>\n              </div>\n              <p>must be inside the root directory</p>\n              <div class=\"container\">\n                <pre class=\"bg-dark text-white rounded p-2\">${newQuestionPath}</pre>\n              </div>\n            `,\n          });\n        }\n      }\n    }\n    return {\n      pathsToAdd: [newQuestionPath],\n      commitMessage: `add question ${qid}`,\n    };\n  }\n}\n\nexport class QuestionModifyEditor extends Editor {\n  private question: Question;\n  private origHash: string;\n  private files: Record<string, string | null>;\n\n  constructor(\n    params: BaseEditorOptions<{ question: Question }> & {\n      files: Record<string, string | null>;\n    },\n  ) {\n    const {\n      locals: { question },\n      files,\n    } = params;\n\n    super({\n      ...params,\n      description: `Modify question ${question.qid}`,\n    });\n\n    this.question = question;\n    this.files = files;\n  }\n\n  async write() {\n    assert(this.question.qid, 'question.qid is required');\n\n    const questionPath = path.join(this.course.path, 'questions', this.question.qid);\n\n    // Validate that all file paths don't escape the question directory.\n    for (const filePath of Object.keys(this.files)) {\n      if (!contains(questionPath, filePath)) {\n        throw new Error(`Invalid file path: ${filePath}`);\n      }\n    }\n\n    // Note that we deliberately only modify files that were provided. We don't\n    // try to delete \"excess\" files that aren't in the `files` object because the\n    // user might have added extra files of their own, e.g. in the `tests` or\n    // `clientFilesQuestion` directory. We don't want to remove them, and we also\n    // don't want to mandate that the caller must always read all existing files\n    // and provide them in the `files` object.\n    for (const [filePath, contents] of Object.entries(this.files)) {\n      const resolvedPath = path.join(questionPath, filePath);\n      if (contents === null) {\n        await fs.remove(resolvedPath);\n      } else {\n        await fs.writeFile(resolvedPath, b64Util.b64DecodeUnicode(contents));\n      }\n    }\n\n    return {\n      pathsToAdd: [questionPath],\n      commitMessage: this.description,\n    };\n  }\n}\n\nexport class QuestionDeleteEditor extends Editor {\n  private questions: Question[];\n\n  constructor(params: BaseEditorOptions & { questions: Question | Question[] }) {\n    let questions: Question[];\n\n    if (Array.isArray(params.questions)) {\n      questions = params.questions;\n    } else {\n      questions = [params.questions];\n    }\n\n    super({\n      ...params,\n      description:\n        questions.length === 1\n          ? `Delete question ${questions[0].qid}`\n          : `Delete questions ${questions.map((x) => x.qid).join(', ')}`,\n    });\n\n    this.questions = questions;\n  }\n\n  async write() {\n    debug('QuestionDeleteEditor: write()');\n\n    for (const question of this.questions) {\n      // This shouldn't happen in practice; this is just to satisfy TypeScript.\n      assert(question.qid, 'question.qid is required');\n\n      await fs.remove(path.join(this.course.path, 'questions', question.qid));\n      await this.removeEmptyPrecedingSubfolders(\n        path.join(this.course.path, 'questions'),\n        question.qid,\n      );\n    }\n\n    return {\n      pathsToAdd: this.questions.flatMap((question) =>\n        question.qid !== null ? path.join(this.course.path, 'questions', question.qid) : [],\n      ),\n      commitMessage:\n        this.questions.length === 1\n          ? `delete question ${this.questions[0].qid}`\n          : `delete questions (${this.questions.map((x) => x.qid).join(', ')})`,\n    };\n  }\n}\n\nexport class QuestionRenameEditor extends Editor {\n  private qid_new: string;\n  private question: Question;\n\n  constructor(params: BaseEditorOptions<{ question: Question }> & { qid_new: string }) {\n    const {\n      locals: { question },\n      qid_new,\n    } = params;\n\n    super({\n      ...params,\n      description: `Rename question ${question.qid}`,\n    });\n\n    this.qid_new = qid_new;\n    this.question = question;\n  }\n\n  async write() {\n    assert(this.question.qid, 'question.qid is required');\n\n    debug('QuestionRenameEditor: write()');\n\n    const questionsPath = path.join(this.course.path, 'questions');\n    const oldPath = path.join(questionsPath, this.question.qid);\n    const newPath = path.join(questionsPath, this.qid_new);\n\n    // Skip editing if the paths are the same.\n    if (oldPath === newPath) return null;\n\n    // Ensure that the updated question folder path is fully contained in the questions directory\n    if (!contains(questionsPath, newPath)) {\n      throw new AugmentedError('Invalid folder path', {\n        info: html`\n          <p>The updated path of the question folder</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${newPath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${questionsPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    debug(`Move files\\n from ${oldPath}\\n to ${newPath}`);\n    await fs.move(oldPath, newPath, { overwrite: false });\n    await this.removeEmptyPrecedingSubfolders(questionsPath, this.question.qid);\n\n    debug(`Find all assessments (in all course instances) that contain ${this.question.qid}`);\n    const result = await sqldb.queryAsync(sql.select_assessments_with_question, {\n      question_id: this.question.id,\n    });\n    const assessments = result.rows;\n\n    const pathsToAdd = [oldPath, newPath];\n\n    debug(\n      `For each assessment, read/write infoAssessment.json to replace ${this.question.qid} with ${this.qid_new}`,\n    );\n    for (const assessment of assessments) {\n      const infoPath = path.join(\n        this.course.path,\n        'courseInstances',\n        assessment.course_instance_directory,\n        'assessments',\n        assessment.assessment_directory,\n        'infoAssessment.json',\n      );\n      pathsToAdd.push(infoPath);\n\n      debug(`Read ${infoPath}`);\n      const infoJson = await fs.readJson(infoPath);\n\n      debug(`Find/replace QID in ${infoPath}`);\n      let found = false;\n      infoJson.zones.forEach((zone) => {\n        zone.questions.forEach((question) => {\n          if (question.alternatives) {\n            question.alternatives.forEach((alternative) => {\n              if (alternative.id === this.question.qid) {\n                alternative.id = this.qid_new;\n                found = true;\n              }\n            });\n          } else if (question.id === this.question.qid) {\n            question.id = this.qid_new;\n            found = true;\n          }\n        });\n      });\n      if (!found) {\n        logger.info(`Should have but did not find ${this.question.qid} in ${infoPath}`);\n      }\n      debug(`Write ${infoPath}`);\n      const formattedJson = await formatJsonWithPrettier(JSON.stringify(infoJson));\n      await fs.writeFile(infoPath, formattedJson);\n    }\n\n    return {\n      pathsToAdd,\n      commitMessage: `rename question ${this.question.qid} to ${this.qid_new}`,\n    };\n  }\n}\n\nexport class QuestionCopyEditor extends Editor {\n  private question: Question;\n\n  public readonly uuid: string;\n\n  constructor(params: BaseEditorOptions<{ question: Question }>) {\n    const {\n      locals: { question },\n    } = params;\n\n    super({\n      ...params,\n      description: `Copy question ${question.qid}`,\n    });\n\n    this.question = question;\n\n    this.uuid = uuidv4();\n  }\n\n  async write() {\n    assert(this.question.qid, 'question.qid is required');\n\n    debug('QuestionCopyEditor: write()');\n    const questionsPath = path.join(this.course.path, 'questions');\n\n    debug('Get all existing long names');\n    const result = await sqldb.queryAsync(sql.select_questions_with_course, {\n      course_id: this.course.id,\n    });\n    const oldNamesLong = result.rows.map((row) => row.title);\n\n    debug('Get all existing short names');\n    const oldNamesShort = await this.getExistingShortNames(questionsPath, 'info.json');\n\n    debug('Generate qid and title');\n    const names = this.getNamesForCopy(\n      this.question.qid,\n      oldNamesShort,\n      this.question.title,\n      oldNamesLong,\n    );\n    const qid = names.shortName;\n    const questionPath = path.join(questionsPath, qid);\n\n    const fromPath = path.join(questionsPath, this.question.qid);\n    const toPath = questionPath;\n\n    debug(`Copy template\\n from ${fromPath}\\n to ${toPath}`);\n    await fs.copy(fromPath, toPath, { overwrite: false, errorOnExist: true });\n\n    debug('Read info.json');\n    const infoJson = await fs.readJson(path.join(questionPath, 'info.json'));\n\n    debug('Write info.json with new title and uuid');\n    infoJson.title = names.longName;\n    infoJson.uuid = this.uuid;\n\n    // Even when copying a question within a course, we don't want to preserve\n    // sharing settings because they cannot be undone\n    delete infoJson['sharingSets'];\n    delete infoJson['sharePublicly'];\n    delete infoJson['shareSourcePublicly'];\n\n    const formattedJson = await formatJsonWithPrettier(JSON.stringify(infoJson));\n    await fs.writeFile(path.join(questionPath, 'info.json'), formattedJson);\n\n    return {\n      pathsToAdd: [questionPath],\n      commitMessage: `copy question ${this.question.qid} to ${qid}`,\n    };\n  }\n}\n\nexport class QuestionTransferEditor extends Editor {\n  private from_qid: string;\n  private from_course: string;\n  private from_path: string;\n\n  public readonly uuid: string;\n\n  constructor(\n    params: BaseEditorOptions & {\n      from_qid: string;\n      from_course_short_name: Course['short_name'];\n      from_path: string;\n    },\n  ) {\n    const { from_qid, from_course_short_name, from_path } = params;\n\n    const from_course =\n      from_course_short_name == null ? 'unknown course' : `course ${from_course_short_name}`;\n\n    super({\n      ...params,\n      description: `Copy question ${from_qid} from ${from_course}`,\n    });\n\n    this.from_qid = from_qid;\n    this.from_path = from_path;\n\n    this.uuid = uuidv4();\n  }\n\n  async write() {\n    debug('QuestionTransferEditor: write()');\n    const questionsPath = path.join(this.course.path, 'questions');\n\n    debug('Get title of question that is being copied');\n    const sourceInfoJson = await fs.readJson(path.join(this.from_path, 'info.json'));\n    const from_title = sourceInfoJson.title || 'Empty Title';\n\n    debug('Get all existing long names');\n    const result = await sqldb.queryAsync(sql.select_questions_with_course, {\n      course_id: this.course.id,\n    });\n    const oldNamesLong = result.rows.map((row) => row.title);\n\n    debug('Get all existing short names');\n    const oldNamesShort = await this.getExistingShortNames(questionsPath, 'info.json');\n\n    debug('Generate qid and title');\n    let qid = this.from_qid;\n    let questionTitle = from_title;\n    if (oldNamesShort.includes(this.from_qid) || oldNamesLong.includes(from_title)) {\n      const names = this.getNamesForCopy(this.from_qid, oldNamesShort, from_title, oldNamesLong);\n      qid = names.shortName;\n      questionTitle = names.longName;\n    }\n    const questionPath = path.join(questionsPath, qid);\n\n    const fromPath = this.from_path;\n    const toPath = questionPath;\n\n    debug(`Copy template\\n from ${fromPath}\\n to ${toPath}`);\n    await fs.copy(fromPath, toPath, { overwrite: false, errorOnExist: true });\n\n    debug('Read info.json');\n    const infoJson = await fs.readJson(path.join(questionPath, 'info.json'));\n\n    debug('Write info.json with new title and uuid');\n    infoJson.title = questionTitle;\n    infoJson.uuid = this.uuid;\n\n    // When transferring a question from an example/template course, drop the tags. They\n    // are likely undesirable in the template course.\n    if (this.course.example_course || this.course.template_course) {\n      delete infoJson.tags;\n    }\n\n    // We do not want to preserve sharing settings when copying a question to another course\n    delete infoJson['sharingSets'];\n    delete infoJson['sharePublicly'];\n    delete infoJson['shareSourcePublicly'];\n\n    const formattedJson = await formatJsonWithPrettier(JSON.stringify(infoJson));\n    await fs.writeFile(path.join(questionPath, 'info.json'), formattedJson);\n\n    return {\n      pathsToAdd: [questionPath],\n      commitMessage: `copy question ${this.from_qid} (from ${this.from_course}) to ${qid}`,\n    };\n  }\n}\n\nexport class FileDeleteEditor extends Editor {\n  private container: { rootPath: string; invalidRootPaths: string[] };\n  private deletePath: string;\n\n  constructor(\n    params: BaseEditorOptions & {\n      container: { rootPath: string; invalidRootPaths: string[] };\n      deletePath: string;\n    },\n  ) {\n    const {\n      locals: { course },\n      container,\n      deletePath,\n    } = params;\n\n    let prefix = '';\n    if (course.path !== container.rootPath) {\n      prefix = `${path.basename(container.rootPath)}: `;\n    }\n\n    super({\n      ...params,\n      description: `${prefix}Delete ${path.relative(container.rootPath, deletePath)}`,\n    });\n\n    this.container = container;\n    this.deletePath = deletePath;\n  }\n\n  assertCanEdit() {\n    if (!contains(this.container.rootPath, this.deletePath)) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The path of the file to delete</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.deletePath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.container.rootPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    const found = this.container.invalidRootPaths.find((invalidRootPath) =>\n      contains(invalidRootPath, this.deletePath),\n    );\n    if (found) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The path of the file to delete</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.deletePath}</pre>\n          </div>\n          <p>must <em>not</em> be inside the directory</p>\n          <div class=\"container\"><pre class=\"bg-dark text-white rounded p-2\">${found}</pre></div>\n        `,\n      });\n    }\n\n    super.assertCanEdit();\n  }\n\n  async write() {\n    debug('FileDeleteEditor: write()');\n    // This will silently do nothing if deletePath no longer exists.\n    await fs.remove(this.deletePath);\n\n    return {\n      pathsToAdd: [this.deletePath],\n      commitMessage: this.description,\n    };\n  }\n}\n\nexport class FileRenameEditor extends Editor {\n  private container: { rootPath: string; invalidRootPaths: string[] };\n  private oldPath: string;\n  private newPath: string;\n\n  constructor(\n    params: BaseEditorOptions & {\n      container: { rootPath: string; invalidRootPaths: string[] };\n      oldPath: string;\n      newPath: string;\n    },\n  ) {\n    const {\n      locals: { course },\n      container,\n      oldPath,\n      newPath,\n    } = params;\n\n    let prefix = '';\n    if (course.path !== container.rootPath) {\n      prefix = `${path.basename(container.rootPath)}: `;\n    }\n\n    const relativeOldPath = path.relative(container.rootPath, oldPath);\n    const relativeNewPath = path.relative(container.rootPath, newPath);\n\n    super({\n      ...params,\n      description: `${prefix}Rename ${relativeOldPath} to ${relativeNewPath}`,\n    });\n\n    this.container = container;\n    this.oldPath = oldPath;\n    this.newPath = newPath;\n  }\n\n  assertCanEdit() {\n    debug('FileRenameEditor: canEdit()');\n    if (!contains(this.container.rootPath, this.oldPath)) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The file's old path</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.oldPath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.container.rootPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    if (!contains(this.container.rootPath, this.newPath)) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The file's new path</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.newPath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.container.rootPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    let found;\n\n    found = this.container.invalidRootPaths.find((invalidRootPath) =>\n      contains(invalidRootPath, this.oldPath),\n    );\n    if (found) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The file's old path</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.oldPath}</pre>\n          </div>\n          <p>must <em>not</em> be inside the directory</p>\n          <div class=\"container\"><pre class=\"bg-dark text-white rounded p-2\">${found}</pre></div>\n        `,\n      });\n    }\n\n    found = this.container.invalidRootPaths.find((invalidRootPath) =>\n      contains(invalidRootPath, this.newPath),\n    );\n    if (found) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The file's new path</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.newPath}</pre>\n          </div>\n          <p>must <em>not</em> be inside the directory</p>\n          <div class=\"container\"><pre class=\"bg-dark text-white rounded p-2\">${found}</pre></div>\n        `,\n      });\n    }\n\n    super.assertCanEdit();\n  }\n\n  async write() {\n    debug('FileRenameEditor: write()');\n\n    debug('ensure path exists');\n    await fs.ensureDir(path.dirname(this.newPath));\n\n    debug('rename file');\n    await fs.rename(this.oldPath, this.newPath);\n\n    return {\n      pathsToAdd: [this.oldPath, this.newPath],\n      commitMessage: this.description,\n    };\n  }\n}\n\nexport class FileUploadEditor extends Editor {\n  private container: { rootPath: string; invalidRootPaths: string[] };\n  private filePath: string;\n  private fileContents: Buffer;\n\n  constructor(\n    params: BaseEditorOptions & {\n      container: { rootPath: string; invalidRootPaths: string[] };\n      filePath: string;\n      fileContents: Buffer;\n    },\n  ) {\n    const {\n      locals: { course },\n      container,\n      filePath,\n      fileContents,\n    } = params;\n\n    let prefix = '';\n    if (course.path !== container.rootPath) {\n      prefix = `${path.basename(container.rootPath)}: `;\n    }\n    super({\n      ...params,\n      description: `${prefix}Upload ${path.relative(container.rootPath, params.filePath)}`,\n    });\n\n    this.container = container;\n    this.filePath = filePath;\n    this.fileContents = fileContents;\n  }\n\n  getHashFromBuffer(buffer: Buffer) {\n    return sha256(buffer.toString('utf8')).toString();\n  }\n\n  async shouldEdit() {\n    debug('look for old contents');\n    let contents;\n    try {\n      contents = await fs.readFile(this.filePath);\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        debug('no old contents, so continue with upload');\n        return true;\n      }\n\n      throw err;\n    }\n\n    debug('get hash of old contents and of new contents');\n    const oldHash = this.getHashFromBuffer(contents);\n    const newHash = this.getHashFromBuffer(this.fileContents);\n    debug('oldHash: ' + oldHash);\n    debug('newHash: ' + newHash);\n    if (oldHash === newHash) {\n      debug('new contents are the same as old contents, so abort upload');\n      return false;\n    } else {\n      debug('new contents are different from old contents, so continue with upload');\n      return true;\n    }\n  }\n\n  assertCanEdit() {\n    if (!contains(this.container.rootPath, this.filePath)) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The file path</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.filePath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.container.rootPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    const found = this.container.invalidRootPaths.find((invalidRootPath) =>\n      contains(invalidRootPath, this.filePath),\n    );\n    if (found) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The file path</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.filePath}</pre>\n          </div>\n          <p>must <em>not</em> be inside the directory</p>\n          <div class=\"container\"><pre class=\"bg-dark text-white rounded p-2\">${found}</pre></div>\n        `,\n      });\n    }\n\n    super.assertCanEdit();\n  }\n\n  async write() {\n    debug('FileUploadEditor: write()');\n\n    if (!(await this.shouldEdit())) return null;\n\n    debug('ensure path exists');\n    await fs.ensureDir(path.dirname(this.filePath));\n\n    debug('write file');\n    await fs.writeFile(this.filePath, this.fileContents);\n\n    return {\n      pathsToAdd: [this.filePath],\n      commitMessage: this.description,\n    };\n  }\n}\n\nexport class FileModifyEditor extends Editor {\n  // Naming convention for contents and hashes in FileModifyEditor:\n  //\n  //    xyzContentsUTF - contents of xyz file as utf8\n  //\n  //    xyzContents - contents of xyz file as utf8 that is base64-encoded\n  //\n  //    xyzHash - hash of contents of xyz file as utf8 that is base64-encoded\n  //\n  // The base64 encoding and its corresponding hash are used by the file editor.\n  // If this weren't the case, then we wouldn't use it here either. For example,\n  // FileUploadEditor - which is used by the file browser - doesn't require any\n  // base64 encoding. In that case, contents/hashes are just utf8.\n\n  private container: { rootPath: string; invalidRootPaths: string[] };\n  private filePath: string;\n  private editContents: string;\n  private origHash: string;\n\n  constructor(\n    params: BaseEditorOptions & {\n      container: { rootPath: string; invalidRootPaths: string[] };\n      filePath: string;\n      editContents: string;\n      origHash: string;\n    },\n  ) {\n    const {\n      locals: { course },\n      container,\n      filePath,\n      editContents,\n      origHash,\n    } = params;\n\n    let prefix = '';\n    if (course.path !== container.rootPath) {\n      prefix = `${path.basename(container.rootPath)}: `;\n    }\n\n    super({\n      ...params,\n      description: `${prefix}Modify ${path.relative(container.rootPath, filePath)}`,\n    });\n\n    this.container = container;\n    this.filePath = filePath;\n    this.editContents = editContents;\n    this.origHash = origHash;\n  }\n\n  getHash(contents: string) {\n    return sha256(contents).toString();\n  }\n\n  async shouldEdit() {\n    debug('get hash of edit contents');\n    const editHash = this.getHash(this.editContents);\n    debug('editHash: ' + editHash);\n    debug('origHash: ' + this.origHash);\n    if (this.origHash === editHash) {\n      debug('edit contents are the same as orig contents, so abort');\n      return false;\n    } else {\n      debug('edit contents are different from orig contents, so continue');\n      return true;\n    }\n  }\n\n  assertCanEdit() {\n    if (!contains(this.container.rootPath, this.filePath)) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The file path</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.filePath}</pre>\n          </div>\n          <p>must be inside the root directory</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.container.rootPath}</pre>\n          </div>\n        `,\n      });\n    }\n\n    const found = this.container.invalidRootPaths.find((invalidRootPath) =>\n      contains(invalidRootPath, this.filePath),\n    );\n    if (found) {\n      throw new AugmentedError('Invalid file path', {\n        info: html`\n          <p>The file path</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${this.filePath}</pre>\n          </div>\n          <p>must <em>not</em> be inside the directory</p>\n          <div class=\"container\"><pre class=\"bg-dark text-white rounded p-2\">${found}</pre></div>\n        `,\n      });\n    }\n\n    super.assertCanEdit();\n  }\n\n  async write() {\n    debug('FileModifyEditor: write()');\n\n    if (!(await this.shouldEdit())) return null;\n\n    debug('ensure path exists');\n    await fs.ensureDir(path.dirname(this.filePath));\n\n    debug('verify disk hash matches orig hash');\n    const diskContentsUTF = await fs.readFile(this.filePath, 'utf8');\n    const diskContents = b64Util.b64EncodeUnicode(diskContentsUTF);\n    const diskHash = this.getHash(diskContents);\n    if (this.origHash !== diskHash) {\n      throw new Error('Another user made changes to the file you were editing.');\n    }\n\n    debug('write file');\n    await fs.writeFile(this.filePath, b64Util.b64DecodeUnicode(this.editContents));\n\n    return {\n      pathsToAdd: [this.filePath],\n      commitMessage: this.description,\n    };\n  }\n}\n\nexport class CourseInfoCreateEditor extends Editor {\n  private infoJson: any;\n\n  constructor(params: BaseEditorOptions & { infoJson: any }) {\n    super({\n      ...params,\n      description: 'Create infoCourse.json',\n    });\n\n    this.infoJson = params.infoJson;\n  }\n\n  async write() {\n    debug('CourseInfoEditor: write()');\n    const infoPath = path.join(this.course.path, 'infoCourse.json');\n\n    const formattedJson = await formatJsonWithPrettier(JSON.stringify(this.infoJson));\n\n    // This will error if:\n    // - this.course.path does not exist (use of writeFile)\n    // - Creating a new file and infoPath does exist (use of 'wx')\n    await fs.writeFile(infoPath, formattedJson, { flag: 'wx' });\n\n    return {\n      pathsToAdd: [infoPath],\n      commitMessage: 'create infoCourse.json',\n    };\n  }\n}\n\nexport class MultiEditor extends Editor {\n  private editors: Editor[];\n\n  constructor(params: BaseEditorOptions & { description: string }, editors: Editor[]) {\n    super(params);\n\n    this.editors = editors;\n  }\n\n  assertCanEdit() {\n    // This should be handled automatically by the individual editors, but\n    // we'll check it here just in case.\n    super.assertCanEdit();\n\n    for (const editor of this.editors) {\n      editor.assertCanEdit();\n    }\n  }\n\n  async write() {\n    const pathsToAdd = new Set<string>();\n    const commitMessages: string[] = [];\n\n    let didChange = false;\n\n    for (const editor of this.editors) {\n      const result = await editor.write();\n      if (result) {\n        didChange = true;\n        result.pathsToAdd.forEach((path) => pathsToAdd.add(path));\n        commitMessages.push(result.commitMessage);\n      }\n    }\n\n    if (!didChange) return null;\n\n    return {\n      pathsToAdd: Array.from(pathsToAdd),\n      commitMessage: commitMessages.join('; '),\n    };\n  }\n}\n"]}