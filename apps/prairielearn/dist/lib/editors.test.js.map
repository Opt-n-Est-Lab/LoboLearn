{"version":3,"file":"editors.test.js","sourceRoot":"","sources":["../../src/lib/editors.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport { getUniqueNames, propertyValueWithDefault } from './editors.js';\n\ndescribe('editors', () => {\n  describe('getNamesForAdd', () => {\n    describe('No specified short_name and long_name', () => {\n      it('should set short_name to New_1 and long_name to New (1)', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19'],\n          longNames: ['Fall 2018', 'Fall 2019'],\n        });\n        assert.equal(names['shortName'], 'New_1');\n        assert.equal(names['longName'], 'New (1)');\n      });\n    });\n\n    describe('Specified unique short_name and long_name', () => {\n      it('should use the provided short_name and long_name without appending a number', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19'],\n          longNames: ['Fall 2018', 'Fall 2019'],\n          shortName: 'Fa20',\n          longName: 'Fall 2020',\n        });\n        assert.equal(names['shortName'], 'Fa20');\n        assert.equal(names['longName'], 'Fall 2020');\n      });\n    });\n\n    describe('Duplicated short_name without number, unique long_name', () => {\n      it('should append _2 to the short_name and (2) to the long_name', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19'],\n          longNames: ['Fall 2018', 'Fall 2019'],\n          shortName: 'Fa19',\n          longName: 'Fall 2019 Section 1',\n        });\n        assert.equal(names['shortName'], 'Fa19_2');\n        assert.equal(names['longName'], 'Fall 2019 Section 1 (2)');\n      });\n    });\n\n    describe('Duplicated short_name with number, unique long_name', () => {\n      it('should increment the number for the short_name and append it to both short_name and long_name', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19', 'Fa19_2', 'Fa19_3', 'Fa19_4'],\n          longNames: [\n            'Fall 2018',\n            'Fall 2019',\n            'Fall 2019 Section 1 (2)',\n            'Fall 2019 Section 1 (3)',\n            'Fall 2019 Section 1 (4)',\n          ],\n          shortName: 'Fa19',\n          longName: 'Fall 2019 Section 2',\n        });\n\n        assert.equal(names['shortName'], 'Fa19_5');\n        assert.equal(names['longName'], 'Fall 2019 Section 2 (5)');\n      });\n    });\n\n    describe('Unique short_name, duplicated long_name without number', () => {\n      it('should append _2 to the short_name and (2) to the long_name', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19'],\n          longNames: ['Fall 2018', 'Fall 2019'],\n          shortName: 'Fall19',\n          longName: 'Fall 2019',\n        });\n\n        assert.equal(names['shortName'], 'Fall19_2');\n        assert.equal(names['longName'], 'Fall 2019 (2)');\n      });\n    });\n\n    describe('Unique short_name, duplicated long_name with number', () => {\n      it('should increment the number for the long_name and append it to both short_name and long_name', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19', 'Fall19_2', 'Fall19_3'],\n          longNames: ['Fall 2018', 'Fall 2019', 'Fall 2019 (2)', 'Fall 2019 (3)'],\n          shortName: 'Fall_19',\n          longName: 'Fall 2019',\n        });\n\n        assert.equal(names['shortName'], 'Fall_19_4');\n        assert.equal(names['longName'], 'Fall 2019 (4)');\n      });\n    });\n\n    describe('Duplicated short_name without number, duplicated long_name without number', () => {\n      it('should append _2 to the short_name and (2) to the long_name', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19'],\n          longNames: ['Fall 2018', 'Fall 2019'],\n          shortName: 'Fa19',\n          longName: 'Fall 2019',\n        });\n\n        assert.equal(names['shortName'], 'Fa19_2');\n        assert.equal(names['longName'], 'Fall 2019 (2)');\n      });\n    });\n\n    describe('Duplicated short_name with number, duplicated long_name with number, numbers the same', () => {\n      it('should increment both the short_name number and long_name number', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19', 'Fa19_2', 'Fa19_3'],\n          longNames: ['Fall 2018', 'Fall 2019', 'Fall 2019 (2)', 'Fall 2019 (3)'],\n          shortName: 'Fa19',\n          longName: 'Fall 2019',\n        });\n\n        assert.equal(names['shortName'], 'Fa19_4');\n        assert.equal(names['longName'], 'Fall 2019 (4)');\n      });\n    });\n\n    describe('Duplicated short_name with number, duplicated long_name with number, short_name number > long_name number', () => {\n      it('should use the higher number from short_name to generate the next increment', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19', 'Fa19_2', 'Fa19_3'],\n          longNames: ['Fall 2018', 'Fall 2019', 'Fall 2019 (2)', 'Fall 2019 (3)'],\n          shortName: 'Fa19',\n          longName: 'Fall 2019',\n        });\n\n        assert.equal(names['shortName'], 'Fa19_4');\n        assert.equal(names['longName'], 'Fall 2019 (4)');\n      });\n    });\n\n    describe('Duplicated short_name with number, duplicated long_name with number, short_name number < long_name number', () => {\n      it('should use the higher number from long_name to generate the next increment', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19', 'Fa19_2'],\n          longNames: ['Fall 2018', 'Fall 2019', 'Fall 2019 (2)', 'Fall 2019 (3)'],\n          shortName: 'Fa19',\n          longName: 'Fall 2019',\n        });\n\n        assert.equal(names['shortName'], 'Fa19_4');\n        assert.equal(names['longName'], 'Fall 2019 (4)');\n      });\n    });\n\n    describe('Duplicated short_name without number with different casing, unique long_name', () => {\n      it('should append _2 to the short_name and (2) to the long_name', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19'],\n          longNames: ['Fall 2018', 'Fall 2019'],\n          shortName: 'fa19',\n          longName: 'Fall 2019',\n        });\n\n        assert.equal(names['shortName'], 'fa19_2');\n        assert.equal(names['longName'], 'Fall 2019 (2)');\n      });\n    });\n\n    describe('Duplicated short_name with number with different casing, unique long_name', () => {\n      it('should increment the number for the short_name and append it to both short_name and long_name', () => {\n        const names = getUniqueNames({\n          shortNames: ['Fa18', 'Fa19', 'Fa19_2', 'Fa19_3'],\n          longNames: [\n            'Fall 2018',\n            'Fall 2019',\n            'Fall 2019 Section 1 (2)',\n            'Fall 2019 Section 1 (3)',\n          ],\n          shortName: 'fa19',\n          longName: 'Fall 2019 Section 2',\n        });\n\n        assert.equal(names['shortName'], 'fa19_4');\n        assert.equal(names['longName'], 'Fall 2019 Section 2 (4)');\n      });\n    });\n  });\n\n  describe('propertyValueWithDefault', () => {\n    it('should return the new value if it differs from the default value', () => {\n      const property = propertyValueWithDefault('Existing', 'New', 'Default');\n      assert.equal(property, 'New');\n    });\n    it('should return undefined if the new value is the same as the default value', () => {\n      const property = propertyValueWithDefault('Existing', 'Default', 'Default');\n      assert.equal(property, undefined);\n    });\n    it('should return the new value if it differs from the default value, even if the existing value is undefined', () => {\n      const property = propertyValueWithDefault(undefined, 'New', 'Default');\n      assert.equal(property, 'New');\n    });\n    it('should return the new value if it differs from the default value, even if the default value is null', () => {\n      const property = propertyValueWithDefault('Existing', null, 'Default');\n      assert.equal(property, null);\n    });\n    it('should return the new value if it differs from the default value, even if the values are numbers', () => {\n      const property = propertyValueWithDefault(0, 1, 0);\n      assert.equal(property, 1);\n    });\n    it('should return the new value if it differs from the default value, even if the values are booleans', () => {\n      const property = propertyValueWithDefault(true, false, true);\n      assert.equal(property, false);\n    });\n  });\n});\n"]}