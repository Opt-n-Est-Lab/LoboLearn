{"version":3,"file":"exam-mode.js","sourceRoot":"","sources":["../../src/lib/exam-mode.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AAEjD,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AACrC,OAAO,EAGL,oBAAoB,EACpB,cAAc,GACf,MAAM,eAAe,CAAC;AAEvB,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,GAAY,EACZ,GAAa;IAEb,0EAA0E;IAC1E,IAAI,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,IAAI,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,WAAW,EAAE,CAAC;QACtE,OAAO;YACL,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI;YAChC,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW;SAC/C,CAAC;IACJ,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC;QAC5B,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ;QACzB,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;KAC7C,CAAC,CAAC;IAEH,8EAA8E;IAC9E,qEAAqE;IACrE,8DAA8D;IAC9D,EAAE;IACF,mFAAmF;IACnF,IAAI,MAAM,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QAC/C,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC;IACzC,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,EAC7B,EAAE,EACF,IAAI,EACJ,aAAa,GAKd;IACC,OAAO,MAAM,OAAO,CAClB,YAAY,EACZ,CAAC,EAAE,EAAE,IAAI,EAAE,aAAa,CAAC,EACzB,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC,CACtE,CAAC;AACJ,CAAC","sourcesContent":["import type { Request, Response } from 'express';\nimport { z } from 'zod';\n\nimport { callRow } from '@prairielearn/postgres';\n\nimport { config } from './config.js';\nimport {\n  type EnumMode,\n  type EnumModeReason,\n  EnumModeReasonSchema,\n  EnumModeSchema,\n} from './db-types.js';\n\nexport async function getModeForRequest(\n  req: Request,\n  res: Response,\n): Promise<{ mode: EnumMode; mode_reason: EnumModeReason }> {\n  // If we're lucky, `authzCourseOrInstance` has already populated the mode.\n  if (res.locals.authz_data?.mode && res.locals.authz_data?.mode_reason) {\n    return {\n      mode: res.locals.authz_data.mode,\n      mode_reason: res.locals.authz_data.mode_reason,\n    };\n  }\n\n  const result = await ipToMode({\n    ip: req.ip,\n    date: res.locals.req_date,\n    authn_user_id: res.locals.authn_user.user_id,\n  });\n\n  // This function can be run independently of `authzCourseOrInstance`, which is\n  // normally responsible for handling the `pl_test_mode` cookie. We'll\n  // duplicate that logic here so that it works in all contexts.\n  //\n  // We avoid setting `mode_reason` to mimic the behavior of `authzCourseOrInstance`.\n  if (config.devMode && req.cookies.pl_test_mode) {\n    result.mode = req.cookies.pl_test_mode;\n  }\n\n  return result;\n}\n\nexport async function ipToMode({\n  ip,\n  date,\n  authn_user_id,\n}: {\n  ip: string;\n  date: Date;\n  authn_user_id: string;\n}) {\n  return await callRow(\n    'ip_to_mode',\n    [ip, date, authn_user_id],\n    z.object({ mode: EnumModeSchema, mode_reason: EnumModeReasonSchema }),\n  );\n}\n"]}