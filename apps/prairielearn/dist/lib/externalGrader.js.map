{"version":3,"file":"externalGrader.js","sourceRoot":"","sources":["../../src/lib/externalGrader.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'node:assert';\n\nimport isPlainObject from 'is-plain-obj';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport { updateCourseInstanceUsagesForGradingJob } from '../models/course-instance-usages.js';\nimport {\n  selectOptionalGradingJobById,\n  updateGradingJobAfterGrading,\n} from '../models/grading-job.js';\n\nimport { config } from './config.js';\nimport {\n  CourseSchema,\n  GradingJobSchema,\n  IdSchema,\n  QuestionSchema,\n  SubmissionSchema,\n  VariantSchema,\n} from './db-types.js';\nimport { type Grader } from './externalGraderCommon.js';\nimport { ExternalGraderLocal } from './externalGraderLocal.js';\nimport { ExternalGraderSqs } from './externalGraderSqs.js';\nimport * as externalGradingSocket from './externalGradingSocket.js';\nimport * as ltiOutcomes from './ltiOutcomes.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst GradingJobInfoSchema = z.object({\n  grading_job: GradingJobSchema,\n  submission: SubmissionSchema,\n  variant: VariantSchema,\n  question: QuestionSchema,\n  course: CourseSchema,\n});\n\nlet grader: Grader | null = null;\n\nexport function init(): void {\n  if (config.externalGradingUseAws) {\n    logger.verbose('External grader running on AWS');\n    grader = new ExternalGraderSqs();\n  } else {\n    // local dev mode\n    logger.verbose('External grader running locally');\n    grader = new ExternalGraderLocal();\n  }\n}\n\nexport async function beginGradingJob(grading_job_id: string): Promise<void> {\n  assert(grader, 'External grader not initialized');\n\n  const { grading_job, submission, variant, question, course } = await sqldb.queryRow(\n    sql.select_grading_job_info,\n    { grading_job_id },\n    GradingJobInfoSchema,\n  );\n\n  if (!question.external_grading_enabled) {\n    logger.verbose('External grading disabled for job id: ' + grading_job.id);\n\n    // Make the grade 0\n    const ret = {\n      gradingId: grading_job.id,\n      grading: {\n        score: 0,\n        feedback: {\n          results: { succeeded: true, gradable: false },\n          message: 'External grading is not enabled :(',\n        },\n      },\n    };\n\n    // Send the grade out for processing and display\n    processGradingResult(ret).catch((err) =>\n      logger.error(`Error processing results for grading job ${grading_job.id}`, err),\n    );\n    return;\n  }\n\n  logger.verbose(`Submitting external grading job ${grading_job.id}.`);\n\n  const gradeRequest = grader.handleGradingRequest(\n    grading_job,\n    submission,\n    variant,\n    question,\n    course,\n  );\n  gradeRequest.on('submit', () => {\n    updateJobSubmissionTime(grading_job.id).catch((err) => {\n      logger.error('Error updating job submission time', err);\n      Sentry.captureException(err);\n    });\n  });\n  gradeRequest.on('received', (receivedTime: string) => {\n    // This event is only fired when running locally; this production, this\n    // is handled by the SQS queue.\n    updateJobReceivedTime(grading_job.id, receivedTime).catch((err) => {\n      logger.error('Error updating job received time', err);\n      Sentry.captureException(err);\n    });\n  });\n  gradeRequest.on('results', (gradingResult: Record<string, any>) => {\n    // This event will only be fired when running locally; in production,\n    // external grader results wil be delivered via SQS.\n    processGradingResult(gradingResult).then(\n      () => logger.verbose(`Successfully processed grading job ${grading_job.id}`),\n      (err) => logger.error(`Error processing grading job ${grading_job.id}`, err),\n    );\n  });\n  gradeRequest.on('error', (err: Error) => {\n    handleGraderError(grading_job.id, err);\n  });\n}\n\nfunction handleGraderError(grading_job_id: string, err: Error): void {\n  logger.error(`Error processing external grading job ${grading_job_id}`);\n  logger.error('handleGraderError', err);\n  Sentry.captureException(err);\n  processGradingResult({\n    gradingId: grading_job_id,\n    grading: {\n      score: 0,\n      startTime: null,\n      endTime: null,\n      feedback: {\n        results: { succeeded: false, gradable: false },\n        message: err.toString(),\n      },\n    },\n  }).catch((err) => {\n    logger.error(`Error processing results for grading job ${grading_job_id}`, err);\n    Sentry.captureException(err);\n  });\n}\n\nasync function updateJobSubmissionTime(grading_job_id: string): Promise<void> {\n  await sqldb.queryAsync(sql.update_grading_submitted_time, {\n    grading_job_id,\n    grading_submitted_at: new Date().toISOString(),\n  });\n  await externalGradingSocket.gradingJobStatusUpdated(grading_job_id);\n}\n\nasync function updateJobReceivedTime(grading_job_id: string, receivedTime: string): Promise<void> {\n  await sqldb.queryAsync(sql.update_grading_received_time, {\n    grading_job_id,\n    grading_received_at: receivedTime,\n  });\n  await externalGradingSocket.gradingJobStatusUpdated(grading_job_id);\n}\n\n/**\n * Process the result of an external grading job.\n *\n * @param content - The grading job data to process.\n */\nexport async function processGradingResult(content: any): Promise<void> {\n  try {\n    if (content.grading == null || !isPlainObject(content.grading)) {\n      throw new error.AugmentedError('invalid grading', { data: { content } });\n    }\n\n    if (content.grading.feedback != null && !isPlainObject(content.grading.feedback)) {\n      throw new error.AugmentedError('invalid grading.feedback', { data: { content } });\n    }\n\n    // There are two \"succeeded\" flags in the grading results. The first\n    // is at the top level and is set by `grader-host`; the second is in\n    // `results` and is set by course code.\n    //\n    // If the top-level flag is false, that means there was a serious\n    // error in the grading process and we should treat the submission\n    // as not gradable. This avoids penalizing students for issues outside\n    // their control.\n    const jobSucceeded = !!content.grading?.feedback?.succeeded;\n\n    const succeeded = !!(content.grading.feedback?.results?.succeeded ?? true);\n    if (!succeeded) {\n      content.grading.score = 0;\n    }\n\n    // The submission is only gradable if the job as a whole succeeded\n    // and the course code marked it as gradable. We default to true for\n    // backwards compatibility with graders that don't set this flag.\n    let gradable = jobSucceeded && !!(content.grading.feedback?.results?.gradable ?? true);\n\n    if (gradable) {\n      // We only care about the score if it is gradable.\n      if (typeof content.grading.score === 'undefined') {\n        content.grading.feedback = {\n          results: { succeeded: false, gradable: false },\n          message: 'Error parsing external grading results: score was not provided.',\n          original_feedback: content.grading.feedback,\n        };\n        content.grading.score = 0;\n        gradable = false;\n      }\n      if (!Number.isFinite(content.grading.score)) {\n        content.grading.feedback = {\n          results: { succeeded: false, gradable: false },\n          message: 'Error parsing external grading results: score is not a number.',\n          original_feedback: content.grading.feedback,\n        };\n        content.grading.score = 0;\n        gradable = false;\n      }\n      if (content.grading.score < 0 || content.grading.score > 1) {\n        content.grading.feedback = {\n          results: { succeeded: false, gradable: false },\n          message: 'Error parsing external grading results: score is out of range.',\n          original_feedback: content.grading.feedback,\n        };\n        content.grading.score = 0;\n        gradable = false;\n      }\n    }\n\n    const grading_job = await selectOptionalGradingJobById(content.gradingId);\n    // Only update course instance usages if the job hasn't been graded yet. We\n    // have to compute this before calling `updateGradingJobAfterGrading` below\n    // because that will update `graded_at`.\n    const updateUsages = grading_job && grading_job.graded_at == null;\n\n    await updateGradingJobAfterGrading({\n      grading_job_id: content.gradingId,\n      received_time: content.grading.receivedTime,\n      start_time: content.grading.startTime,\n      finish_time: content.grading.endTime,\n      format_errors: content.grading.format_errors,\n      gradable,\n      broken: false,\n      feedback: content.grading.feedback,\n      partial_scores: {},\n      score: content.grading.score,\n    });\n\n    if (updateUsages) {\n      // This has to come after `updateGradingJobAfterGrading` above\n      // because it uses the `grading_finished_at` value updated there.\n      await updateCourseInstanceUsagesForGradingJob({ grading_job_id: content.gradingId });\n    }\n\n    const assessment_instance_id = await sqldb.queryOptionalRow(\n      sql.select_assessment_for_grading_job,\n      { grading_job_id: content.gradingId },\n      IdSchema,\n    );\n    if (assessment_instance_id != null) {\n      await ltiOutcomes.updateScore(assessment_instance_id);\n    }\n  } finally {\n    await externalGradingSocket.gradingJobStatusUpdated(content.gradingId);\n  }\n}\n"]}