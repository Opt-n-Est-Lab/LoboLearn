{"version":3,"file":"externalGraderCommon.js","sourceRoot":"","sources":["../../src/lib/externalGraderCommon.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EventEmitter } from 'node:events';\nimport * as fsPromises from 'node:fs/promises';\nimport * as path from 'path';\n\nimport fs from 'fs-extra';\nimport _ from 'lodash';\n\nimport { logger } from '@prairielearn/logger';\nimport { contains } from '@prairielearn/path-utils';\n\nimport { getRuntimeDirectoryForCourse } from './chunks.js';\nimport { type Config } from './config.js';\nimport type { Course, GradingJob, Question, Submission, Variant } from './db-types.js';\n\nexport interface Grader {\n  handleGradingRequest(\n    grading_job: GradingJob,\n    submission: Submission,\n    variant: Variant,\n    question: Question,\n    course: Course,\n    configOverrides?: Partial<Config>,\n  ): EventEmitter;\n}\n/**\n * Returns the directory where job files should be written to while running\n * with AWS infrastructure.\n */\nexport function getJobDirectory(jobId: string) {\n  return `/jobs/job_${jobId}`;\n}\n\n/**\n * Constructs a directory of files to be used for grading.\n */\nexport async function buildDirectory(\n  dir: string,\n  submission: Submission,\n  variant: Variant,\n  question: Question,\n  course: Course,\n) {\n  const coursePath = getRuntimeDirectoryForCourse(course);\n  try {\n    // Attempt to remove existing directory first\n    await fsPromises.rm(dir, { force: true, recursive: true });\n    await fsPromises.mkdir(dir, { recursive: true });\n    await fsPromises.mkdir(path.join(dir, 'serverFilesCourse'));\n    await fsPromises.mkdir(path.join(dir, 'tests'));\n    await fsPromises.mkdir(path.join(dir, 'student'));\n    await fsPromises.mkdir(path.join(dir, 'data'));\n\n    // Copy all specified files/directories into serverFilesCourse/\n    for (const file of question.external_grading_files ?? []) {\n      const src = path.join(coursePath, 'serverFilesCourse', file);\n      const dest = path.join(dir, 'serverFilesCourse', file);\n      await fs.copy(src, dest);\n    }\n\n    // This is temporary while /grade/shared is deprecated but still supported\n    // TODO remove this when we remove support for /grade/shared\n    const src = path.join(dir, 'serverFilesCourse');\n    const dest = path.join(dir, 'shared');\n    await fs.copy(src, dest);\n\n    if (question.directory != null) {\n      const testsDir = path.join(coursePath, 'questions', question.directory, 'tests');\n      await fs.copy(testsDir, path.join(dir, 'tests')).catch((err) => {\n        // Tests might not be specified, only copy them if they exist\n        if (err.code !== 'ENOENT') throw err;\n      });\n    }\n\n    for (const file of submission.submitted_answer?._files ?? []) {\n      if (!file.name) {\n        throw new Error(\"File was missing 'name' property.\");\n      }\n      if (file.contents == null) {\n        throw new Error(\"File was missing 'contents' property.\");\n      }\n\n      // Files are expected to be base-64 encoded\n      const decodedContents = Buffer.from(file.contents, 'base64');\n      // Check that the file name does not try to navigate up in\n      // the directory hierarchy\n      const fullPath = path.join(dir, 'student', file.name);\n      if (!contains(path.join(dir, 'student'), fullPath)) {\n        throw new Error('Invalid filename');\n      }\n\n      await fsPromises.mkdir(path.dirname(fullPath), { recursive: true });\n      await fsPromises.writeFile(fullPath, decodedContents);\n    }\n\n    // This uses the same fields passed v3's server.grade functions\n    const data = {\n      params: submission.params ?? {},\n      correct_answers: submission.true_answer ?? {},\n      submitted_answers: submission.submitted_answer,\n      format_errors: submission.format_errors,\n      partial_scores: submission.partial_scores ?? {},\n      score: submission.score ?? 0,\n      feedback: submission.feedback ?? {},\n      variant_seed: parseInt(variant.variant_seed ?? '0', 36),\n      options: variant.options || {},\n      raw_submitted_answers: submission.raw_submitted_answer,\n      gradable: submission.gradable,\n    };\n    await fsPromises.writeFile(path.join(dir, 'data', 'data.json'), JSON.stringify(data));\n\n    logger.verbose(`Successfully set up ${dir}`);\n  } catch (err) {\n    logger.error(`Error setting up ${dir}`);\n    throw err;\n  }\n}\n\n/**\n * Generates an object that can be passed to assessment.processGradingResult.\n * This function can be passed a parsed results object, or it can be passed a\n * string or buffer to attempt to parse it and mark the grading job as failed when\n * parsing fails.\n *\n * @param rawData - The grading results\n */\nexport function makeGradingResult(jobId: string, rawData: Record<string, any> | string | Buffer) {\n  // Convert objects or buffers to strings so that we can remove null bytes,\n  // which Postgres doesn't like\n  const dataStr = Buffer.isBuffer(rawData)\n    ? rawData.toString('utf-8')\n    : typeof rawData === 'object'\n      ? JSON.stringify(rawData)\n      : rawData;\n\n  let data: Record<string, any>;\n  try {\n    // replace NULL with unicode replacement character\n    data = JSON.parse(dataStr.replace(/\\0/g, '\\ufffd'));\n  } catch {\n    return makeGradingFailureWithMessage(jobId, dataStr, 'Could not parse the grading results.');\n  }\n\n  function replaceNull(d: any) {\n    if (typeof d === 'string') {\n      // replace NULL with unicode replacement character\n      return d.replace(/\\0/g, '\\ufffd');\n    } else if (Array.isArray(d)) {\n      return d.map((x) => replaceNull(x));\n    } else if (d != null && typeof d === 'object') {\n      return _.mapValues(d, (x) => replaceNull(x));\n    } else {\n      return d;\n    }\n  }\n  data = replaceNull(data);\n\n  if (typeof data.succeeded !== 'boolean') {\n    return makeGradingFailureWithMessage(jobId, data, \"results did not contain 'succeeded' field.\");\n  }\n\n  if (!data.succeeded) {\n    return {\n      gradingId: jobId,\n      grading: {\n        receivedTime: data.received_time || null,\n        startTime: data.start_time || null,\n        endTime: data.end_time || null,\n        score: 0,\n        feedback: data,\n        format_errors: {},\n      },\n    };\n  }\n\n  if (!data.results) {\n    return makeGradingFailureWithMessage(jobId, data, \"results did not contain 'results' object.\");\n  }\n\n  let score = 0.0;\n  if (typeof data.results.score === 'number' || !Number.isNaN(data.results.score)) {\n    score = data.results.score;\n  } else {\n    return makeGradingFailureWithMessage(\n      jobId,\n      data,\n      `score \"${data.results.score}\" was not a number.`,\n    );\n  }\n\n  let format_errors: string[] = [];\n  if (typeof data.results.format_errors === 'string') {\n    format_errors = [data.results.format_errors];\n  } else if (Array.isArray(data.results.format_errors)) {\n    format_errors = data.results.format_errors;\n  }\n\n  return {\n    gradingId: jobId,\n    grading: {\n      receivedTime: data.received_time || null,\n      startTime: data.start_time || null,\n      endTime: data.end_time || null,\n      score,\n      feedback: data,\n      format_errors: JSON.stringify({ _external_grader: format_errors }),\n    },\n  };\n}\n\nfunction makeGradingFailureWithMessage(jobId: string, data: any, message: string) {\n  return {\n    gradingId: jobId,\n    grading: {\n      receivedTime: (data && data.received_time) || null,\n      startTime: (data && data.start_time) || null,\n      endTime: (data && data.end_time) || null,\n      score: 0,\n      feedback: {\n        succeeded: false,\n        message,\n      },\n      format_errors: {},\n    },\n  };\n}\n"]}