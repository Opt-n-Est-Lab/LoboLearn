{"version":3,"file":"externalGraderCommon.test.js","sourceRoot":"","sources":["../../src/lib/externalGraderCommon.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAE9D,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAC9D,MAAM,MAAM,GAAG,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAE1C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,MAAM,GAAG,iBAAiB,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAE3D,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,MAAM,GAAG,iBAAiB,CAAC,GAAG,EAAE;gBACpC,SAAS,EAAE,IAAI;gBACf,OAAO,EAAE;oBACP,KAAK,EAAE,GAAG;oBACV,aAAa,EAAE,CAAC,SAAS,EAAE,gCAAgC,CAAC;oBAC5D,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;iBACvD;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC5E,MAAM,CAAC,KAAK,CACV,MAAM,CAAC,OAAO,CAAC,aAAa,EAC5B,uEAAuE,CACxE,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport { makeGradingResult } from './externalGraderCommon.js';\n\ndescribe('externalGraderCommon', () => {\n  describe('makeGradingResult', () => {\n    it('marks as not succeeded if succeeded field is missing', () => {\n      const result = makeGradingResult('1', {});\n\n      assert.isFalse(result.grading.feedback.succeeded);\n    });\n\n    it('marks as not succeeded if results object is missing', () => {\n      const result = makeGradingResult('1', { succeeded: true });\n\n      assert.isFalse(result.grading.feedback.succeeded);\n    });\n\n    it('properly handles results with null bytes', () => {\n      const result = makeGradingResult('1', {\n        succeeded: true,\n        results: {\n          score: 0.5,\n          format_errors: ['\\0 test', 'second issue without null byte'],\n          tests: [{ name: 'Test \\0', points: 0, max_points: 1 }],\n        },\n      });\n\n      assert.isTrue(result.grading.feedback.succeeded);\n      assert('results' in result.grading.feedback);\n      assert.equal(result.grading.feedback.results?.tests[0].name, 'Test \\ufffd');\n      assert.equal(\n        result.grading.format_errors,\n        '{\"_external_grader\":[\"\\ufffd test\",\"second issue without null byte\"]}',\n      );\n    });\n  });\n});\n"]}