{"version":3,"file":"externalGraderLocal.js","sourceRoot":"","sources":["../../src/lib/externalGraderLocal.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\nimport * as os from 'os';\nimport * as path from 'path';\n\nimport byline from 'byline';\nimport Docker from 'dockerode';\nimport { execa } from 'execa';\nimport fs from 'fs-extra';\nimport * as shlex from 'shlex';\n\nimport { logger } from '@prairielearn/logger';\nimport { contains } from '@prairielearn/path-utils';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from './config.js';\nimport type { Course, GradingJob, Question, Submission, Variant } from './db-types.js';\nimport { type Grader } from './externalGraderCommon.js';\nimport { buildDirectory, makeGradingResult } from './externalGraderCommon.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport class ExternalGraderLocal implements Grader {\n  handleGradingRequest(\n    grading_job: GradingJob,\n    submission: Submission,\n    variant: Variant,\n    question: Question,\n    course: Course,\n  ) {\n    const emitter = new EventEmitter();\n\n    const results: {\n      succeeded: boolean;\n      received_time?: string;\n      start_time?: string;\n      end_time?: string;\n      job_id: string;\n      timedOut?: boolean;\n      message?: string;\n      results?: Record<string, any> | null;\n    } = {\n      succeeded: false,\n      job_id: grading_job.id,\n    };\n\n    const dir = getDevJobDirectory(grading_job.id);\n    const hostDir = getDevHostJobDirectory(grading_job.id);\n    const timeout = Math.min(\n      question.external_grading_timeout ?? config.externalGradingDefaultTimeout,\n      config.externalGradingMaximumTimeout,\n    );\n\n    const docker = new Docker();\n\n    // Delay until emitter has been returned and listener attached.\n    setTimeout(() => {\n      emitter.emit('submit');\n    }, 0);\n\n    (async () => {\n      let output = '';\n\n      if (question.external_grading_image == null) {\n        // This code should not be reached in most cases, since this scenario\n        // would cause a sync error. The check is necessary, though, to avoid\n        // typing errors in following lines.\n        throw new Error('No external grading image specified.');\n      }\n\n      await docker.ping();\n\n      results.received_time = new Date().toISOString();\n      emitter.emit('received', results.received_time);\n\n      await buildDirectory(dir, submission, variant, question, course);\n\n      if (question.external_grading_entrypoint != null) {\n        const entrypointFirstToken = shlex.split(question.external_grading_entrypoint)[0];\n        if (\n          path.isAbsolute(entrypointFirstToken) &&\n          contains('/grade', entrypointFirstToken, false)\n        ) {\n          // Mark the entrypoint as executable if it lives in the mounted volume.\n          // If it is living in the docker container then we don't have access to\n          // it before we actually run it.\n          try {\n            await execa('chmod', [\n              '+x',\n              path.resolve(dir, path.relative('/grade', entrypointFirstToken)),\n            ]);\n          } catch {\n            logger.error('Could not make file executable; continuing execution anyways');\n          }\n        }\n      }\n\n      if (config.externalGradingPullImagesFromDockerHub) {\n        try {\n          logger.info(`Pulling image ${question.external_grading_image}`);\n          const stream = await docker.pull(question.external_grading_image);\n          await new Promise((resolve, reject) => {\n            docker.modem.followProgress(stream, (err) => (err ? reject(err) : resolve(null)));\n          });\n          logger.info('Successfully pulled image');\n        } catch (err) {\n          logger.warn(\n            `Error pulling \"${question.external_grading_image}\" image; attempting to fall back to cached version.`,\n            err,\n          );\n        }\n      }\n\n      const container = await docker.createContainer({\n        Image: question.external_grading_image,\n        // Convert {key: 'value'} to ['key=value'] and {key: null} to ['key'] for Docker API\n        Env: Object.entries(question.external_grading_environment).map(([k, v]) =>\n          v === null ? k : `${k}=${v}`,\n        ),\n        AttachStdout: true,\n        AttachStderr: true,\n        Tty: true,\n        NetworkDisabled: !question.external_grading_enable_networking,\n        HostConfig: {\n          Binds: [`${hostDir}:/grade`],\n          Memory: (1 << 30) * 2, // 2 GiB\n          MemorySwap: (1 << 30) * 2, // same as Memory, so no access to swap\n          KernelMemory: 1 << 29, // 512 MiB\n          DiskQuota: 1 << 30, // 1 GiB\n          IpcMode: 'private',\n          CpuPeriod: 100000, // microseconds\n          CpuQuota: 90000, // portion of the CpuPeriod for this container\n          PidsLimit: 1024,\n          Ulimits: [\n            {\n              // Disable core dumps, which can get very large and bloat our storage.\n              Name: 'core',\n              Soft: 0,\n              Hard: 0,\n            },\n          ],\n        },\n        Entrypoint: question.external_grading_entrypoint\n          ? shlex.split(question.external_grading_entrypoint)\n          : undefined,\n      });\n\n      const stream = await container.attach({\n        stream: true,\n        stdout: true,\n        stderr: true,\n      });\n\n      const out = byline(stream);\n      out.on('data', (line) => {\n        const newline = `container> ${line.toString('utf8')}`;\n        logger.info(newline);\n        output += newline + '\\n';\n      });\n\n      await container.start();\n      results.start_time = new Date().toISOString();\n\n      const timeoutId = setTimeout(() => {\n        logger.info('Timeout exceeded; killing container');\n        // We don't actually need to wait for the container to be killed\n        // here - the `container.wait()` below will handle that.\n        container.kill().catch((err) => logger.error('Failed to kill Docker container', err));\n        results.timedOut = true;\n      }, timeout * 1000);\n\n      await container.wait();\n      clearTimeout(timeoutId);\n      results.end_time = new Date().toISOString();\n\n      const inspectData = await container.inspect();\n      results.succeeded = !results.timedOut && inspectData.State.ExitCode === 0;\n\n      await container.remove({\n        // Remove any volumes associated with this container\n        v: true,\n      });\n\n      // Save job output\n      await sqldb.queryAsync(sql.update_job_output, {\n        grading_job_id: grading_job.id,\n        output,\n      });\n\n      // Now that the job has completed, let's extract the results from `results.json`.\n      if (results.succeeded) {\n        const data = await fs.readFile(path.join(dir, 'results', 'results.json'));\n        try {\n          if (Buffer.byteLength(data) > 1024 * 1024) {\n            // Cap data size at 1MB\n            results.succeeded = false;\n            results.message =\n              'The grading results were larger than 1MB. ' +\n              'If the problem persists, please contact course staff or a proctor.';\n          } else {\n            try {\n              results.results = JSON.parse(data.toString('utf8'));\n              results.succeeded = true;\n            } catch {\n              results.succeeded = false;\n              results.message = 'Could not parse the grading results.';\n            }\n          }\n        } catch {\n          logger.error('Could not read results.json');\n          results.succeeded = false;\n        }\n      } else {\n        results.results = null;\n\n        if (results.timedOut) {\n          results.message = `Your grading job did not complete within the time limit of ${timeout} seconds.\\nPlease fix your code before submitting again.`;\n        }\n      }\n\n      return makeGradingResult(grading_job.id, results);\n    })()\n      .then((res) => {\n        emitter.emit('results', res);\n      })\n      .catch((err) => {\n        emitter.emit('error', err);\n      });\n\n    return emitter;\n  }\n}\n\n/**\n * Returns the path to the directory where the grading job files should be\n * written to while running in development (local) mode.\n *\n * If we're running natively, this should return $HOME/.pl_ag_jobs/job_<jobId>.\n * If we're running in Docker, this should return /jobs.\n */\nfunction getDevJobDirectory(jobId: string): string {\n  if (process.env.HOST_JOBS_DIR) {\n    // We're probably running in Docker\n    return path.join('/jobs', `job_${jobId}`);\n  } else {\n    // We're probably running natively\n    if (process.env.JOBS_DIR) {\n      // The user wants to use a custom jobs dir\n      return path.join(process.env.JOBS_DIR, `job_${jobId}`);\n    } else {\n      return path.resolve(path.join(os.homedir(), '.pljobs', `job_${jobId}`));\n    }\n  }\n}\n\n/**\n * Returns the directory that should be mounted to the grading container as\n * /grade while running in development (local) mode.\n *\n * If we're running natively, this should simply return getDevJobDirectory(...).\n * If we're running in Docker, this should return $HOST_JOBS_DIR/job_<jobId>.\n */\nfunction getDevHostJobDirectory(jobId: string): string {\n  if (process.env.HOST_JOBS_DIR) {\n    // We're probably running in Docker\n    return path.resolve(path.join(process.env.HOST_JOBS_DIR, `job_${jobId}`));\n  } else {\n    // We're probably running natively\n    return getDevJobDirectory(jobId);\n  }\n}\n"]}