{"version":3,"file":"externalGraderSqs.js","sourceRoot":"","sources":["../../src/lib/externalGraderSqs.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { PassThrough } from 'stream';\n\nimport { S3 } from '@aws-sdk/client-s3';\nimport { GetQueueUrlCommand, SQSClient, SendMessageCommand } from '@aws-sdk/client-sqs';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport * as async from 'async';\nimport fs from 'fs-extra';\nimport * as tar from 'tar';\n\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { makeAwsClientConfig, makeS3ClientConfig } from './aws.js';\nimport { type Config, config as globalConfig } from './config.js';\nimport {\n  type Course,\n  type GradingJob,\n  type Question,\n  type Submission,\n  type Variant,\n} from './db-types.js';\nimport { type Grader } from './externalGraderCommon.js';\nimport { buildDirectory, getJobDirectory } from './externalGraderCommon.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nlet QUEUE_URL: string | undefined = undefined;\n\nexport class ExternalGraderSqs implements Grader {\n  handleGradingRequest(\n    grading_job: GradingJob,\n    submission: Submission,\n    variant: Variant,\n    question: Question,\n    course: Course,\n    configOverrides?: Partial<Config>,\n  ) {\n    const config = structuredClone(globalConfig);\n    Object.assign(config, configOverrides);\n\n    const emitter = new EventEmitter();\n\n    const dir = getJobDirectory(grading_job.id);\n    const s3RootKey = getS3RootKey(grading_job.id);\n\n    async.series(\n      [\n        async () => {\n          await buildDirectory(dir, submission, variant, question, course);\n\n          // Now that we've built up our directory, let's zip it up and send\n          // it off to S3\n          const tarball = tar.create({ gzip: true, cwd: dir }, ['.']);\n\n          const passthrough = new PassThrough();\n          tarball.pipe(passthrough);\n\n          const params = {\n            Bucket: config.externalGradingS3Bucket,\n            Key: `${s3RootKey}/job.tar.gz`,\n            Body: passthrough,\n          };\n\n          const s3 = new S3(makeS3ClientConfig());\n          await new Upload({ client: s3, params }).done();\n\n          // Store S3 info for this job\n          await sqldb.queryAsync(sql.update_s3_info, {\n            grading_job_id: grading_job.id,\n            s3_bucket: config.externalGradingS3Bucket,\n            s3_root_key: s3RootKey,\n          });\n        },\n        async () => sendJobToQueue(grading_job.id, question, config),\n      ],\n      (err) => {\n        fs.remove(dir);\n        if (err) {\n          emitter.emit('error', err);\n        } else {\n          emitter.emit('submit');\n        }\n      },\n    );\n\n    return emitter;\n  }\n}\n\nfunction getS3RootKey(jobId) {\n  return `job_${jobId}`;\n}\n\nasync function sendJobToQueue(jobId, question, config) {\n  const sqs = new SQSClient(makeAwsClientConfig());\n\n  await async.series([\n    async () => {\n      if (QUEUE_URL) return;\n\n      const data = await sqs.send(\n        new GetQueueUrlCommand({\n          QueueName: config.externalGradingJobsQueueName,\n        }),\n      );\n      QUEUE_URL = data.QueueUrl;\n    },\n    async () => {\n      const messageBody = {\n        jobId,\n        image: question.external_grading_image,\n        entrypoint: question.external_grading_entrypoint,\n        s3Bucket: config.externalGradingS3Bucket,\n        s3RootKey: getS3RootKey(jobId),\n        timeout: Math.min(\n          question.external_grading_timeout ?? config.externalGradingDefaultTimeout,\n          config.externalGradingMaximumTimeout,\n        ),\n        enableNetworking: question.external_grading_enable_networking || false,\n        environment: question.external_grading_environment || {},\n      };\n      await sqs.send(\n        new SendMessageCommand({\n          QueueUrl: QUEUE_URL,\n          MessageBody: JSON.stringify(messageBody),\n        }),\n      );\n      logger.verbose('Queued external grading job', {\n        grading_job_id: jobId,\n        queueName: config.externalGradingJobsQueueName,\n      });\n    },\n  ]);\n}\n"]}