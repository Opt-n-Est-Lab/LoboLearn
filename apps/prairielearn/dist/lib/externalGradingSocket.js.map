{"version":3,"file":"externalGradingSocket.js","sourceRoot":"","sources":["../../src/lib/externalGradingSocket.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Namespace, Socket } from 'socket.io';\nimport { z } from 'zod';\n\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\nimport * as Sentry from '@prairielearn/sentry';\nimport { checkSignedToken } from '@prairielearn/signed-token';\n\nimport { gradingJobStatus } from '../models/grading-job.js';\n\nimport { config } from './config.js';\nimport { GradingJobSchema, IdSchema } from './db-types.js';\nimport type { StatusMessage } from './externalGradingSocket.types.js';\nimport * as socketServer from './socket-server.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst SubmissionForVariantSchema = z.object({\n  id: IdSchema,\n  grading_job: GradingJobSchema.nullable(),\n});\n\nconst SubmissionForGradingJobSchema = z.object({\n  id: IdSchema,\n  grading_job: GradingJobSchema,\n  variant_id: IdSchema,\n});\n\nlet namespace: Namespace;\n\n// This module MUST be initialized after socket-server\nexport function init() {\n  namespace = socketServer.io.of('/external-grading');\n  namespace.on('connection', connection);\n}\n\nexport function connection(socket: Socket) {\n  socket.on('init', (msg, callback) => {\n    if (!ensureProps(msg, ['variant_id', 'variant_token'])) {\n      return callback(null);\n    }\n    if (!checkToken(msg.variant_token, msg.variant_id)) {\n      return callback(null);\n    }\n\n    socket.join(`variant-${msg.variant_id}`);\n\n    getVariantSubmissionsStatus(msg.variant_id).then(\n      (submissions) => {\n        callback({\n          variant_id: msg.variant_id,\n          submissions: submissions.map((s) => ({\n            id: s.id,\n            grading_job_id: s.grading_job?.id,\n            grading_job_status: gradingJobStatus(s.grading_job),\n          })),\n        } satisfies StatusMessage);\n      },\n      (err) => {\n        logger.error('Error getting variant submissions status', err);\n        Sentry.captureException(err);\n      },\n    );\n  });\n}\n\nexport async function getVariantSubmissionsStatus(variant_id: string) {\n  return await sqldb.queryRows(\n    sql.select_submissions_for_variant,\n    { variant_id },\n    SubmissionForVariantSchema,\n  );\n}\n\nexport async function gradingJobStatusUpdated(grading_job_id: string) {\n  try {\n    const submission = await sqldb.queryRow(\n      sql.select_submission_for_grading_job,\n      { grading_job_id },\n      SubmissionForGradingJobSchema,\n    );\n\n    const eventData: StatusMessage = {\n      variant_id: submission.variant_id,\n      submissions: [\n        {\n          id: submission.id,\n          grading_job_id: submission.grading_job?.id,\n          grading_job_status: gradingJobStatus(submission.grading_job),\n        },\n      ],\n    };\n    namespace.to(`variant-${submission.variant_id}`).emit('change:status', eventData);\n  } catch (err) {\n    logger.error('Error selecting submission for grading job', err);\n    Sentry.captureException(err);\n  }\n}\n\nfunction ensureProps(data: Record<string, any>, props: string[]): boolean {\n  for (const prop of props) {\n    if (!Object.hasOwn(data, prop)) {\n      logger.error(`socket.io external grader connected without ${prop}`);\n      Sentry.captureException(\n        new Error(`socket.io external grader connected without property ${prop}`),\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction checkToken(token: string, variantId: string): boolean {\n  const data = { variantId };\n  const valid = checkSignedToken(token, data, config.secretKey, { maxAge: 24 * 60 * 60 * 1000 });\n  if (!valid) {\n    logger.error(`Token for variant ${variantId} failed validation.`);\n    Sentry.captureException(new Error(`Token for variant ${variantId} failed validation.`));\n  }\n  return valid;\n}\n"]}