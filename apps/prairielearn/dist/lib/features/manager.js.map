{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../src/lib/features/manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsyncLocalStorage } from 'node:async_hooks';\n\nimport { z } from 'zod';\n\nimport { loadSqlEquiv, queryAsync, queryOptionalRow } from '@prairielearn/postgres';\n\nimport { selectCourseById } from '../../models/course.js';\nimport { config } from '../config.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst CONTEXT_HIERARCHY = ['institution_id', 'course_id', 'course_instance_id'];\nconst DEFAULT_CONTEXT = {\n  institution_id: null,\n  course_id: null,\n  course_instance_id: null,\n  user_id: null,\n};\n\nexport type FeatureOverrides = Record<string, boolean>;\n\ntype EmptyContext = Record<string, never>;\n\ninterface UserContext {\n  user_id: string;\n}\n\ninterface InstitutionContext extends Partial<UserContext> {\n  institution_id: string;\n}\n\ninterface CourseContext extends InstitutionContext {\n  course_id: string;\n}\n\ninterface CourseInstanceContext extends CourseContext {\n  course_instance_id: string;\n}\n\ntype FeatureContext =\n  | EmptyContext\n  | UserContext\n  | InstitutionContext\n  | CourseContext\n  | CourseInstanceContext;\n\nexport class FeatureManager<FeatureName extends string> {\n  features: Set<string>;\n  als: AsyncLocalStorage<FeatureOverrides>;\n  globalOverrides: FeatureOverrides = {};\n\n  constructor(features: readonly FeatureName[]) {\n    features.forEach((feature) => {\n      if (!feature.match(/^[a-z0-9:_-]+$/)) {\n        throw new Error(`Invalid feature name: ${feature}`);\n      }\n    });\n    this.features = new Set(features);\n    this.als = new AsyncLocalStorage<FeatureOverrides>();\n  }\n\n  private validateFeature(name: FeatureName, context: FeatureContext) {\n    if (!this.features.has(name)) {\n      throw new Error(`Unknown feature: ${name}`);\n    }\n    this.validateContext(context);\n  }\n\n  hasFeature(feature: string): feature is FeatureName {\n    return this.features.has(feature);\n  }\n\n  allFeatures() {\n    return [...this.features] as FeatureName[];\n  }\n\n  /**\n   * Checks if the given feature is enabled for the given context.\n   *\n   * @param name The name of the feature.\n   * @param context A context to use when evaluating the feature.\n   * @returns Whether or not the feature is enabled\n   */\n  async enabled(name: FeatureName, context: FeatureContext = {}): Promise<boolean> {\n    this.validateFeature(name, context);\n\n    // Allow features to be overridden by `runWithOverrides`.\n    const featureOverrides = this.als.getStore() ?? {};\n    if (name in featureOverrides) return featureOverrides[name];\n\n    // Allow global overrides, e.g. for tests.\n    if (name in this.globalOverrides) return this.globalOverrides[name];\n\n    // Allow config to globally override a feature.\n    if (name in config.features) return config.features[name];\n\n    const featureIsEnabled = await queryOptionalRow(\n      sql.is_feature_enabled,\n      {\n        name,\n        ...DEFAULT_CONTEXT,\n        ...context,\n      },\n      z.boolean(),\n    );\n\n    if (featureIsEnabled) return true;\n\n    // Allow features to be enabled in dev mode via `options.devModeFeatures`\n    // in `infoCourse.json`.\n    if (config.devMode && 'course_id' in context) {\n      const course = await selectCourseById(context.course_id);\n      const devModeFeatures = course?.options?.devModeFeatures;\n\n      if (Array.isArray(devModeFeatures)) {\n        // Legacy support: `devModeFeatures` used to be an array, not an object.\n        if (devModeFeatures.includes(name)) return true;\n      } else if (devModeFeatures && name in devModeFeatures) {\n        // Features should now be configured with an object mapping feature\n        // names to booleans.\n        return devModeFeatures[name];\n      }\n    }\n\n    // Default to disabled if not explicitly enabled by a specific grant, config,\n    // or course options.\n    return false;\n  }\n\n  /**\n   * Checks if the given feature is enabled based on the context derived from locals populated from\n   * middlewares.\n   *\n   * @param name The name of the feature.\n   * @param locals The locals field authenticated and populated by middlewares.\n   * @returns Whether or not the feature is enabled\n   */\n  async enabledFromLocals(\n    name: FeatureName,\n    locals: {\n      institution?: { id: string };\n      course?: { id: string };\n      course_instance?: { id: string };\n      authn_user?: { user_id: string };\n    },\n  ): Promise<boolean> {\n    const user_context = locals.authn_user && { user_id: locals.authn_user.user_id };\n    if (!locals.institution) {\n      return this.enabled(name, user_context);\n    } else if (!locals.course) {\n      return this.enabled(name, {\n        institution_id: locals.institution.id,\n        ...user_context,\n      });\n    } else if (!locals.course_instance) {\n      return this.enabled(name, {\n        institution_id: locals.institution.id,\n        course_id: locals.course.id,\n        ...user_context,\n      });\n    } else {\n      return this.enabled(name, {\n        institution_id: locals.institution.id,\n        course_id: locals.course.id,\n        course_instance_id: locals.course_instance.id,\n        ...user_context,\n      });\n    }\n  }\n\n  /**\n   * Enables the feature for the given context.\n   *\n   * @param name The name of the feature.\n   * @param type The type of grant that is being applied.\n   * @param context The context for which the feature should be enabled.\n   */\n  async enable(name: FeatureName, context: FeatureContext = {}) {\n    this.validateFeature(name, context);\n    await queryAsync(sql.update_feature_grant_enabled, {\n      name,\n      enabled: true,\n      ...DEFAULT_CONTEXT,\n      ...context,\n    });\n  }\n\n  /**\n   * Disables the feature for the given context.\n   *\n   * @param name The name of the feature.\n   * @param context The context for which the feature should be disabled.\n   */\n  async disable(name: FeatureName, context: FeatureContext = {}) {\n    this.validateFeature(name, context);\n    await queryAsync(sql.update_feature_grant_enabled, {\n      name,\n      enabled: false,\n      ...DEFAULT_CONTEXT,\n      ...context,\n    });\n  }\n\n  /**\n   * Deletes the feature grant that exactly matches the given context, if any.\n   *\n   * @param name The name of the feature.\n   * @param context The context for which the feature grant should be deleted.\n   */\n  async delete(name: FeatureName, context: FeatureContext = {}) {\n    this.validateFeature(name, context);\n    await queryAsync(sql.delete_feature, { name, ...DEFAULT_CONTEXT, ...context });\n  }\n\n  /**\n   * Runs the given function with a set of feature overrides persisted in\n   * {@link AsyncLocalStorage}. This allows for a feature to be enabled or\n   * disabled in the context of a single request.\n   */\n  runWithOverrides<T>(overrides: FeatureOverrides, fn: () => T): T {\n    return this.als.run(overrides, fn);\n  }\n\n  /**\n   * Globally sets the given feature overrides and automatically cleans them up\n   * once the provided function has executed.\n   *\n   * Note that this should generally only be used in tests. If used while serving\n   * actual requests, this will have unintended behavior since the overrides will\n   * apply to all code that is running at the same time.\n   */\n  async runWithGlobalOverrides<T>(overrides: FeatureOverrides, fn: () => Promise<T>): Promise<T> {\n    const originalGlobalOverrides = this.globalOverrides;\n    this.globalOverrides = { ...originalGlobalOverrides, ...overrides };\n    try {\n      return await fn();\n    } finally {\n      this.globalOverrides = originalGlobalOverrides;\n    }\n  }\n\n  validateContext(context: object): FeatureContext {\n    let hasAllParents = true;\n    CONTEXT_HIERARCHY.forEach((key, index) => {\n      const hasKey = !!context[key];\n      if (hasKey && !hasAllParents) {\n        const missingKeys = CONTEXT_HIERARCHY.slice(0, index - 1);\n        throw new Error(`Missing required context keys: ${missingKeys.join(', ')}`);\n      }\n      hasAllParents = hasKey;\n    });\n    return context as FeatureContext;\n  }\n}\n"]}