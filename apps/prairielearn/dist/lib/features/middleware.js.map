{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../../../src/lib/features/middleware.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkD,MAAM,SAAS,CAAC;AACzE,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAyB,MAAM,cAAc,CAAC;AAErD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAItC;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,kBAAkB,CAAC,IAAkB;IACnD,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACzD,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;YACpB,OAAO,IAAI,EAAE,CAAC;QAChB,CAAC;QAED,MAAM,mBAAmB,GAAG,CAAC;aAC1B,MAAM,EAAE;aACR,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,IAAI,EAAE,CAAC;aAChC,KAAK,CAAC,GAAG,CAAC;aACV,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE/B,MAAM,gBAAgB,GAAqB,EAAE,CAAC;QAC9C,KAAK,MAAM,eAAe,IAAI,mBAAmB,EAAE,CAAC;YAClD,IAAI,eAAe,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;gBACpC,gBAAgB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;YACrD,CAAC;iBAAM,CAAC;gBACN,gBAAgB,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC;YAC3C,CAAC;QACH,CAAC;QAED,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { type NextFunction, type Request, type Response } from 'express';\nimport { z } from 'zod';\n\nimport { type FeatureOverrides } from './manager.js';\n\nimport { features } from './index.js';\n\ntype AuthFunction = (req: Request, res: Response) => boolean;\n\n/**\n * Middleware that allows per-request overriding of enabled features.\n *\n * Middleware that allows a special `_features` query parameter can be used to\n * enable or disable specific features for the lifetime of a request.\n *\n * - `?_features=feature1,feature2` enables `feature1` and `feature2`\n * - `?_features=!feature1,feature2` disables `feature1` and enables `feature2`\n *\n * The provided function is executed to determine whether the user for this\n * request is allowed to override feature flags. This should generally be\n * limited to administrators.\n */\nexport function featuresMiddleware(auth: AuthFunction) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!auth(req, res)) {\n      return next();\n    }\n\n    const rawFeatureOverrides = z\n      .string()\n      .parse(req.query._features ?? '')\n      .split(',')\n      .filter((f) => f.length > 0);\n\n    const featureOverrides: FeatureOverrides = {};\n    for (const featureOverride of rawFeatureOverrides) {\n      if (featureOverride.startsWith('!')) {\n        featureOverrides[featureOverride.slice(1)] = false;\n      } else {\n        featureOverrides[featureOverride] = true;\n      }\n    }\n\n    features.runWithOverrides(featureOverrides, next);\n  };\n}\n"]}