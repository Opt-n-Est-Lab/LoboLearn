{"version":3,"file":"file-paths.js","sourceRoot":"","sources":["../../src/lib/file-paths.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport fs from 'fs-extra';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { APP_ROOT_PATH } from './paths.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst QUESTION_DEFAULTS_PATH = path.resolve(APP_ROOT_PATH, 'v2-question-servers');\n\ninterface QuestionFilePathInfo {\n  /** The full path, including the filename, of the file to load */\n  fullPath: string;\n  /** The filename, excluding the path */\n  effectiveFilename: string;\n  /** The path, excluding the filename. */\n  rootPath: string;\n}\n\n/**\n * Returns the full path for a file, as well as the effective filename and\n * the root path.\n *\n * Note that `fullPath === rootPath + '/' + effectiveFilename`.\n *\n * These can be used like this for safety when sending files:\n *\n * ```\n * res.sendFile(effectiveFilename, { root: rootPath });\n * ```\n *\n */\nexport async function questionFilePath(\n  filename: string,\n  questionDirectory: string,\n  coursePath: string,\n  question: any,\n  nTemplates = 0,\n): Promise<QuestionFilePathInfo> {\n  const rootPath = path.join(coursePath, 'questions', questionDirectory);\n  const fullPath = path.join(rootPath, filename);\n\n  if (nTemplates > 10) {\n    throw new Error(`Template recursion exceeded maximum depth of 10: ${rootPath}`);\n  }\n\n  if (await fs.pathExists(fullPath)) {\n    // Found the file!\n    return {\n      fullPath,\n      effectiveFilename: filename,\n      rootPath,\n    };\n  }\n\n  if (question.template_directory) {\n    // We have a template, try it\n    const params = {\n      course_id: question.course_id,\n      directory: question.template_directory,\n    };\n    const result = await sqldb.queryZeroOrOneRowAsync(sql.select_question, params);\n    if (result.rowCount === 0) {\n      throw new error.HttpStatusError(\n        500,\n        `Could not find template question \"${question.template_directory}\" from question \"${question.directory}\"`,\n      );\n    }\n\n    const templateQuestion = result.rows[0];\n    return await questionFilePath(\n      filename,\n      templateQuestion.directory,\n      coursePath,\n      templateQuestion,\n      nTemplates + 1,\n    );\n  } else {\n    // No template, try default files\n    const filenameToSuffix = {\n      'client.js': 'Client.js',\n      'server.js': 'Server.js',\n    };\n    if (filenameToSuffix[filename] === undefined) {\n      // no default for this file type, so try clientFilesCourse\n      const rootPathCourse = path.join(coursePath, 'clientFilesCourse');\n      const fullPathCourse = path.join(rootPathCourse, filename);\n\n      if (await fs.pathExists(fullPathCourse)) {\n        return {\n          fullPath: fullPathCourse,\n          effectiveFilename: filename,\n          rootPath: rootPathCourse,\n        };\n      } else {\n        throw new Error(`File not found at \"${fullPath}\" or \"${fullPathCourse}\"`);\n      }\n    } else {\n      const defaultFilename = question.type + filenameToSuffix[filename];\n      const fullDefaultFilePath = path.join(QUESTION_DEFAULTS_PATH, defaultFilename);\n\n      if (await fs.pathExists(fullDefaultFilePath)) {\n        // Found a default file\n        return {\n          fullPath: fullDefaultFilePath,\n          effectiveFilename: defaultFilename,\n          rootPath: QUESTION_DEFAULTS_PATH,\n        };\n      } else {\n        // No default file, give up\n        throw new error.AugmentedError('File not found', {\n          data: { fullPath, fullDefaultFilePath },\n        });\n      }\n    }\n  }\n}\n"]}