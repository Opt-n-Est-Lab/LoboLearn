{"version":3,"file":"file-store.js","sourceRoot":"","sources":["../../src/lib/file-store.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as fsPromises from 'fs/promises';\nimport * as path from 'path';\nimport { type Stream } from 'stream';\n\nimport debugfn from 'debug';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { getFromS3, uploadToS3 } from './aws.js';\nimport { config } from './config.js';\nimport { type File, FileSchema, IdSchema } from './db-types.js';\n\nconst debug = debugfn('prairielearn:socket-server');\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst StorageTypes = Object.freeze({\n  S3: 'S3',\n  FileSystem: 'FileSystem',\n});\n\ninterface UploadFileOptions {\n  /** The display_filename of the file. */\n  display_filename: string;\n  /** The file contents. */\n  contents: Buffer;\n  /** The file type. */\n  type: string;\n  /** The assessment for the file. */\n  assessment_id: string | null;\n  /** The assessment instance for the file. */\n  assessment_instance_id: string | null;\n  /** The instance question for the file. */\n  instance_question_id: string | null;\n  /** The current user performing the update. */\n  user_id: string;\n  /** The current authenticated user. */\n  authn_user_id: string;\n  /** AWS 'S3' or 'FileSystem' storage options. */\n  storage_type?: string;\n}\n\n/**\n * Upload a file into the file store.\n *\n * @param options - The options for the file upload.\n * @return The file_id of the newly created file.\n */\nexport async function uploadFile({\n  display_filename,\n  contents,\n  type,\n  assessment_id,\n  assessment_instance_id,\n  instance_question_id,\n  user_id,\n  authn_user_id,\n  storage_type,\n}: UploadFileOptions): Promise<string> {\n  storage_type = storage_type || config.fileStoreStorageTypeDefault;\n  debug(`upload(): storage_type=${storage_type}`);\n\n  let storage_filename;\n  if (storage_type === StorageTypes.S3) {\n    // use a UUIDv4 as the filename for S3\n    storage_filename = uuidv4();\n    if (config.fileStoreS3Bucket == null) {\n      throw new Error('config.fileStoreS3Bucket is null, which does not allow uploads');\n    }\n\n    const res = await uploadToS3(config.fileStoreS3Bucket, storage_filename, null, false, contents);\n    debug('upload() : uploaded to ' + res.Location);\n  } else if (storage_type === StorageTypes.FileSystem) {\n    // Make a filename to store the file. We use a UUIDv4 as the filename,\n    // and put it in two levels of directories corresponding to the first-3\n    // and second-3 characters of the filename.\n    const f = uuidv4();\n    const relDir = path.join(f.slice(0, 3), f.slice(3, 6));\n    storage_filename = path.join(relDir, f.slice(6));\n    const dir = path.join(config.filesRoot, relDir);\n    const filename = path.join(config.filesRoot, storage_filename);\n\n    debug('upload()');\n    if (config.filesRoot == null) {\n      throw new Error('config.filesRoot is null, which does not allow uploads');\n    }\n\n    debug(`upload() : mkdir ${dir}`);\n    await fsPromises.mkdir(dir, { recursive: true, mode: 0o700 });\n    debug(`upload(): writeFile ${filename}`);\n    await fsPromises.writeFile(filename, contents, { mode: 0o600 });\n  } else {\n    throw new Error(`Unknown storage type: ${storage_type}`);\n  }\n\n  const file_id = await sqldb.queryRow(\n    sql.insert_file,\n    {\n      display_filename,\n      storage_filename,\n      type,\n      assessment_id,\n      assessment_instance_id,\n      instance_question_id,\n      user_id,\n      authn_user_id,\n      storage_type,\n    },\n    IdSchema,\n  );\n  debug('upload(): inserted files row into DB');\n\n  return file_id;\n}\n\n/**\n * Soft-delete a file from the file store, leaving the physical file on disk.\n *\n * @param file_id - The file to delete.\n * @param authn_user_id - The current authenticated user.\n */\nexport async function deleteFile(file_id: string, authn_user_id: string) {\n  debug(`delete(): file_id=${file_id}`);\n  debug(`delete(): authn_user_id=${authn_user_id}`);\n\n  await sqldb.queryAsync(sql.delete_file, { file_id, authn_user_id });\n  debug('delete(): soft-deleted row in DB');\n}\n\n/**\n * Option of returning a stream instead of a file\n *\n * @param file_id - The file to get.\n * @return Requested file stream.\n */\nexport async function getStream(file_id: number | string): Promise<Stream> {\n  debug(`getStream(): file_id=${file_id}`);\n  const file = await getFile(file_id, 'stream');\n  return file.contents;\n}\n\nexport async function getFile(\n  file_id: number | string,\n  data_type: 'stream',\n): Promise<{\n  contents: Stream;\n  file: File;\n}>;\n\nexport async function getFile(\n  file_id: number | string,\n  data_type?: 'buffer',\n): Promise<{\n  contents: Buffer;\n  file: File;\n}>;\n/**\n * Get a file from the file store.\n *\n * @param file_id - The file to get.\n * @return An object with a buffer (of the file contents) and a file object.\n */\nexport async function getFile(\n  file_id: number | string,\n  data_type: 'stream' | 'buffer' = 'buffer',\n): Promise<{\n  contents: Buffer | Stream;\n  file: File;\n}> {\n  const file = await sqldb.queryOptionalRow(sql.select_file, { file_id }, FileSchema);\n\n  if (!file) {\n    throw new Error(`No file with file_id ${file_id}`);\n  }\n\n  if (file.storage_type === StorageTypes.FileSystem) {\n    if (config.filesRoot == null) {\n      throw new Error(\n        `config.filesRoot must be non-null to get file_id ${file_id} from file store`,\n      );\n    }\n\n    const filename = path.join(config.filesRoot, file.storage_filename);\n\n    const contents =\n      data_type === 'buffer' ? await fsPromises.readFile(filename) : fs.createReadStream(filename);\n\n    return {\n      contents,\n      file,\n    };\n  } else if (file.storage_type === StorageTypes.S3) {\n    if (config.fileStoreS3Bucket == null) {\n      throw new Error(\n        `config.fileStoreS3Bucket must be non-null to get file_id ${file_id} from file store`,\n      );\n    }\n\n    const contents =\n      data_type === 'buffer'\n        ? await getFromS3(config.fileStoreS3Bucket, file.storage_filename, true)\n        : await getFromS3(config.fileStoreS3Bucket, file.storage_filename, false);\n\n    return {\n      contents,\n      file,\n    };\n  } else {\n    throw new Error(`Unknown storage type: ${file.storage_type}`);\n  }\n}\n"]}