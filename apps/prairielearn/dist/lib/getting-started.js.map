{"version":3,"file":"getting-started.js","sourceRoot":"","sources":["../../src/lib/getting-started.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAEhE,OAAO,EAAE,8BAA8B,EAAE,MAAM,+BAA+B,CAAC;AAE/E,OAAO,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAErD,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAS1C;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,EAC3C,SAAS,GAGV;IACC,MAAM,uBAAuB,GAAG,MAAM,8BAA8B,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;IAEpF,IAAI,mBAAuC,CAAC;IAE5C,mGAAmG;IACnG,IAAI,uBAAuB,EAAE,CAAC;QAC5B,MAAM,mBAAmB,GAAG,MAAM,QAAQ,CACxC,GAAG,CAAC,4BAA4B,EAChC,EAAE,SAAS,EAAE,EACb,oBAAoB,CACrB,CAAC;QACF,mBAAmB,GAAG,uBAAuB,mBAAmB,CAAC,EAAE,wCAAwC,CAAC;IAC9G,CAAC;IAED,8DAA8D;IAC9D,sCAAsC;IACtC,MAAM,mBAAmB,GAAG,MAAM,QAAQ,CACxC,GAAG,CAAC,uBAAuB,EAC3B,EAAE,SAAS,EAAE,EACb,CAAC,CAAC,OAAO,EAAE,CACZ,CAAC;IAEF,4DAA4D;IAC5D,MAAM,kBAAkB,GAAG,MAAM,QAAQ,CACvC,GAAG,CAAC,2BAA2B,EAC/B,EAAE,SAAS,EAAE,EACb,CAAC,CAAC,OAAO,EAAE,CACZ,CAAC;IAEF,8DAA8D;IAC9D,MAAM,oBAAoB,GAAG,MAAM,QAAQ,CACzC,GAAG,CAAC,6BAA6B,EACjC,EAAE,SAAS,EAAE,EACb,CAAC,CAAC,OAAO,EAAE,CACZ,CAAC;IAEF,MAAM,KAAK,GAA6B;QACtC;YACE,MAAM,EAAE,6BAA6B;YACrC,WAAW,EACT,2HAA2H;YAC7H,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,mBAAmB;SAChC;QACD;YACE,MAAM,EAAE,mBAAmB;YAC3B,WAAW,EACT,6FAA6F;YAC/F,IAAI,EAAE,WAAW;YACjB,UAAU,EAAE,kBAAkB;SAC/B;QACD;YACE,MAAM,EAAE,0BAA0B;YAClC,WAAW,EACT,uGAAuG;YACzG,IAAI,EAAE,WAAW;YACjB,UAAU,EAAE,uBAAuB;SACpC;QACD;YACE,MAAM,EAAE,sBAAsB;YAC9B,WAAW,EACT,iGAAiG;YACnG,IAAI,EAAE,mBAAmB;YACzB,UAAU,EAAE,oBAAoB;SACjC;KACF,CAAC;IAEF,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { loadSqlEquiv, queryRow } from '@prairielearn/postgres';\n\nimport { selectCourseHasCourseInstances } from '../models/course-instances.js';\n\nimport { CourseInstanceSchema } from './db-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport interface GettingStartedTaskInfo {\n  header: string;\n  description: string;\n  isComplete: boolean;\n  link?: string;\n}\n\n/**\n * Retrieve the getting started checklist tasks and if they are complete for a course.\n */\nexport async function getGettingStartedTasks({\n  course_id,\n}: {\n  course_id: string;\n}): Promise<GettingStartedTaskInfo[]> {\n  const courseHasCourseInstance = await selectCourseHasCourseInstances({ course_id });\n\n  let assessmentsPageLink: string | undefined;\n\n  // If the course has a course instance, link to the assessments page for the first course instance.\n  if (courseHasCourseInstance) {\n    const firstCourseInstance = await queryRow(\n      sql.select_first_course_instance,\n      { course_id },\n      CourseInstanceSchema,\n    );\n    assessmentsPageLink = `/pl/course_instance/${firstCourseInstance.id}/instructor/instance_admin/assessments`;\n  }\n\n  // Check if the course has at least 2 staff members, since the\n  // course creator is added by default.\n  const courseHasAddedStaff = await queryRow(\n    sql.select_course_has_staff,\n    { course_id },\n    z.boolean(),\n  );\n\n  // Check if the course has at least one non-deleted question\n  const courseHasQuestions = await queryRow(\n    sql.select_course_has_questions,\n    { course_id },\n    z.boolean(),\n  );\n\n  // Check if the course has at least one non-deleted assessment\n  const courseHasAssessments = await queryRow(\n    sql.select_course_has_assessments,\n    { course_id },\n    z.boolean(),\n  );\n\n  const tasks: GettingStartedTaskInfo[] = [\n    {\n      header: 'Add course staff (optional)',\n      description:\n        'Invite users to the course staff to help manage and deliver the course. If you are working alone, you can skip this task.',\n      link: 'staff',\n      isComplete: courseHasAddedStaff,\n    },\n    {\n      header: 'Create a question',\n      description:\n        \"A question is a problem or task that tests a student's understanding of a specific concept.\",\n      link: 'questions',\n      isComplete: courseHasQuestions,\n    },\n    {\n      header: 'Create a course instance',\n      description:\n        'A course instance contains the assessments and other configuration for a single offering of a course.',\n      link: 'instances',\n      isComplete: courseHasCourseInstance,\n    },\n    {\n      header: 'Create an assessment',\n      description:\n        \"An assessment is a collection of questions designed to build or evaluate a student's knowledge.\",\n      link: assessmentsPageLink,\n      isComplete: courseHasAssessments,\n    },\n  ];\n\n  return tasks;\n}\n"]}