{"version":3,"file":"github.js","sourceRoot":"","sources":["../../src/lib/github.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { Octokit } from '@octokit/rest';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport { insertCourse, updateCourseCommitHash } from '../models/course.js';\nimport { syncDiskToSql } from '../sync/syncFromDisk.js';\n\nimport { logChunkChangesToJob, updateChunksForCourse } from './chunks.js';\nimport { config } from './config.js';\nimport { type User } from './db-types.js';\nimport { sendCourseRequestMessage } from './opsbot.js';\nimport { TEMPLATE_COURSE_PATH } from './paths.js';\nimport { formatJsonWithPrettier } from './prettier.js';\nimport { type ServerJob, createServerJob } from './server-jobs.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\n/*\n  Required configuration options to get this working:\n  - config.githubClientToken\n  - config.githubCourseOwner\n  - config.githubMachineTeam\n*/\n\n/**\n * Creates an octokit client from the client token specified in the config.\n */\nfunction getGithubClient() {\n  if (config.githubClientToken === null) {\n    return null;\n  }\n  return new Octokit({ auth: config.githubClientToken });\n}\n\n/**\n * Creates a new, empty repository.\n * @param client Octokit client\n * @param repo Name of the new repository to create\n */\nasync function createEmptyRepository(client: Octokit, repo: string) {\n  await client.repos.createInOrg({\n    org: config.githubCourseOwner,\n    owner: config.githubCourseOwner,\n    name: repo,\n    private: true,\n  });\n}\n\n/**\n * Adds a file's contents in a repository.\n * @param client Octokit client\n * @param repo Repository to set file contents in\n * @param path Path to the file, relative from the root of the repository.\n * @param contents Raw contents of the file, stored as a string.\n */\nasync function addFileToRepo(client: Octokit, repo: string, path: string, contents: string) {\n  await client.repos.createOrUpdateFileContents({\n    owner: config.githubCourseOwner,\n    repo,\n    path,\n    message: `Update ${path}`,\n    // Add a trailing newline to the contents.\n    content: Buffer.from(contents + '\\n', 'ascii').toString('base64'),\n  });\n}\n\n/**\n * Add a team to a specific repository.\n * @param client Octokit client\n * @param repo Repository to update\n * @param team Team to add\n * @param permission String permission to give to the team\n */\nasync function addTeamToRepo(\n  client: Octokit,\n  repo: string,\n  team: string,\n  permission: 'pull' | 'triage' | 'push' | 'maintain' | 'admin',\n) {\n  await client.teams.addOrUpdateRepoPermissionsInOrg({\n    owner: config.githubCourseOwner,\n    org: config.githubCourseOwner,\n    repo,\n    team_slug: team,\n    permission,\n  });\n}\n\n/**\n * Invites a user to a specific repository.\n * @param client Octokit client\n * @param repo Repository to update\n * @param username Username to add\n * @param permission String permission to give to the user\n */\nasync function addUserToRepo(\n  client: Octokit,\n  repo: string,\n  username: string,\n  permission: 'pull' | 'triage' | 'push' | 'maintain' | 'admin',\n) {\n  await client.repos.addCollaborator({\n    owner: config.githubCourseOwner,\n    repo,\n    username,\n    permission,\n  });\n}\n\n/**\n * Starts a new server job to create a course GitHub repo, add it to the database, and then sync it locally.\n * @param options Options for creating the course, should contain the following keys:\n * @param authn_user Authenticated user that is creating the course.\n */\nexport async function createCourseRepoJob(\n  options: {\n    short_name: string;\n    title: string;\n    institution_id: string;\n    display_timezone: string;\n    path: string;\n    repo_short_name: string;\n    github_user: string | null;\n    course_request_id: string;\n  },\n  authn_user: User,\n) {\n  const createCourseRepo = async (job: ServerJob) => {\n    const client = getGithubClient();\n    if (client === null) {\n      // If we are running locally and don't have a client, then just exit early\n      job.info('Nothing to do, exiting...');\n      return;\n    }\n\n    // As a debug step, show the course information given to us since the\n    // info can be changed by an admin before the job is run.\n    job.info(`Creating course ${options.short_name}`);\n    job.info(JSON.stringify(options, null, 4));\n\n    // Create an empty repository for the course\n    job.info('Creating empty repository');\n    await createEmptyRepository(client, options.repo_short_name);\n    job.info(`Created repository ${options.repo_short_name}`);\n\n    job.info('Creating infoCourse.json based on template');\n    const infoCoursePath = path.join(TEMPLATE_COURSE_PATH, 'infoCourse.json');\n    const infoCourse = JSON.parse(await fs.readFile(infoCoursePath, 'utf-8'));\n\n    infoCourse.uuid = uuidv4();\n    infoCourse.name = options.short_name;\n    infoCourse.title = options.title;\n    infoCourse.timezone = options.display_timezone;\n\n    const newContents = await formatJsonWithPrettier(JSON.stringify(infoCourse));\n    job.verbose('New infoCourse.json file:');\n    job.verbose(newContents);\n\n    await addFileToRepo(client, options.repo_short_name, 'infoCourse.json', newContents);\n    job.info('Uploaded new infoCourse.json file');\n\n    // Copy the template .gitignore file\n    job.info('Copying .gitignore file');\n    const gitignorePath = path.join(TEMPLATE_COURSE_PATH, '.gitignore');\n    const gitignoreContents = await fs.readFile(gitignorePath, 'utf-8');\n    await addFileToRepo(client, options.repo_short_name, '.gitignore', gitignoreContents);\n    job.info('Uploaded new .gitignore file');\n\n    job.info('Copying README.md file');\n    const readmePath = path.join(TEMPLATE_COURSE_PATH, 'README.md');\n    const readmeContents = await fs.readFile(readmePath, 'utf-8');\n    await addFileToRepo(client, options.repo_short_name, 'README.md', readmeContents);\n    job.info('Uploaded new README.md file');\n\n    // Find main branch (which is the only branch in the new repo).\n    // The output of this is array of objects following:\n    // https://docs.github.com/en/rest/reference/repos#list-branches\n\n    const branches = (\n      await client.repos.listBranches({\n        owner: config.githubCourseOwner,\n        repo: options.repo_short_name,\n      })\n    ).data;\n    if (branches.length !== 1) {\n      throw new Error(`New repo has ${branches.length} branches, expected one.`);\n    }\n    const branch = branches[0].name;\n    job.info(`Main branch for new repository: \"${branch}\"`);\n\n    // Add machine and instructor to the repo\n    job.info('Adding machine team to repo');\n    await addTeamToRepo(client, options.repo_short_name, config.githubMachineTeam, 'admin');\n    job.info(\n      `Added team ${config.githubMachineTeam} as administrator of repo ${options.repo_short_name}`,\n    );\n\n    if (options.github_user) {\n      job.info('Adding instructor to repo');\n      try {\n        await addUserToRepo(client, options.repo_short_name, options.github_user, 'admin');\n        job.info(\n          `Added user ${options.github_user} as administrator of repo ${options.repo_short_name}`,\n        );\n      } catch (err) {\n        job.error(`Could not add user \"${options.github_user}\": ${err}`);\n      }\n    }\n\n    // Insert the course into the courses table\n    job.info('Adding course to database');\n    const repository = `git@github.com:${config.githubCourseOwner}/${options.repo_short_name}.git`;\n    const inserted_course = await insertCourse({\n      institution_id: options.institution_id,\n      short_name: options.short_name,\n      title: options.title,\n      display_timezone: options.display_timezone,\n      path: options.path,\n      repository,\n      branch,\n      authn_user_id: authn_user.user_id,\n    });\n    job.verbose('Inserted course into database:');\n    job.verbose(JSON.stringify(inserted_course, null, 4));\n\n    // Give the owner required permissions\n    job.info('Giving user owner permission');\n    await sqldb.queryOneRowAsync(sql.set_course_owner_permission, {\n      course_id: inserted_course.id,\n      course_request_id: options.course_request_id,\n    });\n\n    // Automatically sync the new course. This part is shamelessly stolen\n    // from `pages/shared/syncHelpers.js`.\n    const git_env = process.env;\n    if (config.gitSshCommand != null) {\n      git_env.GIT_SSH_COMMAND = config.gitSshCommand;\n    }\n\n    job.info('Clone from remote git repository');\n    await job.exec('git', ['clone', repository, inserted_course.path], {\n      // Executed in the root directory, but this shouldn't really matter.\n      cwd: '/',\n      env: git_env,\n    });\n\n    job.info('Sync git repository to database');\n    const syncResult = await syncDiskToSql(inserted_course.id, inserted_course.path, job);\n    if (syncResult.status !== 'complete') {\n      // Sync should never fail when creating a brand new repository, if we hit this\n      // then we have a problem.\n      throw Error('Sync failed on brand new course repository');\n    }\n\n    // If we have chunks enabled, then create associated chunks for the new course\n    if (config.chunksGenerator) {\n      job.info('Create course chunks');\n      const chunkChanges = await updateChunksForCourse({\n        coursePath: inserted_course.path,\n        courseId: inserted_course.id,\n        courseData: syncResult.courseData,\n      });\n      logChunkChangesToJob(chunkChanges, job);\n    }\n\n    job.info('Update course commit hash');\n    await updateCourseCommitHash(inserted_course);\n  };\n\n  // Create a server job to wrap the course creation process.\n  const serverJob = await createServerJob({\n    userId: authn_user.user_id,\n    authnUserId: authn_user.user_id,\n    type: 'create_course_repo',\n    description: 'Create course repository from request',\n    courseRequestId: options.course_request_id,\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    try {\n      await createCourseRepo(job);\n      await sqldb.queryAsync(sql.set_course_request_status, {\n        status: 'approved',\n        course_request_id: options.course_request_id,\n      });\n    } catch (err) {\n      await sqldb.queryAsync(sql.set_course_request_status, {\n        status: 'failed',\n        course_request_id: options.course_request_id,\n      });\n\n      try {\n        await sendCourseRequestMessage(\n          `*Failed to create course \"${options.short_name}\"*\\n\\n` +\n            '```\\n' +\n            `${err.message.trim()}\\n` +\n            '```',\n        );\n      } catch (err) {\n        logger.error('Error sending course request message to Slack', err);\n        Sentry.captureException(err);\n      }\n\n      // Throw the error again so that the server job will be marked as failed.\n      throw err;\n    }\n  });\n\n  return serverJob.jobSequenceId;\n}\n\n/**\n * Slugs a course shortname into a GitHub repository name.\n * @param short_name Course shortname\n */\nexport function reponameFromShortname(short_name: string) {\n  return 'pl-' + short_name.replaceAll(' ', '').toLowerCase();\n}\n\n/**\n * Returns the HTTPS URL for the course page on GitHub, based on the course's\n * repository. Assumes that the repository is set using the SSH URL for GitHub.\n * Returns null if the URL cannot be retrieved from the repository.\n *\n * @param repository The repository associated to the course\n * @returns The HTTP prefix to access course information on GitHub\n */\nexport function httpPrefixForCourseRepo(repository: string | null): string | null {\n  if (repository) {\n    const githubRepoMatch = repository.match(/^git@github.com:\\/?(.+?)(\\.git)?\\/?$/);\n    if (githubRepoMatch) {\n      return `https://github.com/${githubRepoMatch[1]}`;\n    }\n  }\n  return null;\n}\n"]}