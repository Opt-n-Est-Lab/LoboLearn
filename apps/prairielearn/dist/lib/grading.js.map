{"version":3,"file":"grading.js","sourceRoot":"","sources":["../../src/lib/grading.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\n\nimport * as unzipper from 'unzipper';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { updateCourseInstanceUsagesForSubmission } from '../models/course-instance-usages.js';\nimport { insertGradingJob, updateGradingJobAfterGrading } from '../models/grading-job.js';\nimport * as questionServers from '../question-servers/index.js';\n\nimport { ensureChunksForCourseAsync } from './chunks.js';\nimport {\n  type Course,\n  DateFromISOString,\n  IdSchema,\n  IntervalSchema,\n  type Question,\n  QuestionSchema,\n  type Submission,\n  SubmissionSchema,\n  type Variant,\n  VariantSchema,\n} from './db-types.js';\nimport * as externalGrader from './externalGrader.js';\nimport { idsEqual } from './id.js';\nimport { writeCourseIssues } from './issues.js';\nimport * as ltiOutcomes from './ltiOutcomes.js';\nimport { getQuestionCourse } from './question-variant.js';\nimport * as workspaceHelper from './workspace.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst NextAllowedGradeSchema = z.object({\n  allow_grade_date: DateFromISOString.nullable(),\n  allow_grade_left_ms: z.coerce.number(),\n  allow_grade_interval: z.string(),\n});\n\nconst VariantDataSchema = z.object({\n  instance_question_id: z.string().nullable(),\n  grading_method: QuestionSchema.shape.grading_method,\n  max_auto_points: z.number().nullable(),\n  max_manual_points: z.number().nullable(),\n});\n\nconst VariantForSubmissionSchema = VariantSchema.extend({\n  assessment_instance_id: z.string().nullable(),\n  max_manual_points: z.number().nullable(),\n  instance_question_open: z.boolean().nullable(),\n  assessment_instance_open: z.boolean().nullable(),\n});\n\ntype SubmissionDataForSaving = Pick<Submission, 'variant_id' | 'auth_user_id'> &\n  Pick<Partial<Submission>, 'credit' | 'mode' | 'client_fingerprint_id'> & {\n    submitted_answer: NonNullable<Submission['submitted_answer']>;\n    user_id: string;\n  };\n\nexport async function insertSubmission({\n  submitted_answer,\n  raw_submitted_answer,\n  format_errors,\n  gradable,\n  broken,\n  params,\n  true_answer,\n  feedback,\n  credit,\n  mode,\n  variant_id,\n  user_id,\n  auth_user_id,\n  client_fingerprint_id,\n}: {\n  submitted_answer: Record<string, any> | null;\n  raw_submitted_answer: Record<string, any> | null;\n  format_errors: Record<string, any> | null;\n  gradable: boolean | null;\n  broken: boolean | null;\n  params: Record<string, any> | null;\n  true_answer: Record<string, any> | null;\n  feedback: Record<string, any> | null;\n  credit?: number | null;\n  mode?: Submission['mode'];\n  variant_id: string;\n  user_id: string;\n  auth_user_id: string | null;\n  client_fingerprint_id?: string | null;\n}): Promise<{ submission_id: string; variant: Variant }> {\n  return await sqldb.runInTransactionAsync(async () => {\n    await sqldb.callAsync('variants_lock', [variant_id]);\n\n    // Select the variant, while updating the variant's `params` and\n    // `correct_answer`, which is permitted to change during the `parse` phase\n    // (which occurs before this submission is inserted).\n    //\n    // Note that we do this mutation as part of the selection process to avoid another\n    // database round trip. This mutation is safe to do before the access checks below\n    // because if they fail, the transaction will be rolled back and the variant will\n    // not be updated.\n    const variant = await sqldb.queryRow(\n      sql.update_variant_true_answer,\n      { variant_id, params, true_answer },\n      VariantForSubmissionSchema,\n    );\n\n    if (variant.broken_at != null) {\n      throw new error.AugmentedError('Variant is broken', { status: 400, data: { variant_id } });\n    }\n\n    if (!variant.open) {\n      throw new error.AugmentedError('Variant is not open', { status: 403, data: { variant_id } });\n    }\n    if (variant.instance_question_id != null && !variant.instance_question_open) {\n      throw new error.AugmentedError('Instance question is not open', {\n        status: 403,\n        data: { variant_id },\n      });\n    }\n    if (variant.assessment_instance_id != null && !variant.assessment_instance_open) {\n      throw new error.AugmentedError('Assessment instance is not open', {\n        status: 403,\n        data: { variant_id },\n      });\n    }\n\n    const delta = await sqldb.queryOptionalRow(\n      sql.select_and_update_last_access,\n      { user_id: variant.user_id, group_id: variant.group_id },\n      IntervalSchema.nullable(),\n    );\n\n    const submission_id = await sqldb.queryRow(\n      sql.insert_submission,\n      {\n        variant_id,\n        auth_user_id,\n        raw_submitted_answer,\n        submitted_answer,\n        format_errors,\n        credit,\n        mode,\n        delta,\n        params,\n        true_answer,\n        feedback,\n        gradable,\n        broken,\n        client_fingerprint_id,\n      },\n      IdSchema,\n    );\n\n    await updateCourseInstanceUsagesForSubmission({ submission_id, user_id });\n\n    if (variant.assessment_instance_id != null) {\n      await sqldb.queryAsync(sql.update_instance_question_post_submission, {\n        instance_question_id: variant.instance_question_id,\n        assessment_instance_id: variant.assessment_instance_id,\n        delta,\n        status: gradable ? 'saved' : 'invalid',\n        requires_manual_grading: (variant.max_manual_points ?? 0) > 0,\n      });\n      await sqldb.callAsync('instance_questions_calculate_stats', [variant.instance_question_id]);\n    }\n\n    return { submission_id, variant };\n  });\n}\n\n/**\n * Save a new submission to a variant into the database.\n *\n * @param submission - The submission to save (should not have an id property yet).\n * @param variant - The variant to submit to.\n * @param question - The question for the variant.\n * @param variant_course - The course for the variant.\n * @returns submission_id\n */\nexport async function saveSubmission(\n  submissionData: SubmissionDataForSaving,\n  variant: Variant,\n  question: Question,\n  variant_course: Course,\n): Promise<{ submission_id: string; variant: Variant }> {\n  const submission: Partial<Submission> & SubmissionDataForSaving = {\n    ...submissionData,\n    raw_submitted_answer: submissionData.submitted_answer,\n    gradable: true,\n  };\n\n  // if workspace, get workspace_id\n  if (question.workspace_image != null) {\n    const workspace_id = await sqldb.queryOptionalRow(\n      sql.select_workspace_id,\n      { variant_id: submission.variant_id },\n      IdSchema,\n    );\n    // if we have a workspace and any files to be graded, get the files\n    if (workspace_id != null && question.workspace_graded_files?.length) {\n      try {\n        const zipPath = await workspaceHelper.getGradedFiles(workspace_id);\n\n        // if we have workspace files, encode them into _files\n        if (zipPath != null) {\n          const zip = fs.createReadStream(zipPath).pipe(unzipper.Parse({ forceStream: true }));\n\n          // Up until this point, `raw_submitted_answer` was just a reference to\n          // the `submitted_answer` object. If we naively wrote to\n          // `submitted_answer._files`, we'd end up storing the files twice in\n          // the database. To avoid this, we'll create a deep copy of\n          // `raw_submitted_answer` to ensure that we don't end up with\n          // duplicate file entries.\n          submission.raw_submitted_answer = structuredClone(submission.raw_submitted_answer);\n\n          if (!('_files' in submission.submitted_answer)) {\n            submission.submitted_answer['_files'] = [];\n          }\n\n          for await (const zipEntry of zip) {\n            const name = zipEntry.path;\n            const contents = (await zipEntry.buffer()).toString('base64');\n            submission.submitted_answer['_files'].push({ name, contents });\n          }\n          await fs.promises.unlink(zipPath);\n        }\n      } catch (err) {\n        if (err instanceof workspaceHelper.SubmissionFormatError) {\n          ((submission.format_errors ??= {})._files ??= []).push(err.message);\n        } else {\n          throw err;\n        }\n      }\n    }\n  }\n\n  const questionModule = questionServers.getModule(question.type);\n  const question_course = await getQuestionCourse(question, variant_course);\n  const { courseIssues, data } = await questionModule.parse(\n    submission,\n    variant,\n    question,\n    question_course,\n  );\n\n  const studentMessage = 'Error parsing submission';\n  const courseData = { variant, question, submission, course: variant_course };\n  await writeCourseIssues(\n    courseIssues,\n    variant,\n    submission.user_id,\n    submission.auth_user_id,\n    studentMessage,\n    courseData,\n  );\n\n  const hasFatalIssue = courseIssues.some((issue) => issue.fatal);\n\n  return await insertSubmission({\n    ...submission,\n    ...data,\n    gradable: !!data.gradable && !hasFatalIssue,\n    broken: hasFatalIssue,\n  });\n}\n\nasync function selectSubmissionForGrading(\n  variant_id: string,\n  check_submission_id: string | null,\n): Promise<Submission | null> {\n  return sqldb.runInTransactionAsync(async () => {\n    await sqldb.callAsync('variants_lock', [variant_id]);\n\n    const variantData = await sqldb.queryOptionalRow(\n      sql.select_variant_data,\n      { variant_id },\n      VariantDataSchema,\n    );\n    if (variantData == null) return null;\n\n    // We only select variants that will be auto-graded, so ignore this variant\n    // if this is manual grading only. Typically we would not reach this point\n    // for these cases, since the grade button is not shown to students, so this\n    // is an extra precaution.\n    if (variantData.instance_question_id == null) {\n      if (variantData.grading_method === 'Manual') return null;\n    } else {\n      if ((variantData.max_auto_points ?? 0) === 0 && (variantData.max_manual_points ?? 0) !== 0) {\n        return null;\n      }\n    }\n\n    // Select the most recent submission\n    const submission = await sqldb.queryOptionalRow(\n      sql.select_last_submission_of_variant,\n      { variant_id },\n      SubmissionSchema,\n    );\n    if (submission == null) return null;\n\n    if (check_submission_id != null && !idsEqual(submission.id, check_submission_id)) {\n      throw new error.AugmentedError('Submission ID mismatch', {\n        status: 400,\n        data: {\n          submission_id: submission.id,\n          check_submission_id,\n        },\n      });\n    }\n\n    // Check if the submission needs grading\n    if (\n      submission.score != null || // already graded\n      submission.grading_requested_at != null || // grading is in progress\n      submission.broken || // submission is broken\n      !submission.gradable // submission did not pass parsing\n    ) {\n      return null;\n    }\n\n    return submission;\n  });\n}\n\n/**\n * Grade the most recent submission for a given variant.\n *\n * @param variant - The variant to grade.\n * @param check_submission_id - The submission_id that must be graded (or null to skip this check).\n * @param question - The question for the variant.\n * @param variant_course - The course for the variant.\n * @param user_id - The current effective user.\n * @param authn_user_id - The currently authenticated user.\n * @param overrideGradeRateCheck - Whether to override grade rate limits.\n */\nexport async function gradeVariant(\n  variant: Variant,\n  check_submission_id: string | null,\n  question: Question,\n  variant_course: Course,\n  user_id: string | null,\n  authn_user_id: string | null,\n  overrideGradeRateCheck: boolean,\n): Promise<void> {\n  const question_course = await getQuestionCourse(question, variant_course);\n\n  const submission = await selectSubmissionForGrading(variant.id, check_submission_id);\n  if (submission == null) return;\n\n  if (!overrideGradeRateCheck) {\n    const resultNextAllowed = await sqldb.callRow(\n      'instance_questions_next_allowed_grade',\n      [variant.instance_question_id],\n      NextAllowedGradeSchema,\n    );\n    if (resultNextAllowed.allow_grade_left_ms > 0) return;\n  }\n\n  const grading_job = await insertGradingJob({ submission_id: submission.id, authn_user_id });\n\n  if (question.grading_method === 'External') {\n    // For external grading we just need to trigger the grading job to start.\n    // We haven't actually graded this question yet - don't attempt\n    // to update the grading job or submission.\n    //\n    // Before starting the grading process, we need to ensure that any relevant\n    // chunks are available on disk. This uses the same list of chunks as\n    // `getContext` in `freeform.js`. We technically probably don't need to\n    // load element and element extension chunks, but we do so anyway to be\n    // consistent with the other code path.\n    await ensureChunksForCourseAsync(question_course.id, [\n      { type: 'question', questionId: question.id },\n      { type: 'clientFilesCourse' },\n      { type: 'serverFilesCourse' },\n      { type: 'elements' },\n      { type: 'elementExtensions' },\n    ]);\n    await externalGrader.beginGradingJob(grading_job.id);\n  } else {\n    // For Internal grading we call the grading code. For Manual grading, if the question\n    // reached this point, it has auto points, so it should be treated like Internal.\n    const questionModule = questionServers.getModule(question.type);\n    const { courseIssues, data } = await questionModule.grade(\n      submission,\n      variant,\n      question,\n      question_course,\n    );\n    const hasFatalIssue = courseIssues.some((issue) => issue.fatal);\n\n    const studentMessage = 'Error grading submission';\n    const courseData = { variant, question, submission, course: variant_course };\n    await writeCourseIssues(\n      courseIssues,\n      variant,\n      user_id,\n      submission.auth_user_id,\n      studentMessage,\n      courseData,\n    );\n\n    const grading_job_post_update = await updateGradingJobAfterGrading({\n      grading_job_id: grading_job.id,\n      // `received_time` and `start_time` were already set when the\n      // grading job was inserted, so they'll remain unchanged.\n      // `finish_time` will be set to `now()` by this function.\n      submitted_answer: data.submitted_answer,\n      format_errors: data.format_errors,\n      gradable: !!data.gradable && !hasFatalIssue,\n      broken: hasFatalIssue,\n      params: data.params,\n      true_answer: data.true_answer,\n      feedback: data.feedback,\n      partial_scores: data.partial_scores,\n      score: data.score,\n      v2_score: data.v2_score,\n    });\n\n    // If the submission was marked invalid during grading the grading\n    // job will be marked ungradable and we should bail here to prevent\n    // LTI updates.\n    if (!grading_job_post_update.gradable) return;\n\n    const assessment_instance_id = await sqldb.queryOptionalRow(\n      sql.select_assessment_for_submission,\n      { submission_id: submission.id },\n      IdSchema.nullable(),\n    );\n    if (assessment_instance_id != null) {\n      await ltiOutcomes.updateScore(assessment_instance_id);\n    }\n  }\n}\n\n/**\n * Save and grade a new submission to a variant.\n *\n * @param submissionData - The submission to save (should not have an id property yet).\n * @param variant - The variant to submit to.\n * @param question - The question for the variant.\n * @param course - The course for the variant.\n * @param overrideGradeRateCheck - Whether to override grade rate limits.\n * @returns submission_id\n */\nexport async function saveAndGradeSubmission(\n  submissionData: SubmissionDataForSaving,\n  variant: Variant,\n  question: Question,\n  course: Course,\n  overrideGradeRateCheck: boolean,\n) {\n  const { submission_id, variant: updated_variant } = await saveSubmission(\n    submissionData,\n    variant,\n    question,\n    course,\n  );\n\n  await gradeVariant(\n    // Note that parsing a submission may modify the `params` and `true_answer`\n    // of the variant (for v3 questions, this is `data[\"params\"]` and\n    // `data[\"correct_answers\"])`. This is why we need to use the variant\n    // returned from `saveSubmission` rather than the one passed to this\n    // function.\n    updated_variant,\n    submission_id,\n    question,\n    course,\n    submissionData.user_id,\n    submissionData.auth_user_id,\n    overrideGradeRateCheck,\n  );\n  return submission_id;\n}\n"]}