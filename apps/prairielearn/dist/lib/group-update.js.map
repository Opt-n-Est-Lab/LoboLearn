{"version":3,"file":"group-update.js","sourceRoot":"","sources":["../../src/lib/group-update.ts"],"names":[],"mappings":"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","sourcesContent":["import csvtojson from 'csvtojson';\nimport _ from 'lodash';\nimport * as streamifier from 'streamifier';\nimport { z } from 'zod';\n\nimport * as namedLocks from '@prairielearn/named-locks';\nimport {\n  loadSqlEquiv,\n  queryOptionalRow,\n  queryRow,\n  queryRows,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\n\nimport { IdSchema, UserSchema } from './db-types.js';\nimport { GroupOperationError, createGroup, createOrAddToGroup } from './groups.js';\nimport { createServerJob } from './server-jobs.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst AssessmentInfoSchema = z.object({\n  assessment_label: z.string(),\n  course_instance_id: IdSchema,\n  course_id: IdSchema,\n});\n\nfunction groupUpdateLockName(assessment_id: string): string {\n  return `assessment:${assessment_id}:groups`;\n}\n\n/**\n * Update groups from a CSV file.\n *\n * @param assessment_id - The assessment to update.\n * @param csvFile - An object with keys {originalname, size, buffer}.\n * @param user_id - The current user performing the update.\n * @param authn_user_id - The current authenticated user.\n * @returns The job sequence ID.\n */\nexport async function uploadInstanceGroups(\n  assessment_id: string,\n  csvFile: Express.Multer.File | null | undefined,\n  user_id: string,\n  authn_user_id: string,\n): Promise<string> {\n  if (csvFile == null) {\n    throw new Error('No CSV file uploaded');\n  }\n\n  const { assessment_label, course_id, course_instance_id } = await queryRow(\n    sql.select_assessment_info,\n    { assessment_id },\n    AssessmentInfoSchema,\n  );\n\n  const serverJob = await createServerJob({\n    courseId: course_id,\n    courseInstanceId: course_instance_id,\n    assessmentId: assessment_id,\n    userId: user_id,\n    authnUserId: authn_user_id,\n    type: 'upload_groups',\n    description: `Upload group settings for ${assessment_label}`,\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    const lockName = groupUpdateLockName(assessment_id);\n    job.verbose(`Trying lock ${lockName}`);\n    await namedLocks.doWithLock(\n      lockName,\n      {\n        timeout: 10000,\n        onNotAcquired: () => {\n          job.fail('Another user is already updating the groups for this assessment.');\n        },\n      },\n      async () => {\n        job.verbose('Uploading group settings for ' + assessment_label);\n        job.verbose(`Parsing uploaded CSV file \"${csvFile.originalname}\" (${csvFile.size} bytes)`);\n        job.verbose('----------------------------------------');\n        job.verbose('Processing group updates...');\n        const csvStream = streamifier.createReadStream(csvFile.buffer, {\n          encoding: 'utf8',\n        });\n        const csvConverter = csvtojson({ checkType: false, maxRowLength: 10000 });\n        let successCount = 0;\n        const groupAssignments = (await csvConverter.fromStream(csvStream))\n          .map((row) => _.mapKeys(row, (_v, k) => k.toLowerCase()))\n          .filter((row) => row.uid && row.groupname);\n        await runInTransactionAsync(async () => {\n          for (const { uid, groupname } of groupAssignments) {\n            await createOrAddToGroup(groupname, assessment_id, [uid], authn_user_id).then(\n              () => successCount++,\n              (err) => {\n                if (err instanceof GroupOperationError) {\n                  job.error(`Error adding ${uid} to group ${groupname}: ${err.message}`);\n                } else {\n                  throw err;\n                }\n              },\n            );\n          }\n        });\n\n        const errorCount = groupAssignments.length - successCount;\n        job.verbose('----------------------------------------');\n        if (errorCount === 0) {\n          job.verbose(`Successfully updated groups for ${successCount} students, with no errors`);\n        } else {\n          job.verbose(`Successfully updated groups for ${successCount} students`);\n          job.fail(`Error updating ${errorCount} students`);\n        }\n      },\n    );\n  });\n\n  return serverJob.jobSequenceId;\n}\n\n/**\n * Randomly assign students to groups.\n *\n * @param assessment_id - The assessment to update.\n * @param user_id - The current user performing the update.\n * @param authn_user_id - The current authenticated user.\n * @param max_group_size - max size of the group\n * @param min_group_size - min size of the group\n * @returns The job sequence ID.\n */\nexport async function randomGroups(\n  assessment_id: string,\n  user_id: string,\n  authn_user_id: string,\n  max_group_size: number,\n  min_group_size: number,\n): Promise<string> {\n  if (max_group_size < 2 || min_group_size < 1 || max_group_size < min_group_size) {\n    throw new Error('Group Setting Requirements: max > 1; min > 0; max >= min');\n  }\n\n  const { assessment_label, course_id, course_instance_id } = await queryRow(\n    sql.select_assessment_info,\n    { assessment_id },\n    AssessmentInfoSchema,\n  );\n\n  const serverJob = await createServerJob({\n    courseId: course_id,\n    courseInstanceId: course_instance_id,\n    assessmentId: assessment_id,\n    userId: user_id,\n    authnUserId: authn_user_id,\n    type: 'random_generate_groups',\n    description: `Randomly generate groups for ${assessment_label}`,\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    const lockName = groupUpdateLockName(assessment_id);\n    job.verbose(`Trying lock ${lockName}`);\n    await namedLocks.doWithLock(\n      lockName,\n      {\n        timeout: 10000,\n        onNotAcquired: () => {\n          job.fail('Another user is already updating the groups for this assessment.');\n        },\n      },\n      async () => {\n        job.verbose(`Acquired lock ${lockName}`);\n        job.verbose('Randomly generate groups for ' + assessment_label);\n        job.verbose('----------------------------------------');\n        job.verbose('Fetching the enrollment lists...');\n        const studentsToGroup = await queryRows(\n          sql.select_enrolled_students_without_group,\n          { assessment_id },\n          UserSchema,\n        );\n        _.shuffle(studentsToGroup);\n        const numStudents = studentsToGroup.length;\n        job.verbose(\n          `There are ${numStudents} students enrolled in ${assessment_label} without a group`,\n        );\n        job.verbose('----------------------------------------');\n        job.verbose(`Creating groups with a size between ${min_group_size} and ${max_group_size}`);\n\n        let groupsCreated = 0,\n          studentsGrouped = 0;\n        await runInTransactionAsync(async () => {\n          // Find a group name of the format `groupNNN` that is not used\n          const unusedGroupNameSuffix = await queryOptionalRow(\n            sql.select_unused_group_name_suffix,\n            { assessment_id },\n            z.number(),\n          );\n\n          // Create groups using the groups of maximum size where possible\n          const userGroups = _.chunk(\n            studentsToGroup.map((user) => user.uid),\n            max_group_size,\n          );\n          // If the last group is too small, move students from larger groups to the last group\n          const smallGroup = userGroups.at(-1);\n          while (smallGroup && smallGroup.length < min_group_size) {\n            // Take one student from each large group and add them to the small group\n            const usersToMove = userGroups\n              .filter((group) => group.length > min_group_size)\n              .slice(smallGroup.length - min_group_size) // This will be negative (get the last n groups)\n              .map((group) => group.pop() as string);\n            if (usersToMove.length === 0) {\n              job.warn(\n                `Could not create groups with the desired sizes. One group will have a size of ${smallGroup.length}`,\n              );\n              break;\n            }\n            smallGroup.push(...usersToMove);\n          }\n\n          let i = unusedGroupNameSuffix ?? 1;\n          for (const users of userGroups) {\n            const groupName = `group${i}`;\n            i++;\n            await createGroup(groupName, assessment_id, users, authn_user_id).then(\n              () => {\n                groupsCreated++;\n                studentsGrouped += users.length;\n              },\n              (err) => {\n                if (err instanceof GroupOperationError) {\n                  job.error(err.message);\n                } else {\n                  throw err;\n                }\n              },\n            );\n          }\n        });\n        const errorCount = numStudents - studentsGrouped;\n        job.verbose('----------------------------------------');\n        if (studentsGrouped !== 0) {\n          job.verbose(\n            `Successfully grouped ${studentsGrouped} students into ${groupsCreated} groups`,\n          );\n        }\n        if (errorCount !== 0) {\n          job.fail(`Error adding ${errorCount} students to groups.`);\n        }\n      },\n    );\n  });\n\n  return serverJob.jobSequenceId;\n}\n"]}