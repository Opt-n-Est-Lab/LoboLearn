{"version":3,"file":"id.js","sourceRoot":"","sources":["../../src/lib/id.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,UAAU,QAAQ,CAAC,GAAoB,EAAE,GAAoB;IACjE,kCAAkC;IAClC,OAAO,GAAG,IAAI,GAAG,CAAC;AACpB,CAAC","sourcesContent":["/**\n * This is a semantic layer on top of the `==` operator that should only\n * be used when comparing IDs.\n *\n * Normally, using the `==` operator is not recommended, since it can have\n * unexpected behavior. In fact, doing so is a lint error! The recommended\n * alternative is the \"strict equal\" operator: `===`.\n *\n * However, the IDs that we use throughout our codebase are sometimes strings\n * and sometimes numbers, depending on where they code from. For instance, an\n * ID might be a number if it's queried and returned in JSON, but it'll be a\n * string if it's queried directly or if it comes in the body of a request. We\n * actually take advantage of the type coercion that `==` performs so that we\n * can easily compare two IDs no matter what type they have.\n *\n * To avoid the need to litter our codebase with `// eslint-disable` comments,\n * one should use this wrapper function whenever there's a need to check IDs\n * for equality.\n *\n * In the future, the existence of this function could make it easier to start\n * parsing IDs as `BigInt` objects as they come out of the database.\n */\nexport function idsEqual(id1: string | number, id2: string | number): boolean {\n  // eslint-disable-next-line eqeqeq\n  return id1 == id2;\n}\n"]}