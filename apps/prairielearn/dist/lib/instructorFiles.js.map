{"version":3,"file":"instructorFiles.js","sourceRoot":"","sources":["../../src/lib/instructorFiles.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport * as error from '@prairielearn/error';\nimport { type HtmlSafeString, html } from '@prairielearn/html';\nimport { contains } from '@prairielearn/path-utils';\n\nexport interface InstructorFilePaths {\n  coursePath: string;\n  courseId: string;\n  hasEditPermission: boolean;\n  rootPath: string;\n  invalidRootPaths: string[];\n  cannotMove: string[];\n  clientDir: string;\n  serverDir?: string;\n  testsDir?: string;\n  urlPrefix: string;\n  workingPath: string;\n  workingPathRelativeToCourse: string;\n  workingDirectory: string;\n  workingFilename: string;\n  specialDirs: {\n    label: string;\n    path: string;\n    info: HtmlSafeString;\n  }[];\n  branch: {\n    name: string;\n    path: string;\n    canView: boolean;\n  }[];\n}\n\nfunction getContextPaths(\n  locals: Record<string, any>,\n): Pick<\n  InstructorFilePaths,\n  | 'rootPath'\n  | 'invalidRootPaths'\n  | 'cannotMove'\n  | 'clientDir'\n  | 'serverDir'\n  | 'testsDir'\n  | 'urlPrefix'\n> {\n  const coursePath: string = locals.course.path;\n  if (locals.navPage === 'course_admin') {\n    const rootPath = coursePath;\n    return {\n      rootPath,\n      invalidRootPaths: [\n        path.join(rootPath, '.git'),\n        path.join(rootPath, 'questions'),\n        path.join(rootPath, 'courseInstances'),\n      ],\n      cannotMove: [path.join(rootPath, 'infoCourse.json')],\n      clientDir: path.join(rootPath, 'clientFilesCourse'),\n      serverDir: path.join(rootPath, 'serverFilesCourse'),\n      urlPrefix: `${locals.urlPrefix}/course_admin`,\n    };\n  } else if (locals.navPage === 'instance_admin') {\n    const rootPath = path.join(coursePath, 'courseInstances', locals.course_instance.short_name);\n    return {\n      rootPath,\n      invalidRootPaths: [path.join(rootPath, 'assessments')],\n      cannotMove: [path.join(rootPath, 'infoCourseInstance.json')],\n      clientDir: path.join(rootPath, 'clientFilesCourseInstance'),\n      urlPrefix: `${locals.urlPrefix}/instance_admin`,\n    };\n  } else if (locals.navPage === 'assessment') {\n    const rootPath = path.join(\n      coursePath,\n      'courseInstances',\n      locals.course_instance.short_name,\n      'assessments',\n      locals.assessment.tid,\n    );\n    return {\n      rootPath,\n      invalidRootPaths: [],\n      cannotMove: [path.join(rootPath, 'infoAssessment.json')],\n      clientDir: path.join(rootPath, 'clientFilesAssessment'),\n      urlPrefix: `${locals.urlPrefix}/assessment/${locals.assessment.id}`,\n    };\n  } else if (locals.navPage === 'question' || locals.navPage === 'public_question') {\n    const rootPath = path.join(coursePath, 'questions', locals.question.qid);\n    return {\n      rootPath,\n      invalidRootPaths: [],\n      cannotMove: [path.join(rootPath, 'info.json')],\n      clientDir: path.join(rootPath, 'clientFilesQuestion'),\n      testsDir: path.join(rootPath, 'tests'),\n      urlPrefix: `${locals.urlPrefix}/question/${locals.question.id}`,\n    };\n  } else {\n    throw new Error(`Invalid navPage: ${locals.navPage}`);\n  }\n}\n\n/**\n * For the file path of the current page, this function returns rich\n * information about higher folders up to a certain level determined by\n * the navPage. Created for use in instructor file views.\n */\nexport function getPaths(\n  requestedPath: string | undefined,\n  locals: Record<string, any>,\n): InstructorFilePaths {\n  const coursePath: string = locals.course.path;\n  const courseId: string = locals.course.id;\n  const hasEditPermission: boolean =\n    locals.authz_data.has_course_permission_edit && !locals.course.example_course;\n\n  const { rootPath, invalidRootPaths, cannotMove, clientDir, serverDir, testsDir, urlPrefix } =\n    getContextPaths(locals);\n\n  let workingPath = rootPath;\n  if (requestedPath) {\n    try {\n      workingPath = path.join(coursePath, requestedPath);\n    } catch {\n      throw new Error(`Invalid path: ${requestedPath}`);\n    }\n  }\n  const workingPathRelativeToCourse = path.relative(coursePath, workingPath);\n  const workingDirectory = path.dirname(workingPathRelativeToCourse);\n  const workingFilename = path.basename(workingPathRelativeToCourse);\n\n  const specialDirs: InstructorFilePaths['specialDirs'] = [];\n  if (workingPath === rootPath) {\n    specialDirs.push({\n      label: 'Client',\n      path: clientDir,\n      info: html`This file will be placed in the subdirectory\n        <code>${path.basename(clientDir)}</code> and will be accessible from the student's web\n        browser.`,\n    });\n    if (serverDir) {\n      specialDirs.push({\n        label: 'Server',\n        path: serverDir,\n        info: html`This file will be placed in the subdirectory\n          <code>${path.basename(serverDir)}</code> and will be accessible only from the server. It\n          will not be accessible from the student's web browser.`,\n      });\n    }\n    if (testsDir) {\n      specialDirs.push({\n        label: 'Test',\n        path: testsDir,\n        info: html`This file will be placed in the subdirectory\n          <code>${path.basename(testsDir)}</code> and will be accessible only from the server. It\n          will not be accessible from the student's web browser. This is appropriate for code to\n          support\n          <a href=\"https://prairielearn.readthedocs.io/en/latest/externalGrading/\">\n            externally graded questions</a\n          >.`,\n      });\n    }\n  }\n\n  if (!contains(rootPath, workingPath)) {\n    throw new error.AugmentedError('Invalid working directory', {\n      info: html`\n        <p>The working directory</p>\n        <div class=\"container\">\n          <pre class=\"bg-dark text-white rounded p-2\">${workingPath}</pre>\n        </div>\n        <p>must be inside the root directory</p>\n        <div class=\"container\">\n          <pre class=\"bg-dark text-white rounded p-2\">${rootPath}</pre>\n        </div>\n        <p>when looking at <code>${locals.navPage}</code> files.</p>\n      `,\n    });\n  }\n\n  const found = invalidRootPaths.find((invalidRootPath) => contains(invalidRootPath, workingPath));\n  if (found) {\n    throw new error.AugmentedError('Invalid working directory', {\n      info:\n        found === workingPath\n          ? html`\n              <p>The working directory</p>\n              <div class=\"container\">\n                <pre class=\"bg-dark text-white rounded p-2\">${workingPath}</pre>\n              </div>\n              <p>\n                cannot be accessed directly when looking at <code>${locals.navPage}</code> files.\n              </p>\n            `\n          : html`\n              <p>The working directory</p>\n              <div class=\"container\">\n                <pre class=\"bg-dark text-white rounded p-2\">${workingPath}</pre>\n              </div>\n              <p>must <em>not</em> be inside the directory</p>\n              <div class=\"container\">\n                <pre class=\"bg-dark text-white rounded p-2\">${found}</pre>\n              </div>\n              <p>when looking at <code>${locals.navPage}</code> files.</p>\n            `,\n    });\n  }\n\n  let curPath = coursePath;\n  const branch = [\n    {\n      name: path.basename(curPath),\n      path: path.relative(coursePath, curPath),\n      canView: contains(rootPath, curPath),\n    },\n    ...path\n      .relative(coursePath, workingPath)\n      .split(path.sep)\n      .filter((dir) => dir)\n      .map((dir) => {\n        curPath = path.join(curPath, dir);\n        return {\n          name: path.basename(curPath),\n          path: path.relative(coursePath, curPath),\n          canView: contains(rootPath, curPath),\n        };\n      }),\n  ];\n\n  return {\n    coursePath,\n    courseId,\n    hasEditPermission,\n    rootPath,\n    invalidRootPaths,\n    cannotMove,\n    clientDir,\n    serverDir,\n    testsDir,\n    urlPrefix,\n    workingPath,\n    workingPathRelativeToCourse,\n    workingDirectory,\n    workingFilename,\n    specialDirs,\n    branch,\n  };\n}\n"]}