{"version":3,"file":"json.js","sourceRoot":"","sources":["../../src/lib/json.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;GAUG;AACH,MAAM,UAAU,aAAa,CAAC,QAAa,EAAE,QAAa;IACxD,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;QACtD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;QACtD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;QACvD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;QACjE,MAAM,MAAM,GAAQ,EAAE,CAAC;QAEvB,mDAAmD;QACnD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YACxC,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;gBACpB,MAAM,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;QAED,mDAAmD;QACnD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YACxC,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC;gBACrB,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["/**\n * Given an original object and a modified object, returns a new object\n * that contains all the data from the modified object, but with the keys\n * matching the order that they appear in the original object. Keys that are\n * not present in the original object are added at the end.\n *\n *\n * This function is meant to be used when programmatically editing JSON data.\n * It's designed to minimize the changes in the JSON data such that a `git diff`\n * doesn't show spurious changes unrelated to the actual data changes.\n */\nexport function applyKeyOrder(original: any, modified: any): any {\n  if (typeof original !== 'object' || original === null) {\n    return modified;\n  }\n\n  if (typeof modified !== 'object' || modified === null) {\n    return modified;\n  }\n\n  if (Array.isArray(original) && Array.isArray(modified)) {\n    return modified.map((value, index) => applyKeyOrder(original[index], value));\n  }\n\n  if (typeof original === 'object' && typeof modified === 'object') {\n    const result: any = {};\n\n    // Add keys from original in the order they appear.\n    for (const key of Object.keys(original)) {\n      if (key in modified) {\n        result[key] = applyKeyOrder(original[key], modified[key]);\n      }\n    }\n\n    // Add keys from modified that are not in original.\n    for (const key of Object.keys(modified)) {\n      if (!(key in result)) {\n        result[key] = modified[key];\n      }\n    }\n\n    return result;\n  }\n\n  return modified;\n}\n"]}