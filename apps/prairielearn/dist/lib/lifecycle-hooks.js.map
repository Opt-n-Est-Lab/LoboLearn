{"version":3,"file":"lifecycle-hooks.js","sourceRoot":"","sources":["../../src/lib/lifecycle-hooks.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iBAAiB,EACjB,8BAA8B,EAC9B,mCAAmC,GACpC,MAAM,8BAA8B,CAAC;AAEtC,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAE,mBAAmB,EAAE,MAAM,UAAU,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC;;GAEG;AACH,KAAK,UAAU,yBAAyB,CAAC,MAAyB;IAChE,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,IAAI,CAC3B,IAAI,mCAAmC,CAAC;QACtC,WAAW,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC;KACjC,CAAC,CACH,CAAC;IAEF,OAAO,GAAG,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC;AACvD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB;IAC1C,IACE,CAAC,MAAM,CAAC,YAAY;QACpB,CAAC,MAAM,CAAC,oBAAoB;QAC5B,CAAC,MAAM,CAAC,qCAAqC,EAC7C,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,yDAAyD,CAAC,CAAC;QAC1E,OAAO;IACT,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,iBAAiB,CAAC,mBAAmB,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE9E,4EAA4E;IAC5E,4EAA4E;IAC5E,eAAe;IACf,MAAM,cAAc,GAAG,MAAM,yBAAyB,CAAC,MAAM,CAAC,CAAC;IAC/D,IAAI,cAAc,KAAK,cAAc,IAAI,cAAc,KAAK,qBAAqB,EAAE,CAAC;QAClF,OAAO;IACT,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,iEAAiE,CAAC,CAAC;IAC/E,MAAM,MAAM,CAAC,IAAI,CACf,IAAI,8BAA8B,CAAC;QACjC,qBAAqB,EAAE,UAAU;QACjC,oBAAoB,EAAE,MAAM,CAAC,oBAAoB;QACjD,iBAAiB,EAAE,MAAM,CAAC,qCAAqC;QAC/D,UAAU,EAAE,MAAM,CAAC,UAAU;KAC9B,CAAC,CACH,CAAC;IACF,MAAM,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;AAC7E,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,2BAA2B;IAC/C,IACE,CAAC,MAAM,CAAC,YAAY;QACpB,CAAC,MAAM,CAAC,oBAAoB;QAC5B,CAAC,MAAM,CAAC,uCAAuC,EAC/C,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,2DAA2D,CAAC,CAAC;QAC5E,OAAO;IACT,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,iBAAiB,CAAC,mBAAmB,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE9E,+EAA+E;IAC/E,8EAA8E;IAC9E,MAAM,cAAc,GAAG,MAAM,yBAAyB,CAAC,MAAM,CAAC,CAAC;IAC/D,IAAI,cAAc,KAAK,kBAAkB,IAAI,cAAc,KAAK,yBAAyB,EAAE,CAAC;QAC1F,OAAO;IACT,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;IACpF,MAAM,MAAM,CAAC,IAAI,CACf,IAAI,8BAA8B,CAAC;QACjC,qBAAqB,EAAE,UAAU;QACjC,oBAAoB,EAAE,MAAM,CAAC,oBAAoB;QACjD,iBAAiB,EAAE,MAAM,CAAC,uCAAuC;QACjE,UAAU,EAAE,MAAM,CAAC,UAAU;KAC9B,CAAC,CACH,CAAC;IACF,MAAM,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAC;AAClF,CAAC","sourcesContent":["import {\n  AutoScalingClient,\n  CompleteLifecycleActionCommand,\n  DescribeAutoScalingInstancesCommand,\n} from '@aws-sdk/client-auto-scaling';\n\nimport { logger } from '@prairielearn/logger';\n\nimport { makeAwsClientConfig } from './aws.js';\nimport { config } from './config.js';\n\n/**\n * Gets the lifecycle state of the current EC2 instance.\n */\nasync function getInstanceLifecycleState(client: AutoScalingClient): Promise<string | undefined> {\n  const res = await client.send(\n    new DescribeAutoScalingInstancesCommand({\n      InstanceIds: [config.instanceId],\n    }),\n  );\n\n  return res.AutoScalingInstances?.[0]?.LifecycleState;\n}\n\nexport async function completeInstanceLaunch() {\n  if (\n    !config.runningInEc2 ||\n    !config.autoScalingGroupName ||\n    !config.autoScalingLaunchingLifecycleHookName\n  ) {\n    logger.verbose('Lifecycle hooks not configured; skipping launching hook');\n    return;\n  }\n\n  const client = new AutoScalingClient(makeAwsClientConfig({ maxAttempts: 3 }));\n\n  // If we're starting outside the context of an Auto Scaling lifecycle change\n  // (e.g. a restart after a process crash), there won't be a lifecycle action\n  // to complete.\n  const lifecycleState = await getInstanceLifecycleState(client);\n  if (lifecycleState !== 'Pending:Wait' && lifecycleState !== 'Warmed:Pending:Wait') {\n    return;\n  }\n\n  logger.info('Completing Auto Scaling lifecycle action for instance launch...');\n  await client.send(\n    new CompleteLifecycleActionCommand({\n      LifecycleActionResult: 'CONTINUE',\n      AutoScalingGroupName: config.autoScalingGroupName,\n      LifecycleHookName: config.autoScalingLaunchingLifecycleHookName,\n      InstanceId: config.instanceId,\n    }),\n  );\n  logger.info('Completed Auto Scaling lifecycle action for instance launch');\n}\n\nexport async function completeInstanceTermination() {\n  if (\n    !config.runningInEc2 ||\n    !config.autoScalingGroupName ||\n    !config.autoScalingTerminatingLifecycleHookName\n  ) {\n    logger.verbose('Lifecycle hooks not configured; skipping terminating hook');\n    return;\n  }\n\n  const client = new AutoScalingClient(makeAwsClientConfig({ maxAttempts: 3 }));\n\n  // If we're terminating outside the context of an Auto Scaling lifecycle change\n  // (e.g. via `systemctl stop`), there won't be a lifecycle action to complete.\n  const lifecycleState = await getInstanceLifecycleState(client);\n  if (lifecycleState !== 'Terminating:Wait' && lifecycleState !== 'Warmed:Terminating:Wait') {\n    return;\n  }\n\n  logger.info('Completing Auto Scaling lifecycle action for instance termination...');\n  await client.send(\n    new CompleteLifecycleActionCommand({\n      LifecycleActionResult: 'CONTINUE',\n      AutoScalingGroupName: config.autoScalingGroupName,\n      LifecycleHookName: config.autoScalingTerminatingLifecycleHookName,\n      InstanceId: config.instanceId,\n    }),\n  );\n  logger.info('Completed Auto Scaling lifecycle action for instance termination');\n}\n"]}