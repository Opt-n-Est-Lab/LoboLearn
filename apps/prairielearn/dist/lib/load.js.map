{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/lib/load.ts"],"names":[],"mappings":"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","sourcesContent":["import debugfn from 'debug';\n\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from './config.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst debug = debugfn('prairielearn:load');\n\ninterface JobLoad {\n  startMS: number;\n  warned?: boolean;\n}\n\nclass LoadEstimator {\n  jobType: string;\n  lastEstimateTimeMS: number;\n  lastIncrementTimeMS: number;\n  integratedLoad: number;\n  currentJobs: Record<string, JobLoad>;\n  maxJobCount: number;\n  warnOnOldJobs: boolean;\n  timeoutID: NodeJS.Timeout | null;\n  active: boolean;\n  constructor(jobType: string, maxJobCount?: number, warnOnOldJobs?: boolean) {\n    debug(`LoadEstimator(): jobType = ${jobType}`);\n    this.jobType = jobType;\n    const nowMS = Date.now();\n    this.lastEstimateTimeMS = nowMS;\n    this.lastIncrementTimeMS = nowMS;\n    this.integratedLoad = 0;\n    this.currentJobs = {};\n    this.maxJobCount = maxJobCount || 1;\n    this.warnOnOldJobs = warnOnOldJobs == null ? true : warnOnOldJobs;\n    this.timeoutID = null;\n    this.active = true;\n    this._reportLoad();\n  }\n\n  startJob(id: string) {\n    debug(`LoadEstimator.startJob(): jobType = ${this.jobType}, id = ${id}`);\n    this._addIntegratedLoad();\n    if (Object.prototype.hasOwnProperty.call(this.currentJobs, id)) {\n      logger.error(`load.startJob(): ${this.jobType} id already running: ${id}`);\n    }\n    this.currentJobs[id] = { startMS: Date.now() };\n  }\n\n  endJob(id: string) {\n    debug(`LoadEstimator.endJob(): jobType = ${this.jobType}, id = ${id}`);\n    this._addIntegratedLoad();\n    if (Object.prototype.hasOwnProperty.call(this.currentJobs, id)) {\n      delete this.currentJobs[id];\n    } else {\n      logger.error(`load.endJob(): ${this.jobType} no such id: ${id}`);\n    }\n  }\n\n  close() {\n    debug(`LoadEstimator.close(): jobType = ${this.jobType}`);\n    this.active = false;\n    if (this.timeoutID != null) {\n      debug(`LoadEstimator.close(): jobType = ${this.jobType}, clearing timeout`);\n      clearTimeout(this.timeoutID);\n    }\n  }\n\n  _getAndResetLoadEstimate() {\n    debug(`LoadEstimator._getAndResetLoadEstimate(): jobType = ${this.jobType}`);\n    this._addIntegratedLoad();\n    const nowMS = Date.now();\n    const deltaSeconds = Math.max(1, nowMS - this.lastEstimateTimeMS) / 1000;\n    const loadEstimate = this.integratedLoad / deltaSeconds;\n\n    // reset stats\n    this.lastEstimateTimeMS = nowMS;\n    this.lastIncrementTimeMS = nowMS;\n    this.integratedLoad = 0;\n\n    return loadEstimate;\n  }\n\n  _addIntegratedLoad() {\n    debug(`LoadEstimator._addIntegratedLoad(): jobType = ${this.jobType}`);\n    const currentJobCount = Object.keys(this.currentJobs).length;\n    const nowMS = Date.now();\n    const delta = Math.max(1, nowMS - this.lastIncrementTimeMS) / 1000;\n    this.integratedLoad += delta * currentJobCount;\n    this.lastIncrementTimeMS = nowMS;\n  }\n\n  _reportLoad() {\n    debug(`LoadEstimator._reportLoad(): jobType = ${this.jobType}`);\n    this._warnOldJobs();\n    const params = {\n      // The instance ID used in the `server_loads` table is not quite the same\n      // as the actual instance ID from the config. The config instance ID is\n      // the identifier of the EC2 instance we're running on, but we might be\n      // running multiple PrairieLearn instances on the same EC2 instance. So,\n      // we'll append the port number to get a unique identifier for each\n      // distinct PrairieLearn instance.\n      //\n      // This new value would be more accurately called a \"server ID\".\n      instance_id: `${config.instanceId}:${config.serverPort}`,\n      group_name: config.groupName,\n      job_type: this.jobType,\n      average_jobs: this._getAndResetLoadEstimate(),\n      max_jobs: this.maxJobCount,\n    };\n    sqldb.query(sql.insert_load, params, (err) => {\n      if (err) logger.error('Error reporting load', { err });\n      if (!this.active) return;\n      debug(\n        `LoadEstimator._reportLoad(): jobType = ${this.jobType}, scheduling next call for ${\n          config.reportIntervalSec * 1000\n        } ms`,\n      );\n      this.timeoutID = setTimeout(this._reportLoad.bind(this), config.reportIntervalSec * 1000);\n    });\n  }\n\n  _warnOldJobs() {\n    debug(`LoadEstimator._warnOldJobs(): jobType = ${this.jobType}`);\n    if (!this.warnOnOldJobs) return;\n    const nowMS = Date.now();\n    for (const [id, info] of Object.entries(this.currentJobs)) {\n      if (nowMS - info.startMS > config.maxResponseTimeSec * 1000 && !info.warned) {\n        const details = {\n          jobType: this.jobType,\n          id,\n          ageMS: nowMS - info.startMS,\n          startMS: info.startMS,\n          startTimestamp: new Date(info.startMS).toISOString(),\n        };\n        logger.error('load._warnOldJobs(): job exceeded max response time', details);\n        info.warned = true;\n      }\n    }\n  }\n}\n\nconst estimators: Record<string, LoadEstimator> = {};\n\nexport function initEstimator(jobType: string, maxJobCount: number, warnOnOldJobs?: boolean) {\n  debug(\n    `initEstimator(): jobType = ${jobType}, maxJobCount = ${maxJobCount}, warnOnOldJobs = ${warnOnOldJobs}`,\n  );\n  if (Object.prototype.hasOwnProperty.call(estimators, jobType)) {\n    throw new Error(`duplicate jobType: ${jobType}`);\n  }\n  estimators[jobType] = new LoadEstimator(jobType, maxJobCount, warnOnOldJobs);\n}\n\nexport function startJob(jobType: string, id: string, maxJobCount?: number) {\n  debug(`startJob(): jobType = ${jobType}, id = ${id}, maxJobCount = ${maxJobCount}`);\n  if (!Object.prototype.hasOwnProperty.call(estimators, jobType)) {\n    // lazy estimator creation, needed for unit tests\n    estimators[jobType] = new LoadEstimator(jobType, maxJobCount);\n  }\n  estimators[jobType].startJob(id);\n}\n\nexport function endJob(jobType: string, id: string) {\n  debug(`endJob(): jobType = ${jobType}, id = ${id}`);\n  if (!(jobType in estimators)) throw new Error(`endJob(): no such estimator: ${jobType}`);\n  estimators[jobType].endJob(id);\n}\n\nexport function close() {\n  debug(`close(): ${Object.keys(estimators).length} estimators`);\n  for (const jobType in estimators) {\n    estimators[jobType].close();\n    delete estimators[jobType];\n  }\n}\n"]}