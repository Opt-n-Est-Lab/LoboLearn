{"version":3,"file":"local-cache.js","sourceRoot":"","sources":["../../src/lib/local-cache.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,UAAU;IACrB,SAAS,CAAgB;IACzB,IAAI,CAAmB;IACvB,OAAO,CAAmB;IAC1B;;OAEG;IACH,YAAY,YAA2B,IAAI;QACzC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAElB,MAAM,YAAY,GAAG,GAAG,EAAE;YACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;YACzB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACjB,CAAC,CAAC;QAEF,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE,CAAC;YAC3B,kEAAkE;YAClE,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QAC3D,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,GAAQ,EAAE,KAAU;QACtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,GAAQ;QACV,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxB,CAAC;QACD,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACnC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;CACF","sourcesContent":["export class LocalCache {\n  expirySec: number | null;\n  data: Record<any, any>;\n  oldData: Record<any, any>;\n  /**\n   * @param expirySec Minimum time to keep keys in cache; null means never expire (optional, default null).\n   */\n  constructor(expirySec: number | null = null) {\n    this.expirySec = expirySec;\n    this.data = {};\n    this.oldData = {};\n\n    const clearOldData = () => {\n      this.oldData = this.data;\n      this.data = {};\n    };\n\n    if (this.expirySec != null) {\n      // Unref the timer so it doesn't prevent the process from exiting.\n      setInterval(clearOldData, this.expirySec * 1000).unref();\n    }\n  }\n\n  /**\n   * @param key The key for the value to set.\n   * @param value The value to set.\n   */\n  set(key: any, value: any) {\n    this.data[key] = value;\n  }\n\n  /**\n   * @param key The key for the value to retrieve.\n   * @return The value associated with the key, or undefined if the key is not present in the cache.\n   */\n  get(key: any): any {\n    if (key in this.data) {\n      return this.data[key];\n    }\n    if (key in this.oldData) {\n      this.data[key] = this.oldData[key];\n      delete this.oldData[key];\n      return this.data[key];\n    }\n  }\n}\n"]}