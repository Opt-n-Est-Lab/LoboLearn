{"version":3,"file":"ltiOutcomes.js","sourceRoot":"","sources":["../../src/lib/ltiOutcomes.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from 'node:crypto';\n\nimport _ from 'lodash';\nimport fetch from 'node-fetch';\nimport oauthSignature from 'oauth-signature';\nimport { v4 as uuid } from 'uuid';\nimport * as xml2js from 'xml2js';\n\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst parser = new xml2js.Parser({ explicitArray: false });\nconst builder = new xml2js.Builder();\n\nconst exampleRequest = {\n  imsx_POXEnvelopeRequest: {\n    $: { xmlns: 'http://www.imsglobal.org/services/ltiv1p1/xsd/imsoms_v1p0' },\n    imsx_POXHeader: {\n      imsx_POXRequestHeaderInfo: {\n        imsx_version: 'V1.0',\n        imsx_messageIdentifier: '999999123',\n      },\n    },\n    imsx_POXBody: {\n      replaceResultRequest: {\n        resultRecord: {\n          sourcedGUID: { sourcedId: '3124567' },\n          result: { resultScore: { language: 'en', textString: '0.92' } },\n        },\n      },\n    },\n  },\n};\nfunction xmlReplaceResult(sourcedId: string, score: number, identifier: string) {\n  const Obj = structuredClone(exampleRequest);\n\n  Obj.imsx_POXEnvelopeRequest.imsx_POXHeader.imsx_POXRequestHeaderInfo.imsx_messageIdentifier =\n    identifier;\n  Obj.imsx_POXEnvelopeRequest.imsx_POXBody.replaceResultRequest.resultRecord.sourcedGUID.sourcedId =\n    sourcedId;\n  Obj.imsx_POXEnvelopeRequest.imsx_POXBody.replaceResultRequest.resultRecord.result.resultScore.textString =\n    score.toString();\n\n  const xml = builder.buildObject(Obj);\n  return xml;\n}\n\n/**\n * Check if LTI needs updating for this assessment.\n *\n * @param assessment_instance_id - The assessment instance ID\n */\nexport async function updateScore(assessment_instance_id: string) {\n  if (assessment_instance_id == null) return;\n\n  const scoreResult = await sqldb.queryZeroOrOneRowAsync(sql.get_score, {\n    ai_id: assessment_instance_id,\n  });\n  if (scoreResult.rowCount === 0) return null;\n\n  const info = scoreResult.rows[0];\n\n  let score = info.score_perc / 100;\n  if (score > 1) {\n    score = 1.0;\n  }\n  if (score < 0) {\n    score = 0.0;\n  }\n\n  const body = xmlReplaceResult(info.lis_result_sourcedid, score, info.date.toString());\n\n  // Compute the SHA-1 hash of the body.\n  const shasum = crypto.createHash('sha1');\n  shasum.update(body || '');\n  const sha1 = shasum.digest('hex');\n\n  const oauthParams: Record<string, string> = {\n    oauth_consumer_key: info.consumer_key,\n    oauth_version: '1.0',\n    oauth_timestamp: Math.floor(Date.now() / 1000).toString(),\n    oauth_nonce: uuid().replace(/-/g, ''),\n    oauth_signature_method: 'HMAC-SHA1',\n    oauth_body_hash: Buffer.from(sha1, 'hex').toString('base64'),\n  };\n\n  oauthParams.oauth_signature = oauthSignature.generate(\n    'POST',\n    info.lis_outcome_service_url,\n    oauthParams,\n    info.secret,\n    undefined,\n    { encodeSignature: false },\n  );\n\n  const rfc = new oauthSignature.Rfc3986();\n  const stringifiedParameters = Object.entries(oauthParams)\n    .map(([key, value]) => {\n      return `${key}=\"${rfc.encode(value)}\"`;\n    })\n    .join(',');\n\n  const res = await fetch(info.lis_outcome_service_url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/xml',\n      Authorization: `OAuth ${stringifiedParameters}`,\n    },\n    body,\n  });\n\n  // Inspect the XML result, log the action\n  const result = await parser.parseStringPromise(await res.text());\n  // eslint-disable-next-line you-dont-need-lodash-underscore/get\n  const imsx_codeMajor = _.get(\n    result,\n    [\n      'imsx_POXEnvelopeResponse',\n      'imsx_POXHeader',\n      'imsx_POXResponseHeaderInfo',\n      'imsx_statusInfo',\n      'imsx_codeMajor',\n    ],\n    null,\n  );\n  if (imsx_codeMajor === 'success') {\n    logger.info(\n      `ltiOutcomes.updateScore() ai_id=${assessment_instance_id} score=${score} returned ${result.imsx_POXEnvelopeResponse.imsx_POXHeader.imsx_POXResponseHeaderInfo.imsx_statusInfo.imsx_codeMajor}`,\n    );\n  } else {\n    logger.info(\n      `ltiOutcomes.updateScore() ai_id=${assessment_instance_id} score=${score} did not return success, debugging follows:`,\n    );\n    logger.info('oauthParams:', oauthParams);\n    logger.info('body:', body);\n  }\n}\n\n/*\n** Code used to copy the example XML into a JS object. Included here for\n** reference but not needed to be run each time.\n\n// https://www.imsglobal.org/specs/ltiomv1p0/specification\n\nconst exampleXMLRequest = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<imsx_POXEnvelopeRequest xmlns=\"http://www.imsglobal.org/services/ltiv1p1/xsd/imsoms_v1p0\">\n  <imsx_POXHeader>\n    <imsx_POXRequestHeaderInfo>\n      <imsx_version>V1.0</imsx_version>\n      <imsx_messageIdentifier>999999123</imsx_messageIdentifier>\n    </imsx_POXRequestHeaderInfo>\n  </imsx_POXHeader>\n  <imsx_POXBody>\n    <replaceResultRequest>\n      <resultRecord>\n        <sourcedGUID>\n          <sourcedId>3124567</sourcedId>\n        </sourcedGUID>\n        <result>\n          <resultScore>\n            <language>en</language>\n            <textString>0.92</textString>\n          </resultScore>\n        </result>\n      </resultRecord>\n    </replaceResultRequest>\n  </imsx_POXBody>\n</imsx_POXEnvelopeRequest>\n`;\n\nparser.parseString(exampleXMLRequest, (err, result) => {\n    if (ERR(err)) return;\n    console.log(util.inspect(result, false, null));\n});\n*/\n"]}