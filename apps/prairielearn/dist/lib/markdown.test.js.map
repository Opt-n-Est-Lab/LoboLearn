{"version":3,"file":"markdown.test.js","sourceRoot":"","sources":["../../src/lib/markdown.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,SAAS,oBAAoB,CAAC,QAAgB,EAAE,QAAgB;IAC9D,MAAM,MAAM,GAAG,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;IAClD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;AACzC,CAAC;AAED,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,QAAQ,GAAG,2DAA2D,CAAC;QAC7E,MAAM,QAAQ,GAAG,6DAA6D,CAAC;QAC/E,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,QAAQ,GAAG,6DAA6D,CAAC;QAC/E,MAAM,QAAQ,GAAG,uDAAuD,CAAC;QACzE,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,QAAQ,GAAG,gDAAgD,CAAC;QAClE,MAAM,QAAQ,GAAG,gCAAgC,CAAC;QAClD,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,QAAQ,GAAG,mDAAmD,CAAC;QACrE,MAAM,QAAQ,GAAG,+CAA+C,CAAC;QACjE,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,QAAQ,GAAG,uDAAuD,CAAC;QACzE,MAAM,QAAQ,GAAG,wDAAwD,CAAC;QAC1E,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,QAAQ,GAAG,0DAA0D,CAAC;QAC5E,MAAM,QAAQ,GAAG,uEAAuE,CAAC;QACzF,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,QAAQ,GAAG,4DAA4D,CAAC;QAC9E,MAAM,QAAQ,GAAG,oEAAoE,CAAC;QACtF,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,QAAQ,GAAG,gEAAgE,CAAC;QAClF,MAAM,QAAQ,GAAG,wEAAwE,CAAC;QAC1F,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,QAAQ,GAAG,yEAAyE,CAAC;QAC3F,MAAM,QAAQ,GAAG,iDAAiD,CAAC;QACnE,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport * as markdown from './markdown.js';\n\nfunction testMarkdownQuestion(question: string, expected: string) {\n  const actual = markdown.processQuestion(question);\n  assert.equal(actual?.trim(), expected);\n}\n\ndescribe('Markdown processing', () => {\n  it('renders basic markdown correctly', async () => {\n    const question = '<markdown>\\n# Hello, world!\\nThis **works**.\\n</markdown>';\n    const expected = '<h1>Hello, world!</h1>\\n<p>This <strong>works</strong>.</p>';\n    testMarkdownQuestion(question, expected);\n  });\n\n  it('handles multiple <markdown> tags', async () => {\n    const question = '<markdown>`nice`</markdown><markdown>`also nice`</markdown>';\n    const expected = '<p><code>nice</code></p><p><code>also nice</code></p>';\n    testMarkdownQuestion(question, expected);\n  });\n\n  it('handles code blocks', async () => {\n    const question = '<markdown>\\n```\\nint a = 12;\\n```\\n</markdown>';\n    const expected = '<pl-code>int a = 12;</pl-code>';\n    testMarkdownQuestion(question, expected);\n  });\n\n  it('handles code blocks with language', async () => {\n    const question = '<markdown>\\n```cpp\\nint a = 12;\\n```\\n</markdown>';\n    const expected = '<pl-code language=\"cpp\">int a = 12;</pl-code>';\n    testMarkdownQuestion(question, expected);\n  });\n\n  it('handles code blocks with highlighted lines', async () => {\n    const question = '<markdown>\\n```{1,2-3}\\nint a = 12;\\n```\\n</markdown>';\n    const expected = '<pl-code highlight-lines=\"1,2-3\">int a = 12;</pl-code>';\n    testMarkdownQuestion(question, expected);\n  });\n\n  it('handles code blocks with language and highlighted lines', async () => {\n    const question = '<markdown>\\n```cpp{1,2-3}\\nint a = 12;\\n```\\n</markdown>';\n    const expected = '<pl-code language=\"cpp\" highlight-lines=\"1,2-3\">int a = 12;</pl-code>';\n    testMarkdownQuestion(question, expected);\n  });\n\n  it('handles escaped <markdown> tags', async () => {\n    const question = '<markdown>```html\\n<markdown#></markdown#>\\n```</markdown>';\n    const expected = '<pl-code language=\"html\">&#x3C;markdown>&#x3C;/markdown></pl-code>';\n    testMarkdownQuestion(question, expected);\n  });\n\n  it('handles weird escaped <markdown> tags', async () => {\n    const question = '<markdown>```html\\n<markdown###></markdown###>\\n```</markdown>';\n    const expected = '<pl-code language=\"html\">&#x3C;markdown##>&#x3C;/markdown##></pl-code>';\n    testMarkdownQuestion(question, expected);\n  });\n\n  it('handles empty <markdown> tags', async () => {\n    const question = 'before\\n<markdown></markdown>\\n*between*\\n<markdown>`second`</markdown>';\n    const expected = 'before\\n\\n*between*\\n<p><code>second</code></p>';\n    testMarkdownQuestion(question, expected);\n  });\n});\n"]}