{"version":3,"file":"opsbot.js","sourceRoot":"","sources":["../../src/lib/opsbot.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAiB,MAAM,YAAY,CAAC;AAElD,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,MAAM,UAAU,eAAe;IAC7B,OAAO,CAAC,CAAC,MAAM,CAAC,yBAAyB,CAAC;AAC5C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,GAAW;IAC3C,oCAAoC;IACpC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC,yBAAyB,EAAE;QAC7D,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;QACnC,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;KAChD,CAAC,CAAC;IAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,uBAAuB,EAAE;YACtD,IAAI,EAAE;gBACJ,YAAY,EAAE,QAAQ,CAAC,MAAM;gBAC7B,YAAY,EAAE,MAAM,QAAQ,CAAC,IAAI,EAAE;aACpC;SACF,CAAC,CAAC;IACL,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,GAAW,EACX,OAAsB;IAEtB,MAAM,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC;IAEtC,gDAAgD;IAChD,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,wCAAwC,EAAE;QACrE,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,aAAa,EAAE,UAAU,KAAK,EAAE,EAAE;QACjF,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACnB,IAAI,EAAE,GAAG;YACT,OAAO;YACP,OAAO,EAAE,IAAI;SACd,CAAC;KACH,CAAC,CAAC;IAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,4BAA4B,OAAO,EAAE,EAAE;YACpE,IAAI,EAAE;gBACJ,YAAY,EAAE,QAAQ,CAAC,MAAM;gBAC7B,YAAY,EAAE,MAAM,QAAQ,CAAC,IAAI,EAAE;aACpC;SACF,CAAC,CAAC;IACL,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,GAAW;IACxD,OAAO,gBAAgB,CAAC,GAAG,EAAE,MAAM,CAAC,+BAA+B,CAAC,CAAC;AACvE,CAAC","sourcesContent":["import fetch, { type Response } from 'node-fetch';\n\nimport * as error from '@prairielearn/error';\nimport { logger } from '@prairielearn/logger';\n\nimport { config } from './config.js';\n\nexport function canSendMessages(): boolean {\n  return !!config.secretSlackOpsBotEndpoint;\n}\n\nexport async function sendMessage(msg: string): Promise<null | Response> {\n  // No-op if there's no url specified\n  if (!config.secretSlackOpsBotEndpoint) {\n    return null;\n  }\n\n  const response = await fetch(config.secretSlackOpsBotEndpoint, {\n    method: 'POST',\n    body: JSON.stringify({ text: msg }),\n    headers: { 'Content-Type': 'application/json' },\n  });\n\n  if (!response.ok) {\n    throw new error.AugmentedError('Error sending message', {\n      data: {\n        responseCode: response.status,\n        responseText: await response.text(),\n      },\n    });\n  }\n\n  return response;\n}\n\n/**\n * General interface to send a message from PrairieLearn to Slack.\n * @param msg String message to send.\n * @param channel Channel to send to.  Private channels must have the bot added.\n */\nexport async function sendSlackMessage(\n  msg: string,\n  channel: string | null,\n): Promise<null | Response> {\n  const token = config.secretSlackToken;\n\n  // Log the message if there's no token specified\n  if (!token || !channel) {\n    logger.info(`Slack message:\\n${msg}`);\n    return null;\n  }\n\n  const response = await fetch('https://slack.com/api/chat.postMessage', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\n    body: JSON.stringify({\n      text: msg,\n      channel,\n      as_user: true,\n    }),\n  });\n\n  if (!response.ok) {\n    throw new error.AugmentedError(`Error sending message to ${channel}`, {\n      data: {\n        responseCode: response.status,\n        responseText: await response.text(),\n      },\n    });\n  }\n  return response;\n}\n\n/**\n * Send a message to the secret course requests channel on Slack.\n * @param msg String message to send.\n */\nexport async function sendCourseRequestMessage(msg: string): Promise<null | Response> {\n  return sendSlackMessage(msg, config.secretSlackCourseRequestChannel);\n}\n"]}