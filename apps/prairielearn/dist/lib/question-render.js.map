{"version":3,"file":"question-render.js","sourceRoot":"","sources":["../../src/lib/question-render.ts"],"names":[],"mappings":"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","sourcesContent":["import * as async from 'async';\nimport type { Response } from 'express';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\nimport { run } from '@prairielearn/run';\nimport { generateSignedToken } from '@prairielearn/signed-token';\n\nimport { AssessmentScorePanel } from '../components/AssessmentScorePanel.html.js';\nimport { QuestionFooterContent } from '../components/QuestionContainer.html.js';\nimport {\n  type QuestionContext,\n  type QuestionRenderContext,\n} from '../components/QuestionContainer.types.js';\nimport { QuestionNavSideButton } from '../components/QuestionNavigation.html.js';\nimport { QuestionScorePanelContent } from '../components/QuestionScore.html.js';\nimport {\n  SubmissionBasicSchema,\n  SubmissionDetailedSchema,\n  SubmissionPanel,\n} from '../components/SubmissionPanel.html.js';\nimport type { SubmissionForRender } from '../components/SubmissionPanel.html.js';\nimport { selectAndAuthzVariant, selectVariantsByInstanceQuestion } from '../models/variant.js';\nimport * as questionServers from '../question-servers/index.js';\n\nimport { config } from './config.js';\nimport {\n  type Assessment,\n  type AssessmentInstance,\n  AssessmentInstanceSchema,\n  type AssessmentQuestion,\n  AssessmentQuestionSchema,\n  AssessmentSchema,\n  AssessmentSetSchema,\n  type Course,\n  type CourseInstance,\n  CourseInstanceSchema,\n  CourseSchema,\n  GradingJobSchema,\n  type GroupConfig,\n  GroupConfigSchema,\n  IdSchema,\n  type InstanceQuestion,\n  IssueSchema,\n  type Question,\n  type Submission,\n  SubmissionSchema,\n  type User,\n  type Variant,\n} from './db-types.js';\nimport { getGroupInfo, getQuestionGroupPermissions, getUserRoles } from './groups.js';\nimport { writeCourseIssues } from './issues.js';\nimport * as manualGrading from './manualGrading.js';\nimport type { SubmissionPanels } from './question-render.types.js';\nimport { ensureVariant, getQuestionCourse } from './question-variant.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst IssueRenderDataSchema = IssueSchema.extend({\n  formatted_date: z.string().nullable(),\n  user_uid: z.string().nullable(),\n  user_name: z.string().nullable(),\n  user_email: z.string().nullable(),\n});\n\ntype InstanceQuestionWithAllowGrade = InstanceQuestion & {\n  allow_grade_left_ms: number;\n  allow_grade_date: Date | null;\n  allow_grade_interval: string;\n};\n\nconst SubmissionInfoSchema = z.object({\n  grading_job: GradingJobSchema.nullable(),\n  submission: SubmissionSchema,\n  question_number: z.string().nullable(),\n  next_instance_question: z.object({\n    id: IdSchema.nullable(),\n    sequence_locked: z.boolean().nullable(),\n  }),\n  assessment_question: AssessmentQuestionSchema.nullable(),\n  assessment_instance: AssessmentInstanceSchema.nullable(),\n  assessment: AssessmentSchema.nullable(),\n  assessment_set: AssessmentSetSchema.nullable(),\n  course_instance: CourseInstanceSchema.nullable(),\n  variant_course: CourseSchema,\n  question_course: CourseSchema,\n  formatted_date: z.string(),\n  user_uid: z.string().nullable(),\n  submission_index: z.coerce.number(),\n  submission_count: z.coerce.number(),\n  group_config: GroupConfigSchema.nullable(),\n});\n\n/**\n * To improve performance, we'll only render at most three submissions on page\n * load. If the user requests more, we'll render them on the fly.\n */\nconst MAX_RECENT_SUBMISSIONS = 3;\n\n/**\n * Renders the HTML for a variant.\n *\n * @param variant_course The course for the variant.\n * @param renderSelection Specify which panels should be rendered.\n * @param variant The variant to submit to.\n * @param question The question for the variant.\n * @param submission The current submission to the variant.\n * @param submissions The full list of submissions to the variant.\n * @param question_course The course for the question.\n * @param locals The current locals for the page response.\n */\nasync function render(\n  variant_course: Course,\n  renderSelection: questionServers.RenderSelection,\n  variant: Variant,\n  question: Question,\n  submission: Submission | null,\n  submissions: Submission[],\n  question_course: Course,\n  locals: Record<string, any>,\n): Promise<questionServers.RenderResultData> {\n  const questionModule = questionServers.getModule(question.type);\n\n  const { courseIssues, data } = await questionModule.render(\n    renderSelection,\n    variant,\n    question,\n    submission,\n    submissions,\n    question_course,\n    locals,\n  );\n\n  const studentMessage = 'Error rendering question';\n  const courseData = { variant, question, submission, course: variant_course };\n  // user information may not be populated when rendering a panel.\n  const user_id = locals.user && locals.user.user_id ? locals.user.user_id : null;\n  const authn_user_id = locals && locals.authn_user ? locals.authn_user.user_id : null;\n  await writeCourseIssues(\n    courseIssues,\n    variant,\n    user_id,\n    authn_user_id,\n    studentMessage,\n    courseData,\n  );\n  return data;\n}\n\ninterface QuestionUrls {\n  questionUrl: string;\n  newVariantUrl: string;\n  tryAgainUrl: string;\n  reloadUrl: string;\n  clientFilesQuestionUrl: string;\n  calculationQuestionFileUrl: string;\n  calculationQuestionGeneratedFileUrl: string;\n  clientFilesCourseUrl: string;\n  clientFilesQuestionGeneratedFileUrl: string;\n  baseUrl: string;\n  workspaceUrl?: string;\n}\n\n/**\n * Internal helper function to generate URLs that are used to render\n * question panels.\n *\n * @param urlPrefix The prefix of the generated URLs.\n * @param variant The variant object for this question.\n * @param question The question.\n * @param instance_question The instance question.\n * @return An object containing the named URLs.\n */\nexport function buildQuestionUrls(\n  urlPrefix: string,\n  variant: Variant,\n  question: Question,\n  instance_question: InstanceQuestion | null,\n): QuestionUrls {\n  let urls: QuestionUrls;\n\n  if (!instance_question) {\n    // instructor question pages\n    const questionUrl = urlPrefix + '/question/' + question.id + '/';\n\n    urls = {\n      questionUrl,\n      newVariantUrl: questionUrl + 'preview/',\n      tryAgainUrl: questionUrl + 'preview/',\n      reloadUrl: questionUrl + 'preview/' + '?variant_id=' + variant.id,\n      clientFilesQuestionUrl: questionUrl + 'clientFilesQuestion',\n\n      // necessary for backward compatibility\n      calculationQuestionFileUrl: questionUrl + 'file',\n\n      calculationQuestionGeneratedFileUrl:\n        questionUrl + 'generatedFilesQuestion/variant/' + variant.id,\n\n      clientFilesCourseUrl: questionUrl + 'clientFilesCourse',\n      clientFilesQuestionGeneratedFileUrl:\n        questionUrl + 'generatedFilesQuestion/variant/' + variant.id,\n      baseUrl: urlPrefix,\n    };\n  } else {\n    // student question pages\n    const iqUrl = urlPrefix + '/instance_question/' + instance_question.id + '/';\n\n    urls = {\n      questionUrl: iqUrl,\n      newVariantUrl: iqUrl,\n      tryAgainUrl: iqUrl,\n      reloadUrl: iqUrl + '?variant_id=' + variant.id,\n      clientFilesQuestionUrl: iqUrl + 'clientFilesQuestion',\n\n      // necessary for backward compatibility\n      calculationQuestionFileUrl: iqUrl + 'file',\n\n      calculationQuestionGeneratedFileUrl: iqUrl + 'generatedFilesQuestion/variant/' + variant.id,\n\n      clientFilesCourseUrl: iqUrl + 'clientFilesCourse',\n      clientFilesQuestionGeneratedFileUrl: iqUrl + 'generatedFilesQuestion/variant/' + variant.id,\n      baseUrl: urlPrefix,\n    };\n  }\n\n  if (variant.workspace_id) {\n    urls.workspaceUrl = `/pl/workspace/${variant.workspace_id}`;\n  }\n\n  return urls;\n}\n\nfunction buildLocals({\n  variant,\n  question,\n  instance_question,\n  group_role_permissions,\n  assessment,\n  assessment_instance,\n  assessment_question,\n  group_config,\n  authz_result,\n}: {\n  variant: Variant;\n  question: Question;\n  instance_question?: InstanceQuestionWithAllowGrade | null;\n  group_role_permissions?: {\n    can_view: boolean;\n    can_submit: boolean;\n  } | null;\n  assessment?: Assessment | null;\n  assessment_instance?: AssessmentInstance | null;\n  assessment_question?: AssessmentQuestion | null;\n  group_config?: GroupConfig | null;\n  authz_result?: any;\n}) {\n  const locals = {\n    showGradeButton: false,\n    showSaveButton: false,\n    disableGradeButton: false,\n    disableSaveButton: false,\n    showNewVariantButton: false,\n    showTryAgainButton: false,\n    showTrueAnswer: false,\n    showGradingRequested: false,\n    allowAnswerEditing: false,\n    hasAttemptsOtherVariants: false,\n    variantAttemptsLeft: 0,\n    variantAttemptsTotal: 0,\n    submissions: [],\n\n    // Used for \"auth\" for external grading realtime results\n    // ID is coerced to a string so that it matches what we get back from the client\n    variantToken: generateSignedToken({ variantId: variant.id.toString() }, config.secretKey),\n  };\n\n  if (!assessment || !assessment_instance || !assessment_question || !instance_question) {\n    // instructor question pages\n    locals.showGradeButton = true;\n    locals.showSaveButton = true;\n    locals.allowAnswerEditing = true;\n    locals.showNewVariantButton = true;\n  } else {\n    // student question pages\n    if (assessment.type === 'Homework') {\n      locals.showGradeButton = true;\n      locals.showSaveButton = true;\n      locals.allowAnswerEditing = true;\n      if (!question.single_variant) {\n        locals.hasAttemptsOtherVariants = true;\n        // TODO: can get rid of the nullish coalescing if we mark `tries_per_variant` as `NOT NULL`.\n        locals.variantAttemptsLeft =\n          (assessment_question.tries_per_variant ?? 1) - variant.num_tries;\n        locals.variantAttemptsTotal = assessment_question.tries_per_variant ?? 1;\n      }\n      // TODO: can get rid of the nullish coalescing if we mark `score_perc` as `NOT NULL`.\n      if (question.single_variant && (instance_question.score_perc ?? 0) >= 100.0) {\n        locals.showTrueAnswer = true;\n      }\n    }\n    if (assessment.type === 'Exam') {\n      if (assessment_instance.open && instance_question.open) {\n        locals.showGradeButton = true;\n        locals.showSaveButton = true;\n        locals.allowAnswerEditing = true;\n        locals.variantAttemptsLeft = (instance_question.points_list ?? []).length;\n        locals.variantAttemptsTotal = (instance_question.points_list_original ?? []).length;\n      } else {\n        locals.showTrueAnswer = true;\n      }\n    }\n    if (!assessment.allow_real_time_grading) {\n      locals.showGradeButton = false;\n    }\n    if (instance_question.allow_grade_left_ms > 0) {\n      locals.disableGradeButton = true;\n    }\n  }\n\n  if (\n    !variant.open ||\n    (instance_question && !instance_question.open) ||\n    (assessment_instance && !assessment_instance.open)\n  ) {\n    locals.showGradeButton = false;\n    locals.showSaveButton = false;\n    locals.allowAnswerEditing = false;\n    if (assessment && assessment.type === 'Homework') {\n      locals.showTryAgainButton = true;\n      locals.showTrueAnswer = true;\n    }\n  }\n\n  if (variant.broken_at) {\n    locals.showGradeButton = false;\n    locals.showSaveButton = false;\n    locals.showTryAgainButton = true;\n  }\n\n  // The method to determine if this is a manual-only question depends on the context.\n  // If the question is being rendered in an assessment, we check if there are manual points and no auto points.\n  // If the question is being rendered in question preview, we use the grading method as a proxy.\n  if (\n    assessment_question\n      ? !assessment_question.max_auto_points && assessment_question.max_manual_points\n      : question?.grading_method === 'Manual'\n  ) {\n    locals.showGradeButton = false;\n  }\n\n  if (authz_result && !authz_result.active) {\n    locals.showGradeButton = false;\n    locals.showSaveButton = false;\n    locals.showNewVariantButton = false;\n    locals.allowAnswerEditing = false;\n    locals.showTryAgainButton = false;\n    locals.hasAttemptsOtherVariants = false;\n    locals.showTrueAnswer = true;\n  }\n\n  // Manually disable correct answer panel\n  if (!question?.show_correct_answer) {\n    locals.showTrueAnswer = false;\n  }\n\n  if (group_config?.has_roles && !group_role_permissions?.can_submit) {\n    locals.disableGradeButton = true;\n    locals.disableSaveButton = true;\n  }\n\n  return locals;\n}\n\n/**\n * Render all information needed for a question.\n *\n * @param variant_id The variant to render, or null if it should be generated.\n * @param variant_seed Random seed for variant, or null if it should be generated.\n * @param locals The current locals structure to read/write.\n */\nexport async function getAndRenderVariant(\n  variant_id: string | null,\n  variant_seed: string | null,\n  locals: {\n    urlPrefix: string;\n    course: Course;\n    question: Question;\n    user: User;\n    authn_user: User;\n    course_instance?: CourseInstance;\n    course_instance_id?: string;\n    assessment?: Assessment;\n    assessment_instance?: AssessmentInstance;\n    assessment_question?: AssessmentQuestion;\n    group_config?: GroupConfig;\n    group_role_permissions?: { can_view: boolean; can_submit: boolean };\n    instance_question?: InstanceQuestionWithAllowGrade;\n    authz_data?: Record<string, any>;\n    authz_result?: Record<string, any>;\n    client_fingerprint_id?: string | null;\n    is_administrator: boolean;\n    questionRenderContext?: QuestionRenderContext;\n  },\n  options?: {\n    urlOverrides?: Partial<QuestionUrls>;\n    publicQuestionPreview?: boolean;\n  },\n) {\n  // We write a fair amount of unstructured data back into locals,\n  // so we'll cast it to `any` once so we don't have to do it every time.\n  const resultLocals = locals as any;\n\n  const question_course = await getQuestionCourse(locals.question, locals.course);\n  resultLocals.question_is_shared = await sqldb.queryRow(\n    sql.select_is_shared,\n    { question_id: locals.question.id },\n    z.boolean(),\n  );\n\n  const variant = await run(async () => {\n    if (variant_id != null) {\n      return await selectAndAuthzVariant({\n        unsafe_variant_id: variant_id,\n        variant_course: locals.course,\n        question_id: locals.question.id,\n        course_instance_id: locals.course_instance?.id,\n        instance_question_id: locals.instance_question?.id,\n        authz_data: locals.authz_data,\n        authn_user: locals.authn_user,\n        user: locals.user,\n        is_administrator: locals.is_administrator,\n        publicQuestionPreview: options?.publicQuestionPreview,\n      });\n    } else {\n      const require_open = !!locals.assessment && locals.assessment.type !== 'Exam';\n      const instance_question_id = locals.instance_question?.id ?? null;\n      const course_instance_id = locals.course_instance_id ?? locals.course_instance?.id ?? null;\n      const options = { variant_seed };\n      return await ensureVariant(\n        locals.question.id,\n        instance_question_id,\n        locals.user.user_id,\n        locals.authn_user.user_id,\n        course_instance_id,\n        locals.course,\n        question_course,\n        options,\n        require_open,\n        locals.client_fingerprint_id ?? null,\n      );\n    }\n  });\n\n  resultLocals.variant = variant;\n\n  const {\n    urlPrefix,\n    course,\n    course_instance,\n    question,\n    instance_question,\n    assessment,\n    assessment_instance,\n    assessment_question,\n    group_config,\n    group_role_permissions,\n    authz_data,\n    authz_result,\n  } = locals;\n\n  const urls = buildQuestionUrls(urlPrefix, variant, question, instance_question ?? null);\n  Object.assign(urls, options?.urlOverrides);\n  Object.assign(locals, urls);\n\n  const newLocals = buildLocals({\n    variant,\n    question,\n    instance_question,\n    group_role_permissions,\n    assessment,\n    assessment_instance,\n    assessment_question,\n    group_config,\n    authz_result,\n  });\n  if (\n    (locals.questionRenderContext === 'manual_grading' ||\n      locals.questionRenderContext === 'ai_grading') &&\n    question?.show_correct_answer\n  ) {\n    newLocals.showTrueAnswer = true;\n  }\n  Object.assign(locals, newLocals);\n\n  // We only fully render a small number of submissions on initial page\n  // load; the rest only require basic information like timestamps. As\n  // such, we'll load submissions in two passes: we'll load basic\n  // information for all submissions to this variant, and then we'll\n  // load the full submission for only the submissions that we'll\n  // actually render.\n  const basicSubmissions = await sqldb.queryRows(\n    sql.select_basic_submissions,\n    { variant_id: variant.id },\n    SubmissionBasicSchema,\n  );\n  const submissionCount = basicSubmissions.length;\n\n  const submissions = await run(async () => {\n    if (submissionCount === 0) {\n      return [];\n    }\n\n    // Load detailed information for the submissions that we'll render.\n    // Note that for non-Freeform questions, we unfortunately have to\n    // eagerly load detailed data for all submissions, as that ends up\n    // being serialized in the HTML. v2 questions don't have any easy\n    // way to support async rendering of submissions.\n    const needsAllSubmissions = locals.question.type !== 'Freeform';\n    const submissionsToRender = needsAllSubmissions\n      ? basicSubmissions\n      : basicSubmissions.slice(0, MAX_RECENT_SUBMISSIONS);\n    const submissionDetails = await sqldb.queryRows(\n      sql.select_detailed_submissions,\n      { submission_ids: submissionsToRender.map((s) => s.id) },\n      SubmissionDetailedSchema,\n    );\n\n    return basicSubmissions.map((s, idx) => ({\n      submission_number: submissionCount - idx,\n      ...s,\n      // Both queries order results consistently, so we can just use\n      // the array index to match up the basic and detailed results.\n      ...(idx < submissionDetails.length ? submissionDetails[idx] : {}),\n    })) satisfies SubmissionForRender[];\n  });\n\n  const submission = submissions[0] ?? null;\n  resultLocals.submissions = submissions;\n  resultLocals.submission = submission;\n\n  if (!locals.assessment && locals.question.show_correct_answer && submissionCount > 0) {\n    // On instructor question pages, only show if true answer is allowed for this question and there is at least one submission.\n    resultLocals.showTrueAnswer = true;\n  }\n\n  const effectiveQuestionType = questionServers.getEffectiveQuestionType(locals.question.type);\n  resultLocals.effectiveQuestionType = effectiveQuestionType;\n\n  const renderSelection: questionServers.RenderSelection = {\n    question: true,\n    submissions: submissions.length > 0,\n    answer: resultLocals.showTrueAnswer,\n  };\n  const htmls = await render(\n    course,\n    renderSelection,\n    variant,\n    question,\n    submission as Submission,\n    submissions.slice(0, MAX_RECENT_SUBMISSIONS) as Submission[],\n    question_course,\n    locals,\n  );\n  resultLocals.extraHeadersHtml = htmls.extraHeadersHtml;\n  resultLocals.questionHtml = htmls.questionHtml;\n  resultLocals.submissionHtmls = htmls.submissionHtmls;\n  resultLocals.answerHtml = htmls.answerHtml;\n\n  // Load issues last in case there are issues from rendering.\n  //\n  // We'll only load the data that will be needed for this specific page render.\n  // The checks here should match those in `components/QuestionContainer.html.ts`.\n  const loadExtraData = config.devMode || authz_data?.has_course_permission_view;\n  resultLocals.issues = await sqldb.queryRows(\n    sql.select_issues,\n    {\n      variant_id: variant.id,\n      load_course_data: loadExtraData,\n      load_system_data: loadExtraData,\n    },\n    IssueRenderDataSchema,\n  );\n\n  if (locals.instance_question) {\n    await manualGrading.populateRubricData(locals);\n    await async.eachSeries(submissions, manualGrading.populateManualGradingData);\n  }\n\n  if (locals.question.type !== 'Freeform') {\n    const questionJson = JSON.stringify({\n      questionFilePath: urls.calculationQuestionFileUrl,\n      questionGeneratedFilePath: urls.calculationQuestionGeneratedFileUrl,\n      effectiveQuestionType,\n      course,\n      courseInstance: course_instance,\n      variant: {\n        id: variant.id,\n        params: variant.params,\n      },\n      submittedAnswer: submission?.submitted_answer ?? null,\n      feedback: submission?.feedback ?? null,\n      trueAnswer: resultLocals.showTrueAnswer ? variant.true_answer : null,\n      submissions: submissions.length > 0 ? submissions : null,\n    });\n\n    const encodedJson = encodeURIComponent(questionJson);\n    resultLocals.questionJsonBase64 = Buffer.from(encodedJson).toString('base64');\n  }\n}\n\n/**\n * Renders the panels that change when a grading job is completed; used to send real-time results\n * back to the client. This includes the submission panel by default, and if renderScorePanels is\n * set, also the side panels for score, navigation and the question footer.\n */\nexport async function renderPanelsForSubmission({\n  unsafe_submission_id,\n  question,\n  instance_question,\n  variant,\n  user,\n  urlPrefix,\n  questionContext,\n  questionRenderContext,\n  authorizedEdit,\n  renderScorePanels,\n  groupRolePermissions,\n}: {\n  unsafe_submission_id: string;\n  question: Question;\n  instance_question: InstanceQuestionWithAllowGrade | null;\n  variant: Variant;\n  user: User;\n  urlPrefix: string;\n  questionContext: QuestionContext;\n  questionRenderContext?: QuestionRenderContext;\n  authorizedEdit: boolean;\n  renderScorePanels: boolean;\n  groupRolePermissions: { can_view: boolean; can_submit: boolean } | null;\n}): Promise<SubmissionPanels> {\n  const submissionInfo = await sqldb.queryOptionalRow(\n    sql.select_submission_info,\n    {\n      unsafe_submission_id,\n      question_id: question.id,\n      instance_question_id: instance_question?.id,\n      variant_id: variant.id,\n    },\n    SubmissionInfoSchema,\n  );\n  if (submissionInfo == null) throw new error.HttpStatusError(404, 'Not found');\n\n  const {\n    submission,\n    next_instance_question,\n    assessment_question,\n    assessment_instance,\n    assessment,\n    assessment_set,\n    variant_course,\n    question_course,\n    course_instance,\n    submission_index,\n    submission_count,\n    grading_job,\n    formatted_date,\n    user_uid,\n    question_number,\n    group_config,\n  } = submissionInfo;\n  const previous_variants =\n    variant.instance_question_id == null || assessment_instance == null\n      ? null\n      : await selectVariantsByInstanceQuestion({\n          assessment_instance_id: assessment_instance.id,\n          instance_question_id: variant.instance_question_id,\n        });\n\n  const panels: SubmissionPanels = {\n    submissionPanel: null,\n    extraHeadersHtml: null,\n  };\n\n  const locals = {\n    urlPrefix,\n    plainUrlPrefix: config.urlPrefix,\n    questionRenderContext,\n    ...buildQuestionUrls(urlPrefix, variant, question, instance_question),\n    ...buildLocals({\n      variant,\n      question,\n      instance_question,\n      group_role_permissions: groupRolePermissions,\n      assessment,\n      assessment_instance,\n      assessment_question,\n      group_config,\n    }),\n  };\n\n  await async.parallel([\n    async () => {\n      // Render the submission panel\n      const submissions = [submission];\n\n      const htmls = await render(\n        variant_course,\n        { answer: renderScorePanels && locals.showTrueAnswer, submissions: true, question: false },\n        variant,\n        question,\n        submission,\n        submissions,\n        question_course,\n        locals,\n      );\n\n      panels.answerPanel = locals.showTrueAnswer ? htmls.answerHtml : null;\n      panels.extraHeadersHtml = htmls.extraHeadersHtml;\n\n      const rubric_data = await manualGrading.selectRubricData({\n        assessment_question,\n        submission,\n      });\n      await manualGrading.populateManualGradingData(submission);\n\n      panels.submissionPanel = SubmissionPanel({\n        questionContext,\n        questionRenderContext,\n        question,\n        variant_id: variant.id,\n        assessment_question,\n        instance_question,\n        course_instance_id: course_instance?.id,\n        submission: {\n          ...submission,\n          grading_job,\n          formatted_date,\n          user_uid,\n          submission_number: submission_index,\n        },\n        submissionHtml: htmls.submissionHtmls[0],\n        submissionCount: submission_count,\n        rubric_data,\n        expanded: true,\n        urlPrefix,\n      }).toString();\n    },\n    async () => {\n      // Render the question score panel\n      if (!renderScorePanels) return;\n\n      // The score panel can and should only be rendered for\n      // questions that are part of an assessment\n      if (\n        instance_question == null ||\n        assessment_question == null ||\n        assessment_instance == null ||\n        assessment == null\n      ) {\n        return;\n      }\n\n      panels.questionScorePanel = QuestionScorePanelContent({\n        instance_question,\n        assessment_question,\n        assessment_instance,\n        assessment,\n        question,\n        variant,\n        urlPrefix,\n        instance_question_info: { question_number, previous_variants },\n      }).toString();\n    },\n    async () => {\n      // Render the assessment score panel\n      if (!renderScorePanels) return;\n\n      // As usual, only render if this variant is part of an assessment\n      if (assessment == null || assessment_set == null || assessment_instance == null) return;\n\n      panels.assessmentScorePanel = AssessmentScorePanel({\n        urlPrefix,\n        assessment,\n        assessment_set,\n        assessment_instance,\n      }).toString();\n    },\n    async () => {\n      // Render the question panel footer\n      if (!renderScorePanels) return;\n\n      const group_info = await run(async () => {\n        if (!assessment_instance?.group_id || !group_config) return null;\n\n        return await getGroupInfo(assessment_instance?.group_id, group_config);\n      });\n\n      panels.questionPanelFooter = QuestionFooterContent({\n        resLocals: {\n          variant,\n          question,\n          assessment_question,\n          instance_question,\n          authz_result: { authorized_edit: authorizedEdit },\n          instance_question_info: { previous_variants },\n          group_config,\n          group_info,\n          group_role_permissions: groupRolePermissions,\n          user,\n          ...locals,\n        },\n        questionContext,\n      }).toString();\n    },\n    async () => {\n      if (!renderScorePanels) return;\n\n      // If there is no assessment, the next question button won't exist, so it\n      // does not need to be rendered. If there is no next question, the button\n      // is disabled, so it does not need to be replaced.\n      if (variant.instance_question_id == null || next_instance_question.id == null) return;\n\n      let nextQuestionGroupRolePermissions: { can_view: boolean } | null = null;\n      let userGroupRoles = 'None';\n\n      if (assessment_instance?.group_id && group_config?.has_roles) {\n        nextQuestionGroupRolePermissions = await getQuestionGroupPermissions(\n          next_instance_question.id,\n          assessment_instance.group_id,\n          user.user_id,\n        );\n        userGroupRoles =\n          (await getUserRoles(assessment_instance.group_id, user.user_id))\n            .map((role) => role.role_name)\n            .join(', ') || 'None';\n      }\n\n      panels.questionNavNextButton = QuestionNavSideButton({\n        instanceQuestionId: next_instance_question.id,\n        sequenceLocked: next_instance_question.sequence_locked,\n        urlPrefix,\n        whichButton: 'next',\n        groupRolePermissions: nextQuestionGroupRolePermissions,\n        advanceScorePerc: assessment_question?.advance_score_perc,\n        userGroupRoles,\n      }).toString();\n    },\n  ]);\n  return panels;\n}\n\n/**\n * Expose the renderer in use to the client so that we can easily see\n * which renderer was used for a given request.\n */\nexport function setRendererHeader(res: Response) {\n  const renderer = res.locals.question_renderer;\n  if (renderer) {\n    res.set('X-PrairieLearn-Question-Renderer', renderer);\n  }\n}\n"]}