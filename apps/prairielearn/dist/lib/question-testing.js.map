{"version":3,"file":"question-testing.js","sourceRoot":"","sources":["../../src/lib/question-testing.ts"],"names":[],"mappings":"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","sourcesContent":["import jsonStringifySafe from 'json-stringify-safe';\nimport _ from 'lodash';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { insertGradingJob, updateGradingJobAfterGrading } from '../models/grading-job.js';\nimport { selectUserById } from '../models/user.js';\nimport * as questionServers from '../question-servers/index.js';\n\nimport {\n  type Course,\n  type CourseInstance,\n  type Question,\n  type Submission,\n  SubmissionSchema,\n  type Variant,\n} from './db-types.js';\nimport { gradeVariant, insertSubmission, saveSubmission } from './grading.js';\nimport { writeCourseIssues } from './issues.js';\nimport { getAndRenderVariant } from './question-render.js';\nimport { ensureVariant, getQuestionCourse } from './question-variant.js';\nimport { type ServerJob, createServerJob } from './server-jobs.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ninterface TestResultStats {\n  generateDuration: number;\n  renderDuration: number;\n  gradeDuration?: number;\n}\n\ninterface TestQuestionResults {\n  variant: Variant;\n  expected_submission: Submission | null;\n  test_submission: Submission | null;\n  stats: TestResultStats;\n}\n\ntype TestType = 'correct' | 'incorrect' | 'invalid';\n\n/**\n * Internal worker for testVariant(). Do not call directly.\n * @protected\n *\n * @param variant - The variant to submit to.\n * @param question - The question for the variant.\n * @param variant_course - The course for the variant.\n * @param test_type - The type of test to run.\n * @param user_id - The current effective user.\n * @param authn_user_id - The currently authenticated user.\n * @returns The submission ID.\n */\nasync function createTestSubmission(\n  variant: Variant,\n  question: Question,\n  variant_course: Course,\n  test_type: TestType,\n  user_id: string,\n  authn_user_id: string,\n): Promise<string> {\n  const questionModule = questionServers.getModule(question.type);\n  if (!questionModule.test) {\n    throw new Error('Question type does not support testing, must be Freeform');\n  }\n\n  const question_course = await getQuestionCourse(question, variant_course);\n  const { courseIssues, data } = await questionModule.test(\n    variant,\n    question,\n    question_course,\n    test_type,\n  );\n  const hasFatalIssue = courseIssues.some((issue) => issue.fatal);\n\n  const studentMessage = 'Error creating test submission';\n  const courseData = { variant, question, course: variant_course };\n  await writeCourseIssues(\n    courseIssues,\n    variant,\n    user_id,\n    authn_user_id,\n    studentMessage,\n    courseData,\n  );\n\n  if (hasFatalIssue) data.gradable = false;\n\n  // We discard the returned updated variant here. We don't need it later in\n  // this function, and the caller of this function will re-select the variant\n  // before grading the submission.\n  const { submission_id } = await insertSubmission({\n    submitted_answer: {},\n    raw_submitted_answer: data.raw_submitted_answer,\n    format_errors: data.format_errors,\n    gradable: data.gradable,\n    broken: hasFatalIssue,\n    // The `test` phase is not allowed to mutate `params` and `true_answers`, so\n    // we just pick the original `params` and `true_answer` so we can use our\n    // standard `insertSubmission`.\n    params: variant.params,\n    true_answer: variant.true_answer,\n    feedback: null,\n    credit: null,\n    mode: null,\n    variant_id: variant.id,\n    user_id,\n    auth_user_id: authn_user_id,\n    client_fingerprint_id: null,\n  });\n\n  const grading_job = await insertGradingJob({ submission_id, authn_user_id });\n\n  await updateGradingJobAfterGrading({\n    grading_job_id: grading_job.id,\n    submitted_answer: {},\n    format_errors: data.format_errors,\n    gradable: data.gradable,\n    broken: hasFatalIssue,\n    params: data.params,\n    true_answer: data.true_answer,\n    feedback: {},\n    partial_scores: data.partial_scores,\n    score: data.score,\n  });\n\n  return submission_id;\n}\n\n/**\n * Internal worker for testVariant(). Do not call directly.\n * @protected\n *\n * @param expected_submission - Generated reference submission data.\n * @param test_submission - Computed submission to be tested.\n * @returns A list of errors encountered during comparison.\n */\nfunction compareSubmissions(expected_submission: Submission, test_submission: Submission): Error[] {\n  const courseIssues: Error[] = [];\n\n  const checkEqual = (name, var1, var2) => {\n    const json1 = jsonStringifySafe(var1);\n    const json2 = jsonStringifySafe(var2);\n    if (!_.isEqual(var1, var2)) {\n      courseIssues.push(new Error(`\"${name}\" mismatch: expected \"${json1}\" but got \"${json2}\"`));\n    }\n  };\n\n  if (expected_submission.broken) {\n    courseIssues.push(new Error('expected_submission is broken, skipping tests'));\n    return courseIssues;\n  }\n  if (test_submission.broken) {\n    courseIssues.push(new Error('test_submission is broken, skipping tests'));\n    return courseIssues;\n  }\n  checkEqual('gradable', expected_submission.gradable, test_submission.gradable);\n  checkEqual(\n    'format_errors keys',\n    Object.keys(expected_submission.format_errors ?? {}),\n    Object.keys(test_submission.format_errors ?? {}),\n  );\n  if (!test_submission.gradable || !expected_submission.gradable) {\n    return courseIssues;\n  }\n  checkEqual('partial_scores', expected_submission.partial_scores, test_submission.partial_scores);\n  checkEqual('score', expected_submission.score, test_submission.score);\n  return courseIssues;\n}\n\n/**\n * Internal worker for _testQuestion(). Do not call directly.\n * Tests a question variant. Issues will be inserted into the issues table.\n * @protected\n *\n * @param variant - The variant to submit to.\n * @param question - The question for the variant.\n * @param course - The course for the variant.\n * @param test_type - The type of test to run.\n * @param user_id - The current effective user.\n * @param authn_user_id - The currently authenticated user.\n */\nasync function testVariant(\n  variant: Variant,\n  question: Question,\n  course: Course,\n  test_type: TestType,\n  user_id: string,\n  authn_user_id: string,\n): Promise<{ expected_submission: Submission; test_submission: Submission }> {\n  const expected_submission_id = await createTestSubmission(\n    variant,\n    question,\n    course,\n    test_type,\n    user_id,\n    authn_user_id,\n  );\n  const expected_submission = await selectSubmission(expected_submission_id);\n\n  const submission_data = {\n    variant_id: variant.id,\n    user_id,\n    auth_user_id: authn_user_id,\n    submitted_answer: expected_submission.raw_submitted_answer || {},\n  };\n  const { submission_id: test_submission_id, variant: updated_variant } = await saveSubmission(\n    submission_data,\n    variant,\n    question,\n    course,\n  );\n  await gradeVariant(\n    updated_variant,\n    test_submission_id,\n    question,\n    course,\n    user_id,\n    authn_user_id,\n    true,\n  );\n  const test_submission = await selectSubmission(test_submission_id);\n\n  const courseIssues = compareSubmissions(expected_submission, test_submission);\n  const studentMessage = 'Question test failure';\n  const courseData = {\n    variant: updated_variant,\n    question,\n    course,\n    expected_submission,\n    test_submission,\n  };\n  await writeCourseIssues(\n    courseIssues,\n    variant,\n    user_id,\n    authn_user_id,\n    studentMessage,\n    courseData,\n  );\n  return { expected_submission, test_submission };\n}\n\n/**\n * Test a question. Issues will be inserted into the issues table.\n *\n * @param question - The question for the variant.\n * @param variant_course - The course for the variant.\n * @param authn_user_id - The currently authenticated user.\n * @param test_type - The type of test to run.\n */\nasync function testQuestion(\n  question: Question,\n  course_instance: CourseInstance | null,\n  variant_course: Course,\n  test_type: TestType,\n  authn_user_id: string,\n  user_id: string,\n): Promise<TestQuestionResults> {\n  let generateDuration;\n  let renderDuration;\n  let gradeDuration;\n\n  let variant;\n  let expected_submission: Submission | null = null;\n  let test_submission: Submission | null = null;\n\n  const question_course = await getQuestionCourse(question, variant_course);\n  const instance_question_id = null;\n  const course_instance_id = (course_instance && course_instance.id) || null;\n  const options = {};\n  const require_open = true;\n  const client_fingerprint_id = null;\n  const generateStart = Date.now();\n  try {\n    variant = await ensureVariant(\n      question.id,\n      instance_question_id,\n      authn_user_id,\n      authn_user_id,\n      course_instance_id,\n      variant_course,\n      question_course,\n      options,\n      require_open,\n      client_fingerprint_id,\n    );\n  } finally {\n    const generateEnd = Date.now();\n    generateDuration = generateEnd - generateStart;\n  }\n\n  const renderStart = Date.now();\n  try {\n    const user = await selectUserById(user_id);\n    const authn_user = await selectUserById(authn_user_id);\n    await getAndRenderVariant(variant.id, null, {\n      question,\n      course: variant_course,\n      urlPrefix: `/pl/course/${variant_course.id}`,\n      user,\n      authn_user,\n      is_administrator: false,\n    });\n  } finally {\n    const renderEnd = Date.now();\n    renderDuration = renderEnd - renderStart;\n  }\n\n  if (!variant.broken_at) {\n    const gradeStart = Date.now();\n    try {\n      ({ expected_submission, test_submission } = await testVariant(\n        variant,\n        question,\n        variant_course,\n        test_type,\n        user_id,\n        authn_user_id,\n      ));\n    } finally {\n      const gradeEnd = Date.now();\n      gradeDuration = gradeEnd - gradeStart;\n    }\n  }\n\n  const stats = { generateDuration, renderDuration, gradeDuration };\n  return { variant, expected_submission, test_submission, stats };\n}\n\n/**\n * Internal worker for _testQuestion(). Do not call directly.\n * Runs a single test.\n * @protected\n *\n * @param logger - The server job to run within.\n * @param showDetails - Whether to display test data details.\n * @param question - The question for the variant.\n * @param course - The course for the variant.\n * @param test_type - The type of test to run.\n * @param user_id - The current effective user.\n * @param authn_user_id - The currently authenticated user.\n */\nasync function runTest(\n  logger: ServerJob,\n  showDetails: boolean,\n  question: Question,\n  course_instance: CourseInstance | null,\n  course: Course,\n  test_type: TestType,\n  user_id: string,\n  authn_user_id: string,\n): Promise<{ success: boolean; stats: TestResultStats }> {\n  logger.verbose('Testing ' + question.qid);\n  const { variant, expected_submission, test_submission, stats } = await testQuestion(\n    question,\n    course_instance,\n    course,\n    test_type,\n    authn_user_id,\n    user_id,\n  );\n\n  if (showDetails) {\n    const variantKeys = ['broken_at', 'options', 'params', 'true_answer', 'variant_seed'];\n    const submissionKeys = [\n      'broken',\n      'correct',\n      'feedback',\n      'format_errors',\n      'gradable',\n      'grading_method',\n      'partial_scores',\n      'raw_submitted_answer',\n      'score',\n      'submitted_answer',\n      'true_answer',\n    ];\n    logger.verbose('variant:\\n' + jsonStringifySafe(_.pick(variant, variantKeys), null, '    '));\n    if (expected_submission) {\n      logger.verbose(\n        'expected_submission:\\n' +\n          jsonStringifySafe(_.pick(expected_submission, submissionKeys), null, '    '),\n      );\n    }\n    if (test_submission) {\n      logger.verbose(\n        'test_submission:\\n' +\n          jsonStringifySafe(_.pick(test_submission, submissionKeys), null, '    '),\n      );\n    }\n  }\n\n  const issueCount = await sqldb.queryRow(\n    sql.select_issue_count_for_variant,\n    { variant_id: variant.id },\n    z.number(),\n  );\n\n  if (issueCount > 0) {\n    logger.verbose(`ERROR: ${issueCount} issues encountered during test.`);\n  } else {\n    logger.verbose('Success: no issues during test');\n  }\n\n  return { success: issueCount === 0, stats };\n}\n\n/**\n * Start a job sequence to test a question.\n *\n * @param count - The number of times to test, will run each possible test ('correct, 'incorrect,' invalid') this many times.\n * @param showDetails - Whether to display test data details.\n * @param question - The question for the variant.\n * @param course_instance - The course instance for the variant; may be null for instructor questions\n * @param course - The course for the variant.\n * @param user_id - The current effective user.\n * @param authn_user_id - The currently authenticated user.\n * @return The job sequence ID.\n */\nexport async function startTestQuestion(\n  count: number,\n  showDetails: boolean,\n  question: Question,\n  course_instance: CourseInstance | null,\n  course: Course,\n  user_id: string,\n  authn_user_id: string,\n): Promise<string> {\n  let success = true;\n  const test_types: TestType[] = ['correct', 'incorrect', 'invalid'] as const;\n\n  const serverJob = await createServerJob({\n    courseId: course.id,\n    userId: user_id,\n    authnUserId: authn_user_id,\n    type: 'test_question',\n    description: 'Test ' + question.qid,\n  });\n\n  const stats: TestResultStats[] = [];\n\n  serverJob.executeInBackground(async (job) => {\n    for (const iter of Array(count * test_types.length).keys()) {\n      const type = test_types[iter % test_types.length];\n      job.verbose(`Test ${Math.floor(iter / test_types.length) + 1}, type ${type}`);\n      const result = await runTest(\n        job,\n        showDetails,\n        question,\n        course_instance,\n        course,\n        type,\n        user_id,\n        authn_user_id,\n      );\n      success = success && result.success;\n      if (result.stats) {\n        stats.push(result.stats);\n      }\n    }\n\n    function printStats(label: string, key: keyof TestResultStats) {\n      let min = Number.MAX_SAFE_INTEGER;\n      let max = 0;\n      let count = 0;\n      let sum = 0;\n      stats.forEach((stat) => {\n        const value = stat[key];\n        if (value == null) return;\n        count += 1;\n        sum += value;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      });\n\n      if (count === 0) {\n        job.verbose(`${label} No data`);\n        return;\n      }\n\n      const avg = Math.round((sum / count) * 100) / 100;\n      job.info(`${label} ${count} tests, min ${min}ms, avg ${avg}ms, max ${max}ms`);\n    }\n\n    printStats('Generate/prepare:', 'generateDuration');\n    printStats('Render:          ', 'renderDuration');\n    printStats('Parse/grade:     ', 'gradeDuration');\n\n    if (!success) {\n      throw new Error('Some tests failed. See the \"Issues\" page for details.');\n    }\n  });\n\n  return serverJob.jobSequenceId;\n}\n\nasync function selectSubmission(submission_id: string): Promise<Submission> {\n  return await sqldb.queryRow(sql.select_submission_by_id, { submission_id }, SubmissionSchema);\n}\n"]}