{"version":3,"file":"redirect.js","sourceRoot":"","sources":["../../src/lib/redirect.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,YAAY;IACP,GAAG,CAAS;IACZ,MAAM,CAAS;IAE/B,YAAY,GAAW,EAAE,MAAM,GAAG,GAAG;QACnC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;CACF;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,wBAAwB,CACtC,GAAY,EACZ,GAAY,EACZ,GAAa,EACb,IAAkB;IAElB,IAAI,GAAG,YAAY,YAAY,EAAE,CAAC;QAChC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO;IACT,CAAC;IAED,IAAI,CAAC,GAAG,CAAC,CAAC;AACZ,CAAC","sourcesContent":["import type { NextFunction, Request, Response } from 'express';\n\nexport class HttpRedirect {\n  public readonly url: string;\n  public readonly status: number;\n\n  constructor(url: string, status = 302) {\n    this.url = url;\n    this.status = status;\n  }\n}\n\n/**\n * Handles \"thrown\" redirects. If an instance of `HttpRedirect` is thrown, it\n * will end up here eventually. When we get it, we'll perform the redirect.\n *\n * This is useful as middleware are replaced with functions. Middleware has the\n * very nice property that it can easily short-circuit the request and immediately\n * send a response. This is not natively possible with functions, so we have to\n * abuse the error handling mechanism to achieve the same effect.\n */\nexport function thrownRedirectMiddleware(\n  err: unknown,\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) {\n  if (err instanceof HttpRedirect) {\n    res.redirect(err.status, err.url);\n    return;\n  }\n\n  next(err);\n}\n"]}