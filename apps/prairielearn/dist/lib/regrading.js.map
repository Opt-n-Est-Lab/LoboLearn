{"version":3,"file":"regrading.js","sourceRoot":"","sources":["../../src/lib/regrading.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport { logger } from '@prairielearn/logger';\nimport {\n  callRow,\n  loadSqlEquiv,\n  queryRow,\n  queryRows,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\n\nimport { updateAssessmentInstance } from './assessment.js';\nimport {\n  AssessmentInstanceSchema,\n  AssessmentSchema,\n  IdSchema,\n  QuestionSchema,\n} from './db-types.js';\nimport * as ltiOutcomes from './ltiOutcomes.js';\nimport { createServerJob } from './server-jobs.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst RegradeAssessmentInstanceInfoSchema = z.object({\n  assessment_instance_label: z.string(),\n  user_uid: z.string().nullable(),\n  group_name: z.string().nullable(),\n  assessment_id: IdSchema,\n  course_instance_id: IdSchema,\n  course_id: IdSchema,\n});\nconst RegradeAssessmentInfoSchema = z.object({\n  assessment_label: z.string(),\n  course_instance_id: IdSchema,\n  course_id: IdSchema,\n});\nconst RegradeAssessmentInstancesSchema = z.object({\n  assessment_instance_id: IdSchema,\n  assessment_instance_label: z.string(),\n  user_uid: z.string(),\n});\nconst AssessmentInstancesGradeSchema = z.object({\n  updated: z.boolean(),\n  new_points: z.number(),\n  new_score_perc: z.number(),\n});\n\n/**\n * @returns The job sequence ID\n */\nexport async function regradeAssessmentInstance(\n  assessment_instance_id: string,\n  user_id: string,\n  authn_user_id: string,\n): Promise<string> {\n  const assessmentInstance = await queryRow(\n    sql.select_regrade_assessment_instance_info,\n    { assessment_instance_id },\n    RegradeAssessmentInstanceInfoSchema,\n  );\n  const assessment_instance_label = assessmentInstance.assessment_instance_label;\n  let jobInfo;\n  if (assessmentInstance.user_uid) {\n    jobInfo = assessmentInstance.user_uid;\n  } else {\n    jobInfo = 'group name ' + assessmentInstance.group_name;\n  }\n  const serverJob = await createServerJob({\n    courseId: assessmentInstance.course_id,\n    courseInstanceId: assessmentInstance.course_instance_id,\n    assessmentId: assessmentInstance.assessment_id,\n    userId: user_id,\n    authnUserId: authn_user_id,\n    type: 'regrade_assessment_instance',\n    description: 'Regrade ' + assessment_instance_label + ' for ' + jobInfo,\n  });\n\n  // We've now triggered the callback to our caller, but we\n  // continue executing below to launch the jobs themselves.\n\n  serverJob.executeInBackground(async (job) => {\n    job.info('Regrading ' + assessment_instance_label + ' for ' + jobInfo);\n    const regrade = await regradeSingleAssessmentInstance({\n      assessment_instance_id,\n      authn_user_id,\n    });\n    job.info('Regrading complete');\n    if (regrade.updated) {\n      job.info('Questions updated: ' + regrade.updatedQuestionQids.join(', '));\n      job.info(\n        'New score: ' +\n          Math.floor(regrade.newScorePerc) +\n          '% (was ' +\n          Math.floor(regrade.oldScorePerc ?? 0) +\n          '%)',\n      );\n    } else {\n      job.info('No changes made');\n    }\n    await ltiOutcomes.updateScore(assessment_instance_id);\n  });\n  return serverJob.jobSequenceId;\n}\n\n/**\n * @returns The job sequence ID\n */\nexport async function regradeAllAssessmentInstances(\n  assessment_id: string,\n  user_id: string,\n  authn_user_id: string,\n): Promise<string> {\n  const { assessment_label, course_instance_id, course_id } = await queryRow(\n    sql.select_regrade_assessment_info,\n    { assessment_id },\n    RegradeAssessmentInfoSchema,\n  );\n\n  const serverJob = await createServerJob({\n    courseId: course_id,\n    courseInstanceId: course_instance_id,\n    assessmentId: assessment_id,\n    userId: user_id,\n    authnUserId: authn_user_id,\n    type: 'regrade_assessment',\n    description: 'Regrade ' + assessment_label,\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    job.info('Regrading all assessment instances for ' + assessment_label);\n\n    const assessment_instances = await queryRows(\n      sql.select_regrade_assessment_instances,\n      { assessment_id },\n      RegradeAssessmentInstancesSchema,\n    );\n\n    let updated_count = 0;\n    let error_count = 0;\n\n    // accumulate output lines in the \"output\" variable and actually\n    // output put them every 100 lines, to avoid spamming the updates\n\n    let output: string | null = null;\n    let output_count = 0;\n    for (const row of assessment_instances) {\n      let msg: string;\n      try {\n        const regrade = await regradeSingleAssessmentInstance({\n          assessment_instance_id: row.assessment_instance_id,\n          authn_user_id,\n        });\n        msg = `Regraded ${row.assessment_instance_label} for ${row.user_uid}: `;\n        if (regrade.updated) {\n          updated_count++;\n          msg += `New score: ${Math.floor(\n            regrade.newScorePerc,\n          )}% (was ${Math.floor(regrade.oldScorePerc ?? 0)}%), Questions updated: ${regrade.updatedQuestionQids.join(', ')}`;\n        } else {\n          msg += 'No changes made';\n        }\n        await ltiOutcomes.updateScore(row.assessment_instance_id);\n      } catch (err) {\n        logger.error('error while regrading', { row, err });\n        error_count++;\n        msg = `ERROR updating ${row.assessment_instance_label} for ${row.user_uid}`;\n      }\n      output = (output == null ? '' : `${output}\\n`) + msg;\n\n      output_count++;\n      if (output_count >= 100) {\n        job.info(output);\n        output = null;\n        output_count = 0;\n      }\n    }\n    if (output != null) {\n      job.info(output);\n    }\n    job.info('Regrading complete');\n    job.info('Number of assessment instances updated: ' + updated_count);\n    if (error_count > 0) {\n      job.error('Number of errors: ' + error_count);\n      job.fail('Errors occurred while regrading, see output for details');\n    }\n  });\n\n  return serverJob.jobSequenceId;\n}\n\nasync function regradeSingleAssessmentInstance({\n  assessment_instance_id,\n  authn_user_id,\n}: {\n  assessment_instance_id: string;\n  authn_user_id: string;\n}) {\n  return await runInTransactionAsync(async () => {\n    const assessmentInstance = await queryRow(\n      sql.select_and_lock_assessment_instance,\n      { assessment_instance_id },\n      AssessmentInstanceSchema.extend({ assessment_type: AssessmentSchema.shape.type }),\n    );\n\n    const assessmentUpdated =\n      assessmentInstance.assessment_type === 'Homework'\n        ? await updateAssessmentInstance(\n            assessment_instance_id,\n            authn_user_id,\n            false, // Do not trigger a grade (we'll do that below)\n          )\n        : false;\n\n    const updatedQuestionQids = await queryRows(\n      sql.regrade_instance_questions,\n      { assessment_instance_id, authn_user_id },\n      QuestionSchema.shape.qid,\n    );\n\n    const { updated: gradeUpdated, new_score_perc: newScorePerc } = await callRow(\n      'assessment_instances_grade',\n      [\n        assessment_instance_id,\n        authn_user_id,\n        null, // credit\n        true, // only_log_if_score_updated\n      ],\n      AssessmentInstancesGradeSchema,\n    );\n\n    return {\n      updated: assessmentUpdated || updatedQuestionQids.length > 0 || gradeUpdated,\n      updatedQuestionQids,\n      newScorePerc,\n      oldScorePerc: assessmentInstance.score_perc,\n    };\n  });\n}\n"]}