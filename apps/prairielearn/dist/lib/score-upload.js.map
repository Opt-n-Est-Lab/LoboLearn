{"version":3,"file":"score-upload.js","sourceRoot":"","sources":["../../src/lib/score-upload.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,aAAa,MAAM,cAAc,CAAC;AACzC,OAAO,CAAC,MAAM,QAAQ,CAAC;AACvB,OAAO,KAAK,WAAW,MAAM,aAAa,CAAC;AAC3C,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,8BAA8B,EAAE,6BAA6B,EAAE,MAAM,iBAAiB,CAAC;AAChG,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACzC,OAAO,KAAK,aAAa,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AAEnD,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,CAAC;IACpC,gBAAgB,EAAE,CAAC,CAAC,MAAM,EAAE;IAC5B,kBAAkB,EAAE,QAAQ;IAC5B,SAAS,EAAE,QAAQ;CACpB,CAAC,CAAC;AAEH;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,aAAqB,EACrB,OAA+C,EAC/C,OAAe,EACf,aAAqB;IAErB,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,SAAS,EAAE,GAAG,MAAM,KAAK,CAAC,QAAQ,CAC9E,GAAG,CAAC,sBAAsB,EAC1B,EAAE,aAAa,EAAE,EACjB,oBAAoB,CACrB,CAAC;IAEF,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC;QACtC,QAAQ,EAAE,SAAS;QACnB,gBAAgB,EAAE,kBAAkB;QACpC,YAAY,EAAE,aAAa;QAC3B,MAAM,EAAE,OAAO;QACf,WAAW,EAAE,aAAa;QAC1B,IAAI,EAAE,iCAAiC;QACvC,WAAW,EAAE,6BAA6B,GAAG,gBAAgB;KAC9D,CAAC,CAAC;IAEH,SAAS,CAAC,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC1C,GAAG,CAAC,IAAI,CAAC,gCAAgC,GAAG,gBAAgB,CAAC,CAAC;QAE9D,gEAAgE;QAChE,2DAA2D;QAC3D,IAAI,MAAM,GAAkB,IAAI,CAAC;QACjC,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,eAAe,GAAG,GAAG,CAAC;QAE1B,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,YAAY,GAAG,CAAC,CAAC;QAErB,GAAG,CAAC,IAAI,CAAC,8BAA8B,OAAO,CAAC,YAAY,MAAM,OAAO,CAAC,IAAI,SAAS,CAAC,CAAC;QACxF,MAAM,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,EAAE;YAC7D,QAAQ,EAAE,MAAM;SACjB,CAAC,CAAC;QACH,MAAM,YAAY,GAAG,SAAS,CAAC;YAC7B,SAAS,EAAE;gBACT,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,QAAQ;gBACpB,MAAM,EAAE,QAAQ;gBAChB,iBAAiB,EAAE,QAAQ;gBAC3B,aAAa,EAAE,QAAQ;gBACvB,eAAe,EAAE,QAAQ;gBACzB,WAAW,EAAE,QAAQ;gBACrB,aAAa,EAAE,QAAQ;aACxB;YACD,YAAY,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,IAAI,CAAC;YACH,MAAM,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;gBACxE,gDAAgD;gBAChD,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;gBACnD,IAAI,CAAC;oBACH,IAAI,MAAM,8BAA8B,CAAC,IAAI,EAAE,aAAa,EAAE,aAAa,CAAC,EAAE,CAAC;wBAC7E,YAAY,EAAE,CAAC;wBACf,+DAA+D;wBAC/D,gEAAgE;wBAChE,0BAA0B;wBAC1B,MAAM,GAAG,GAAG,sBAAsB,MAAM,GAAG,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;wBACxE,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;4BACnB,MAAM,GAAG,GAAG,CAAC;wBACf,CAAC;6BAAM,CAAC;4BACN,MAAM,IAAI,IAAI,GAAG,GAAG,CAAC;wBACvB,CAAC;oBACH,CAAC;yBAAM,CAAC;wBACN,YAAY,EAAE,CAAC;wBACf,YAAY;oBACd,CAAC;gBACH,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACb,UAAU,EAAE,CAAC;oBACb,MAAM,GAAG,GAAG,6BAA6B,MAAM,GAAG,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;oBACvF,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;wBACnB,MAAM,GAAG,GAAG,CAAC;oBACf,CAAC;yBAAM,CAAC;wBACN,MAAM,IAAI,IAAI,GAAG,GAAG,CAAC;oBACvB,CAAC;gBACH,CAAC;gBACD,WAAW,EAAE,CAAC;gBACd,IAAI,WAAW,IAAI,eAAe,EAAE,CAAC;oBACnC,GAAG,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;oBAC1B,MAAM,GAAG,IAAI,CAAC;oBACd,WAAW,GAAG,CAAC,CAAC;oBAChB,eAAe,IAAI,CAAC,CAAC,CAAC,sBAAsB;gBAC9C,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;gBAAS,CAAC;YACT,0CAA0C;YAC1C,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;gBACnB,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;QAED,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;YACrB,GAAG,CAAC,IAAI,CAAC,mCAAmC,YAAY,4BAA4B,CAAC,CAAC;QACxF,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,IAAI,CAAC,mCAAmC,YAAY,YAAY,CAAC,CAAC;YACtE,GAAG,CAAC,KAAK,CAAC,kBAAkB,UAAU,YAAY,CAAC,CAAC;QACtD,CAAC;QACD,IAAI,YAAY,KAAK,CAAC,EAAE,CAAC;YACvB,GAAG,CAAC,IAAI,CAAC,GAAG,YAAY,kEAAkE,CAAC,CAAC;QAC9F,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC,aAAa,CAAC;AACjC,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,aAAqB,EACrB,OAA+C,EAC/C,OAAe,EACf,aAAqB;IAErB,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC1C,CAAC;IACD,MAAM,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,SAAS,EAAE,GAAG,MAAM,KAAK,CAAC,QAAQ,CAC9E,GAAG,CAAC,sBAAsB,EAC1B,EAAE,aAAa,EAAE,EACjB,oBAAoB,CACrB,CAAC;IAEF,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC;QACtC,QAAQ,EAAE,SAAS;QACnB,gBAAgB,EAAE,kBAAkB;QACpC,YAAY,EAAE,aAAa;QAC3B,MAAM,EAAE,OAAO;QACf,WAAW,EAAE,aAAa;QAC1B,IAAI,EAAE,mCAAmC;QACzC,WAAW,EAAE,0BAA0B,GAAG,gBAAgB;KAC3D,CAAC,CAAC;IAEH,SAAS,CAAC,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC1C,GAAG,CAAC,OAAO,CAAC,6BAA6B,GAAG,gBAAgB,CAAC,CAAC;QAE9D,gEAAgE;QAChE,2DAA2D;QAC3D,IAAI,MAAM,GAAkB,IAAI,CAAC;QACjC,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,eAAe,GAAG,GAAG,CAAC;QAE1B,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,GAAG,CAAC,IAAI,CAAC,8BAA8B,OAAO,CAAC,YAAY,MAAM,OAAO,CAAC,IAAI,SAAS,CAAC,CAAC;QACxF,MAAM,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,EAAE;YAC7D,QAAQ,EAAE,MAAM;SACjB,CAAC,CAAC;QACH,MAAM,YAAY,GAAG,SAAS,CAAC;YAC7B,SAAS,EAAE;gBACT,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,QAAQ;gBACpB,MAAM,EAAE,QAAQ;aACjB;YACD,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,IAAI,CAAC;YACH,MAAM,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;gBACxE,gDAAgD;gBAChD,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC9B,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;gBACzB,CAAC,CAAC,CAAC;gBACH,MAAM,GAAG,GAAG,uBAAuB,MAAM,GAAG,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzE,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;oBACnB,MAAM,GAAG,GAAG,CAAC;gBACf,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,IAAI,GAAG,GAAG,CAAC;gBACvB,CAAC;gBACD,IAAI,CAAC;oBACH,MAAM,gCAAgC,CAAC,IAAI,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;oBAC3E,YAAY,EAAE,CAAC;gBACjB,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACb,UAAU,EAAE,CAAC;oBACb,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;oBACxB,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;wBACnB,MAAM,GAAG,GAAG,CAAC;oBACf,CAAC;yBAAM,CAAC;wBACN,MAAM,IAAI,IAAI,GAAG,GAAG,CAAC;oBACvB,CAAC;gBACH,CAAC;gBACD,WAAW,EAAE,CAAC;gBACd,IAAI,WAAW,IAAI,eAAe,EAAE,CAAC;oBACnC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBACpB,MAAM,GAAG,IAAI,CAAC;oBACd,WAAW,GAAG,CAAC,CAAC;oBAChB,eAAe,IAAI,CAAC,CAAC,CAAC,sBAAsB;gBAC9C,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;gBAAS,CAAC;YACT,0CAA0C;YAC1C,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;gBACnB,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;QAED,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;YACrB,GAAG,CAAC,OAAO,CACT,mCAAmC,YAAY,uCAAuC,CACvF,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,OAAO,CAAC,mCAAmC,YAAY,uBAAuB,CAAC,CAAC;YACpF,GAAG,CAAC,KAAK,CAAC,kBAAkB,UAAU,uBAAuB,CAAC,CAAC;QACjE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC,aAAa,CAAC;AACjC,CAAC;AAED,sDAAsD;AACtD,SAAS,qBAAqB,CAAC,IAAyB,EAAE,GAAW;IACnE,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;IAChC,IAAI,KAAK,KAAK,EAAE;QAAE,OAAO,IAAI,CAAC;IAC9B,OAAO,KAAK,CAAC;AACf,CAAC;AAED,sDAAsD;AACtD,SAAS,4BAA4B,CAAC,IAAyB,EAAE,GAAW;IAC1E,MAAM,KAAK,GAAG,qBAAqB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/C,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QACjE,MAAM,IAAI,KAAK,CAAC,YAAY,GAAG,yBAAyB,CAAC,CAAC;IAC5D,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,0FAA0F;AAC1F,SAAS,iBAAiB,CAAC,IAAyB;IAClD,MAAM,eAAe,GAAG,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAChE,MAAM,aAAa,GAAG,qBAAqB,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IACnE,IAAI,QAAQ,GAA+B,IAAI,CAAC;IAChD,IAAI,eAAe,IAAI,IAAI,EAAE,CAAC;QAC5B,QAAQ,GAAG,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC;IACzC,CAAC;IACD,IAAI,aAAa,IAAI,IAAI,EAAE,CAAC;QAC1B,IAAI,YAAY,GAA+B,IAAI,CAAC;QACpD,IAAI,CAAC;YACH,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC3C,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,EAAE,CAAC,CAAC;QACzE,CAAC;QACD,IAAI,YAAY,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;YACzD,MAAM,IAAI,KAAK,CAAC,gDAAgD,aAAa,EAAE,CAAC,CAAC;QACnF,CAAC;QACD,QAAQ,GAAG,YAAY,CAAC;QACxB,IAAI,eAAe,IAAI,IAAI,EAAE,CAAC;YAC5B,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC;QACpC,CAAC;IACH,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAS,sBAAsB,CAAC,IAAyB;IACvD,MAAM,mBAAmB,GAAG,qBAAqB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;IAC1E,IAAI,cAAc,GAA+B,IAAI,CAAC;IACtD,IAAI,mBAAmB,IAAI,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC;YACH,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACnD,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,EAAE,CAAC,CAAC;QAC1E,CAAC;QACD,IAAI,cAAc,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC;YAC7D,MAAM,IAAI,KAAK,CAAC,iDAAiD,mBAAmB,EAAE,CAAC,CAAC;QAC1F,CAAC;IACH,CAAC;IACD,OAAO,cAAc,CAAC;AACxB,CAAC;AAED;;;;;;GAMG;AACH,KAAK,UAAU,8BAA8B,CAC3C,IAAyB,EACzB,aAAqB,EACrB,aAAqB;IAErB,MAAM,aAAa,GAAG,qBAAqB,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IACnE,MAAM,YAAY,GAChB,qBAAqB,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,qBAAqB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAClF,MAAM,SAAS,GAAG,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC1D,MAAM,GAAG,GAAG,qBAAqB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAE/C,OAAO,MAAM,KAAK,CAAC,qBAAqB,CAAC,KAAK,IAAI,EAAE;QAClD,MAAM,eAAe,GAAG,MAAM,KAAK,CAAC,gBAAgB,CAClD,GAAG,CAAC,2BAA2B,EAC/B;YACE,aAAa;YACb,aAAa;YACb,YAAY;YACZ,SAAS;YACT,GAAG;SACJ,EACD,CAAC,CAAC,MAAM,CAAC;YACP,aAAa,EAAE,QAAQ,CAAC,QAAQ,EAAE;YAClC,oBAAoB,EAAE,QAAQ;YAC9B,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE;YACxB,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;SAChB,CAAC,CACH,CAAC;QAEF,IAAI,eAAe,IAAI,IAAI,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CACb,uCAAuC,aAAa,cAAc,SAAS,eAAe,YAAY,SAAS,GAAG,uBAAuB,CAC1I,CAAC;QACJ,CAAC;QACD,IAAI,YAAY,KAAK,IAAI,IAAI,eAAe,CAAC,YAAY,KAAK,YAAY,EAAE,CAAC;YAC3E,MAAM,IAAI,KAAK,CACb,4BAA4B,aAAa,kCAAkC,YAAY,GAAG,CAC3F,CAAC;QACJ,CAAC;QACD,IAAI,GAAG,KAAK,IAAI,IAAI,eAAe,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC;YAChD,MAAM,IAAI,KAAK,CAAC,4BAA4B,aAAa,4BAA4B,GAAG,GAAG,CAAC,CAAC;QAC/F,CAAC;QAED,MAAM,SAAS,GAAG;YAChB,UAAU,EAAE,4BAA4B,CAAC,IAAI,EAAE,YAAY,CAAC;YAC5D,MAAM,EAAE,4BAA4B,CAAC,IAAI,EAAE,QAAQ,CAAC;YACpD,iBAAiB,EAAE,4BAA4B,CAAC,IAAI,EAAE,mBAAmB,CAAC;YAC1E,aAAa,EAAE,4BAA4B,CAAC,IAAI,EAAE,eAAe,CAAC;YAClE,eAAe,EAAE,4BAA4B,CAAC,IAAI,EAAE,iBAAiB,CAAC;YACtE,WAAW,EAAE,4BAA4B,CAAC,IAAI,EAAE,aAAa,CAAC;YAC9D,QAAQ,EAAE,iBAAiB,CAAC,IAAI,CAAC;YACjC,cAAc,EAAE,sBAAsB,CAAC,IAAI,CAAC;SAC7C,CAAC;QACF,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC;YAC5D,MAAM,aAAa,CAAC,2BAA2B,CAC7C,aAAa,EACb,eAAe,CAAC,oBAAoB,EACpC,eAAe,CAAC,aAAa,EAC7B,IAAI,EAAE,cAAc;YACpB,SAAS,EACT,aAAa,CACd,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;aAAM,CAAC;YACN,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,KAAK,UAAU,uBAAuB,CAAC,IAAyB,EAAE,aAAqB;IACrF,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;QAClB,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,GAAG;YACZ,sBAAsB,EAAE,MAAM,KAAK,CAAC,gBAAgB,CAClD,GAAG,CAAC,8BAA8B,EAClC;gBACE,aAAa;gBACb,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,eAAe,EAAE,IAAI,CAAC,QAAQ;aAC/B,EACD,QAAQ,CACT;SACF,CAAC;IACJ,CAAC;SAAM,IAAI,YAAY,IAAI,IAAI,EAAE,CAAC;QAChC,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,UAAU;YACnB,sBAAsB,EAAE,MAAM,KAAK,CAAC,gBAAgB,CAClD,GAAG,CAAC,gCAAgC,EACpC;gBACE,aAAa;gBACb,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,eAAe,EAAE,IAAI,CAAC,QAAQ;aAC/B,EACD,QAAQ,CACT;SACF,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;AACH,CAAC;AAED,KAAK,UAAU,gCAAgC,CAC7C,IAAyB,EACzB,aAAqB,EACrB,aAAqB;IAErB,IAAI,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IACnE,MAAM,KAAK,CAAC,qBAAqB,CAAC,KAAK,IAAI,EAAE;QAC3C,MAAM,EAAE,EAAE,EAAE,sBAAsB,EAAE,GAAG,MAAM,uBAAuB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QAE1F,IAAI,sBAAsB,IAAI,IAAI,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,6BAA6B,IAAI,CAAC,QAAQ,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,YAAY,IAAI,IAAI,EAAE,CAAC;YACzB,MAAM,6BAA6B,CAAC,sBAAsB,EAAE,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAC9F,CAAC;aAAM,IAAI,QAAQ,IAAI,IAAI,EAAE,CAAC;YAC5B,MAAM,8BAA8B,CAAC,sBAAsB,EAAE,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAC3F,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import csvtojson from 'csvtojson';\nimport isPlainObject from 'is-plain-obj';\nimport _ from 'lodash';\nimport * as streamifier from 'streamifier';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { updateAssessmentInstancePoints, updateAssessmentInstanceScore } from './assessment.js';\nimport { IdSchema } from './db-types.js';\nimport * as manualGrading from './manualGrading.js';\nimport { createServerJob } from './server-jobs.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst AssessmentInfoSchema = z.object({\n  assessment_label: z.string(),\n  course_instance_id: IdSchema,\n  course_id: IdSchema,\n});\n\n/**\n * Update question instance scores from a CSV file.\n *\n * @param assessment_id - The assessment to update.\n * @param csvFile - An object with keys {originalname, size, buffer}.\n * @param user_id - The current user performing the update.\n * @param authn_user_id - The current authenticated user.\n *\n * @returns The ID of the job sequence\n */\nexport async function uploadInstanceQuestionScores(\n  assessment_id: string,\n  csvFile: Express.Multer.File | null | undefined,\n  user_id: string,\n  authn_user_id: string,\n): Promise<string> {\n  if (csvFile == null) {\n    throw new Error('No CSV file uploaded');\n  }\n\n  const { assessment_label, course_instance_id, course_id } = await sqldb.queryRow(\n    sql.select_assessment_info,\n    { assessment_id },\n    AssessmentInfoSchema,\n  );\n\n  const serverJob = await createServerJob({\n    courseId: course_id,\n    courseInstanceId: course_instance_id,\n    assessmentId: assessment_id,\n    userId: user_id,\n    authnUserId: authn_user_id,\n    type: 'upload_instance_question_scores',\n    description: 'Upload question scores for ' + assessment_label,\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    job.info('Uploading question scores for ' + assessment_label);\n\n    // accumulate output lines in the \"output\" variable and actually\n    // output put them in blocks, to avoid spamming the updates\n    let output: string | null = null;\n    let outputCount = 0;\n    let outputThreshold = 100;\n\n    let successCount = 0;\n    let errorCount = 0;\n    let skippedCount = 0;\n\n    job.info(`Parsing uploaded CSV file \"${csvFile.originalname}\" (${csvFile.size} bytes)`);\n    const csvStream = streamifier.createReadStream(csvFile.buffer, {\n      encoding: 'utf8',\n    });\n    const csvConverter = csvtojson({\n      colParser: {\n        instance: 'number',\n        score_perc: 'number',\n        points: 'number',\n        manual_score_perc: 'number',\n        manual_points: 'number',\n        auto_score_perc: 'number',\n        auto_points: 'number',\n        submission_id: 'number',\n      },\n      maxRowLength: 10000,\n    });\n\n    try {\n      await csvConverter.fromStream(csvStream).subscribe(async (json, number) => {\n        // Replace all keys with their lower-case values\n        json = _.mapKeys(json, (_v, k) => k.toLowerCase());\n        try {\n          if (await updateInstanceQuestionFromJson(json, assessment_id, authn_user_id)) {\n            successCount++;\n            // The number refers to a zero-based index of the data entries.\n            // Adding 1 to use 1-based (as is used in Excel et al), and 1 to\n            // account for the header.\n            const msg = `Processed CSV line ${number + 2}: ${JSON.stringify(json)}`;\n            if (output == null) {\n              output = msg;\n            } else {\n              output += '\\n' + msg;\n            }\n          } else {\n            skippedCount++;\n            // NO OUTPUT\n          }\n        } catch (err) {\n          errorCount++;\n          const msg = `Error processing CSV line ${number + 2}: ${JSON.stringify(json)}\\n${err}`;\n          if (output == null) {\n            output = msg;\n          } else {\n            output += '\\n' + msg;\n          }\n        }\n        outputCount++;\n        if (outputCount >= outputThreshold) {\n          job.verbose(output ?? '');\n          output = null;\n          outputCount = 0;\n          outputThreshold *= 2; // exponential backoff\n        }\n      });\n    } finally {\n      // Log output even in the case of failure.\n      if (output != null) {\n        job.verbose(output);\n      }\n    }\n\n    if (errorCount === 0) {\n      job.info(`Successfully updated scores for ${successCount} questions, with no errors`);\n    } else {\n      job.info(`Successfully updated scores for ${successCount} questions`);\n      job.error(`Error updating ${errorCount} questions`);\n    }\n    if (skippedCount !== 0) {\n      job.warn(`${skippedCount} questions were skipped, with no score/feedback values to update`);\n    }\n  });\n\n  return serverJob.jobSequenceId;\n}\n\n/**\n * Update assessment instance scores from a CSV file.\n *\n * @param assessment_id - The assessment to update.\n * @param csvFile - An object with keys {originalname, size, buffer}.\n * @param user_id - The current user performing the update.\n * @param authn_user_id - The current authenticated user.\n *\n * @returns The ID of the job sequence.\n */\nexport async function uploadAssessmentInstanceScores(\n  assessment_id: string,\n  csvFile: Express.Multer.File | null | undefined,\n  user_id: string,\n  authn_user_id: string,\n): Promise<string> {\n  if (csvFile == null) {\n    throw new Error('No CSV file uploaded');\n  }\n  const { assessment_label, course_instance_id, course_id } = await sqldb.queryRow(\n    sql.select_assessment_info,\n    { assessment_id },\n    AssessmentInfoSchema,\n  );\n\n  const serverJob = await createServerJob({\n    courseId: course_id,\n    courseInstanceId: course_instance_id,\n    assessmentId: assessment_id,\n    userId: user_id,\n    authnUserId: authn_user_id,\n    type: 'upload_assessment_instance_scores',\n    description: 'Upload total scores for ' + assessment_label,\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    job.verbose('Uploading total scores for ' + assessment_label);\n\n    // accumulate output lines in the \"output\" variable and actually\n    // output put them in blocks, to avoid spamming the updates\n    let output: string | null = null;\n    let outputCount = 0;\n    let outputThreshold = 100;\n\n    let successCount = 0;\n    let errorCount = 0;\n\n    job.info(`Parsing uploaded CSV file \"${csvFile.originalname}\" (${csvFile.size} bytes)`);\n    const csvStream = streamifier.createReadStream(csvFile.buffer, {\n      encoding: 'utf8',\n    });\n    const csvConverter = csvtojson({\n      colParser: {\n        instance: 'number',\n        score_perc: 'number',\n        points: 'number',\n      },\n      maxRowLength: 1000,\n    });\n\n    try {\n      await csvConverter.fromStream(csvStream).subscribe(async (json, number) => {\n        // Replace all keys with their lower-case values\n        json = _.mapKeys(json, (v, k) => {\n          return k.toLowerCase();\n        });\n        const msg = `Processing CSV line ${number + 2}: ${JSON.stringify(json)}`;\n        if (output == null) {\n          output = msg;\n        } else {\n          output += '\\n' + msg;\n        }\n        try {\n          await updateAssessmentInstanceFromJson(json, assessment_id, authn_user_id);\n          successCount++;\n        } catch (err) {\n          errorCount++;\n          const msg = String(err);\n          if (output == null) {\n            output = msg;\n          } else {\n            output += '\\n' + msg;\n          }\n        }\n        outputCount++;\n        if (outputCount >= outputThreshold) {\n          job.verbose(output);\n          output = null;\n          outputCount = 0;\n          outputThreshold *= 2; // exponential backoff\n        }\n      });\n    } finally {\n      // Log output even in the case of failure.\n      if (output != null) {\n        job.verbose(output);\n      }\n    }\n\n    if (errorCount === 0) {\n      job.verbose(\n        `Successfully updated scores for ${successCount} assessment instances, with no errors`,\n      );\n    } else {\n      job.verbose(`Successfully updated scores for ${successCount} assessment instances`);\n      job.error(`Error updating ${errorCount} assessment instances`);\n    }\n  });\n\n  return serverJob.jobSequenceId;\n}\n\n// missing values and empty strings get mapped to null\nfunction getJsonPropertyOrNull(json: Record<string, any>, key: string): any {\n  const value = json[key] ?? null;\n  if (value === '') return null;\n  return value;\n}\n\n// missing values and empty strings get mapped to null\nfunction getNumericJsonPropertyOrNull(json: Record<string, any>, key: string): number | null {\n  const value = getJsonPropertyOrNull(json, key);\n  if (value != null && (typeof value !== 'number' || isNaN(value))) {\n    throw new Error(`Value of ${key} is not a numeric value`);\n  }\n  return value;\n}\n\n// \"feedback\" gets mapped to {manual: \"XXX\"} and overrides the contents of \"feedback_json\"\nfunction getFeedbackOrNull(json: Record<string, any>): Record<string, any> | null {\n  const feedback_string = getJsonPropertyOrNull(json, 'feedback');\n  const feedback_json = getJsonPropertyOrNull(json, 'feedback_json');\n  let feedback: Record<string, any> | null = null;\n  if (feedback_string != null) {\n    feedback = { manual: feedback_string };\n  }\n  if (feedback_json != null) {\n    let feedback_obj: Record<string, any> | null = null;\n    try {\n      feedback_obj = JSON.parse(feedback_json);\n    } catch (e) {\n      throw new Error(`Unable to parse \"feedback_json\" field as JSON: ${e}`);\n    }\n    if (feedback_obj == null || !isPlainObject(feedback_obj)) {\n      throw new Error(`Parsed \"feedback_json\" is not a JSON object: ${feedback_json}`);\n    }\n    feedback = feedback_obj;\n    if (feedback_string != null) {\n      feedback.manual = feedback_string;\n    }\n  }\n  return feedback;\n}\n\nfunction getPartialScoresOrNull(json: Record<string, any>): Record<string, any> | null {\n  const partial_scores_json = getJsonPropertyOrNull(json, 'partial_scores');\n  let partial_scores: Record<string, any> | null = null;\n  if (partial_scores_json != null) {\n    try {\n      partial_scores = JSON.parse(partial_scores_json);\n    } catch (e) {\n      throw new Error(`Unable to parse \"partial_scores\" field as JSON: ${e}`);\n    }\n    if (partial_scores != null && !isPlainObject(partial_scores)) {\n      throw new Error(`Parsed \"partial_scores\" is not a JSON object: ${partial_scores_json}`);\n    }\n  }\n  return partial_scores;\n}\n\n/** Update the score of an instance question based on a single row from the CSV file.\n *\n * @param json Data from the CSV row.\n * @param assessment_id ID of the assessment being updated.\n * @param authn_user_id User ID currently authenticated.\n * @returns True if the record included an update, or false if the record included no scores or feedback to be changed.\n */\nasync function updateInstanceQuestionFromJson(\n  json: Record<string, any>,\n  assessment_id: string,\n  authn_user_id: string,\n): Promise<boolean> {\n  const submission_id = getJsonPropertyOrNull(json, 'submission_id');\n  const uid_or_group =\n    getJsonPropertyOrNull(json, 'group_name') ?? getJsonPropertyOrNull(json, 'uid');\n  const ai_number = getJsonPropertyOrNull(json, 'instance');\n  const qid = getJsonPropertyOrNull(json, 'qid');\n\n  return await sqldb.runInTransactionAsync(async () => {\n    const submission_data = await sqldb.queryOptionalRow(\n      sql.select_submission_to_update,\n      {\n        assessment_id,\n        submission_id,\n        uid_or_group,\n        ai_number,\n        qid,\n      },\n      z.object({\n        submission_id: IdSchema.nullable(),\n        instance_question_id: IdSchema,\n        uid_or_group: z.string(),\n        qid: z.string(),\n      }),\n    );\n\n    if (submission_data == null) {\n      throw new Error(\n        `Could not locate submission with id=${submission_id}, instance=${ai_number}, uid/group=${uid_or_group}, qid=${qid} for this assessment.`,\n      );\n    }\n    if (uid_or_group !== null && submission_data.uid_or_group !== uid_or_group) {\n      throw new Error(\n        `Found submission with id=${submission_id}, but uid/group does not match ${uid_or_group}.`,\n      );\n    }\n    if (qid !== null && submission_data.qid !== qid) {\n      throw new Error(`Found submission with id=${submission_id}, but QID does not match ${qid}.`);\n    }\n\n    const new_score = {\n      score_perc: getNumericJsonPropertyOrNull(json, 'score_perc'),\n      points: getNumericJsonPropertyOrNull(json, 'points'),\n      manual_score_perc: getNumericJsonPropertyOrNull(json, 'manual_score_perc'),\n      manual_points: getNumericJsonPropertyOrNull(json, 'manual_points'),\n      auto_score_perc: getNumericJsonPropertyOrNull(json, 'auto_score_perc'),\n      auto_points: getNumericJsonPropertyOrNull(json, 'auto_points'),\n      feedback: getFeedbackOrNull(json),\n      partial_scores: getPartialScoresOrNull(json),\n    };\n    if (Object.values(new_score).some((value) => value != null)) {\n      await manualGrading.updateInstanceQuestionScore(\n        assessment_id,\n        submission_data.instance_question_id,\n        submission_data.submission_id,\n        null, // modified_at\n        new_score,\n        authn_user_id,\n      );\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n\nasync function getAssessmentInstanceId(json: Record<string, any>, assessment_id: string) {\n  if ('uid' in json) {\n    return {\n      id: json.uid,\n      assessment_instance_id: await sqldb.queryOptionalRow(\n        sql.select_assessment_instance_uid,\n        {\n          assessment_id,\n          uid: json.uid,\n          instance_number: json.instance,\n        },\n        IdSchema,\n      ),\n    };\n  } else if ('group_name' in json) {\n    return {\n      id: json.group_name,\n      assessment_instance_id: await sqldb.queryOptionalRow(\n        sql.select_assessment_instance_group,\n        {\n          assessment_id,\n          group_name: json.group_name,\n          instance_number: json.instance,\n        },\n        IdSchema,\n      ),\n    };\n  } else {\n    throw new Error('\"uid\" or \"group_name\" not found');\n  }\n}\n\nasync function updateAssessmentInstanceFromJson(\n  json: Record<string, any>,\n  assessment_id: string,\n  authn_user_id: string,\n) {\n  if (!('instance' in json)) throw new Error('\"instance\" not found');\n  await sqldb.runInTransactionAsync(async () => {\n    const { id, assessment_instance_id } = await getAssessmentInstanceId(json, assessment_id);\n\n    if (assessment_instance_id == null) {\n      throw new Error(`unable to locate instance ${json.instance} for ${id}`);\n    }\n\n    if ('score_perc' in json) {\n      await updateAssessmentInstanceScore(assessment_instance_id, json.score_perc, authn_user_id);\n    } else if ('points' in json) {\n      await updateAssessmentInstancePoints(assessment_instance_id, json.points, authn_user_id);\n    } else {\n      throw new Error('must specify either \"score_perc\" or \"points\"');\n    }\n  });\n}\n"]}