{"version":3,"file":"session-store.js","sourceRoot":"","sources":["../../src/lib/session-store.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,aAAa,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AACpF,OAAO,EAAqB,MAAM,uBAAuB,CAAC;AAE1D,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAElD,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,OAAO,oBAAoB;IACvB,UAAU,CAAwB;IAClC,UAAU,CAAwB;IAClC,cAAc,CAAwB;IAE9C;QACE,MAAM,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAC7D,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,mBAAmB,EAAE;YACrE,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,GAAG;SACvC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,mBAAmB,EAAE;YACrE,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,GAAG;SACvC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,uBAAuB,EAAE;YAC7E,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,GAAG;SACvC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,UAAkB,EAAE,IAAS,EAAE,UAAgB;QACvD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEvB,MAAM,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE;YAChC,UAAU;YACV,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAC1B,UAAU;YACV,OAAO,EAAE,IAAI,EAAE,OAAO,IAAI,IAAI;SAC/B,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,UAAkB;QAC1B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEvB,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,EAAE,iBAAiB,CAAC,CAAC;QAE3F,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO;YACL,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,SAAS,EAAE,OAAO,CAAC,UAAU;SAC9B,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,UAAkB;QAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAE3B,MAAM,UAAU,CAAC,GAAG,CAAC,eAAe,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IACxD,CAAC;CACF","sourcesContent":["import * as opentelemetry from '@prairielearn/opentelemetry';\nimport { loadSqlEquiv, queryAsync, queryOptionalRow } from '@prairielearn/postgres';\nimport { type SessionStore } from '@prairielearn/session';\n\nimport { UserSessionSchema } from './db-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport class PostgresSessionStore implements SessionStore {\n  private setCounter: opentelemetry.Counter;\n  private getCounter: opentelemetry.Counter;\n  private destroyCounter: opentelemetry.Counter;\n\n  constructor() {\n    const meter = opentelemetry.metrics.getMeter('prairielearn');\n    this.setCounter = opentelemetry.getCounter(meter, 'session_store.set', {\n      valueType: opentelemetry.ValueType.INT,\n    });\n    this.getCounter = opentelemetry.getCounter(meter, 'session_store.get', {\n      valueType: opentelemetry.ValueType.INT,\n    });\n    this.destroyCounter = opentelemetry.getCounter(meter, 'session_store.destroy', {\n      valueType: opentelemetry.ValueType.INT,\n    });\n  }\n\n  async set(session_id: string, data: any, expires_at: Date) {\n    this.setCounter.add(1);\n\n    await queryAsync(sql.set_session, {\n      session_id,\n      data: JSON.stringify(data),\n      expires_at,\n      user_id: data?.user_id ?? null,\n    });\n  }\n\n  async get(session_id: string) {\n    this.getCounter.add(1);\n\n    const session = await queryOptionalRow(sql.get_session, { session_id }, UserSessionSchema);\n\n    if (!session) {\n      return null;\n    }\n\n    return {\n      data: session.data,\n      expiresAt: session.expires_at,\n    };\n  }\n\n  async destroy(session_id: string) {\n    this.destroyCounter.add(1);\n\n    await queryAsync(sql.destroy_session, { session_id });\n  }\n}\n"]}