{"version":3,"file":"session-store.test.js","sourceRoot":"","sources":["../../src/lib/session-store.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport { loadSqlEquiv, queryRow } from '@prairielearn/postgres';\n\nimport { generateUser } from '../models/user.js';\nimport * as helperDb from '../tests/helperDb.js';\n\nimport { UserSessionSchema } from './db-types.js';\nimport { PostgresSessionStore } from './session-store.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\ndescribe('PostgresSessionStore', () => {\n  before(helperDb.before);\n  after(helperDb.after);\n\n  it('creates, updates, and destroys a session', async () => {\n    await helperDb.runInTransactionAndRollback(async () => {\n      const store = new PostgresSessionStore();\n      let expiresAt = new Date(Date.now() + 10_000);\n\n      await store.set('1', { foo: 'bar' }, expiresAt);\n\n      let session = await store.get('1');\n\n      assert(session);\n      assert.deepEqual(session.data, { foo: 'bar' });\n      assert.deepEqual(session.expiresAt, expiresAt);\n\n      expiresAt = new Date(Date.now() + 20_000);\n\n      await store.set('1', { bar: 'baz' }, expiresAt);\n\n      session = await store.get('1');\n\n      assert(session);\n      assert.deepEqual(session.data, { bar: 'baz' });\n      assert.deepEqual(session.expiresAt, expiresAt);\n\n      await store.destroy('1');\n\n      session = await store.get('1');\n\n      assert.isNull(session);\n    });\n  });\n\n  it('does not return expired sessions', async () => {\n    await helperDb.runInTransactionAndRollback(async () => {\n      const store = new PostgresSessionStore();\n      const expiresAt = new Date(Date.now() - 10_000);\n\n      await store.set('1', { foo: 'bar' }, expiresAt);\n\n      const session = await store.get('1');\n\n      assert.isNull(session);\n    });\n  });\n\n  it('persists user_id when present', async () => {\n    await helperDb.runInTransactionAndRollback(async () => {\n      const store = new PostgresSessionStore();\n      const expiresAt = new Date(Date.now() + 10_000);\n\n      const user = await generateUser();\n\n      await store.set('1', { foo: 'bar', user_id: user.user_id }, expiresAt);\n\n      const session = await store.get('1');\n\n      assert(session);\n      assert.deepEqual(session.data, { foo: 'bar', user_id: user.user_id });\n      assert.deepEqual(session.expiresAt, expiresAt);\n\n      const userSession = await queryRow(\n        sql.select_user_session_by_session_id,\n        { session_id: '1' },\n        UserSessionSchema,\n      );\n\n      assert.equal(userSession.user_id, user.user_id);\n    });\n  });\n});\n"]}