{"version":3,"file":"socket-server.js","sourceRoot":"","sources":["../../src/lib/socket-server.ts"],"names":[],"mappings":"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","sourcesContent":["import type http from 'http';\n\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport debugfn from 'debug';\nimport { Redis } from 'ioredis';\nimport { Server } from 'socket.io';\n\nimport { logger } from '@prairielearn/logger';\n\nimport { config } from './config.js';\n\nconst debug = debugfn('prairielearn:socket-server');\n\nfunction attachEventListeners(client: Redis, type: string) {\n  client.on('error', (err) => {\n    logger.error(`redis client event for ${type}: error`, err);\n  });\n  client.on('connect', () => {\n    logger.verbose(`redis client event for ${type}: connect`);\n  });\n  client.on('ready', () => {\n    logger.verbose(`redis client event for ${type}: ready`);\n  });\n  client.on('reconnecting', (reconnectTimeMilliseconds: number) => {\n    logger.verbose(\n      `redis client event for ${type}: reconnecting in ${reconnectTimeMilliseconds} milliseconds`,\n    );\n  });\n  client.on('close', () => {\n    logger.verbose(`redis client event for ${type}: close`);\n  });\n  client.on('end', () => {\n    logger.verbose(`redis client event for ${type}: end`);\n  });\n  client.on('wait', () => {\n    logger.verbose(`redis client event for ${type}: wait`);\n  });\n  client.on('select', () => {\n    logger.verbose(`redis client event for ${type}: select`);\n  });\n}\n\nexport let io: Server;\n\nlet pub: Redis;\n\nlet sub: Redis;\n\nexport async function init(server: http.Server) {\n  debug('init(): creating socket server');\n  io = new Server(server);\n  if (config.redisUrl) {\n    // Use redis to mirror broadcasts via all servers\n    debug('init(): initializing redis pub/sub clients');\n    pub = new Redis(config.redisUrl);\n    sub = new Redis(config.redisUrl);\n\n    attachEventListeners(pub, 'pub');\n    attachEventListeners(sub, 'sub');\n\n    debug('init(): initializing redis socket adapter');\n    io.adapter(createAdapter(pub, sub));\n  }\n}\n\nexport async function close() {\n  await pub?.quit();\n  await sub?.quit();\n\n  // Note that we don't use `io.close()` here, as that actually tries to close\n  // the underlying HTTP server. In our desired shutdown sequence, we first\n  // close the HTTP server and then later disconnect all sockets. There's some\n  // discussion about this behavior here:\n  // https://github.com/socketio/socket.io/discussions/4002#discussioncomment-4080748\n  //\n  // Note the use of `io.local`, which prevents the server from attempting to\n  // broadcast the disconnect to other servers via Redis.\n  io.local.disconnectSockets(true);\n}\n"]}