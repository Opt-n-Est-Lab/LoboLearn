{"version":3,"file":"socket-activity-metrics.js","sourceRoot":"","sources":["../../../src/lib/telemetry/socket-activity-metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Socket } from 'node:net';\n\nimport * as opentelemetry from '@prairielearn/opentelemetry';\n\nexport class SocketActivityMetrics {\n  private sockets = new Set<Socket>();\n\n  private bytesRead = 0;\n  private bytesWritten = 0;\n\n  private socketCounter: opentelemetry.Counter;\n  private activeSocketsCounter: opentelemetry.ObservableCounter;\n  private bytesReadCounter: opentelemetry.ObservableCounter;\n  private bytesWrittenCounter: opentelemetry.ObservableCounter;\n\n  constructor(meter: opentelemetry.Meter, prefix: string) {\n    this.socketCounter = opentelemetry.getCounter(meter, `${prefix}.sockets`, {\n      valueType: opentelemetry.ValueType.INT,\n    });\n    this.activeSocketsCounter = opentelemetry.getObservableCounter(\n      meter,\n      `${prefix}.sockets.active`,\n      {\n        valueType: opentelemetry.ValueType.INT,\n      },\n    );\n    this.bytesReadCounter = opentelemetry.getObservableCounter(\n      meter,\n      `${prefix}.sockets.bytes_read`,\n      {\n        valueType: opentelemetry.ValueType.INT,\n      },\n    );\n    this.bytesWrittenCounter = opentelemetry.getObservableCounter(\n      meter,\n      `${prefix}.sockets.bytes_written`,\n      {\n        valueType: opentelemetry.ValueType.INT,\n      },\n    );\n  }\n\n  public start() {\n    this.activeSocketsCounter.addCallback(this.observeSocketCount);\n    this.bytesReadCounter.addCallback(this.observeBytesRead);\n    this.bytesWrittenCounter.addCallback(this.observeBytesWritten);\n  }\n\n  public stop() {\n    this.activeSocketsCounter.removeCallback(this.observeSocketCount);\n    this.bytesReadCounter.removeCallback(this.observeBytesRead);\n    this.bytesWrittenCounter.removeCallback(this.observeBytesWritten);\n  }\n\n  public addSocket(socket: Socket) {\n    if (this.sockets.has(socket)) {\n      return;\n    }\n\n    this.sockets.add(socket);\n    this.socketCounter.add(1);\n\n    socket.on('close', () => {\n      this.sockets.delete(socket);\n\n      this.bytesRead += socket.bytesRead;\n      this.bytesWritten += socket.bytesWritten;\n    });\n  }\n\n  private observeSocketCount = (observableResult: opentelemetry.ObservableResult) => {\n    observableResult.observe(this.sockets.size);\n  };\n\n  private observeBytesRead = (observableResult: opentelemetry.ObservableResult) => {\n    let bytesRead = this.bytesRead;\n\n    for (const socket of this.sockets) {\n      bytesRead += socket.bytesRead;\n    }\n\n    observableResult.observe(bytesRead);\n  };\n\n  private observeBytesWritten = (observableResult: opentelemetry.ObservableResult) => {\n    let bytesWritten = this.bytesWritten;\n\n    for (const socket of this.sockets) {\n      bytesWritten += socket.bytesWritten;\n    }\n\n    observableResult.observe(bytesWritten);\n  };\n}\n"]}