{"version":3,"file":"timezones.js","sourceRoot":"","sources":["../../src/lib/timezones.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport { loadSqlEquiv, queryRows } from '@prairielearn/postgres';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport const TimezoneCodec = z.object({\n  name: z.string(),\n  utc_offset: z.any(),\n});\nexport type Timezone = z.infer<typeof TimezoneCodec>;\n\nlet memoizedAvailableTimezones: Timezone[] | null = null;\nlet memoizedAvailableTimezonesByName: Map<string, Timezone> | null = null;\n\nasync function getAvailableTimezonesFromDB(): Promise<Timezone[]> {\n  const availableTimezones = await queryRows(sql.select_timezones, [], TimezoneCodec);\n  return availableTimezones;\n}\n\n/**\n * Returns a list of all timezones supported by the database. The list is\n * memoized so that, if it is needed more than once in the same session, the\n * same list is returned.\n */\nexport async function getAvailableTimezones(): Promise<Timezone[]> {\n  if (memoizedAvailableTimezones == null) {\n    memoizedAvailableTimezones = await getAvailableTimezonesFromDB();\n  }\n  return memoizedAvailableTimezones;\n}\n\n/**\n * Returns a filtered list of canonical timezones that are supported by both\n * Postgres and the JavaScript Intl API. As per the specification of\n * Intl.supportedValuesOf('timeZone'), the list includes only canonical timezone\n * names, and does not include aliases or deprecated names.\n *\n * @param alwaysInclude - Optional array of timezone names to always include in\n * the result, even if they're not canonical. These timezones are only included\n * if they're supported by Postgres.\n */\nexport async function getCanonicalTimezones(alwaysInclude?: string[]): Promise<Timezone[]> {\n  const availableTimezones = await getAvailableTimezones();\n  const canonicalTimezones = new Set(Intl.supportedValuesOf('timeZone'));\n  // Intl.supportedValuesOf('timeZone') returns the list of canonical timezones,\n  // but it skips UTC and a few other entries\n  // (https://github.com/tc39/ecma402/issues/778). We include UTC manually.\n  canonicalTimezones.add('UTC');\n  return availableTimezones.filter(\n    ({ name }) => canonicalTimezones.has(name) || alwaysInclude?.includes(name),\n  );\n}\n\nexport async function getAvailableTimezonesByName(): Promise<Map<string, Timezone>> {\n  if (memoizedAvailableTimezonesByName == null) {\n    const availableTimezones = await getAvailableTimezones();\n    memoizedAvailableTimezonesByName = new Map(availableTimezones.map((tz) => [tz.name, tz]));\n  }\n  return memoizedAvailableTimezonesByName;\n}\n\nexport async function getTimezoneByName(name: string): Promise<Timezone> {\n  const availableTimezonesByName = await getAvailableTimezonesByName();\n  const timezone = availableTimezonesByName.get(name);\n  if (timezone == null) {\n    throw new Error(`Timezone \"${name}\" not found`);\n  }\n  return timezone;\n}\n\nexport function formatTimezone(tz: Timezone): string {\n  return `(UTC\n    ${`${tz.utc_offset.hours ? tz.utc_offset.hours : '00'}:${\n      tz.utc_offset.minutes\n        ? tz.utc_offset.minutes > 0\n          ? tz.utc_offset.minutes\n          : tz.utc_offset.minutes * -1\n        : '00'\n    }) ${tz.name}`} `;\n}\n"]}