{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/lib/types.ts"],"names":[],"mappings":"AAkDA,MAAM,UAAU,WAAW,CAAC,KAAY;IACtC,MAAM,IAAI,KAAK,CAAC,qBAAqB,KAAK,EAAE,CAAC,CAAC;AAChD,CAAC","sourcesContent":["/**\n * Produces a type that only includes the nullable properties of T.\n */\ntype NullableProperties<T> = {\n  [K in keyof T as null extends T[K] ? K : never]: T[K];\n};\n\n/**\n * Produces a type containing the keys of T that are nullable.\n */\ntype NullableKeys<T> = keyof NullableProperties<T>;\n\n/**\n * Produces a type with the same keys as T. All properties are marked as required,\n * non-nullable, and not undefined.\n */\ntype RequiredProperty<T> = { [P in keyof T]-?: NonNullable<T[P]> };\n\n/**\n * Produces a type with the same keys as T. If a key is in `RequiredKeys`, it will\n * be marked as non-optional and non-nullable. Otherwise, it will be marked as\n * optional with a type of `undefined`.\n *\n * ```ts\n * type Foo = { a: string; b?: number; c: null };\n * type Bar = WithRequiredKeys<Foo, 'a' | 'b'>;\n * // Bar is equivalent to { a: string; b: number; c?: undefined; }\n * ```\n */\nexport type WithRequiredKeys<T, RequiredKeys extends keyof T> = Omit<\n  T,\n  RequiredKeys | NullableKeys<T>\n> &\n  RequiredProperty<Pick<T, RequiredKeys>> &\n  Partial<Record<NullableKeys<Omit<T, RequiredKeys>>, undefined>>;\n\n/**\n * Useful for convincing an IDE to show the expansion of a type.\n *\n * ```ts\n * type Foo = { a: string; b?: number; c: null };\n * type Bar = ExpandRecursively<Foo>;\n * ```\n */\nexport type ExpandRecursively<T> = T extends object\n  ? T extends infer O\n    ? { [K in keyof O]: ExpandRecursively<O[K]> }\n    : never\n  : T;\n\nexport function assertNever(value: never): never {\n  throw new Error(`Unexpected value: ${value}`);\n}\n"]}