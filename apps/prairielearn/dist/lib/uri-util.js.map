{"version":3,"file":"uri-util.js","sourceRoot":"","sources":["../../src/lib/uri-util.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAE9C;;;;;;;GAOG;AACH,MAAM,UAAU,UAAU,CAAC,YAAoB;IAC7C,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxF,CAAC;IAAC,MAAM,CAAC;QACP,MAAM,CAAC,KAAK,CAAC,+DAA+D,YAAY,EAAE,CAAC,CAAC;QAC5F,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC","sourcesContent":["import * as path from 'path';\n\nimport { logger } from '@prairielearn/logger';\n\n/**\n * Encodes a path for use in a URL. This is a middle-ground between `encodeURI`\n * and `encodeURIComponent`, in that all characters encoded by\n * `encodeURIComponent` are encoded, but slashes are not encoded.\n *\n * @param originalPath path of the file that is the basis for the encoding\n * @returns Encoded path\n */\nexport function encodePath(originalPath: string): string {\n  try {\n    return path.normalize(originalPath).split(path.sep).map(encodeURIComponent).join('/');\n  } catch {\n    logger.error(`encodePath: returning empty string because failed to encode ${originalPath}`);\n    return '';\n  }\n}\n"]}