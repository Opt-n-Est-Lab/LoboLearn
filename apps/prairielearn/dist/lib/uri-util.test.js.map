{"version":3,"file":"uri-util.test.js","sourceRoot":"","sources":["../../src/lib/uri-util.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC,CAAC;YACjD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,cAAc,CAAC,CAAC;YACzD,MAAM,CAAC,KAAK,CACV,UAAU,CAAC,iCAAiC,CAAC,EAC7C,iCAAiC,CAClC,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,WAAW,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC1B,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,uBAAuB,CAAC,EAAE,eAAe,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,2BAA2B,CAAC,EAAE,+BAA+B,CAAC,CAAC;YACvF,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE,sBAAsB,CAAC,CAAC;YACrE,MAAM,CAAC,KAAK,CACV,UAAU,CAAC,2BAA2B,CAAC,EACvC,+CAA+C,CAChD,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,KAAK,CACV,UAAU,CAAC,0EAA0E,CAAC,EACtF,0DAA0D,CAC3D,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE,wCAAwC,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport { encodePath } from './uri-util.js';\n\ndescribe('uri-util', () => {\n  describe('encodePath', () => {\n    it('handles simple file names', () => {\n      assert.equal(encodePath('test.txt'), 'test.txt');\n      assert.equal(encodePath('dir'), 'dir');\n    });\n\n    it('handles simple file paths', () => {\n      assert.equal(encodePath('dir/test.txt'), 'dir/test.txt');\n      assert.equal(\n        encodePath('dir/with/multiple/names/file.py'),\n        'dir/with/multiple/names/file.py',\n      );\n      assert.equal(encodePath('../file.bin'), '../file.bin');\n      assert.equal(encodePath('.git/HEAD'), '.git/HEAD');\n    });\n\n    it('normalizes paths', () => {\n      assert.equal(encodePath('dirA/../dirB/test.txt'), 'dirB/test.txt');\n    });\n\n    it('encodes same characters as encodeURLComponent except /', () => {\n      assert.equal(encodePath('dir/test%with%percent.txt'), 'dir/test%25with%25percent.txt');\n      assert.equal(encodePath('dir;2/file&3.txt'), 'dir%3B2/file%263.txt');\n      assert.equal(\n        encodePath(\"-_.!~*'();/?:@&=+$,#.json\"),\n        \"-_.!~*'()%3B/%3F%3A%40%26%3D%2B%24%2C%23.json\",\n      );\n    });\n\n    it('encodes ASCII non-printable characters', () => {\n      assert.equal(\n        encodePath('dir/\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f.txt'),\n        'dir/%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F.txt',\n      );\n    });\n\n    it('encodes non-ASCII Unicode characters', () => {\n      assert.equal(encodePath('dir/áéíóú.txt'), 'dir/%C3%A1%C3%A9%C3%AD%C3%B3%C3%BA.txt');\n    });\n  });\n});\n"]}