{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/lib/user.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD;;;;;;GAMG;AACH,MAAM,UAAU,eAAe,CAAC,UAAkB,EAAE,KAAa;IAC/D,MAAM,IAAI,GAAG,IAAI,GAAG,CAClB,UAAU;SACP,KAAK,CAAC,SAAS,CAAC;SAChB,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;SACxB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CACxB,CAAC;IAEF,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,EAAE,CAAC;QACvC,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,4BAA4B,KAAK,iBAAiB,CAAC,CAAC;IACrF,CAAC;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC","sourcesContent":["import { HttpStatusError } from '@prairielearn/error';\n\n/**\n * Parses a string of UIDs separated by commas, whitespace, line breaks, or semicolons\n * into an array of unique UIDs.\n *\n * @param uidsString The string of UIDs to parse.\n * @param limit The maximum number of UIDs to accept without throwing an error.\n */\nexport function parseUidsString(uidsString: string, limit: number): string[] {\n  const uids = new Set(\n    uidsString\n      .split(/[\\s,;]+/)\n      .map((uid) => uid.trim())\n      .filter((uid) => uid),\n  );\n\n  if (limit != null && uids.size > limit) {\n    throw new HttpStatusError(400, `Cannot provide more than ${limit} UIDs at a time`);\n  }\n\n  return Array.from(uids);\n}\n"]}