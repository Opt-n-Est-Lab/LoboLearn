{"version":3,"file":"user.test.js","sourceRoot":"","sources":["../../src/lib/user.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AAE5C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;YAC9B,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,eAAe,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,8BAA8B,EAAE,EAAE,CAAC,EAAE;gBACpE,eAAe;gBACf,eAAe;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,EAAE,EAAE,CAAC,EAAE;gBACnF,eAAe;gBACf,eAAe;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,CAAC,MAAM,CACX,GAAG,EAAE,CAAC,eAAe,CAAC,6CAA6C,EAAE,CAAC,CAAC,EACvE,iCAAiC,CAClC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport { parseUidsString } from './user.js';\n\ndescribe('user utilities', () => {\n  describe('parseUidsString', () => {\n    it('handles empty string', () => {\n      assert.deepEqual(parseUidsString('', 10), []);\n    });\n\n    it('handles whitespace string', () => {\n      assert.deepEqual(parseUidsString(' \\n\\t', 10), []);\n    });\n\n    it('handled empty items', () => {\n      assert.deepEqual(parseUidsString(' , ; ', 10), []);\n    });\n\n    it('handles single item', () => {\n      assert.deepEqual(parseUidsString('a@example.com', 10), ['a@example.com']);\n    });\n\n    it('handles multiple items', () => {\n      assert.deepEqual(parseUidsString('a@example.com, b@example.com', 10), [\n        'a@example.com',\n        'b@example.com',\n      ]);\n    });\n\n    it('handles duplicate items', () => {\n      assert.deepEqual(parseUidsString('a@example.com, b@example.com, a@example.com', 10), [\n        'a@example.com',\n        'b@example.com',\n      ]);\n    });\n\n    it('throws an error if too many UIDs are provided', () => {\n      assert.throws(\n        () => parseUidsString('a@example.com, b@example.com, c@example.com', 2),\n        'Cannot provide more than 2 UIDs',\n      );\n    });\n  });\n});\n"]}