{"version":3,"file":"workspaceHost.js","sourceRoot":"","sources":["../../src/lib/workspaceHost.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EACL,YAAY,EACZ,UAAU,EACV,gBAAgB,EAChB,QAAQ,EACR,SAAS,GACV,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EAEL,mBAAmB,EAEnB,kBAAkB,GACnB,MAAM,eAAe,CAAC;AAEvB,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,iBAAyB,EACzB,MAAc;IAEd,OAAO,MAAM,QAAQ,CACnB,GAAG,CAAC,mBAAmB,EACvB;QACE,iBAAiB;QACjB,MAAM;KACP,EACD,mBAAmB,CACpB,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAAC,MAAc;IACjE,OAAO,MAAM,SAAS,CACpB,GAAG,CAAC,mBAAmB,EACvB,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,EAAE,EACnC,mBAAmB,CACpB,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,YAAoB,EACpB,QAAgB;IAEhB,OAAO,MAAM,gBAAgB,CAC3B,GAAG,CAAC,wBAAwB,EAC5B;QACE,YAAY;QACZ,QAAQ;KACT,EACD,CAAC,CAAC,MAAM,EAAE,CACX,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,+BAA+B,CAAC,YAAoB;IACxE,OAAO,MAAM,QAAQ,CAAC,GAAG,CAAC,wBAAwB,EAAE,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;AACpF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,OAAe;IAC5D,MAAM,UAAU,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;AACvD,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,qBAA6B,EAC7B,kBAA0B;IAE1B,OAAO,MAAM,SAAS,CACpB,GAAG,CAAC,qBAAqB,EACzB;QACE,qBAAqB;QACrB,kBAAkB;KACnB,EACD,mBAAmB,CACpB,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,qCAAqC,CACzD,WAAqB;IAErB,OAAO,MAAM,SAAS,CACpB,GAAG,CAAC,gCAAgC,EACpC,EAAE,YAAY,EAAE,WAAW,EAAE,EAC7B,kBAAkB,CACnB,CAAC;AACJ,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport {\n  loadSqlEquiv,\n  queryAsync,\n  queryOptionalRow,\n  queryRow,\n  queryRows,\n} from '@prairielearn/postgres';\n\nimport {\n  type WorkspaceHost,\n  WorkspaceHostSchema,\n  type WorkspaceLog,\n  WorkspaceLogSchema,\n} from './db-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\n/**\n * Marks the given workspace host as unhealthy.\n *\n * @returns All updated workspace hosts\n */\nexport async function markWorkspaceHostUnhealthy(\n  workspace_host_id: string,\n  reason: string,\n): Promise<WorkspaceHost> {\n  return await queryRow(\n    sql.set_hosts_unhealthy,\n    {\n      workspace_host_id,\n      reason,\n    },\n    WorkspaceHostSchema,\n  );\n}\n\n/**\n * Marks all active workspace hosts as unhealthy.\n *\n * @returns All updated workspace hosts\n */\nexport async function markAllWorkspaceHostsUnhealthy(reason: string): Promise<WorkspaceHost[]> {\n  return await queryRows(\n    sql.set_hosts_unhealthy,\n    { workspace_host_id: null, reason },\n    WorkspaceHostSchema,\n  );\n}\n\nexport async function assignWorkspaceToHost(\n  workspace_id: string,\n  capacity: number,\n): Promise<string | null> {\n  return await queryOptionalRow(\n    sql.assign_workspace_to_host,\n    {\n      workspace_id,\n      capacity,\n    },\n    z.string(),\n  );\n}\n\n/**\n * Recaptures up to the specified number of draining workspace hosts.\n *\n * @param needed_hosts How many hosts are needed\n * @returns The number of hosts that were recaptured\n */\nexport async function recaptureDrainingWorkspaceHosts(needed_hosts: number) {\n  return await queryRow(sql.recapture_draining_hosts, { needed_hosts }, z.number());\n}\n\nexport async function drainExtraWorkspaceHosts(surplus: number) {\n  await queryAsync(sql.drain_extra_hosts, { surplus });\n}\n\n/**\n * Finds workspace hosts that are terminable and marks them as terminating.\n * Returns the workspace hosts that were marked as terminating.\n */\nexport async function findTerminableWorkspaceHosts(\n  unhealthy_timeout_sec: number,\n  launch_timeout_sec: number,\n): Promise<WorkspaceHost[]> {\n  return await queryRows(\n    sql.find_terminable_hosts,\n    {\n      unhealthy_timeout_sec,\n      launch_timeout_sec,\n    },\n    WorkspaceHostSchema,\n  );\n}\n\n/**\n * Finds the workspace hosts with the given instance IDs and marks them as\n * `terminated` if they are not in the `launching` state. Returns a list of\n * affected workspaces.\n *\n * @param instanceIds The instance IDs of the workspace hosts to terminate\n * @returns The workspaces on the terminated hosts\n */\nexport async function terminateWorkspaceHostsIfNotLaunching(\n  instanceIds: string[],\n): Promise<WorkspaceLog[]> {\n  return await queryRows(\n    sql.terminate_hosts_if_not_launching,\n    { instance_ids: instanceIds },\n    WorkspaceLogSchema,\n  );\n}\n"]}