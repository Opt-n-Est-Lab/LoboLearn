{"version":3,"file":"authn.js","sourceRoot":"","sources":["../../src/middlewares/authn.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,yBAAyB,EAAE,MAAM,4BAA4B,CAAC;AAEvE,OAAO,KAAK,QAAQ,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAqB,MAAM,iBAAiB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE1D,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,WAAW,GAAG,+EAA+E,CAAC;AAEpG,eAAe,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACnD,GAAG,CAAC,MAAM,CAAC,gBAAgB,GAAG,KAAK,CAAC;IACpC,GAAG,CAAC,MAAM,CAAC,4BAA4B,GAAG,CAAC,CAAC;IAE5C,IAAI,GAAG,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;QAC7B,sEAAsE;QACtE,IAAI,EAAE,CAAC;QACP,OAAO;IACT,CAAC;IAED,IAAI,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QACvC,gDAAgD;QAChD,IAAI,EAAE,CAAC;QACP,OAAO;IACT,CAAC;IAED,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAClC,wEAAwE;QACxE,IAAI,EAAE,CAAC;QACP,OAAO;IACT,CAAC;IAED,wCAAwC;IACxC,IAAI,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;QAChC,MAAM,IAAI,GAAG,yBAAyB,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC,SAAS,EAAE;YACpF,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;SAC5B,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC;YAC1F,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvB,MAAM,WAAW,GAAiB;YAChC,GAAG,EAAE,YAAY,IAAI,mBAAmB;YACxC,GAAG,EAAE,YAAY,IAAI,EAAE;YACvB,IAAI,EAAE,aAAa,IAAI,EAAE;YACzB,QAAQ,EAAE,UAAU;SACrB,CAAC;QAEF,MAAM,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE;YAC7C,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC;QAEH,mDAAmD;QACnD,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,6BAA6B,EAAE;YACxD,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;SACvC,CAAC,CAAC;QAEH,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,2EAA2E;IAC3E,wEAAwE;IACxE,iDAAiD;IACjD,EAAE;IACF,0EAA0E;IAC1E,EAAE;IACF,0EAA0E;IAC1E,0EAA0E;IAC1E,wEAAwE;IACxE,EAAE;IACF,0EAA0E;IAC1E,4EAA4E;IAC5E,+DAA+D;IAC/D,IAAI,MAAM,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,sBAAsB,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE,CAAC;QACzF,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC;QACzB,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC;QAC3B,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC;QAEzB,sFAAsF;QACtF,iFAAiF;QACjF,IAAI,GAAG,CAAC,OAAO,CAAC,YAAY,KAAK,cAAc,EAAE,CAAC;YAChD,GAAG,GAAG,qBAAqB,CAAC;YAC5B,IAAI,GAAG,cAAc,CAAC;YACtB,GAAG,GAAG,WAAW,CAAC;QACpB,CAAC;aAAM,IAAI,GAAG,CAAC,OAAO,CAAC,YAAY,KAAK,iBAAiB,EAAE,CAAC;YAC1D,GAAG,GAAG,wBAAwB,CAAC;YAC/B,IAAI,GAAG,iBAAiB,CAAC;YACzB,GAAG,GAAG,WAAW,CAAC;QACpB,CAAC;QAED,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QAEzC,MAAM,WAAW,GAAiB;YAChC,GAAG;YACH,GAAG;YACH,IAAI;YACJ,QAAQ,EAAE,KAAK;SAChB,CAAC;QAEF,MAAM,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE;YAC7C,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC;QACH,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,mBAAmB,IAAI,IAAI,EAAE,CAAC;QAC3E,iCAAiC;QAEjC,2CAA2C;QAC3C,WAAW,CAAC,GAAG,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;QAE5C,wEAAwE;QACxE,uDAAuD;QACvD,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,GAAG,CAAC,IAAI,KAAK,sBAAsB,EAAE,CAAC;YACxC,KAAK,GAAG,sBAAsB,CAAC;QACjC,CAAC;QAED,MAAM,QAAQ,GAAG,YAAY,KAAK,EAAE,CAAC;QAErC,uEAAuE;QACvE,iEAAiE;QACjE,IAAI,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC;YAC1B,uEAAuE;YACvE,qEAAqE;YACrE,uEAAuE;YACvE,+BAA+B;YAC/B,EAAE;YACF,mEAAmE;YACnE,SAAS,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,kBAAkB,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,CAAC;YACvF,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;YAEjC,sEAAsE;YACtE,qEAAqE;YACrE,0BAA0B;YAC1B,EAAE;YACF,0GAA0G;YAC1G,GAAG,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACT,CAAC;QAED,8DAA8D;QAC9D,SAAS,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,kBAAkB,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;QAEpE,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACvB,OAAO;IACT,CAAC;IAED,MAAM,WAAW,GAAiB;QAChC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO;QAC5B,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,mBAAmB;KAC1C,CAAC;IAEF,MAAM,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE;QAC7C,QAAQ,EAAE,KAAK;KAChB,CAAC,CAAC;IAEH,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC","sourcesContent":["import asyncHandler from 'express-async-handler';\n\nimport * as sqldb from '@prairielearn/postgres';\nimport { getCheckedSignedTokenData } from '@prairielearn/signed-token';\n\nimport * as authnLib from '../lib/authn.js';\nimport { type LoadUserAuth } from '../lib/authn.js';\nimport { config } from '../lib/config.js';\nimport { clearCookie, setCookie } from '../lib/cookie.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst UUID_REGEXP = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n\nexport default asyncHandler(async (req, res, next) => {\n  res.locals.is_administrator = false;\n  res.locals.news_item_notification_count = 0;\n\n  if (req.method === 'OPTIONS') {\n    // don't authenticate for OPTIONS requests, as these are just for CORS\n    next();\n    return;\n  }\n\n  if (/^\\/pl\\/webhooks\\//.test(req.path)) {\n    // Webhook callbacks should not be authenticated\n    next();\n    return;\n  }\n\n  if (/^\\/pl\\/api\\//.test(req.path)) {\n    // API calls will be authenticated outside this normal flow using tokens\n    next();\n    return;\n  }\n\n  // look for load-testing override cookie\n  if (req.cookies.load_test_token) {\n    const data = getCheckedSignedTokenData(req.cookies.load_test_token, config.secretKey, {\n      maxAge: 24 * 60 * 60 * 1000,\n    });\n\n    if (!data || !data.uuid || typeof data.uuid !== 'string' || !data.uuid.match(UUID_REGEXP)) {\n      throw new Error('invalid load_test_token');\n    }\n\n    const uuid = data.uuid;\n\n    const authnParams: LoadUserAuth = {\n      uid: `loadtest+${uuid}@prairielearn.com`,\n      uin: `loadtest+${uuid}`,\n      name: `Load Test ${uuid}`,\n      provider: 'LoadTest',\n    };\n\n    await authnLib.loadUser(req, res, authnParams, {\n      redirect: false,\n    });\n\n    // Enroll the load test user in the example course.\n    await sqldb.queryAsync(sql.enroll_user_in_example_course, {\n      user_id: res.locals.authn_user.user_id,\n    });\n\n    return next();\n  }\n\n  // In dev mode, by default, we'll authenticate the user automatically using\n  // the UID, name, and UIN specified in the config. This is to reduce the\n  // friction of getting started with PrairieLearn.\n  //\n  // If an authentication cookie is already present, we won't set a new one.\n  //\n  // If the user clicks \"Log out\" in dev mode, we'll set a special cookie to\n  // prevent this automatic authentication. The user will get bounced to the\n  // login page like they would in production. They then have two options:\n  //\n  // - Use the \"bypass\" authentication option on the login page to log in as\n  //   the user configured by `config.authUid` etc (see `pages/authLoginDev`).\n  // - Log in as a specific UID/name/UIN (see `pages/authLogin`).\n  if (config.devMode && !req.cookies.pl2_disable_auto_authn && req.session.user_id == null) {\n    let uid = config.authUid;\n    let name = config.authName;\n    let uin = config.authUin;\n\n    // We allow unit tests to override the user. Unit tests may also override the req_date\n    // (middlewares/date.js) and the req_mode (middlewares/authzCourseOrInstance.js).\n    if (req.cookies.pl_test_user === 'test_student') {\n      uid = 'student@example.com';\n      name = 'Student User';\n      uin = '000000001';\n    } else if (req.cookies.pl_test_user === 'test_instructor') {\n      uid = 'instructor@example.com';\n      name = 'Instructor User';\n      uin = '100000000';\n    }\n\n    if (!uid) throw new Error('Missing uid');\n\n    const authnParams: LoadUserAuth = {\n      uid,\n      uin,\n      name,\n      provider: 'dev',\n    };\n\n    await authnLib.loadUser(req, res, authnParams, {\n      redirect: false,\n    });\n    return next();\n  }\n\n  if (req.session.user_id == null || req.session.authn_provider_name == null) {\n    // The user is not authenticated.\n\n    // Clear the auth cookie in case it was bad\n    clearCookie(res, ['pl_authn', 'pl2_authn']);\n\n    // If we're in the middle of a PrairieTest login flow, propagate that to\n    // the login page so we can show a message to the user.\n    let query = '';\n    if (req.path === '/pl/prairietest/auth') {\n      query = '?service=PrairieTest';\n    }\n\n    const loginUrl = `/pl/login${query}`;\n\n    // If this request is being made by HTMX, use the special `HX-Redirect`\n    // header to redirect the page as a whole, not just the response.\n    if (req.get('HX-Request')) {\n      // Instead of redirecting to `req.originalUrl`, we redirect back to the\n      // page from which the HTMX request was made. This ensures that users\n      // don't end up redirected to a route that renders HTML that's meant to\n      // be embedded in another page.\n      //\n      // Fall back to the home page if we're somehow missing this header.\n      setCookie(res, ['preAuthUrl', 'pl2_pre_auth_url'], req.get('HX-Current-URL') ?? '/pl');\n      res.set('HX-Redirect', loginUrl);\n\n      // Note that Node doesn't allow us to set headers if the response is a\n      // redirect, so we send this as a 200 response. HTMX will perform the\n      // redirect on the client.\n      //\n      // https://stackoverflow.com/questions/39997413/how-to-pass-headers-while-doing-res-redirect-in-express-js\n      res.send();\n      return;\n    }\n\n    // first set the preAuthUrl cookie for redirection after authn\n    setCookie(res, ['preAuthUrl', 'pl2_pre_auth_url'], req.originalUrl);\n\n    res.redirect(loginUrl);\n    return;\n  }\n\n  const authnParams: LoadUserAuth = {\n    user_id: req.session.user_id,\n    provider: req.session.authn_provider_name,\n  };\n\n  await authnLib.loadUser(req, res, authnParams, {\n    redirect: false,\n  });\n\n  next();\n});\n"]}