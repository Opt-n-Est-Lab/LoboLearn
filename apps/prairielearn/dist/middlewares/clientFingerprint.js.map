{"version":3,"file":"clientFingerprint.js","sourceRoot":"","sources":["../../src/middlewares/clientFingerprint.ts"],"names":[],"mappings":"AAAA,OAAO,EAA+B,MAAM,SAAS,CAAC;AACtD,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,eAAe,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACnD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxD,CAAC;IAED,MAAM,qBAAqB,GAAG,MAAM,sBAAsB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAErE;IACE,uEAAuE;IACvE,sEAAsE;IACtE,sBAAsB;IACtB,GAAG,CAAC,MAAM,CAAC,mBAAmB,EAAE,IAAI;QACpC,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM;QAC/B,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,mBAAmB,EAAE,0BAA0B,EAAE,qBAAqB,CAAC,EAC5F,CAAC;QACD,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sCAAsC,EAAE;YACjE,qBAAqB;YACrB,sBAAsB,EAAE,GAAG,CAAC,MAAM,CAAC,mBAAmB,EAAE,EAAE;YAC1D,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;SAC7C,CAAC,CAAC;IACL,CAAC;IAED,GAAG,CAAC,MAAM,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IACzD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,GAAY,EAAE,GAAa;IACtE,MAAM,eAAe,GAAG,MAAM,KAAK,CAAC,gBAAgB,CAClD,GAAG,CAAC,sBAAsB,EAC1B,EAAE,UAAU,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,EAC9B,QAAQ,CACT,CAAC;IAEF,MAAM,MAAM,GAAG;QACb,UAAU,EAAE,GAAG,CAAC,EAAE;QAClB,kEAAkE;QAClE,4DAA4D;QAC5D,wEAAwE;QACxE,oDAAoD;QACpD,qDAAqD;QACrD,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;QACtC,eAAe;QACf,UAAU,EAAE,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC;QACrC,eAAe,EAAE,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC;KAChD,CAAC;IAEF,IAAI,qBAAqB,GAAG,MAAM,KAAK,CAAC,gBAAgB,CACtD,GAAG,CAAC,yBAAyB,EAC7B,MAAM,EACN,QAAQ,CACT,CAAC;IAEF,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC3B,qBAAqB,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,yBAAyB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAChG,CAAC;IAED,OAAO,qBAAqB,CAAC;AAC/B,CAAC","sourcesContent":["import { type Request, type Response } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { IdSchema } from '../lib/db-types.js';\nimport { idsEqual } from '../lib/id.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport default asyncHandler(async (req, res, next) => {\n  if (!res.locals.assessment_instance) {\n    throw new Error('Assessment Instance is not present');\n  }\n\n  const client_fingerprint_id = await getClientFingerprintId(req, res);\n\n  if (\n    // Only update the client fingerprint if the assessment is open and the\n    // access to the assessment is active (i.e., student has permission to\n    // submit new answers)\n    res.locals.assessment_instance?.open &&\n    res.locals.authz_result?.active &&\n    !idsEqual(res.locals.assessment_instance?.last_client_fingerprint_id, client_fingerprint_id)\n  ) {\n    await sqldb.queryAsync(sql.update_assessment_instance_fingerprint, {\n      client_fingerprint_id,\n      assessment_instance_id: res.locals.assessment_instance?.id,\n      authn_user_id: res.locals.authn_user.user_id,\n    });\n  }\n\n  res.locals.client_fingerprint_id = client_fingerprint_id;\n  next();\n});\n\nexport async function getClientFingerprintId(req: Request, res: Response) {\n  const user_session_id = await sqldb.queryOptionalRow(\n    sql.select_user_session_id,\n    { session_id: req.session.id },\n    IdSchema,\n  );\n\n  const params = {\n    ip_address: req.ip,\n    // We are passing the authn user id here. However, we are checking\n    // in the SQL query 'update_assessment_instance_fingerprint'\n    // that the authn user is the owner of the assessment. This will keep us\n    // from inadvertently recording a fingerprint change\n    // for an instructor viewing the assessment instance.\n    user_id: res.locals.authn_user.user_id,\n    user_session_id,\n    user_agent: req.headers['user-agent'],\n    accept_language: req.headers['accept-language'],\n  };\n\n  let client_fingerprint_id = await sqldb.queryOptionalRow(\n    sql.select_client_fingerprint,\n    params,\n    IdSchema,\n  );\n\n  if (!client_fingerprint_id) {\n    client_fingerprint_id = await sqldb.queryRow(sql.insert_client_fingerprint, params, IdSchema);\n  }\n\n  return client_fingerprint_id;\n}\n"]}