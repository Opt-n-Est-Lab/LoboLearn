{"version":3,"file":"effectiveRequestChanged.js","sourceRoot":"","sources":["../../src/middlewares/effectiveRequestChanged.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkD,MAAM,SAAS,CAAC;AAEzE,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/C,MAAM,CAAC,OAAO,WAAW,GAAY,EAAE,GAAa,EAAE,IAAkB;IACtE,gEAAgE;IAChE,kEAAkE;IAClE,6DAA6D;IAC7D,iCAAiC;IACjC,EAAE;IACF,wBAAwB;IACxB,8DAA8D;IAC9D,4DAA4D;IAC5D,kEAAkE;IAClE,kEAAkE;IAClE,iBAAiB;IACjB,EAAE;IACF,+DAA+D;IAC/D,+DAA+D;IAC/D,0CAA0C;IAE1C,IAAI,GAAG,CAAC,OAAO,CAAC,0BAA0B,EAAE,CAAC;QAC3C,WAAW,CAAC,GAAG,EAAE,CAAC,2BAA2B,EAAE,4BAA4B,CAAC,CAAC,CAAC;QAC9E,GAAG,CAAC,MAAM,CAAC,yBAAyB,GAAG,IAAI,CAAC;IAC9C,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC","sourcesContent":["import { type NextFunction, type Request, type Response } from 'express';\n\nimport { clearCookie } from '../lib/cookie.js';\n\nexport default function (req: Request, res: Response, next: NextFunction) {\n  // We use the pl_requested_data_changed cookie to detect when we\n  // have attempted to change the effective user (or other emulation\n  // data). This cookie is set in components/Navbar.html.ts and\n  // pages/instructorEffectiveUser.\n  //\n  // We use this cookie in\n  // middlewares/redirectEffectiveAccessDenied.js to catch authz\n  // errors and attempt a redirect to an accessible page. This\n  // middleware simply sets res.locals.pl_requested_data_changed for\n  // later access and clears the cookie, so we will only trigger the\n  // redirect once.\n  //\n  // Using a cookie also means that if someone tries to access an\n  // unauthorized page for some reason other than emulating, they\n  // will receive an error page as expected.\n\n  if (req.cookies.pl2_requested_data_changed) {\n    clearCookie(res, ['pl_requested_data_changed', 'pl2_requested_data_changed']);\n    res.locals.pl_requested_data_changed = true;\n  }\n  next();\n}\n"]}