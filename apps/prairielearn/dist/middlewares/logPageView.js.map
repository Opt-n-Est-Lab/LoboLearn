{"version":3,"file":"logPageView.js","sourceRoot":"","sources":["../../src/middlewares/logPageView.ts"],"names":[],"mappings":"AAAA,OAAO,EAA+B,MAAM,SAAS,CAAC;AACtD,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAChD,OAAO,KAAK,MAAM,MAAM,sBAAsB,CAAC;AAE/C,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAWhD,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,QAAkB,EAAE,GAAY,EAAE,GAAa;IAC/E,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;IAE1F,oEAAoE;IACpE,kEAAkE;IAClE,gEAAgE;IAChE,oEAAoE;IACpE,kBAAkB;IAElB,MAAM,MAAM,GAAG;QACb,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;QAC5C,OAAO;QACP,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;QACrF,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;QACtE,sBAAsB,EAAE,GAAG,CAAC,MAAM,CAAC,mBAAmB;YACpD,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE;YACnC,CAAC,CAAC,IAAI;QACR,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;QAChE,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;QAC7D,SAAS,EAAE,QAAQ;QACnB,IAAI,EAAE,GAAG,CAAC,WAAW;QACrB,qBAAqB,EAAE,GAAG,CAAC,MAAM,CAAC,qBAAqB,IAAI,IAAI;KAChE,CAAC;IAEF,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QACpE,mEAAmE;QACnE,8BAA8B;QAC9B,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;QAC7C,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,OAAO,WAAW,QAAkB;IACzC,OAAO,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QAC3C,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YACvE,IAAI,EAAE,CAAC;YACP,OAAO;QACT,CAAC;QAED,MAAM,WAAW,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAEtC,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { type Request, type Response } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\nimport * as Sentry from '@prairielearn/sentry';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ntype PageType =\n  | 'studentAssessment'\n  | 'instructorQuestionPreview'\n  | 'publicQuestionPreview'\n  | 'studentAssessmentInstance'\n  | 'studentAssessmentInstanceFile'\n  | 'studentAssessments'\n  | 'studentGradebook'\n  | 'studentInstanceQuestion';\nexport async function logPageView(pageType: PageType, req: Request, res: Response) {\n  const user_id = res.locals.user ? res.locals.user.user_id : res.locals.authn_user.user_id;\n\n  // Originally, we opted to only record page views for assessments if\n  // the authn'ed user is also the owner of the assessment instance.\n  // However, we now track all page views, so be sure to filter by\n  // authn_user_id if you only want page views from the student taking\n  // the assessment.\n\n  const params = {\n    authn_user_id: res.locals.authn_user.user_id,\n    user_id,\n    course_instance_id: res.locals.course_instance ? res.locals.course_instance.id : null,\n    assessment_id: res.locals.assessment ? res.locals.assessment.id : null,\n    assessment_instance_id: res.locals.assessment_instance\n      ? res.locals.assessment_instance.id\n      : null,\n    question_id: res.locals.question ? res.locals.question.id : null,\n    variant_id: res.locals.variant ? res.locals.variant.id : null,\n    page_type: pageType,\n    path: req.originalUrl,\n    client_fingerprint_id: res.locals.client_fingerprint_id ?? null,\n  };\n\n  await sqldb.queryOneRowAsync(sql.log_page_view, params).catch((err) => {\n    // Swallow the error so that we don't affect the request, but still\n    // report the error to Sentry.\n    logger.error('error logging page view', err);\n    Sentry.captureException(err);\n  });\n}\n\nexport default function (pageType: PageType) {\n  return asyncHandler(async (req, res, next) => {\n    if (req.method !== 'GET' || !res.locals.user || !res.locals.authn_user) {\n      next();\n      return;\n    }\n\n    await logPageView(pageType, req, res);\n\n    next();\n  });\n}\n"]}