{"version":3,"file":"selectAndAuthzInstanceQuestion.js","sourceRoot":"","sources":["../../src/middlewares/selectAndAuthzInstanceQuestion.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Request, type Response } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { getGroupConfig, getGroupInfo, getQuestionGroupPermissions } from '../lib/groups.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport async function selectAndAuthzInstanceQuestion(req: Request, res: Response) {\n  const result = await sqldb.queryAsync(sql.select_and_auth, {\n    instance_question_id: req.params.instance_question_id,\n    assessment_id: req.params.assessment_id,\n    course_instance_id: res.locals.course_instance.id,\n    authz_data: res.locals.authz_data,\n    req_date: res.locals.req_date,\n  });\n  if ((result.rowCount ?? 0) === 0) throw new error.HttpStatusError(403, 'Access denied');\n\n  Object.assign(res.locals, result.rows[0]);\n  if (res.locals.assessment.group_work) {\n    res.locals.group_config = await getGroupConfig(res.locals.assessment.id);\n    res.locals.group_info = await getGroupInfo(\n      res.locals.assessment_instance.group_id,\n      res.locals.group_config,\n    );\n    if (res.locals.group_config.has_roles) {\n      if (\n        !res.locals.group_info.start &&\n        !res.locals.authz_data.has_course_instance_permission_view\n      ) {\n        throw new error.HttpStatusError(\n          400,\n          'Group role assignments do not match required settings for this assessment. Questions cannot be viewed until the group role assignments are updated.',\n        );\n      }\n\n      // Get the role permissions. If the current user has course instance\n      // permission and is viewing in \"Student view without access permissions\",\n      // then role restrictions don't apply.\n      if (res.locals.authz_data.has_course_instance_permission_view) {\n        res.locals.group_role_permissions = { can_view: true, can_submit: true };\n      } else {\n        res.locals.group_role_permissions = await getQuestionGroupPermissions(\n          res.locals.instance_question.id,\n          res.locals.assessment_instance.group_id,\n          res.locals.authz_data.user.user_id,\n        );\n        if (!res.locals.group_role_permissions.can_view) {\n          throw new error.HttpStatusError(\n            400,\n            'Your current group role does not give you permission to see this question.',\n          );\n        }\n      }\n    }\n  }\n}\n\nexport default asyncHandler(async (req, res, next) => {\n  await selectAndAuthzInstanceQuestion(req, res);\n  next();\n});\n"]}