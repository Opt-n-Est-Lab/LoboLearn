{"version":3,"file":"selectAndAuthzInstructorQuestion.js","sourceRoot":"","sources":["../../src/middlewares/selectAndAuthzInstructorQuestion.ts"],"names":[],"mappings":"AAAA,OAAO,EAA+B,MAAM,SAAS,CAAC;AACtD,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,CAAC,KAAK,UAAU,gCAAgC,CAAC,GAAY,EAAE,GAAa;IAChF,IAAI,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;QAC/B,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,oCAAoC,EAAE;YAC1F,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,WAAW;YACnC,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;SAClD,CAAC,CAAC;QACH,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QACjF,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;SAAM,CAAC;QACN,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,eAAe,EAAE;YACrE,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,WAAW;YACnC,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;SAChC,CAAC,CAAC;QACH,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QACjF,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;AACH,CAAC;AAED,eAAe,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACnD,MAAM,gCAAgC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACjD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC","sourcesContent":["import { type Request, type Response } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport async function selectAndAuthzInstructorQuestion(req: Request, res: Response) {\n  if (res.locals.course_instance) {\n    const result = await sqldb.queryZeroOrOneRowAsync(sql.select_and_auth_with_course_instance, {\n      question_id: req.params.question_id,\n      course_instance_id: res.locals.course_instance.id,\n    });\n    if (result.rowCount === 0) throw new error.HttpStatusError(403, 'Access denied');\n    Object.assign(res.locals, result.rows[0]);\n  } else {\n    const result = await sqldb.queryZeroOrOneRowAsync(sql.select_and_auth, {\n      question_id: req.params.question_id,\n      course_id: res.locals.course.id,\n    });\n    if (result.rowCount === 0) throw new error.HttpStatusError(403, 'Access denied');\n    Object.assign(res.locals, result.rows[0]);\n  }\n}\n\nexport default asyncHandler(async (req, res, next) => {\n  await selectAndAuthzInstructorQuestion(req, res);\n  next();\n});\n"]}