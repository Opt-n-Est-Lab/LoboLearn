{"version":3,"file":"studentAssessmentAccess.js","sourceRoot":"","sources":["../../src/middlewares/studentAssessmentAccess.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Request, type Response } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport { logger } from '@prairielearn/logger';\nimport { getCheckedSignedTokenData } from '@prairielearn/signed-token';\n\nimport { canDeleteAssessmentInstance, deleteAssessmentInstance } from '../lib/assessment.js';\nimport { config } from '../lib/config.js';\nimport { setCookie } from '../lib/cookie.js';\n\nimport { StudentAssessmentAccess } from './studentAssessmentAccess.html.js';\n\nexport function checkStudentAssessmentAccess(req: Request, res: Response): boolean {\n  const showClosedAssessment = res.locals.authz_result?.show_closed_assessment ?? true;\n  const assessmentInstanceOpen = res.locals.assessment_instance?.open ?? true;\n  const assessmentActive = res.locals.authz_result?.active ?? true;\n\n  if (!showClosedAssessment && (!assessmentInstanceOpen || !assessmentActive)) {\n    // We're here because we want to hide closed assessments and one of the following is true:\n    //\n    // - The assessment instance is closed\n    // - There is no assessment instance, or the assessment is not active\n    //\n    // The first case is trivial.\n    //\n    // The second case isn't entirely obvious. One could assume that if the assessment instance\n    // is open, even if the assessment is not active, the student should be able to access it.\n    // However, this is not the case. If one is using `showClosedAssessment: false` with a date\n    // range that *grants* access in a certain time frame, they need to pair that with another\n    // access rule that will also apply `showClosedAssessment: false` outside of that time\n    // frame to ensure that students still can't see it. They need to add `active: false` to\n    // that same access rule to override the default, which would otherwise allow students to\n    // start the assessment when that access rule applies, even though they'd have no credit.\n    // We rely on completely blocking access when `active: false` and `showClosedAssessment: false`\n    // are both used, as there's otherwise no way to totally block access.\n    res.status(403).send(\n      StudentAssessmentAccess({\n        resLocals: res.locals,\n        showClosedScore: res.locals.authz_result?.show_closed_assessment_score ?? true,\n        showTimeLimitExpiredModal: req.query.timeLimitExpired === 'true',\n        userCanDeleteAssessmentInstance: canDeleteAssessmentInstance(res.locals),\n      }),\n    );\n    return false;\n  }\n\n  // Password protect the assessment. Note that this only handles the general\n  // case of an existing assessment instance. This middleware can't handle\n  // the intricacies of creating a new assessment instance. We handle those\n  // cases on the `studentAssessment` page.\n  if (res.locals?.assessment_instance?.open && !checkPasswordOrRedirect(req, res)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport default asyncHandler(async (req, res, next) => {\n  // This POST request is handled in the middleware instead of in the individual\n  // pages because it may be received from the page served directly by the\n  // middleware. Since the other pages where this action is possible are served\n  // by the middleware as well, they are not needed there.\n  if (req.method === 'POST' && req.body.__action === 'regenerate_instance') {\n    if (!canDeleteAssessmentInstance(res.locals)) {\n      throw new HttpStatusError(\n        403,\n        'You do not have permission to delete this assessment instance.',\n      );\n    }\n    await deleteAssessmentInstance(\n      res.locals.assessment.id,\n      res.locals.assessment_instance.id,\n      res.locals.authn_user.user_id,\n    );\n\n    flash('success', 'Your previous assessment instance was deleted.');\n    res.redirect(`${res.locals.urlPrefix}/assessment/${res.locals.assessment.id}`);\n    return;\n  }\n\n  const hasAccess = checkStudentAssessmentAccess(req, res);\n  if (!hasAccess) {\n    // We've already sent a response (either a 403, or a redirect to enter a password).\n    return;\n  }\n\n  // Pass-through for everything else\n  next();\n});\n\n/**\n * Checks if the given request has the correct password. If not, redirects to\n * a password input page.\n *\n * Returns `true` if the password is correct, `false` otherwise. If this\n * function returns `false`, the caller should not continue with the request.\n */\nexport function checkPasswordOrRedirect(req: Request, res: Response): boolean {\n  if (!res.locals.authz_result?.password) {\n    // No password is required.\n    return true;\n  }\n\n  if (req.cookies.pl2_assessmentpw == null) {\n    // The user has not entered a password yet.\n    badPassword(req, res);\n    return false;\n  }\n\n  const pwData = getCheckedSignedTokenData(req.cookies.pl2_assessmentpw, config.secretKey, {\n    maxAge: 24 * 60 * 60 * 1000,\n  });\n  if (pwData == null || pwData.password !== res.locals.authz_result.password) {\n    // The password is incorrect or the cookie is expired.\n    badPassword(req, res);\n    return false;\n  }\n\n  // The password is correct and not expired!\n  return true;\n}\n\nfunction badPassword(req: Request, res: Response) {\n  logger.verbose(`invalid password attempt for ${res.locals.user.uid}`);\n  setCookie(res, ['pl_pw_origUrl', 'pl2_pw_original_url'], req.originalUrl);\n  res.redirect('/pl/password');\n}\n"]}