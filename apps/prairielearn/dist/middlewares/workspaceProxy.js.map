{"version":3,"file":"workspaceProxy.js","sourceRoot":"","sources":["../../src/middlewares/workspaceProxy.ts"],"names":[],"mappings":"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","sourcesContent":["import type http from 'http';\nimport type { Socket } from 'net';\n\nimport type express from 'express';\nimport { createProxyMiddleware } from 'http-proxy-middleware';\nimport type * as httpProxyMiddleware from 'http-proxy-middleware';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { logger } from '@prairielearn/logger';\nimport { queryOneRowAsync, queryZeroOrOneRowAsync } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { LocalCache } from '../lib/local-cache.js';\n\nconst WORKSPACE_CONTAINER_PATH_REGEXP = /^\\/pl\\/workspace\\/([0-9]+)\\/container\\/(.*)/;\n\n/**\n * Removes \"sensitive\" cookies from the request to avoid exposing them to\n * workspace hosts.\n */\nfunction stripSensitiveCookies(proxyReq: http.ClientRequest) {\n  const cookies = proxyReq.getHeader('cookie');\n  if (!cookies) return;\n\n  const items = (cookies as string).split(';');\n  const filteredItems = items.filter((item) => {\n    const name = item.split('=')[0].trim();\n    return (\n      name !== 'pl_authn' &&\n      name !== 'pl2_authn' &&\n      name !== 'pl_assessmentpw' &&\n      name !== 'pl2_assessmentpw' &&\n      name !== 'connect.sid' &&\n      name !== 'prairielearn_session' &&\n      name !== 'pl2_session' &&\n      // The workspace authz cookies use a prefix plus the workspace ID, so\n      // we need to check for that prefix instead of an exact name match.\n      !name.startsWith('pl_authz_workspace_') &&\n      !name.startsWith('pl2_authz_workspace_')\n    );\n  });\n\n  proxyReq.setHeader('cookie', filteredItems.join(';'));\n}\n\nfunction isResponseLike(obj: any): obj is http.ServerResponse {\n  return obj && typeof obj.writeHead === 'function';\n}\n\nfunction isSocketLike(obj: any): obj is Socket {\n  return obj && typeof obj.write === 'function' && !('writeHead' in obj);\n}\n\n/**\n * Adapted from the following file in `http-proxy-middleware`:\n * https://github.com/chimurai/http-proxy-middleware/blob/e94087e8d072c0c54a6c3a6b050c590a92921482/src/status-code.ts\n */\nexport function getStatusCode(err: any): number {\n  if (err?.status) return err.status;\n\n  if (/HPE_INVALID/.test(err?.code)) {\n    return 502;\n  }\n\n  switch (err?.code) {\n    case 'ECONNRESET':\n    case 'ENOTFOUND':\n    case 'ECONNREFUSED':\n    case 'ETIMEDOUT':\n      return 504;\n    default:\n      return 500;\n  }\n}\n\nfunction getRequestPath(req: express.Request): string {\n  // `req.originalUrl` won't be defined for websocket requests, but for\n  // non-websocket requests, `req.url` won't contain the full path. So we\n  // need to handle both.\n  return req.originalUrl ?? req.url;\n}\n\nexport function makeWorkspaceProxyMiddleware() {\n  const workspaceUrlRewriteCache = new LocalCache(config.workspaceUrlRewriteCacheMaxAgeSec);\n  const workspaceProxyOptions: httpProxyMiddleware.Options<express.Request, express.Response> = {\n    target: 'invalid',\n    ws: true,\n    pathFilter: (_path, req) => {\n      // The path provided to this function doesn't include the full path with\n      // the `/pl/workspace/<workspace_id>/container/` prefix, so we need to\n      // reconstruct it from the request.\n      const path = getRequestPath(req);\n      return WORKSPACE_CONTAINER_PATH_REGEXP.test(path);\n    },\n    pathRewrite: async (_path, req) => {\n      // The path provided to this function doesn't include the full path with\n      // the `/pl/workspace/<workspace_id>/container/` prefix, so we need to\n      // reconstruct it from the request.\n      const path = getRequestPath(req);\n\n      try {\n        const match = path.match(WORKSPACE_CONTAINER_PATH_REGEXP);\n        if (!match) throw new Error(`Could not match path: ${path}`);\n        const workspace_id = parseInt(match[1]);\n        let workspace_url_rewrite = workspaceUrlRewriteCache.get(workspace_id);\n        if (workspace_url_rewrite == null) {\n          const sql =\n            'SELECT q.workspace_url_rewrite' +\n            ' FROM questions AS q' +\n            ' JOIN variants AS v ON (v.question_id = q.id)' +\n            ' WHERE v.workspace_id = $workspace_id;';\n          const result = await queryOneRowAsync(sql, { workspace_id });\n          workspace_url_rewrite = result.rows[0].workspace_url_rewrite ?? true;\n          workspaceUrlRewriteCache.set(workspace_id, workspace_url_rewrite);\n        }\n\n        if (!workspace_url_rewrite) return path;\n\n        const pathSuffix = match[2];\n        const newPath = '/' + pathSuffix;\n        return newPath;\n      } catch (err) {\n        logger.error(`Error in pathRewrite for path=${path}: ${err}`);\n        return path;\n      }\n    },\n    router: async (req) => {\n      const path = getRequestPath(req);\n      const match = path.match(WORKSPACE_CONTAINER_PATH_REGEXP);\n      if (!match) throw new Error(`Could not match path: ${path}`);\n\n      const workspace_id = match[1];\n      const result = await queryZeroOrOneRowAsync(\n        \"SELECT hostname FROM workspaces WHERE id = $workspace_id AND state = 'running';\",\n        { workspace_id },\n      );\n\n      if (result.rows.length === 0) {\n        throw new HttpStatusError(404, 'Workspace is not running');\n      }\n\n      return `http://${result.rows[0].hostname}/`;\n    },\n    on: {\n      proxyReq: (proxyReq) => {\n        stripSensitiveCookies(proxyReq);\n      },\n      proxyReqWs: (proxyReq) => {\n        stripSensitiveCookies(proxyReq);\n      },\n      error: (err, req, res) => {\n        logger.error(`Error proxying workspace request: ${err}`, {\n          err,\n          url: req.url,\n          originalUrl: req.originalUrl,\n        });\n\n        if (isResponseLike(res)) {\n          // Check to make sure we weren't already in the middle of sending a\n          // response before replying with our own error.\n          if (!res.headersSent) {\n            res.status(getStatusCode(err));\n          }\n\n          res.end('Error proxying workspace request');\n        } else if (isSocketLike(res)) {\n          // There's nothing we can do but destroy the socket.\n          res.destroy();\n        }\n      },\n    },\n  };\n  return createProxyMiddleware(workspaceProxyOptions);\n}\n"]}