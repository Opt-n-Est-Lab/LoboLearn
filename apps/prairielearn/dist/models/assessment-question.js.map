{"version":3,"file":"assessment-question.js","sourceRoot":"","sources":["../../src/models/assessment-question.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAChD,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,OAAO,EACL,sBAAsB,EACtB,wBAAwB,EACxB,kCAAkC,EAClC,QAAQ,EACR,cAAc,EACd,SAAS,EACT,WAAW,EACX,UAAU,GACX,MAAM,oBAAoB,CAAC;AAE5B,MAAM,CAAC,MAAM,2BAA2B,GAAG,wBAAwB,CAAC,MAAM,CAAC;IACzE,+BAA+B,EAAE,sBAAsB,CAAC,KAAK,CAAC,aAAa;IAC3E,wBAAwB,EAAE,sBAAsB,CAAC,KAAK,CAAC,MAAM;IAC7D,sBAAsB,EAAE,CAAC,CAAC,MAAM,EAAE;IAClC,sCAAsC,EAAE,sBAAsB,CAAC,KAAK,CAAC,kBAAkB;IACvF,SAAS,EAAE,QAAQ;IACnB,mBAAmB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC1C,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC7B,gBAAgB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9C,iBAAiB,EAAE,kCAAkC,CAAC,QAAQ,EAAE;IAChE,WAAW,EAAE,cAAc,CAAC,KAAK,CAAC,WAAW;IAC7C,aAAa,EAAE,cAAc,CAAC,KAAK,CAAC,aAAa;IACjD,KAAK,EAAE,WAAW;IAClB,GAAG,EAAE,cAAc,CAAC,KAAK,CAAC,GAAG;IAC7B,cAAc,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;IACtC,2BAA2B,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;IACnD,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;IAC9E,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,KAAK;IACjC,mBAAmB,EAAE,UAAU,CAAC,KAAK,CAAC,cAAc;IACpD,uBAAuB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;IAC/C,mBAAmB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;IAC3C,eAAe,EAAE,UAAU,CAAC,KAAK,CAAC,UAAU;IAC5C,kBAAkB,EAAE,UAAU,CAAC,KAAK,CAAC,aAAa;IAClD,WAAW,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM;IACpC,UAAU,EAAE,UAAU,CAAC,KAAK,CAAC,KAAK;CACnC,CAAC,CAAC;AAGH,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAC7C,aAAqB;IAErB,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,SAAS,CAChC,GAAG,CAAC,2BAA2B,EAC/B,EAAE,aAAa,EAAE,EACjB,2BAA2B,CAC5B,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nimport {\n  AlternativeGroupSchema,\n  AssessmentQuestionSchema,\n  AssessmentsFormatForQuestionSchema,\n  IdSchema,\n  QuestionSchema,\n  TagSchema,\n  TopicSchema,\n  ZoneSchema,\n} from '../lib/db-types.js';\n\nexport const AssessmentQuestionRowSchema = AssessmentQuestionSchema.extend({\n  alternative_group_number_choose: AlternativeGroupSchema.shape.number_choose,\n  alternative_group_number: AlternativeGroupSchema.shape.number,\n  alternative_group_size: z.number(),\n  assessment_question_advance_score_perc: AlternativeGroupSchema.shape.advance_score_perc,\n  course_id: IdSchema,\n  course_sharing_name: z.string().nullable(),\n  number: z.string().nullable(),\n  open_issue_count: z.coerce.number().nullable(),\n  other_assessments: AssessmentsFormatForQuestionSchema.nullable(),\n  sync_errors: QuestionSchema.shape.sync_errors,\n  sync_warnings: QuestionSchema.shape.sync_warnings,\n  topic: TopicSchema,\n  qid: QuestionSchema.shape.qid,\n  start_new_zone: z.boolean().nullable(),\n  start_new_alternative_group: z.boolean().nullable(),\n  tags: TagSchema.pick({ color: true, id: true, name: true }).array().nullable(),\n  title: QuestionSchema.shape.title,\n  zone_best_questions: ZoneSchema.shape.best_questions,\n  zone_has_best_questions: z.boolean().nullable(),\n  zone_has_max_points: z.boolean().nullable(),\n  zone_max_points: ZoneSchema.shape.max_points,\n  zone_number_choose: ZoneSchema.shape.number_choose,\n  zone_number: ZoneSchema.shape.number,\n  zone_title: ZoneSchema.shape.title,\n});\nexport type AssessmentQuestionRow = z.infer<typeof AssessmentQuestionRowSchema>;\n\nexport async function selectAssessmentQuestions(\n  assessment_id: string,\n): Promise<AssessmentQuestionRow[]> {\n  const rows = await sqldb.queryRows(\n    sql.select_assessment_questions,\n    { assessment_id },\n    AssessmentQuestionRowSchema,\n  );\n\n  return rows;\n}\n"]}