{"version":3,"file":"course-instance-usages.js","sourceRoot":"","sources":["../../src/models/course-instance-usages.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAEH,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAElE,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,uCAAuC,CAAC,EAC5D,aAAa,EACb,OAAO,GAIR;IACC,MAAM,UAAU,CAAC,GAAG,CAAC,4CAA4C,EAAE;QACjE,aAAa;QACb,OAAO;KACR,CAAC,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,uCAAuC,CAAC,EAC5D,cAAc,GAGf;IACC,MAAM,UAAU,CAAC,GAAG,CAAC,kDAAkD,EAAE;QACvE,cAAc;KACf,CAAC,CAAC;AACL,CAAC","sourcesContent":["/**\n * Usage date in the `course_instance_usages` table is designed only for\n * tracking billing information, not for general usage information that might be\n * of use to instructors, for example. This specialized use case means that:\n * 1. We can determine the number of unique users for any historical date range,\n *    with daily resolution. We don't have higher temporal resolution because\n *    it's not necessary for billing.\n * 2. We don't worry too much about tracking the exact `user_id` associated with\n *    compute usage (external grading jobs and workspaces). This is because it's\n *    more convenient to use the `variants.authn_user_id` rather than trying to\n *    track the effective `user_id`, and because we don't really care exactly\n *    which user is associated with the usage. The only reason we track\n *    `user_id` at all for this to allow per-user rows (rather than\n *    per-course-instance rows) to avoid contention when many users are updating\n *    simultaneously.\n *\n * In the `course_instance_usages` table, we store some rows with a\n * `course_instance_id` and some with only a `course_id`. The latter are for\n * course staff accessing questions outside of the context of a course instance.\n * This means that a course staff member might have two rows recorded for them,\n * one with a `course_instance_id` and one without, but this is ok because all\n * of our billing queries will either count distinct `user_id`s or sum the\n * `duration` for compute usage.\n */\n\nimport { loadSqlEquiv, queryAsync } from '@prairielearn/postgres';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\n/**\n * Update the course instance usages for a submission.\n *\n * @param param.submission_id The ID of the submission.\n * @param param.user_id The user ID of the submission.\n */\nexport async function updateCourseInstanceUsagesForSubmission({\n  submission_id,\n  user_id,\n}: {\n  submission_id: string;\n  user_id: string;\n}) {\n  await queryAsync(sql.update_course_instance_usages_for_submission, {\n    submission_id,\n    user_id,\n  });\n}\n\n/**\n * Update the course instance usages for external grading job.\n *\n * @param param.grading_job_id The ID of the grading job.\n */\nexport async function updateCourseInstanceUsagesForGradingJob({\n  grading_job_id,\n}: {\n  grading_job_id: string;\n}) {\n  await queryAsync(sql.update_course_instance_usages_for_external_grading, {\n    grading_job_id,\n  });\n}\n"]}