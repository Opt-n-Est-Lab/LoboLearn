{"version":3,"file":"course-instances.js","sourceRoot":"","sources":["../../src/models/course-instances.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAE7F,OAAO,EAGL,oBAAoB,EACpB,UAAU,GACX,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,yBAAyB,GAAG,oBAAoB,CAAC,MAAM,CAAC;IAC5D,oBAAoB,EAAE,CAAC,CAAC,MAAM,EAAE;IAChC,kBAAkB,EAAE,CAAC,CAAC,MAAM,EAAE;IAC9B,mCAAmC,EAAE,CAAC,CAAC,OAAO,EAAE;IAChD,mCAAmC,EAAE,CAAC,CAAC,OAAO,EAAE;CACjD,CAAC,CAAC;AAGH,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,kBAA0B;IAE1B,OAAO,gBAAgB,CACrB,GAAG,CAAC,4BAA4B,EAChC,EAAE,kBAAkB,EAAE,EACtB,oBAAoB,CACrB,CAAC;AACJ,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,oCAAoC,CAAC,EACzD,SAAS,EACT,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,sBAAsB,GAOvB;IACC,MAAM,oBAAoB,GAAG,MAAM,SAAS,CAC1C,GAAG,CAAC,yCAAyC,EAC7C,EAAE,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,sBAAsB,EAAE,SAAS,EAAE,EAC/E,yBAAyB,CAC1B,CAAC;IAEF,IAAI,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC,EAAE,CAAC;QACrC,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED,MAAM,oBAAoB,GAAG,MAAM,SAAS,CAC1C,GAAG,CAAC,yCAAyC,EAC7C,EAAE,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,EACxC,yBAAyB,CAC1B,CAAC;IAEF,6EAA6E;IAC7E,MAAM,cAAc,GAAG,IAAI,GAAG,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtE,OAAO,oBAAoB,CAAC,MAAM,CAAC,CAAC,mBAAmB,EAAE,EAAE;QACzD,OAAO,cAAc,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mCAAmC,CAAC,EACxD,kBAAkB,EAClB,YAAY,GAIb;IACC,OAAO,MAAM,SAAS,CACpB,GAAG,CAAC,wCAAwC,EAC5C,EAAE,kBAAkB,EAAE,YAAY,EAAE,EACpC,UAAU,CACX,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,+BAA+B,CAAC,EACpD,kBAAkB,GAGnB;IACC,OAAO,MAAM,mCAAmC,CAAC;QAC/C,kBAAkB;QAClB,YAAY,EAAE,qBAAqB;KACpC,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAAC,EACnD,SAAS,GAGV;IACC,OAAO,MAAM,QAAQ,CAAC,GAAG,CAAC,kCAAkC,EAAE,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;AAC5F,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { loadSqlEquiv, queryOptionalRow, queryRow, queryRows } from '@prairielearn/postgres';\n\nimport {\n  type CourseInstance,\n  type CourseInstancePermission,\n  CourseInstanceSchema,\n  UserSchema,\n} from '../lib/db-types.js';\nimport { idsEqual } from '../lib/id.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst CourseInstanceAuthzSchema = CourseInstanceSchema.extend({\n  formatted_start_date: z.string(),\n  formatted_end_date: z.string(),\n  has_course_instance_permission_view: z.boolean(),\n  has_course_instance_permission_edit: z.boolean(),\n});\nexport type CourseInstanceAuthz = z.infer<typeof CourseInstanceAuthzSchema>;\n\nexport async function selectCourseInstanceById(\n  course_instance_id: string,\n): Promise<CourseInstance | null> {\n  return queryOptionalRow(\n    sql.select_course_instance_by_id,\n    { course_instance_id },\n    CourseInstanceSchema,\n  );\n}\n\n/**\n * Returns all course instances to which the given user has staff access.\n *\n * If the user is emulating another user, the results will be filtered to only\n * include course instances to which both the authenticated user and the\n * emulated user have access.\n */\nexport async function selectCourseInstancesWithStaffAccess({\n  course_id,\n  user_id,\n  authn_user_id,\n  is_administrator,\n  authn_is_administrator,\n}: {\n  course_id: string;\n  user_id: string;\n  authn_user_id: string;\n  is_administrator: boolean;\n  authn_is_administrator: boolean;\n}) {\n  const authnCourseInstances = await queryRows(\n    sql.select_course_instances_with_staff_access,\n    { user_id: authn_user_id, is_administrator: authn_is_administrator, course_id },\n    CourseInstanceAuthzSchema,\n  );\n\n  if (idsEqual(user_id, authn_user_id)) {\n    return authnCourseInstances;\n  }\n\n  const authzCourseInstances = await queryRows(\n    sql.select_course_instances_with_staff_access,\n    { user_id, is_administrator, course_id },\n    CourseInstanceAuthzSchema,\n  );\n\n  // Retain only the course instances for which the authn user also has access.\n  const authnCourseIds = new Set(authnCourseInstances.map((c) => c.id));\n  return authzCourseInstances.filter((authzCourseInstance) => {\n    return authnCourseIds.has(authzCourseInstance.id);\n  });\n}\n\nexport async function selectUsersWithCourseInstanceAccess({\n  course_instance_id,\n  minimal_role,\n}: {\n  course_instance_id: string;\n  minimal_role: Exclude<CourseInstancePermission['course_instance_role'], null>;\n}) {\n  return await queryRows(\n    sql.select_users_with_course_instance_access,\n    { course_instance_id, minimal_role },\n    UserSchema,\n  );\n}\n\nexport async function selectCourseInstanceGraderStaff({\n  course_instance_id,\n}: {\n  course_instance_id: string;\n}) {\n  return await selectUsersWithCourseInstanceAccess({\n    course_instance_id,\n    minimal_role: 'Student Data Editor',\n  });\n}\n\n/**\n * Returns if the course has any non-deleted course instances.\n */\nexport async function selectCourseHasCourseInstances({\n  course_id,\n}: {\n  course_id: string;\n}): Promise<boolean> {\n  return await queryRow(sql.select_course_has_course_instances, { course_id }, z.boolean());\n}\n"]}