{"version":3,"file":"course-permissions.js","sourceRoot":"","sources":["../../src/models/course-permissions.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport {\n  loadSqlEquiv,\n  queryAsync,\n  queryOptionalRow,\n  queryRows,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\n\nimport {\n  type CourseInstancePermission,\n  CourseInstancePermissionSchema,\n  type CoursePermission,\n  CoursePermissionSchema,\n  type User,\n} from '../lib/db-types.js';\n\nimport { selectOrInsertUserByUid } from './user.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function insertCoursePermissionsByUserUid({\n  course_id,\n  uid,\n  course_role,\n  authn_user_id,\n}: {\n  course_id: string;\n  uid: string;\n  course_role: NonNullable<CoursePermission['course_role']>;\n  authn_user_id: string;\n}): Promise<User> {\n  return await runInTransactionAsync(async () => {\n    const user = await selectOrInsertUserByUid(uid);\n    await queryAsync(sql.insert_course_permissions, {\n      user_id: user.user_id,\n      course_id,\n      course_role,\n      authn_user_id,\n    });\n    return user;\n  });\n}\n\nexport async function updateCoursePermissionsRole({\n  course_id,\n  user_id,\n  course_role,\n  authn_user_id,\n}: {\n  course_id: string;\n  user_id: string;\n  course_role: NonNullable<CoursePermission['course_role']>;\n  authn_user_id: string;\n}): Promise<void> {\n  const result = await queryOptionalRow(\n    sql.update_course_permissions_role,\n    { course_id, user_id, course_role, authn_user_id },\n    CoursePermissionSchema,\n  );\n  if (!result) {\n    throw new error.HttpStatusError(404, 'No course permissions to update');\n  }\n}\n\nexport async function deleteCoursePermissions({\n  course_id,\n  user_id,\n  authn_user_id,\n}: {\n  course_id: string;\n  user_id: string | string[];\n  authn_user_id: string;\n}): Promise<void> {\n  await queryAsync(sql.delete_course_permissions, {\n    course_id,\n    user_ids: Array.isArray(user_id) ? user_id : [user_id],\n    authn_user_id,\n  });\n  // Do not throw an exception if no course permissions to delete\n}\n\nexport async function deleteCoursePermissionsForNonOwners({\n  course_id,\n  authn_user_id,\n}: {\n  course_id: string;\n  authn_user_id: string;\n}): Promise<void> {\n  await runInTransactionAsync(async () => {\n    const nonOwners = await queryRows(\n      sql.select_and_lock_non_owners,\n      { course_id },\n      CoursePermissionSchema,\n    );\n    await deleteCoursePermissions({\n      course_id,\n      user_id: nonOwners.map((user) => user.user_id),\n      authn_user_id,\n    });\n  });\n}\n\nexport async function deleteCoursePermissionsForUsersWithoutAccess({\n  course_id,\n  authn_user_id,\n}: {\n  course_id: string;\n  authn_user_id: string;\n}): Promise<void> {\n  await runInTransactionAsync(async () => {\n    const usersWithoutAccess = await queryRows(\n      sql.select_and_lock_course_permissions_without_access,\n      { course_id },\n      CoursePermissionSchema,\n    );\n    await deleteCoursePermissions({\n      course_id,\n      user_id: usersWithoutAccess.map((user) => user.user_id),\n      authn_user_id,\n    });\n  });\n}\n\nexport async function insertCourseInstancePermissions({\n  course_id,\n  course_instance_id,\n  user_id,\n  course_instance_role,\n  authn_user_id,\n}: {\n  course_id: string;\n  course_instance_id: string;\n  user_id: string;\n  course_instance_role: NonNullable<CourseInstancePermission['course_instance_role']>;\n  authn_user_id: string;\n}): Promise<void> {\n  const coursePermission = await queryOptionalRow(\n    sql.insert_course_instance_permissions,\n    { course_id, course_instance_id, user_id, course_instance_role, authn_user_id },\n    CoursePermissionSchema,\n  );\n  if (!coursePermission) {\n    throw new error.HttpStatusError(\n      404,\n      'Cannot add permissions for a course instance without course permissions',\n    );\n  }\n}\n\nexport async function updateCourseInstancePermissionsRole({\n  course_id,\n  course_instance_id,\n  user_id,\n  course_instance_role,\n  authn_user_id,\n}: {\n  course_id: string;\n  course_instance_id: string;\n  user_id: string;\n  course_instance_role: NonNullable<CourseInstancePermission['course_instance_role']>;\n  authn_user_id: string;\n}): Promise<void> {\n  const result = await queryOptionalRow(\n    sql.update_course_instance_permissions_role,\n    { course_id, course_instance_id, user_id, course_instance_role, authn_user_id },\n    CourseInstancePermissionSchema,\n  );\n  if (!result) {\n    throw new error.HttpStatusError(404, 'No course instance permissions to update');\n  }\n}\n\nexport async function deleteCourseInstancePermissions({\n  course_id,\n  course_instance_id,\n  user_id,\n  authn_user_id,\n}: {\n  course_id: string;\n  course_instance_id: string;\n  user_id: string;\n  authn_user_id: string;\n}): Promise<void> {\n  await queryAsync(sql.delete_course_instance_permissions, {\n    course_id,\n    course_instance_id,\n    user_id,\n    authn_user_id,\n  });\n  // Do not throw an exception if no course instance permissions to delete\n}\n\nexport async function deleteAllCourseInstancePermissionsForCourse({\n  course_id,\n  authn_user_id,\n}: {\n  course_id: string;\n  authn_user_id: string;\n}): Promise<void> {\n  await queryAsync(sql.delete_all_course_instance_permissions_for_course, {\n    course_id,\n    authn_user_id,\n  });\n}\n\n/**\n * Checks if the user is an instructor in at least one course. Also returns true\n * if the user is an administrator, which gives them instructor-like access to\n * all courses.\n */\nexport async function userIsInstructorInAnyCourse({\n  user_id,\n}: {\n  user_id: string;\n}): Promise<boolean> {\n  const result = await queryOptionalRow(\n    sql.user_is_instructor_in_any_course,\n    { user_id },\n    z.boolean(),\n  );\n  return result ?? false;\n}\n"]}