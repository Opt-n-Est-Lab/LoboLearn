{"version":3,"file":"course.js","sourceRoot":"","sources":["../../src/models/course.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec } from 'child_process';\nimport { promisify } from 'util';\n\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport {\n  loadSqlEquiv,\n  queryAsync,\n  queryOptionalRow,\n  queryRow,\n  queryRows,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\n\nimport { type Course, CourseSchema } from '../lib/db-types.js';\n\nimport { insertAuditLog } from './audit-log.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst CourseWithPermissionsSchema = CourseSchema.extend({\n  permissions_course: z.object({\n    course_role: z.enum(['None', 'Previewer', 'Viewer', 'Editor', 'Owner']),\n    has_course_permission_own: z.boolean(),\n    has_course_permission_edit: z.boolean(),\n    has_course_permission_view: z.boolean(),\n    has_course_permission_preview: z.boolean(),\n  }),\n});\nexport type CourseWithPermissions = z.infer<typeof CourseWithPermissionsSchema>;\n\nexport async function selectCourseById(course_id: string): Promise<Course> {\n  return await queryRow(\n    sql.select_course_by_id,\n    {\n      course_id,\n    },\n    CourseSchema,\n  );\n}\n\nexport async function selectCourseByCourseInstanceId(course_instance_id: string): Promise<Course> {\n  return await queryRow(\n    sql.select_course_by_instance_id,\n    {\n      course_instance_id,\n    },\n    CourseSchema,\n  );\n}\n\nexport function getLockNameForCoursePath(coursePath: string): string {\n  return `coursedir:${coursePath}`;\n}\n\nexport async function getCourseCommitHash(coursePath: string): Promise<string> {\n  try {\n    const { stdout } = await promisify(exec)('git rev-parse HEAD', {\n      cwd: coursePath,\n      env: process.env,\n    });\n    return stdout.trim();\n  } catch (err) {\n    throw new error.AugmentedError(`Could not get git status; exited with code ${err.code}`, {\n      data: {\n        stdout: err.stdout,\n        stderr: err.stderr,\n      },\n    });\n  }\n}\n\n/**\n * Loads the current commit hash from disk and stores it in the database. This\n * will also add the `commit_hash` property to the given course object.\n */\nexport async function updateCourseCommitHash(course: {\n  id: string;\n  path: string;\n}): Promise<string> {\n  const hash = await getCourseCommitHash(course.path);\n  await queryAsync(sql.update_course_commit_hash, {\n    course_id: course.id,\n    commit_hash: hash,\n  });\n  return hash;\n}\n\n/**\n * If the provided course object contains a commit hash, that will be used;\n * otherwise, the commit hash will be loaded from disk and stored in the\n * database.\n *\n * This should only ever really need to happen at max once per course - in the\n * future, the commit hash will already be in the course object and will be\n * updated during course sync.\n */\nexport async function getOrUpdateCourseCommitHash(course: {\n  id: string;\n  path: string;\n  commit_hash?: string | null;\n}): Promise<string> {\n  return course.commit_hash ?? (await updateCourseCommitHash(course));\n}\n\n/**\n * Returns all courses to which the given user has staff access.\n *\n * Note that this does not take into account any effective user overrides that\n * may be in place. It is the caller's responsibility to further restrict\n * the results if necessary.\n */\nexport async function selectCoursesWithStaffAccess({\n  user_id,\n  is_administrator,\n}: {\n  user_id: string;\n  is_administrator: boolean;\n}) {\n  const courses = await queryRows(\n    sql.select_courses_with_staff_access,\n    { user_id, is_administrator },\n    CourseWithPermissionsSchema,\n  );\n  return courses;\n}\n\n/**\n * Returns all courses to which the given user has edit access.\n *\n * Note that this does not take into account any effective user overrides that\n * may be in place. It is the caller's responsibility to further restrict\n * the results if necessary.\n */\nexport async function selectCoursesWithEditAccess({\n  user_id,\n  is_administrator,\n}: {\n  user_id: string;\n  is_administrator: boolean;\n}) {\n  const courses = await selectCoursesWithStaffAccess({\n    user_id,\n    is_administrator,\n  });\n  return courses.filter((c) => c.permissions_course.has_course_permission_edit);\n}\n\nexport async function selectOrInsertCourseByPath(coursePath: string): Promise<Course> {\n  return await queryRow(sql.select_or_insert_course_by_path, { path: coursePath }, CourseSchema);\n}\n\nexport async function deleteCourse({\n  course_id,\n  authn_user_id,\n}: {\n  course_id: string;\n  authn_user_id: string;\n}) {\n  await runInTransactionAsync(async () => {\n    const deletedCourse = await queryOptionalRow(sql.delete_course, { course_id }, CourseSchema);\n    if (deletedCourse == null) {\n      throw new Error('Course to delete not found');\n    }\n    await insertAuditLog({\n      authn_user_id,\n      action: 'soft_delete',\n      table_name: 'pl_courses',\n      row_id: course_id,\n      new_state: deletedCourse,\n      course_id,\n      institution_id: deletedCourse.institution_id,\n    });\n  });\n}\n\nexport async function insertCourse({\n  institution_id,\n  short_name,\n  title,\n  display_timezone,\n  path,\n  repository,\n  branch,\n  authn_user_id,\n}: Pick<\n  Course,\n  'institution_id' | 'short_name' | 'title' | 'display_timezone' | 'path' | 'repository' | 'branch'\n> & {\n  authn_user_id: string;\n}): Promise<Course> {\n  return await runInTransactionAsync(async () => {\n    const course = await queryRow(\n      sql.insert_course,\n      {\n        institution_id,\n        short_name,\n        title,\n        display_timezone,\n        path,\n        repository,\n        branch,\n      },\n      CourseSchema,\n    );\n    await insertAuditLog({\n      authn_user_id,\n      action: 'insert',\n      table_name: 'pl_courses',\n      row_id: course.id,\n      new_state: course,\n      institution_id,\n      course_id: course.id,\n    });\n    return course;\n  });\n}\n\n/**\n * Update the `show_getting_started` column for a course.\n */\nexport async function updateCourseShowGettingStarted({\n  course_id,\n  show_getting_started,\n}: {\n  course_id: string;\n  show_getting_started: boolean;\n}) {\n  await queryAsync(sql.update_course_show_getting_started, {\n    course_id,\n    show_getting_started,\n  });\n}\n\n/**\n * Update the `sharing_name` column for a course.\n */\nexport async function updateCourseSharingName({ course_id, sharing_name }): Promise<void> {\n  await queryAsync(sql.update_course_sharing_name, {\n    course_id,\n    sharing_name,\n  });\n}\n"]}