{"version":3,"file":"enrollment.js","sourceRoot":"","sources":["../../src/models/enrollment.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EACL,YAAY,EACZ,UAAU,EACV,gBAAgB,EAChB,qBAAqB,GACtB,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EACL,mCAAmC,EACnC,kCAAkC,GACnC,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAIL,gBAAgB,GAEjB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAE1C,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,EACrC,kBAAkB,EAClB,OAAO,GAIR;IACC,MAAM,UAAU,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,kBAAkB,EAAE,OAAO,EAAE,CAAC,CAAC;AAC3E,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,EAC5C,WAAW,EACX,MAAM,EACN,eAAe,EACf,UAAU,GAMX;IACC,8EAA8E;IAC9E,0EAA0E;IAC1E,6BAA6B;IAC7B,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;IACxD,CAAC;IAED,IAAI,YAAY,EAAE,EAAE,CAAC;QACnB,MAAM,MAAM,GAAG,MAAM,kCAAkC,CAAC;YACtD,WAAW;YACX,MAAM;YACN,eAAe;YACf,UAAU;SACX,CAAC,CAAC;QAEH,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,mCAAmC,CAAC,oBAAoB;gBAC3D,MAAM,IAAI,YAAY,CAAC,uBAAuB,eAAe,CAAC,EAAE,UAAU,CAAC,CAAC;YAC9E,KAAK,mCAAmC,CAAC,cAAc;gBACrD,MAAM,IAAI,YAAY,CAAC,2BAA2B,CAAC,CAAC;YACtD,KAAK,mCAAmC,CAAC,OAAO;gBAC9C,MAAM;YACR;gBACE,WAAW,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IAED,MAAM,gBAAgB,CAAC;QACrB,kBAAkB,EAAE,eAAe,CAAC,EAAE;QACtC,OAAO,EAAE,UAAU,CAAC,UAAU,CAAC,OAAO;KACvC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oCAAoC,CAAC,EACzD,OAAO,EACP,kBAAkB,GACnB;IACC,OAAO,MAAM,gBAAgB,CAC3B,GAAG,CAAC,6CAA6C,EACjD,EAAE,OAAO,EAAE,kBAAkB,EAAE,EAC/B,gBAAgB,CACjB,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,EAC3C,KAAK,EACL,kBAAkB,GAInB;IACC,OAAO,MAAM,qBAAqB,CAAC,KAAK,IAAI,EAAE;QAC5C,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,MAAM,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACxE,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import * as error from '@prairielearn/error';\nimport {\n  loadSqlEquiv,\n  queryAsync,\n  queryOptionalRow,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\n\nimport {\n  PotentialEnterpriseEnrollmentStatus,\n  checkPotentialEnterpriseEnrollment,\n} from '../ee/models/enrollment.js';\nimport {\n  type Course,\n  type CourseInstance,\n  type Enrollment,\n  EnrollmentSchema,\n  type Institution,\n} from '../lib/db-types.js';\nimport { isEnterprise } from '../lib/license.js';\nimport { HttpRedirect } from '../lib/redirect.js';\nimport { assertNever } from '../lib/types.js';\n\nimport { generateUsers } from './user.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function ensureEnrollment({\n  course_instance_id,\n  user_id,\n}: {\n  course_instance_id: string;\n  user_id: string;\n}): Promise<void> {\n  await queryAsync(sql.ensure_enrollment, { course_instance_id, user_id });\n}\n\n/**\n * Ensures that the user is enrolled in the given course instance. If the\n * enrollment already exists, this is a no-op.\n *\n * For enterprise installations, this will also check if the user is eligible\n * for an enrollment. They are considered eligible if they have all required\n * plan grants and if their enrollment wouldn't cause an institution or course\n * instance enrollment limit to be exceeded.\n *\n * If the user was successfully enrolled, returns true. Otherwise, returns\n * false. If false is returned, the response has already been redirected to\n * an appropriate page.\n */\nexport async function ensureCheckedEnrollment({\n  institution,\n  course,\n  course_instance,\n  authz_data,\n}: {\n  institution: Institution;\n  course: Course;\n  course_instance: CourseInstance;\n  authz_data: any;\n}) {\n  // Safety check: ensure the student would otherwise have access to the course.\n  // If they don't, throw an access denied error. In most cases, this should\n  // have already been checked.\n  if (!authz_data.has_student_access) {\n    throw new error.HttpStatusError(403, 'Access denied');\n  }\n\n  if (isEnterprise()) {\n    const status = await checkPotentialEnterpriseEnrollment({\n      institution,\n      course,\n      course_instance,\n      authz_data,\n    });\n\n    switch (status) {\n      case PotentialEnterpriseEnrollmentStatus.PLAN_GRANTS_REQUIRED:\n        throw new HttpRedirect(`/pl/course_instance/${course_instance.id}/upgrade`);\n      case PotentialEnterpriseEnrollmentStatus.LIMIT_EXCEEDED:\n        throw new HttpRedirect('/pl/enroll/limit_exceeded');\n      case PotentialEnterpriseEnrollmentStatus.ALLOWED:\n        break;\n      default:\n        assertNever(status);\n    }\n  }\n\n  await ensureEnrollment({\n    course_instance_id: course_instance.id,\n    user_id: authz_data.authn_user.user_id,\n  });\n}\n\nexport async function getEnrollmentForUserInCourseInstance({\n  user_id,\n  course_instance_id,\n}): Promise<Enrollment | null> {\n  return await queryOptionalRow(\n    sql.select_enrollment_for_user_in_course_instance,\n    { user_id, course_instance_id },\n    EnrollmentSchema,\n  );\n}\n\nexport async function generateAndEnrollUsers({\n  count,\n  course_instance_id,\n}: {\n  count: number;\n  course_instance_id: string;\n}) {\n  return await runInTransactionAsync(async () => {\n    const users = await generateUsers(count);\n    for (const user of users) {\n      await ensureEnrollment({ course_instance_id, user_id: user.user_id });\n    }\n    return users;\n  });\n}\n"]}