{"version":3,"file":"grading-job.js","sourceRoot":"","sources":["../../src/models/grading-job.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,YAAY,EACZ,gBAAgB,EAChB,QAAQ,EACR,qBAAqB,GACtB,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EAEL,gBAAgB,EAChB,QAAQ,EAER,gBAAgB,GACjB,MAAM,oBAAoB,CAAC;AAE5B,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAI1C,MAAM,UAAU,gBAAgB,CAAC,UAA6B;IAC5D,IAAI,UAAU,IAAI,IAAI;QAAE,OAAO,MAAM,CAAC;IACtC,IAAI,UAAU,CAAC,2BAA2B,IAAI,IAAI;QAAE,OAAO,UAAU,CAAC;IACtE,IAAI,UAAU,CAAC,SAAS,IAAI,IAAI;QAAE,OAAO,QAAQ,CAAC;IAClD,IAAI,UAAU,CAAC,mBAAmB,IAAI,IAAI;QAAE,OAAO,SAAS,CAAC;IAC7D,IAAI,UAAU,CAAC,oBAAoB,IAAI,IAAI;QAAE,OAAO,QAAQ,CAAC;IAC7D,OAAO,WAAW,CAAC;AACrB,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,cAAsB;IAEtB,OAAO,MAAM,gBAAgB,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE,cAAc,EAAE,EAAE,gBAAgB,CAAC,CAAC;AAC9F,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,EACrC,aAAa,EACb,aAAa,GAId;IACC,OAAO,MAAM,qBAAqB,CAAC,KAAK,IAAI,EAAE;QAC5C,MAAM,SAAS,CAAC,kBAAkB,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;QACrD,MAAM,EAAE,sBAAsB,EAAE,MAAM,EAAE,GAAG,WAAW,EAAE,GAAG,MAAM,QAAQ,CACvE,GAAG,CAAC,kBAAkB,EACtB,EAAE,aAAa,EAAE,aAAa,EAAE,EAChC,gBAAgB,CAAC,MAAM,CAAC;YACtB,sBAAsB,EAAE,QAAQ,CAAC,QAAQ,EAAE;YAC3C,MAAM,EAAE,gBAAgB,CAAC,KAAK,CAAC,MAAM;SACtC,CAAC,CACH,CAAC;QACF,IAAI,sBAAsB,IAAI,IAAI,EAAE,CAAC;YACnC,MAAM,SAAS,CAAC,4BAA4B,EAAE;gBAC5C,sBAAsB;gBACtB,aAAa;gBACb,MAAM;aACP,CAAC,CAAC;QACL,CAAC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAAC,EACjD,cAAc,EACd,aAAa,EACb,UAAU,EACV,WAAW,EACX,gBAAgB,EAChB,aAAa,EACb,QAAQ,EACR,MAAM,EACN,MAAM,EACN,WAAW,EACX,QAAQ,EACR,cAAc,EACd,KAAK,EACL,QAAQ,GAgBT;IACC,OAAO,MAAM,OAAO,CAClB,mCAAmC,EACnC;QACE,cAAc;QACd,aAAa;QACb,UAAU;QACV,WAAW;QACX,gBAAgB;QAChB,aAAa;QACb,QAAQ;QACR,MAAM;QACN,MAAM;QACN,WAAW;QACX,QAAQ;QACR,cAAc;QACd,KAAK;QACL,QAAQ;KACT,EACD,gBAAgB,CACjB,CAAC;AACJ,CAAC","sourcesContent":["import {\n  callAsync,\n  callRow,\n  loadSqlEquiv,\n  queryOptionalRow,\n  queryRow,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\n\nimport {\n  type GradingJob,\n  GradingJobSchema,\n  IdSchema,\n  type Submission,\n  SubmissionSchema,\n} from '../lib/db-types.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport type GradingJobStatus = 'none' | 'canceled' | 'queued' | 'grading' | 'graded' | 'requested';\n\nexport function gradingJobStatus(gradingJob: GradingJob | null): GradingJobStatus {\n  if (gradingJob == null) return 'none';\n  if (gradingJob.grading_request_canceled_at != null) return 'canceled';\n  if (gradingJob.graded_at != null) return 'graded';\n  if (gradingJob.grading_received_at != null) return 'grading';\n  if (gradingJob.grading_submitted_at != null) return 'queued';\n  return 'requested';\n}\n\n/**\n * Select a grading job by ID, returning null if it does not exist.\n *\n * @param grading_job_id The grading job ID.\n * @returns The grading job, or null if it does not exist.\n */\nexport async function selectOptionalGradingJobById(\n  grading_job_id: string,\n): Promise<GradingJob | null> {\n  return await queryOptionalRow(sql.select_grading_job, { grading_job_id }, GradingJobSchema);\n}\n\nexport async function insertGradingJob({\n  submission_id,\n  authn_user_id,\n}: {\n  submission_id: string;\n  authn_user_id: string | null;\n}): Promise<GradingJob> {\n  return await runInTransactionAsync(async () => {\n    await callAsync('submissions_lock', [submission_id]);\n    const { assessment_instance_id, credit, ...grading_job } = await queryRow(\n      sql.insert_grading_job,\n      { submission_id, authn_user_id },\n      GradingJobSchema.extend({\n        assessment_instance_id: IdSchema.nullable(),\n        credit: SubmissionSchema.shape.credit,\n      }),\n    );\n    if (assessment_instance_id != null) {\n      await callAsync('assessment_instances_grade', [\n        assessment_instance_id,\n        authn_user_id,\n        credit,\n      ]);\n    }\n    return grading_job;\n  });\n}\n\nexport async function updateGradingJobAfterGrading({\n  grading_job_id,\n  received_time,\n  start_time,\n  finish_time,\n  submitted_answer,\n  format_errors,\n  gradable,\n  broken,\n  params,\n  true_answer,\n  feedback,\n  partial_scores,\n  score,\n  v2_score,\n}: {\n  grading_job_id: string;\n  received_time?: Date | null; // null => no change\n  start_time?: Date | null; // null => no change\n  finish_time?: Date | null; // null => now()\n  submitted_answer?: Submission['submitted_answer'] | null; // null => no change\n  format_errors?: Submission['format_errors'];\n  gradable: Submission['gradable'];\n  broken: Submission['broken'];\n  params?: Submission['params'] | null; // null => no change\n  true_answer?: Submission['true_answer'] | null; // null => no change\n  feedback?: Submission['feedback'];\n  partial_scores?: Submission['partial_scores'];\n  score?: Submission['score'];\n  v2_score?: Submission['v2_score'];\n}): Promise<GradingJob> {\n  return await callRow(\n    'grading_jobs_update_after_grading',\n    [\n      grading_job_id,\n      received_time,\n      start_time,\n      finish_time,\n      submitted_answer,\n      format_errors,\n      gradable,\n      broken,\n      params,\n      true_answer,\n      feedback,\n      partial_scores,\n      score,\n      v2_score,\n    ],\n    GradingJobSchema,\n  );\n}\n"]}