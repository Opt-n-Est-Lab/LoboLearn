{"version":3,"file":"questions.js","sourceRoot":"","sources":["../../src/models/questions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EACL,kCAAkC,EAClC,gBAAgB,EAChB,SAAS,EACT,WAAW,GACZ,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,MAAM,uBAAuB,GAAG,CAAC,CAAC,MAAM,CAAC;IACvC,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;IACd,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;IACf,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE;IACjB,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;IAC7C,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;IAC/C,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE;IAC1B,sBAAsB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC7C,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE;IACxB,gBAAgB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACvC,KAAK,EAAE,WAAW;IAClB,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE;IACnC,cAAc,EAAE,CAAC,CAAC,OAAO,EAAE;IAC3B,qBAAqB,EAAE,CAAC,CAAC,OAAO,EAAE;IAClC,YAAY,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;IAC7D,WAAW,EAAE,kCAAkC,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;CACtE,CAAC,CAAC;AAGH,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,SAA0B,EAC1B,mBAA6B;IAE7B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,SAAS,CAChC,GAAG,CAAC,2BAA2B,EAC/B;QACE,SAAS;KACV,EACD,uBAAuB,CACxB,CAAC;IAEF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACnC,GAAG,GAAG;QACN,WAAW,EACT,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CACrC,mBAAmB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAC9E,IAAI,IAAI;KACZ,CAAC,CAAC,CAAC;IACJ,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,SAA0B;IAE1B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,SAAS,CAChC,GAAG,CAAC,kCAAkC,EACtC;QACE,SAAS;KACV,EACD,uBAAuB,CACxB,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport {\n  AssessmentsFormatForQuestionSchema,\n  SharingSetSchema,\n  TagSchema,\n  TopicSchema,\n} from '../lib/db-types.js';\nimport { idsEqual } from '../lib/id.js';\n\nconst QuestionsPageDataSchema = z.object({\n  id: z.string(),\n  qid: z.string(),\n  title: z.string(),\n  sync_errors: z.string().nullable().optional(),\n  sync_warnings: z.string().nullable().optional(),\n  grading_method: z.string(),\n  external_grading_image: z.string().nullable(),\n  display_type: z.string(),\n  open_issue_count: z.number().default(0),\n  topic: TopicSchema,\n  tags: z.array(TagSchema).nullable(),\n  share_publicly: z.boolean(),\n  share_source_publicly: z.boolean(),\n  sharing_sets: z.array(SharingSetSchema).nullable().optional(),\n  assessments: AssessmentsFormatForQuestionSchema.nullable().optional(),\n});\nexport type QuestionsPageData = z.infer<typeof QuestionsPageDataSchema>;\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport async function selectQuestionsForCourse(\n  course_id: string | number,\n  course_instance_ids: string[],\n): Promise<QuestionsPageData[]> {\n  const rows = await sqldb.queryRows(\n    sql.select_questions_for_course,\n    {\n      course_id,\n    },\n    QuestionsPageDataSchema,\n  );\n\n  const questions = rows.map((row) => ({\n    ...row,\n    assessments:\n      row.assessments?.filter((assessment) =>\n        course_instance_ids.some((id) => idsEqual(id, assessment.course_instance_id)),\n      ) ?? null,\n  }));\n  return questions;\n}\n\nexport async function selectPublicQuestionsForCourse(\n  course_id: string | number,\n): Promise<QuestionsPageData[]> {\n  const rows = await sqldb.queryRows(\n    sql.select_public_questions_for_course,\n    {\n      course_id,\n    },\n    QuestionsPageDataSchema,\n  );\n\n  return rows;\n}\n"]}