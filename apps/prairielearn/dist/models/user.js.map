{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/models/user.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElF,OAAO,EAAa,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAC3D,OAAO,KAAK,KAAK,MAAM,iBAAiB,CAAC;AAEzC,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,OAAe;IAClD,OAAO,MAAM,QAAQ,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,EAAE,UAAU,CAAC,CAAC;AACxE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,GAAW;IACvD,OAAO,MAAM,gBAAgB,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;AAC7E,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,OAAe;IACzD,OAAO,MAAM,QAAQ,CAAC,GAAG,CAAC,0BAA0B,EAAE,EAAE,OAAO,EAAE,EAAE,UAAU,CAAC,CAAC;AACjF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,GAAW;IACvD,OAAO,MAAM,QAAQ,CAAC,GAAG,CAAC,4BAA4B,EAAE,EAAE,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;AAC/E,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,KAAa;IAC/C,MAAM,KAAK,GAAW,EAAE,CAAC;IACzB,OAAO,KAAK,CAAC,MAAM,GAAG,KAAK,EAAE,CAAC;QAC5B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,gBAAgB,EAAE,CAAC;QACjD,MAAM,IAAI,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,UAAU,CAAC,CAAC;QAC9F,wFAAwF;QACxF,IAAI,IAAI;YAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY;IAChC,OAAO,CAAC,MAAM,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import { loadSqlEquiv, queryOptionalRow, queryRow } from '@prairielearn/postgres';\n\nimport { type User, UserSchema } from '../lib/db-types.js';\nimport * as faker from '../lib/faker.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport async function selectUserById(user_id: string): Promise<User> {\n  return await queryRow(sql.select_user_by_id, { user_id }, UserSchema);\n}\n\nexport async function selectOptionalUserByUid(uid: string): Promise<User | null> {\n  return await queryOptionalRow(sql.select_user_by_uid, { uid }, UserSchema);\n}\n\n/**\n * Locks the user with `SELECT ... FOR NO KEY UPDATE` and returns the user.\n */\nexport async function selectAndLockUserById(user_id: string): Promise<User> {\n  return await queryRow(sql.select_and_lock_user_by_id, { user_id }, UserSchema);\n}\n\nexport async function selectOrInsertUserByUid(uid: string): Promise<User> {\n  return await queryRow(sql.select_or_insert_user_by_uid, { uid }, UserSchema);\n}\n\nexport async function generateUsers(count: number): Promise<User[]> {\n  const users: User[] = [];\n  while (users.length < count) {\n    const { name, email } = faker.fakeNameAndEmail();\n    const user = await queryOptionalRow(sql.insert_user, { name, uid: email, email }, UserSchema);\n    // If the user already exists, we don't want to add them to the list of generated users.\n    if (user) users.push(user);\n  }\n  return users;\n}\n\nexport async function generateUser(): Promise<User> {\n  return (await generateUsers(1))[0];\n}\n"]}