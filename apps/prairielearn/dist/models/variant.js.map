{"version":3,"file":"variant.js","sourceRoot":"","sources":["../../src/models/variant.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport { z } from 'zod';\n\nimport { AugmentedError } from '@prairielearn/error';\nimport {\n  callRow,\n  loadSqlEquiv,\n  queryAsync,\n  queryOptionalRow,\n  queryRow,\n  queryRows,\n} from '@prairielearn/postgres';\n\nimport {\n  type Course,\n  IdSchema,\n  SubmissionSchema,\n  type User,\n  type Variant,\n  VariantSchema,\n} from '../lib/db-types.js';\nimport { idsEqual } from '../lib/id.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\n// Currently, users of this type only care about these specific columns, so\n// we'll only select and return them. Variants can contain quite a bit of\n// data in `params` and such, so this reduces the amount of useless data that\n// flows over the wire.\nexport const SimpleVariantWithScoreSchema = VariantSchema.pick({\n  id: true,\n  open: true,\n}).extend({\n  // Since only variants assigned to instance questions are returned, this is never null.\n  instance_question_id: IdSchema,\n  max_submission_score: SubmissionSchema.shape.score.unwrap(),\n});\nexport type SimpleVariantWithScore = z.infer<typeof SimpleVariantWithScoreSchema>;\n\nexport async function resetVariantsForAssessmentQuestion({\n  assessment_id,\n  unsafe_assessment_question_id,\n  authn_user_id,\n}: {\n  assessment_id: string;\n  unsafe_assessment_question_id: string;\n  authn_user_id: string;\n}) {\n  await queryAsync(sql.reset_variants_for_assessment_question, {\n    assessment_id,\n    unsafe_assessment_question_id,\n    authn_user_id,\n  });\n}\n\nexport async function resetVariantsForInstanceQuestion({\n  assessment_instance_id,\n  unsafe_instance_question_id,\n  authn_user_id,\n}: {\n  assessment_instance_id: string;\n  unsafe_instance_question_id: string;\n  authn_user_id: string;\n}) {\n  await queryAsync(sql.reset_variants_for_instance_question, {\n    assessment_instance_id,\n    unsafe_instance_question_id,\n    authn_user_id,\n  });\n}\n\nexport async function selectVariantsByInstanceQuestion({\n  assessment_instance_id,\n  instance_question_id,\n}: {\n  assessment_instance_id: string;\n  instance_question_id?: string;\n}) {\n  return await queryRows(\n    sql.select_variant_by_instance_question_id,\n    { assessment_instance_id, instance_question_id },\n    SimpleVariantWithScoreSchema,\n  );\n}\n\n/**\n * Returns whether the given user owns the given variant. There are two cases:\n *\n * - For group work, a user is considered to own a variant if they are in the\n *   group for the assessment instance that the variant is associated with.\n * - For non-group work, a user is considered to own a variant if they are the\n *   user that created the variant, as tracked in `variants.user_id`.\n */\nexport async function selectUserOwnsVariant({\n  user_id,\n  variant_id,\n}: {\n  user_id: string;\n  variant_id: string;\n}): Promise<boolean> {\n  return await queryRow(sql.select_user_owns_variant, { user_id, variant_id }, z.boolean());\n}\n\n/**\n * TODO: We need to add checks for public question previews. That page should\n * only allow viewing of variants that are owned by the current user and that\n * were created on the public question preview page.\n */\nexport async function selectAndAuthzVariant(options: {\n  unsafe_variant_id: string;\n  variant_course: Course;\n  question_id: string;\n  course_instance_id?: string;\n  instance_question_id?: string;\n  authz_data?: Record<string, any>;\n  authn_user: User;\n  user: User;\n  is_administrator: boolean;\n  publicQuestionPreview?: boolean;\n}): Promise<Variant> {\n  const {\n    unsafe_variant_id,\n    variant_course,\n    question_id,\n    course_instance_id,\n    instance_question_id = null,\n    authz_data,\n    authn_user,\n    user,\n    is_administrator,\n    publicQuestionPreview,\n  } = options;\n\n  const variant = await queryOptionalRow(\n    sql.select_variant_by_id,\n    { variant_id: unsafe_variant_id },\n    VariantSchema,\n  );\n\n  function denyAccess(): never {\n    throw new AugmentedError('Access denied', {\n      status: 403,\n      data: options,\n    });\n  }\n\n  if (variant == null) denyAccess();\n  if (!idsEqual(variant.question_id, question_id)) denyAccess();\n  if (!idsEqual(variant.course_id, variant_course.id)) denyAccess();\n\n  if (\n    instance_question_id != null &&\n    (!variant.instance_question_id || !idsEqual(variant.instance_question_id, instance_question_id))\n  ) {\n    denyAccess();\n  }\n\n  // In most courses, we want any variants (at least those not associated with a\n  // particular assessment instance) to be accessible to anyone on course staff\n  // to allow for debugging, investigations, etc. However, since the example\n  // course has looser restrictions on who can be considered course staff, we'll\n  // restrict any variant in the example course to only be accessible to the\n  // user who created it. We'll make an exception for global administrators.\n  //\n  // We'll apply the same logic on the public question preview page so that we\n  // avoid the possibility of leaking information from a variant created by\n  // course staff to someone who isn't course staff.\n  //\n  // TODO: Once we're tracking the context in which a variant was created, we\n  // can improve this check to also assert that variants created on the public\n  // question preview page are not accessible to course staff. Put differently:\n  // people outside the course shouldn't be able to see things created inside\n  // the course, and people inside the course shouldn't be able to see things\n  // created outside the course.\n  //\n  // We'll have to think about how that interacts with automatically-reported\n  // issues. While we want to default to keeping user data private, we also want\n  // to allow people to opt in to having their issue/variant be visible to\n  // course staff for debugging. We could add a button on the public preview\n  // page that would make the given variant visible to course staff for\n  // debugging?\n  if ((variant_course.example_course || publicQuestionPreview) && !is_administrator) {\n    const userOwnsVariant = await selectUserOwnsVariant({\n      user_id: user.user_id,\n      variant_id: variant.id,\n    });\n    if (!userOwnsVariant) {\n      denyAccess();\n    }\n  }\n\n  if (variant.instance_question_id && !instance_question_id) {\n    // This variant is associated with a particular instance question, and thus\n    // is considered to be student data. However, we're not viewing it in the\n    // context of an assessment; in other words, we're probably viewing it on\n    // the instructor question preview. We need to ensure that the current user\n    // has the necessary permissions to view student data in the course instance\n    // that contains this variant.\n    assert(variant.course_instance_id, 'Missing course instance ID for variant');\n\n    // We'll at first assume the easy case: the user is accessing the variant\n    // from a course instance route and the course instance is the same as the\n    // variant's course instance.\n    let authnHasCourseInstancePermissionView =\n      authz_data?.authn_has_course_instance_permission_view;\n    let hasCourseInstancePermissionView = authz_data?.has_course_permission_view;\n\n    // If we're missing authz data, accessing the variant from a\n    // non-course-instance route, or accessing the variant from a different\n    // course instance, we need to get the user's actual permissions within that\n    // course instance.\n    if (\n      authnHasCourseInstancePermissionView == null ||\n      hasCourseInstancePermissionView == null ||\n      course_instance_id == null ||\n      !idsEqual(course_instance_id, variant.course_instance_id)\n    ) {\n      const authnUserPermissions = await callRow(\n        'authz_course_instance',\n        [authn_user.user_id, variant.course_instance_id, is_administrator, new Date(), null],\n        z.object({ has_course_instance_permission_view: z.boolean() }),\n      );\n\n      const userPermissions = await callRow(\n        'authz_course_instance',\n        [user.user_id, variant.course_instance_id, is_administrator, new Date(), null],\n        z.object({ has_course_instance_permission_view: z.boolean() }),\n      );\n\n      authnHasCourseInstancePermissionView =\n        authnUserPermissions.has_course_instance_permission_view;\n      hasCourseInstancePermissionView = userPermissions.has_course_instance_permission_view;\n    }\n\n    // We'll only permit access if both the authenticated user and the\n    // effective user have student data viewer permissions in the course instance.\n    if (!authnHasCourseInstancePermissionView || !hasCourseInstancePermissionView) {\n      denyAccess();\n    }\n  }\n\n  return variant;\n}\n"]}