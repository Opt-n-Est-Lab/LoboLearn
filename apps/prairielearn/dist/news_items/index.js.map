{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/news_items/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'node:fs/promises';\nimport * as path from 'path';\n\nimport _ from 'lodash';\n\nimport { logger } from '@prairielearn/logger';\nimport * as namedLocks from '@prairielearn/named-locks';\nimport * as sqldb from '@prairielearn/postgres';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport { type NewsItem } from '../lib/db-types.js';\nimport * as jsonLoad from '../lib/json-load.js';\nimport * as schemas from '../schemas/index.js';\n\nconst DIRECTORY_REGEX = /^([0-9]+)_.+$/;\n\nasync function loadNewsItems() {\n  const news_items: NewsItem[] = [];\n  const dirs = await fs.readdir(import.meta.dirname);\n  for (const dir of dirs) {\n    // Skip anything that doesn't match the expected directory name format.\n    const match = DIRECTORY_REGEX.exec(dir);\n    if (!match) continue;\n\n    const info = await jsonLoad.readInfoJSON(\n      path.join(import.meta.dirname, dir, 'info.json'),\n      schemas.infoNewsItem,\n    );\n\n    news_items.push({\n      ...info,\n      directory: dir,\n      index: match[1],\n    });\n  }\n\n  // Check for duplicate UUIDs\n  Object.entries(_.groupBy(news_items, 'uuid')).forEach(([uuid, items]) => {\n    if (items.length > 1) {\n      const directories = items.map((a) => a.directory).join(', ');\n      throw new Error(`UUID ${uuid} is used in multiple news items: ${directories}`);\n    }\n  });\n\n  // Check for duplicate indexes\n  Object.entries(_.groupBy(news_items, 'index')).forEach(([index, items]) => {\n    if (items.length > 1) {\n      const directories = items.map((a) => a.directory).join(', ');\n      throw new Error(`News item index ${index} is used in multiple news items: ${directories}`);\n    }\n  });\n\n  return _.sortBy(news_items, 'directory');\n}\n\ninterface InitOptions {\n  notifyIfPreviouslyEmpty: boolean;\n  errorIfLockNotAcquired?: boolean;\n}\n\nexport async function init({\n  notifyIfPreviouslyEmpty,\n  errorIfLockNotAcquired = false,\n}: InitOptions) {\n  await namedLocks.doWithLock(\n    'news_items',\n    {\n      autoRenew: true,\n      onNotAcquired: () => {\n        if (errorIfLockNotAcquired) {\n          throw new Error('Could not acquire lock for news items initialization.');\n        } else {\n          logger.info('Another instance is already initializing news items. Skipping.');\n        }\n      },\n    },\n    async () => {\n      const news_items = await loadNewsItems();\n      await sqldb.callAsync('sync_news_items', [\n        JSON.stringify(news_items),\n        notifyIfPreviouslyEmpty,\n      ]);\n    },\n  );\n}\n\n/**\n * Initializes news\n */\nexport async function initInBackground(options: InitOptions) {\n  init(options).catch((err) => {\n    logger.error('Error initializing news items', err);\n    Sentry.captureException(err);\n  });\n}\n"]}