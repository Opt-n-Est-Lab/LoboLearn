{"version":3,"file":"administratorAdmins.js","sourceRoot":"","sources":["../../../src/pages/administratorAdmins/administratorAdmins.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAEnD,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AAEpE,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAChC,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;IACxE,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,IAAI,CACT,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB;QAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAE9E,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,mCAAmC,EAAE,CAAC;QAC9D,MAAM,KAAK,CAAC,SAAS,CAAC,mCAAmC,EAAE;YACzD,GAAG,CAAC,IAAI,CAAC,GAAG;YACZ,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;SAC9B,CAAC,CAAC;QACH,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;SAAM,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,kCAAkC,EAAE,CAAC;QACpE,MAAM,KAAK,CAAC,SAAS,CAAC,kCAAkC,EAAE;YACxD,GAAG,CAAC,IAAI,CAAC,OAAO;YAChB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;SAC9B,CAAC,CAAC;QACH,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,qBAAqB,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjF,CAAC;AACH,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { UserSchema } from '../../lib/db-types.js';\n\nimport { AdministratorAdmins } from './administratorAdmins.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const admins = await sqldb.queryRows(sql.select_admins, [], UserSchema);\n    res.send(AdministratorAdmins({ admins, resLocals: res.locals }));\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.is_administrator) throw new Error('Insufficient permissions');\n\n    if (req.body.__action === 'administrators_insert_by_user_uid') {\n      await sqldb.callAsync('administrators_insert_by_user_uid', [\n        req.body.uid,\n        res.locals.authn_user.user_id,\n      ]);\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'administrators_delete_by_user_id') {\n      await sqldb.callAsync('administrators_delete_by_user_id', [\n        req.body.user_id,\n        res.locals.authn_user.user_id,\n      ]);\n      res.redirect(req.originalUrl);\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}