{"version":3,"file":"administratorQueries.js","sourceRoot":"","sources":["../../../src/pages/administratorQueries/administratorQueries.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,UAAU,MAAM,kBAAkB,CAAC;AAC/C,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,QAAQ,MAAM,wBAAwB,CAAC;AAEnD,OAAO,EACL,oBAAoB,EAEpB,4BAA4B,GAC7B,MAAM,gCAAgC,CAAC;AAExC,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAChC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;AAElF,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACrC,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D,MAAM,OAAO,GAAyB,MAAM,OAAO,CAAC,GAAG,CACrD,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;QACvB,MAAM,QAAQ,GAAG,4BAA4B,CAAC,KAAK,CACjD,MAAM,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAClD,CAAC;QACF,MAAM,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAC5C,OAAO,EAAE,GAAG,QAAQ,EAAE,UAAU,EAAE,CAAC;IACrC,CAAC,CAAC,CACH,CAAC;IACF,GAAG,CAAC,IAAI,CACN,oBAAoB,CAAC;QACnB,SAAS,EAAE,GAAG,CAAC,MAAM;QACrB,OAAO;KACR,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import * as fsPromises from 'node:fs/promises';\nimport * as path from 'path';\n\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as jsonLoad from '../../lib/json-load.js';\n\nimport {\n  AdministratorQueries,\n  type AdministratorQuery,\n  AdministratorQueryJsonSchema,\n} from './administratorQueries.html.js';\n\nconst router = express.Router();\nconst queriesDir = path.resolve(import.meta.dirname, '..', '..', 'admin_queries');\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res, _next) => {\n    const fileList = await fsPromises.readdir(queriesDir);\n    const jsonList = fileList.filter((f) => /\\.json$/.test(f));\n    const queries: AdministratorQuery[] = await Promise.all(\n      jsonList.map(async (f) => {\n        const contents = AdministratorQueryJsonSchema.parse(\n          await jsonLoad.readJSON(path.join(queriesDir, f)),\n        );\n        const filePrefix = f.replace(/\\.json$/, '');\n        return { ...contents, filePrefix };\n      }),\n    );\n    res.send(\n      AdministratorQueries({\n        resLocals: res.locals,\n        queries,\n      }),\n    );\n  }),\n);\n\nexport default router;\n"]}