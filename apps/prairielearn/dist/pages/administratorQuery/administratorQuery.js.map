{"version":3,"file":"administratorQuery.js","sourceRoot":"","sources":["../../../src/pages/administratorQuery/administratorQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'node:path';\n\nimport express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { stringify } from '@prairielearn/csv';\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport type { AdministratorQueryResult } from '../../admin_queries/util.js';\nimport { IdSchema, type QueryRun, QueryRunSchema } from '../../lib/db-types.js';\nimport * as jsonLoad from '../../lib/json-load.js';\n\nimport {\n  AdministratorQuery,\n  AdministratorQuerySchema,\n  QueryRunRowSchema,\n} from './administratorQuery.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst queriesDir = path.resolve(import.meta.dirname, '..', '..', 'admin_queries');\n\nrouter.get(\n  '/:query',\n  asyncHandler(async (req, res, next) => {\n    const jsonFilename = req.params.query + '.json';\n    const queryFilename = req.params.query + '.js';\n\n    const info = AdministratorQuerySchema.parse(\n      await jsonLoad.readJSON(path.join(queriesDir, jsonFilename)),\n    );\n\n    let query_run_id: string | null = null;\n    let query_run: QueryRun | null = null;\n    if (req.query.query_run_id) {\n      query_run_id = IdSchema.parse(req.query.query_run_id);\n      query_run = await sqldb.queryRow(sql.select_query_run, { query_run_id }, QueryRunSchema);\n    }\n\n    if (!query_run && info.params == null) {\n      // if we don't have any params, do an immediate POST to run the query\n      req.method = 'POST';\n      return next();\n    }\n\n    if (req.query.format === 'json') {\n      res.attachment(req.params.query + '.json');\n      res.send(query_run?.result?.rows);\n    } else if (req.query.format === 'csv') {\n      res.attachment(req.params.query + '.csv');\n      if (query_run?.result != null) {\n        stringify(query_run.result?.rows, {\n          header: true,\n          columns: query_run.result?.columns,\n        }).pipe(res);\n      } else {\n        res.send('');\n      }\n    } else {\n      const recent_query_runs = await sqldb.queryRows(\n        sql.select_recent_query_runs,\n        { query_name: req.params.query },\n        QueryRunRowSchema,\n      );\n      res.send(\n        AdministratorQuery({\n          resLocals: res.locals,\n          query_run_id,\n          query_run,\n          queryFilename,\n          info,\n          recent_query_runs,\n        }),\n      );\n    }\n  }),\n);\n\nrouter.post(\n  '/:query',\n  asyncHandler(async (req, res, _next) => {\n    const jsonFilename = req.params.query + '.json';\n    const queryFilename = req.params.query + '.js';\n\n    const info = AdministratorQuerySchema.parse(\n      await jsonLoad.readJSON(path.join(queriesDir, jsonFilename)),\n    );\n\n    const queryParams: Record<string, string> = {};\n    info.params?.forEach((p) => {\n      queryParams[p.name] = req.body[p.name];\n    });\n\n    let error: string | null = null;\n    let result: AdministratorQueryResult | null = null;\n    try {\n      const module = await import(path.join(queriesDir, queryFilename));\n      result = (await module.default(queryParams)) as AdministratorQueryResult;\n    } catch (err) {\n      logger.error(err);\n      error = err.toString();\n    }\n\n    const query_run_id = await sqldb.queryRow(\n      sql.insert_query_run,\n      {\n        name: req.params.query,\n        params: queryParams,\n        authn_user_id: res.locals.authn_user.user_id,\n        error,\n        // While rowCount is not used in the frontend, it used to be required,\n        // so it is included in the result object for backwards compatibility if\n        // a newer query run is viewed in an older version of this page.\n        result: result ? { ...result, rowCount: result.rows.length } : null,\n      },\n      IdSchema,\n    );\n    res.redirect(`${req.baseUrl}${req.path}?query_run_id=${query_run_id}`);\n  }),\n);\n\nexport default router;\n"]}