{"version":3,"file":"administratorSettings.js","sourceRoot":"","sources":["../../../src/pages/administratorSettings/administratorSettings.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport OpenAI from 'openai';\n\nimport { cache } from '@prairielearn/cache';\nimport * as error from '@prairielearn/error';\n\nimport * as chunks from '../../lib/chunks.js';\nimport { config } from '../../lib/config.js';\nimport { IdSchema } from '../../lib/db-types.js';\nimport { isEnterprise } from '../../lib/license.js';\n\nimport { AdministratorSettings } from './administratorSettings.html.js';\n\nconst router = express.Router();\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    res.send(AdministratorSettings({ resLocals: res.locals }));\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.is_administrator) throw new Error('Insufficient permissions');\n\n    if (req.body.__action === 'invalidate_question_cache') {\n      await cache.reset();\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'generate_chunks') {\n      const course_ids_string: string = req.body.course_ids || '';\n      const authn_user_id: string = res.locals.authn_user.user_id;\n\n      let course_ids: string[];\n      try {\n        course_ids = course_ids_string.split(',').map((x) => IdSchema.parse(x));\n      } catch {\n        throw new error.HttpStatusError(\n          400,\n          `could not split course_ids into an array of integers: ${course_ids_string}`,\n        );\n      }\n      const jobSequenceId = await chunks.generateAllChunksForCourseList(course_ids, authn_user_id);\n      res.redirect(res.locals.urlPrefix + '/administrator/jobSequence/' + jobSequenceId);\n    } else if (req.body.__action === 'sync_context_documents' && isEnterprise()) {\n      if (!config.openAiApiKey || !config.openAiOrganization) {\n        throw new error.HttpStatusError(403, 'Not implemented (feature not available)');\n      }\n\n      const client = new OpenAI({\n        apiKey: config.openAiApiKey,\n        organization: config.openAiOrganization,\n      });\n\n      const { syncContextDocuments } = await import('../../ee/lib/contextEmbeddings.js');\n      const jobSequenceId = await syncContextDocuments(client, res.locals.authn_user.user_id);\n      res.redirect('/pl/administrator/jobSequence/' + jobSequenceId);\n    } else if (req.body.__action === 'benchmark_question_generation') {\n      // We intentionally only enable this in dev mode since it could pollute\n      // the production database.\n      if (!config.openAiApiKey || !config.openAiOrganization || !config.devMode) {\n        throw new error.HttpStatusError(403, 'Not implemented (feature not available)');\n      }\n\n      const client = new OpenAI({\n        apiKey: config.openAiApiKey,\n        organization: config.openAiOrganization,\n      });\n\n      const { benchmarkAiQuestionGeneration } = await import(\n        '../../ee/lib/ai-question-generation-benchmark.js'\n      );\n      const jobSequenceId = await benchmarkAiQuestionGeneration({\n        client,\n        authnUserId: res.locals.authn_user.user_id,\n      });\n      res.redirect(`/pl/administrator/jobSequence/${jobSequenceId}`);\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}