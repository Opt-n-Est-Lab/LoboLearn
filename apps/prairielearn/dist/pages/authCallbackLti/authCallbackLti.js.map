{"version":3,"file":"authCallbackLti.js","sourceRoot":"","sources":["../../../src/pages/authCallbackLti/authCallbackLti.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport oauthSignature from 'oauth-signature';\nimport { z } from 'zod';\n\nimport { cache } from '@prairielearn/cache';\nimport { HttpStatusError } from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../../lib/config.js';\nimport { IdSchema, LtiCredentialsSchema } from '../../lib/db-types.js';\n\nconst TIME_TOLERANCE_SEC = 3000;\n\nconst router = Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    const parameters = structuredClone(req.body);\n    const signature = req.body.oauth_signature;\n    delete parameters.oauth_signature;\n\n    const ltiRedirectUrl = config.ltiRedirectUrl;\n    if (!ltiRedirectUrl) {\n      throw new HttpStatusError(404, 'LTI not configured');\n    }\n\n    if (parameters.lti_message_type !== 'basic-lti-launch-request') {\n      throw new HttpStatusError(400, 'Unsupported lti_message_type');\n    }\n\n    if (parameters.lti_version !== 'LTI-1p0') {\n      throw new HttpStatusError(400, 'Unsupported lti_version');\n    }\n\n    if (!parameters.oauth_consumer_key) {\n      throw new HttpStatusError(400, 'Badly formed oauth_consumer_key');\n    }\n\n    if (!parameters.resource_link_id) {\n      throw new HttpStatusError(400, 'Badly formed resource_link_id');\n    }\n\n    // FIXME: could warn or throw an error if parameters.roles exists (no longer used)\n    // FIXME: could add a parameter that allows setting course role or course instance role\n\n    const ltiResult = await sqldb.queryOptionalRow(\n      sql.lookup_credential,\n      { consumer_key: parameters.oauth_consumer_key },\n      LtiCredentialsSchema,\n    );\n    if (!ltiResult) throw new HttpStatusError(403, 'Unknown consumer_key');\n\n    const genSignature = oauthSignature.generate(\n      'POST',\n      ltiRedirectUrl,\n      parameters,\n      // TODO: column should be `NOT NULL`\n      ltiResult.secret as string,\n      undefined,\n      { encodeSignature: false },\n    );\n    if (genSignature !== signature) {\n      throw new HttpStatusError(403, 'Invalid signature');\n    }\n\n    // Check oauth_timestamp within N seconds of now (3000 suggested)\n    const timeDiff = Math.abs(Math.floor(Date.now() / 1000) - parameters.oauth_timestamp);\n    if (timeDiff > TIME_TOLERANCE_SEC) {\n      throw new HttpStatusError(403, 'Invalid timestamp');\n    }\n\n    // Check nonce hasn't been used by that consumer_key in that timeframe\n    // https://oauth.net/core/1.0/#nonce\n    const nonceKey = 'authCallbackLti:' + parameters.oauth_timestamp + ':' + parameters.oauth_nonce;\n    const nonceVal = await cache.get(nonceKey);\n\n    if (nonceVal) {\n      throw new HttpStatusError(403, 'Nonce reused');\n    }\n\n    // Remember that this nonce was already used.\n    cache.set(nonceKey, true, TIME_TOLERANCE_SEC * 1000);\n\n    // OAuth validation succeeded, next look up and store user authn data\n    if (!parameters.user_id) {\n      throw new HttpStatusError(\n        400,\n        'Authentication problem: UserID required. Anonymous access disabled.',\n      );\n    }\n\n    // Create unique UID from LTI parameters and CI id\n    // Not using an email address (parameters.lis_person_contact_email_primary)\n    // so that LTI doesn't conflict with other UIDs.\n    const authUid =\n      parameters.user_id + '@' + parameters.context_id + '::ciid=' + ltiResult.course_instance_id;\n\n    let fallbackName = 'LTI user';\n    if (parameters.context_title) {\n      fallbackName = `${parameters.context_title} user`;\n      // e.g. UIUC Degree Sandbox user\n    }\n    const authName = parameters.lis_person_name_full || fallbackName;\n\n    const userResult = await sqldb.callOptionalRow(\n      'users_select_or_insert_and_enroll_lti',\n      [\n        authUid,\n        authName,\n        ltiResult.course_instance_id,\n        parameters.user_id,\n        parameters.context_id,\n        res.locals.req_date,\n      ],\n      z.object({\n        user_id: IdSchema,\n        has_access: z.boolean(),\n      }),\n    );\n    if (!userResult?.has_access) {\n      throw new HttpStatusError(403, 'Access denied');\n    }\n\n    // Persist the user's authentication data in the session.\n    req.session.user_id = userResult.user_id;\n    req.session.authn_provider_name = 'LTI';\n\n    const linkResult = await sqldb.queryOneRowAsync(sql.upsert_current_link, {\n      course_instance_id: ltiResult.course_instance_id,\n      context_id: parameters.context_id,\n      resource_link_id: parameters.resource_link_id,\n      resource_link_title: parameters.resource_link_title || '',\n      resource_link_description: parameters.resource_link_description || '',\n    });\n\n    // Do we have an assessment linked to this resource_link_id?\n    if (linkResult.rows[0].assessment_id) {\n      if ('lis_result_sourcedid' in parameters) {\n        // Save outcomes here\n        await sqldb.queryAsync(sql.upsert_outcome, {\n          user_id: userResult.user_id,\n          assessment_id: linkResult.rows[0].assessment_id,\n          lis_result_sourcedid: parameters.lis_result_sourcedid,\n          lis_outcome_service_url: parameters.lis_outcome_service_url,\n          lti_credential_id: ltiResult.id,\n        });\n      }\n\n      res.redirect(\n        `${res.locals.urlPrefix}/course_instance/${ltiResult.course_instance_id}/assessment/${linkResult.rows[0].assessment_id}/`,\n      );\n    } else {\n      // No linked assessment\n\n      const instructorResult = await sqldb.callAsync('users_is_instructor_in_course_instance', [\n        userResult.user_id,\n        ltiResult.course_instance_id,\n      ]);\n\n      if (instructorResult.rowCount === 0) {\n        throw new HttpStatusError(403, 'Access denied (could not determine if user is instructor)');\n      }\n\n      if (!instructorResult.rows[0].is_instructor) {\n        // Show an error that the assignment is unavailable\n        throw new HttpStatusError(403, 'Assignment not available yet');\n      }\n\n      res.redirect(\n        `${res.locals.urlPrefix}/course_instance/${ltiResult.course_instance_id}/instructor/instance_admin/lti`,\n      );\n    }\n  }),\n);\n\nexport default router;\n"]}