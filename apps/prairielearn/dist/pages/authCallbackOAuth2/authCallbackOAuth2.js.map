{"version":3,"file":"authCallbackOAuth2.js","sourceRoot":"","sources":["../../../src/pages/authCallbackOAuth2/authCallbackOAuth2.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { OAuth2Client } from 'google-auth-library';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { logger } from '@prairielearn/logger';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport * as authnLib from '../../lib/authn.js';\nimport { config } from '../../lib/config.js';\n\nconst router = Router();\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res, _next) => {\n    if (\n      !config.hasOauth ||\n      !config.googleClientId ||\n      !config.googleClientSecret ||\n      !config.googleRedirectUrl\n    ) {\n      throw new HttpStatusError(404, 'Google login is not enabled');\n    }\n\n    const code = req.query.code;\n    if (code == null) {\n      throw new Error('No \"code\" query parameter for authCallbackOAuth2');\n    } else if (typeof code !== 'string') {\n      throw new Error(`Invalid 'code' query parameter for authCallbackOAuth2: ${code}`);\n    }\n    // FIXME: should check req.query.state to avoid CSRF\n    const oauth2Client = new OAuth2Client(\n      config.googleClientId,\n      config.googleClientSecret,\n      config.googleRedirectUrl,\n    );\n\n    logger.verbose('Got Google auth with code: ' + code);\n    const { tokens } = await oauth2Client.getToken(code).catch((err) => {\n      if (err?.response) {\n        // This is probably a detailed error from the Google API client. We'll\n        // pick off the useful bits and attach them to the Sentry scope so that\n        // they'll be included with the error event.\n        const scope = Sentry.getCurrentScope();\n        scope.setContext('OAuth', {\n          code: err.code,\n          data: err.response.data,\n        });\n      }\n      throw err;\n    });\n\n    const idToken = tokens.id_token;\n    if (!idToken) {\n      throw new Error('Missing id_token in Google auth response');\n    }\n\n    // tokens.id_token is a JWT (JSON Web Token)\n    // http://openid.net/specs/draft-jones-json-web-token-07.html\n    // A JWT has the form HEADER.PAYLOAD.SIGNATURE\n    // We get the PAYLOAD, un-base64, parse to JSON:\n    const parts = idToken.split('.');\n    const identity = JSON.parse(Buffer.from(parts[1], 'base64').toString('utf-8'));\n    logger.verbose('Got Google auth identity: ' + JSON.stringify(identity));\n\n    if (!identity.email) throw new Error('Google auth response missing email');\n\n    const authnParams = {\n      uid: identity.email,\n      name: identity.name || identity.email,\n      uin: identity.sub,\n      email: identity.email,\n      provider: 'Google',\n    };\n    await authnLib.loadUser(req, res, authnParams, {\n      redirect: true,\n    });\n  }),\n);\n\nexport default router;\n"]}