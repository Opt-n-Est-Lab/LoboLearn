{"version":3,"file":"authLogin.js","sourceRoot":"","sources":["../../../src/pages/authLogin/authLogin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { loadSqlEquiv, queryRows } from '@prairielearn/postgres';\n\nimport * as authLib from '../../lib/authn.js';\nimport { config } from '../../lib/config.js';\n\nimport {\n  AuthLogin,\n  AuthLoginUnsupportedProvider,\n  type InstitutionAuthnProvider,\n} from './authLogin.html.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router();\n\nconst InstitutionAuthnProviderSchema = z.object({\n  id: z.string(),\n  long_name: z.string(),\n  short_name: z.string(),\n  default_authn_provider_name: z.string(),\n});\nconst InstitutionSupportedProvidersSchema = z.object({\n  name: z.string(),\n  is_default: z.boolean(),\n});\nconst ServiceSchema = z.string().nullable();\nconst InstitutionIdSchema = z.string().nullable();\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res, _next) => {\n    const service = ServiceSchema.parse(req.query.service ?? null);\n\n    if (req.query.unsupported_provider === 'true') {\n      // This requires an institution ID to work. If for some reason there\n      // isn't one in the query params, redirect back to the normal login\n      // page without any query params.\n      const institutionId = InstitutionIdSchema.parse(req.query.institution_id ?? null);\n      if (!institutionId) {\n        res.redirect(req.baseUrl);\n        return;\n      }\n\n      // Look up the supported providers for this institution.\n      const supportedProviders = await queryRows(\n        sql.select_supported_providers_for_institution,\n        {\n          institution_id: institutionId,\n        },\n        InstitutionSupportedProvidersSchema,\n      );\n\n      res.send(\n        AuthLoginUnsupportedProvider({\n          institutionId,\n          supportedProviders,\n          service,\n          resLocals: res.locals,\n        }),\n      );\n      return;\n    }\n\n    const institutionAuthnProvidersRes = await queryRows(\n      sql.select_institution_authn_providers,\n      InstitutionAuthnProviderSchema,\n    );\n    const institutionAuthnProviders = institutionAuthnProvidersRes\n      .map((provider) => {\n        // Special case: omit the default institution in production.\n        if (provider.id === '1' && config.devMode === false) return null;\n\n        let url: string | null = null;\n        switch (provider.default_authn_provider_name) {\n          case 'SAML':\n            url = `/pl/auth/institution/${provider.id}/saml/login`;\n            break;\n          case 'Google':\n            url = '/pl/oauth2login';\n            break;\n          case 'Azure':\n            url = '/pl/azure_login';\n            break;\n          case 'Shibboleth':\n            url = '/pl/shibcallback';\n            break;\n          default:\n            return null;\n        }\n\n        return {\n          name:\n            provider.long_name !== provider.short_name\n              ? `${provider.long_name} (${provider.short_name})`\n              : provider.long_name,\n          url,\n        };\n      })\n      .filter((provider): provider is InstitutionAuthnProvider => provider !== null);\n\n    res.send(AuthLogin({ service, institutionAuthnProviders, resLocals: res.locals }));\n  }),\n);\n\nconst DevLoginParamsSchema = z.object({\n  uid: z.string().min(1),\n  name: z.string().min(1),\n  uin: z.string().nullable().optional().default(null),\n  email: z.string().nullable().optional().default(null),\n});\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res, _next) => {\n    if (!config.devMode) {\n      throw new error.HttpStatusError(404, 'Not Found');\n    }\n\n    if (req.body.__action === 'dev_login') {\n      const body = DevLoginParamsSchema.parse(req.body);\n\n      const authnParams = {\n        uid: body.uid,\n        name: body.name,\n        uin: body.uin || null,\n        email: body.email || null,\n        provider: 'dev',\n      };\n\n      await authLib.loadUser(req, res, authnParams, {\n        redirect: true,\n      });\n    } else {\n      throw new error.HttpStatusError(400, `Unknown action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}