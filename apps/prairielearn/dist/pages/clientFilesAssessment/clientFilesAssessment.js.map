{"version":3,"file":"clientFilesAssessment.js","sourceRoot":"","sources":["../../../src/pages/clientFilesAssessment/clientFilesAssessment.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD,OAAO,EAEL,0BAA0B,EAC1B,4BAA4B,GAC7B,MAAM,qBAAqB,CAAC;AAE7B,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB,MAAM,CAAC,GAAG,CACR,IAAI,EACJ,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,6DAA6D,CAAC,CAAC;IAChG,CAAC;IAED,MAAM,UAAU,GAAG,4BAA4B,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACnE,MAAM,KAAK,GAAU;QACnB,IAAI,EAAE,uBAAuB;QAC7B,gBAAgB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;QAC/C,YAAY,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;KACvC,CAAC;IACF,MAAM,0BAA0B,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAE9D,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAC9B,UAAU,EACV,iBAAiB,EACjB,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,EACrC,aAAa,EACb,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EACzB,uBAAuB,CACxB,CAAC;IACF,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;AACnD,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import * as path from 'node:path';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { HttpStatusError } from '@prairielearn/error';\n\nimport {\n  type Chunk,\n  ensureChunksForCourseAsync,\n  getRuntimeDirectoryForCourse,\n} from '../../lib/chunks.js';\n\nconst router = Router();\n\nrouter.get(\n  '/*',\n  asyncHandler(async (req, res) => {\n    const filename = req.params[0];\n    if (!filename) {\n      throw new HttpStatusError(400, 'No filename provided within clientFilesAssessment directory');\n    }\n\n    const coursePath = getRuntimeDirectoryForCourse(res.locals.course);\n    const chunk: Chunk = {\n      type: 'clientFilesAssessment',\n      courseInstanceId: res.locals.course_instance.id,\n      assessmentId: res.locals.assessment.id,\n    };\n    await ensureChunksForCourseAsync(res.locals.course.id, chunk);\n\n    const clientFilesDir = path.join(\n      coursePath,\n      'courseInstances',\n      res.locals.course_instance.short_name,\n      'assessments',\n      res.locals.assessment.tid,\n      'clientFilesAssessment',\n    );\n    res.sendFile(filename, { root: clientFilesDir });\n  }),\n);\n\nexport default router;\n"]}