{"version":3,"file":"clientFilesQuestion.js","sourceRoot":"","sources":["../../../src/pages/clientFilesQuestion/clientFilesQuestion.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD,OAAO,EAAE,0BAA0B,EAAE,4BAA4B,EAAE,MAAM,qBAAqB,CAAC;AAC/F,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAClE,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EAAE,kBAAkB,EAAE,MAAM,0BAA0B,CAAC;AAE9D,MAAM,CAAC,OAAO,WAAW,OAAO,GAAG,EAAE,cAAc,EAAE,KAAK,EAAE;IAC1D,MAAM,MAAM,GAAG,MAAM,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7C,MAAM,CAAC,GAAG,CACR,IAAI,EACJ,YAAY,CAAC,KAAK,WAAW,GAAG,EAAE,GAAG;QACnC,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,2DAA2D,CAAC,CAAC;QAC9F,CAAC;QAED,IAAI,OAAO,CAAC,cAAc,EAAE,CAAC;YAC3B,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACjE,GAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAEvE,IACE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,qBAAqB,CAAC;gBAClF,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EACtD,CAAC;gBACD,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC;QAED,MAAM,eAAe,GAAG,MAAM,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACxF,MAAM,UAAU,GAAG,4BAA4B,CAAC,eAAe,CAAC,CAAC;QAEjE,MAAM,0BAA0B,CAAC,eAAe,CAAC,EAAE,EAAE;YACnD,IAAI,EAAE,UAAU;YAChB,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;SACnC,CAAC,CAAC;QAEH,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAC9B,UAAU,EACV,WAAW,EACX,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAC7B,qBAAqB,CACtB,CAAC;QACF,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;IACnD,CAAC,CAAC,CACH,CAAC;IACF,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import * as path from 'node:path';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { HttpStatusError } from '@prairielearn/error';\n\nimport { ensureChunksForCourseAsync, getRuntimeDirectoryForCourse } from '../../lib/chunks.js';\nimport { getQuestionCourse } from '../../lib/question-variant.js';\nimport { selectCourseById } from '../../models/course.js';\nimport { selectQuestionById } from '../../models/question.js';\n\nexport default function (options = { publicEndpoint: false }) {\n  const router = Router({ mergeParams: true });\n  router.get(\n    '/*',\n    asyncHandler(async function (req, res) {\n      const filename = req.params[0];\n      if (!filename) {\n        throw new HttpStatusError(400, 'No filename provided within clientFilesQuestion directory');\n      }\n\n      if (options.publicEndpoint) {\n        res.locals.course = await selectCourseById(req.params.course_id);\n        res.locals.question = await selectQuestionById(req.params.question_id);\n\n        if (\n          !(res.locals.question.share_publicly || res.locals.question.share_source_publicly) ||\n          res.locals.course.id !== res.locals.question.course_id\n        ) {\n          throw new HttpStatusError(404, 'Not Found');\n        }\n      }\n\n      const question_course = await getQuestionCourse(res.locals.question, res.locals.course);\n      const coursePath = getRuntimeDirectoryForCourse(question_course);\n\n      await ensureChunksForCourseAsync(question_course.id, {\n        type: 'question',\n        questionId: res.locals.question.id,\n      });\n\n      const clientFilesDir = path.join(\n        coursePath,\n        'questions',\n        res.locals.question.directory,\n        'clientFilesQuestion',\n      );\n      res.sendFile(filename, { root: clientFilesDir });\n    }),\n  );\n  return router;\n}\n"]}