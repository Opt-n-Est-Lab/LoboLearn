{"version":3,"file":"courseSyncs.js","sourceRoot":"","sources":["../../../src/pages/courseSyncs/courseSyncs.ts"],"names":[],"mappings":"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","sourcesContent":["import { type DescribeImagesCommandOutput, ECR } from '@aws-sdk/client-ecr';\nimport * as async from 'async';\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { DockerName } from '@prairielearn/docker-utils';\nimport { HttpStatusError } from '@prairielearn/error';\nimport { loadSqlEquiv, queryOptionalRow, queryRows } from '@prairielearn/postgres';\n\nimport { makeAwsClientConfig } from '../../lib/aws.js';\nimport { config } from '../../lib/config.js';\nimport { IdSchema } from '../../lib/db-types.js';\nimport * as syncHelpers from '../shared/syncHelpers.js';\n\nimport { CourseSyncs, ImageRowSchema, JobSequenceRowSchema } from './courseSyncs.html.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router();\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be course editor)');\n    }\n\n    const jobSequences = await queryRows(\n      sql.select_sync_job_sequences,\n      { course_id: res.locals.course.id },\n      JobSequenceRowSchema,\n    );\n\n    const images = await queryRows(\n      sql.question_images,\n      { course_id: res.locals.course.id },\n      ImageRowSchema,\n    );\n\n    if (config.cacheImageRegistry) {\n      const ecr = new ECR(makeAwsClientConfig());\n      await async.eachLimit(images, 3, async (image) => {\n        const repository = new DockerName(image.image);\n        image.tag = repository.getTag() || 'latest (implied)';\n        // Default to get overwritten later\n        image.pushed_at = null;\n        image.imageSyncNeeded = false;\n        image.invalid = false;\n\n        let data: DescribeImagesCommandOutput;\n        try {\n          data = await ecr.describeImages({\n            repositoryName: repository.getRepository(),\n            imageIds: [{ imageTag: repository.getTag() ?? 'latest' }],\n          });\n        } catch (err) {\n          if (err.name === 'InvalidParameterException') {\n            image.invalid = true;\n            return;\n          } else if (\n            err.name === 'RepositoryNotFoundException' ||\n            err.name === 'ImageNotFoundException'\n          ) {\n            image.imageSyncNeeded = true;\n            return;\n          }\n          throw err;\n        }\n\n        const ecrInfo = data.imageDetails?.[0];\n\n        // Put info from ECR into image for rendering\n        image.digest = ecrInfo?.imageDigest ?? '';\n        image.pushed_at = ecrInfo?.imagePushedAt;\n        image.imageSyncNeeded = image.pushed_at == null;\n        image.size = ecrInfo?.imageSizeInBytes ?? 0;\n      });\n    }\n\n    res.send(CourseSyncs({ resLocals: res.locals, images, jobSequences }));\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be course editor)');\n    }\n\n    if (req.body.__action === 'pull') {\n      const jobSequenceId = await syncHelpers.pullAndUpdate(res.locals);\n      res.redirect(`${res.locals.urlPrefix}/jobSequence/${jobSequenceId}`);\n    } else if (req.body.__action === 'status') {\n      const jobSequenceId = await syncHelpers.gitStatus(res.locals);\n      res.redirect(`${res.locals.urlPrefix}/jobSequence/${jobSequenceId}`);\n    } else if (req.body.__action === 'syncImage') {\n      const questionId = await queryOptionalRow(\n        sql.check_question_with_image,\n        { course_id: res.locals.course.id, image: req.body.single_image },\n        IdSchema,\n      );\n      if (questionId == null) {\n        throw new HttpStatusError(400, 'Image not found in any question for this course');\n      }\n      const jobSequenceId = await syncHelpers.ecrUpdate(\n        [{ image: req.body.single_image }],\n        res.locals,\n      );\n      res.redirect(`${res.locals.urlPrefix}/jobSequence/${jobSequenceId}`);\n    } else if (req.body.__action === 'syncImages') {\n      const images = await queryRows(\n        sql.question_images,\n        { course_id: res.locals.course.id },\n        ImageRowSchema,\n      );\n      const jobSequenceId = await syncHelpers.ecrUpdate(images, res.locals);\n      res.redirect(`${res.locals.urlPrefix}/jobSequence/${jobSequenceId}`);\n    } else {\n      throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}