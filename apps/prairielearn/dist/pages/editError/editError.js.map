{"version":3,"file":"editError.js","sourceRoot":"","sources":["../../../src/pages/editError/editError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAC1D,OAAO,KAAK,WAAW,MAAM,0BAA0B,CAAC;AAExD,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAEhD,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB,MAAM,CAAC,GAAG,CACR,mBAAmB,EACnB,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,0BAA0B,EAAE,CAAC;QACtD,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,uCAAuC,CAAC,CAAC;IAC1E,CAAC;IAED,MAAM,eAAe,GAAG,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC;IACnD,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,IAAI,CAAC;IAChD,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;IAErE,IAAI,WAAW,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;QACrC,qEAAqE;QACrE,sEAAsE;QACtE,yCAAyC;QACzC,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;IAC/E,CAAC;SAAM,IAAI,WAAW,CAAC,MAAM,KAAK,OAAO,EAAE,CAAC;QAC1C,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACvC,CAAC;IAED,IAAI,UAAU,GAAG,KAAK,CAAC;IAEvB,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;QACvB,+CAA+C;QAC/C,MAAM,CAAC,IAAI,CACT,mCAAmC,eAAe,gCAAgC,CACnF,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,MAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEhC,IAAI,GAAG,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACtD,UAAU,GAAG,IAAI,CAAC;QACpB,CAAC;IACH,CAAC;IAED,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,IAAI,CACT,mBAAmB,EACnB,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,0BAA0B,EAAE,CAAC;QACtD,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,uCAAuC,CAAC,CAAC;IAC1E,CAAC;IAED,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,MAAM,EAAE,CAAC;QACjC,MAAM,eAAe,GAAG,MAAM,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpE,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,GAAG,eAAe,GAAG,eAAe,CAAC,CAAC;IACzE,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,qBAAqB,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3E,CAAC;AACH,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { logger } from '@prairielearn/logger';\n\nimport { getJobSequence } from '../../lib/server-jobs.js';\nimport * as syncHelpers from '../shared/syncHelpers.js';\n\nimport { EditError } from './editError.html.js';\n\nconst router = Router();\n\nrouter.get(\n  '/:job_sequence_id',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be course editor)');\n    }\n\n    const job_sequence_id = req.params.job_sequence_id;\n    const course_id = res.locals.course?.id ?? null;\n    const jobSequence = await getJobSequence(job_sequence_id, course_id);\n\n    if (jobSequence.status === 'Running') {\n      // All edits wait for the corresponding job sequence to finish before\n      // proceeding, so something bad must have happened to get to this page\n      // with a sequence that is still running.\n      throw new Error('Edit is still in progress (job sequence is still running)');\n    } else if (jobSequence.status !== 'Error') {\n      throw new Error('Edit did not fail');\n    }\n\n    let failedSync = false;\n\n    if (jobSequence.legacy) {\n      // Legacy job sequences should no longer exist.\n      logger.warn(\n        `Found a legacy job sequence (id=${job_sequence_id}) while handling an edit error`,\n      );\n    } else {\n      const job = jobSequence.jobs[0];\n\n      if (job.data.saveSucceeded && !job.data.syncSucceeded) {\n        failedSync = true;\n      }\n    }\n\n    res.send(EditError({ resLocals: res.locals, jobSequence, failedSync }));\n  }),\n);\n\nrouter.post(\n  '/:job_sequence_id',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be course editor)');\n    }\n\n    if (req.body.__action === 'pull') {\n      const job_sequence_id = await syncHelpers.pullAndUpdate(res.locals);\n      res.redirect(res.locals.urlPrefix + '/jobSequence/' + job_sequence_id);\n    } else {\n      throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}