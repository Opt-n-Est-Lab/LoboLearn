{"version":3,"file":"elementFiles.js","sourceRoot":"","sources":["../../../src/pages/elementFiles/elementFiles.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'node:path';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as chunks from '../../lib/chunks.js';\nimport { config } from '../../lib/config.js';\nimport { type Course } from '../../lib/db-types.js';\nimport { APP_ROOT_PATH } from '../../lib/paths.js';\nimport { selectCourseById } from '../../models/course.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\n/**\n * Serves scripts and styles for v3 elements. Only serves .js and .css files, or any\n * static files from an element's \"clientFilesElement\" directory.\n */\n\nconst EXTENSION_WHITELIST = ['.js', '.css'];\nconst CLIENT_FOLDER = 'clientFilesElement';\n\nexport default function (options = { publicQuestionEndpoint: false, coreElements: false }) {\n  const router = Router({ mergeParams: true });\n  router.get(\n    '/*',\n    asyncHandler(async (req, res) => {\n      const filename = req.params[0];\n      const pathSpl = path.normalize(filename).split('/');\n      const valid =\n        pathSpl[1] === CLIENT_FOLDER ||\n        EXTENSION_WHITELIST.some((extension) => filename.endsWith(extension));\n      if (!valid) {\n        throw new HttpStatusError(404, 'Unable to serve that file');\n      }\n\n      // If the route includes a `cachebuster` param, we'll set the `immutable`\n      // and `maxAge` options on the `Cache-Control` header. This router is\n      // mounted twice - one with the cachebuster in the URL, and once without it\n      // for backwards compatibility. See `server.js` for more details.\n      //\n      // As with `/assets/`, we assume that element files are likely to change\n      // when running in dev mode, so we skip caching entirely in that case.\n      const isCached = !!req.params.cachebuster && !config.devMode;\n      const sendFileOptions = {\n        immutable: isCached,\n        maxAge: isCached ? '31536000s' : 0,\n      };\n\n      if (isCached) {\n        // `middlewares/cors.js` disables caching for all routes by default.\n        // We need to remove this header so that `res.sendFile` can set it\n        // correctly.\n        res.removeHeader('Cache-Control');\n      }\n\n      let elementFilesDir: string;\n      if (options.coreElements) {\n        elementFilesDir = path.join(APP_ROOT_PATH, 'elements');\n      } else if (options.publicQuestionEndpoint) {\n        const has_publicly_shared_question = await sqldb.queryRow(\n          sql.select_has_publicly_shared_question,\n          { course_id: req.params.course_id },\n          z.boolean(),\n        );\n        if (!has_publicly_shared_question) {\n          throw new HttpStatusError(404, 'Not Found');\n        }\n        const course = await selectCourseById(req.params.course_id);\n        const coursePath = chunks.getRuntimeDirectoryForCourse(course);\n        await chunks.ensureChunksForCourseAsync(course.id, { type: 'elements' });\n\n        elementFilesDir = path.join(coursePath, 'elements');\n      } else {\n        let question_course: Course;\n        if (req.params.producing_course_id) {\n          const producing_course_id = z.string().parse(req.params.producing_course_id);\n          const has_shared_question = await sqldb.queryRow(\n            sql.select_has_shared_question,\n            { consuming_course_id: res.locals.course.id, producing_course_id },\n            z.boolean(),\n          );\n          if (!has_shared_question) {\n            throw new HttpStatusError(404, 'Not Found');\n          }\n\n          question_course = await selectCourseById(producing_course_id);\n        } else {\n          question_course = res.locals.course;\n        }\n        const coursePath = chunks.getRuntimeDirectoryForCourse(question_course);\n        await chunks.ensureChunksForCourseAsync(question_course.id, { type: 'elements' });\n\n        elementFilesDir = path.join(coursePath, 'elements');\n      }\n\n      res.sendFile(filename, { root: elementFilesDir, ...sendFileOptions });\n    }),\n  );\n  return router;\n}\n"]}