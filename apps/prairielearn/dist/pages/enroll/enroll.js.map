{"version":3,"file":"enroll.js","sourceRoot":"","sources":["../../../src/pages/enroll/enroll.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport {\n  loadSqlEquiv,\n  queryOneRowAsync,\n  queryRow,\n  queryRows,\n  queryZeroOrOneRowAsync,\n} from '@prairielearn/postgres';\n\nimport { CourseInstanceSchema, CourseSchema, InstitutionSchema } from '../../lib/db-types.js';\nimport { authzCourseOrInstance } from '../../middlewares/authzCourseOrInstance.js';\nimport forbidAccessInExamMode from '../../middlewares/forbidAccessInExamMode.js';\nimport { ensureCheckedEnrollment } from '../../models/enrollment.js';\n\nimport {\n  CourseInstanceRowSchema,\n  Enroll,\n  EnrollLtiMessage,\n  EnrollmentLimitExceededMessage,\n} from './enroll.html.js';\n\nconst router = express.Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nrouter.get('/', [\n  // If a student gains control of a course, they could update the course\n  // title to contain arbitrary information and use the enrollment page to\n  // access that during a CBTF exam. We'll block access to prevent this.\n  forbidAccessInExamMode,\n  asyncHandler(async (req, res) => {\n    if (res.locals.authn_provider_name === 'LTI') {\n      const result = await queryOneRowAsync(sql.lti_course_instance_lookup, {\n        course_instance_id: res.locals.authn_user.lti_course_instance_id,\n      });\n      res.send(EnrollLtiMessage({ ltiInfo: result.rows[0], resLocals: res.locals }));\n      return;\n    }\n\n    const courseInstances = await queryRows(\n      sql.select_course_instances,\n      {\n        user_id: res.locals.authn_user.user_id,\n        req_date: res.locals.req_date,\n      },\n      CourseInstanceRowSchema,\n    );\n    res.send(Enroll({ courseInstances, resLocals: res.locals }));\n  }),\n]);\n\nrouter.get(\n  '/limit_exceeded',\n  asyncHandler((req, res) => {\n    // Note that we deliberately omit the `forbidAccessInExamMode` middleware\n    // here. A student could conceivably hit an enrollment limit while in exam\n    // mode, so we'll allow them to see the error message. This page doesn't\n    // leak any course-specific information.\n    res.send(EnrollmentLimitExceededMessage({ resLocals: res.locals }));\n  }),\n);\n\nrouter.post('/', [\n  // As above, we'll block access in Exam mode to prevent data infiltration.\n  forbidAccessInExamMode,\n  asyncHandler(async (req, res) => {\n    if (res.locals.authn_provider_name === 'LTI') {\n      throw new error.HttpStatusError(400, 'Enrollment unavailable, managed via LTI');\n    }\n\n    const { institution, course, course_instance } = await queryRow(\n      sql.select_course_instance,\n      { course_instance_id: req.body.course_instance_id },\n      z.object({\n        institution: InstitutionSchema,\n        course: CourseSchema,\n        course_instance: CourseInstanceSchema,\n      }),\n    );\n\n    const courseDisplayName = `${course.short_name}: ${course.title}, ${course_instance.long_name}`;\n\n    if (req.body.__action === 'enroll') {\n      // Abuse the middleware to authorize the user for the course instance.\n      req.params.course_instance_id = course_instance.id;\n      await authzCourseOrInstance(req, res);\n\n      await ensureCheckedEnrollment({\n        institution,\n        course,\n        course_instance,\n        authz_data: res.locals.authz_data,\n      });\n\n      flash('success', `You have joined ${courseDisplayName}.`);\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'unenroll') {\n      await queryZeroOrOneRowAsync(sql.unenroll, {\n        course_instance_id: req.body.course_instance_id,\n        user_id: res.locals.authn_user.user_id,\n        req_date: res.locals.req_date,\n      });\n      flash('success', `You have left ${courseDisplayName}.`);\n      res.redirect(req.originalUrl);\n    } else {\n      throw new error.HttpStatusError(400, 'unknown action: ' + res.locals.__action);\n    }\n  }),\n]);\n\nexport default router;\n"]}