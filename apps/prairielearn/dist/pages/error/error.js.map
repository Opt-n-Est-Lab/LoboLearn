{"version":3,"file":"error.js","sourceRoot":"","sources":["../../../src/pages/error/error.ts"],"names":[],"mappings":"AACA,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAEpD,OAAO,EAAE,cAAc,EAAE,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AAC3E,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAE7C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C;;;;;GAKG;AACH,gBAAgB,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK;IAC5C,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;IAEpC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC;IACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAEvB,MAAM,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;IAE7C,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,YAAY,EAAE;QAChE,GAAG,EAAE,GAAG,CAAC,OAAO;QAChB,EAAE,EAAE,OAAO;QACX,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,uEAAuE;QACvE,kCAAkC;QAClC,KAAK,EAAE,oBAAoB,CAAC,GAAG,CAAC;QAChC,IAAI,EAAE,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC;QACjC,QAAQ;QACR,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,WAAW;KACpC,CAAC,CAAC;IAEH,GAAG,CAAC,IAAI,CACN,SAAS,CAAC;QACR,oCAAoC;QACpC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;QAC1E,iEAAiE;QACjE,kEAAkE;QAClE,iEAAiE;QACjE,+DAA+D;QAC/D,YAAY;QACZ,SAAS,EAAE,GAAG,YAAY,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;QAC/D,OAAO;QACP,QAAQ;QACR,SAAS,EAAE,GAAG,CAAC,MAAM;KACtB,CAAC,CACH,CAAC;AACJ,CAAgC,EAAC","sourcesContent":["import type { ErrorRequestHandler } from 'express';\nimport jsonStringifySafe from 'json-stringify-safe';\n\nimport { AugmentedError, formatErrorStackSafe } from '@prairielearn/error';\nimport { logger } from '@prairielearn/logger';\n\nimport { config } from '../../lib/config.js';\n\nimport { ErrorPage } from './error.html.js';\n\n/**\n * IMPORTANT: This must take four arguments for it to be identified as\n * error-handling middleware.\n *\n * @see http://expressjs.com/en/guide/using-middleware.html#middleware.error-handling\n */\nexport default (function (err, req, res, _next) {\n  const errorId = res.locals.error_id;\n\n  err.status ??= 500;\n  res.status(err.status);\n\n  const referrer = req.get('Referrer') || null;\n\n  logger.log(err.status >= 500 ? 'error' : 'verbose', 'Error page', {\n    msg: err.message,\n    id: errorId,\n    status: err.status,\n    // Use the \"safe\" version when logging so that we don't error out while\n    // trying to log the actual error.\n    stack: formatErrorStackSafe(err),\n    data: jsonStringifySafe(err.data),\n    referrer,\n    response_id: res.locals.response_id,\n  });\n\n  res.send(\n    ErrorPage({\n      // Hide error details in production.\n      error: config.devMode ? err : { message: err.message, status: err.status },\n      // Only include the info property if it's from an AugmentedError.\n      // We'll render this as unescaped HTML, so we need to be sure that\n      // it's safe to do so, and only AugmentedError guarantees that by\n      // forcing the `info` property to be constructed with an `html`\n      // template.\n      errorInfo: err instanceof AugmentedError ? err.info : undefined,\n      errorId,\n      referrer,\n      resLocals: res.locals,\n    }),\n  );\n} satisfies ErrorRequestHandler);\n"]}