{"version":3,"file":"home.js","sourceRoot":"","sources":["../../../src/pages/home/home.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEjE,OAAO,EAAE,2BAA2B,EAAE,MAAM,uBAAuB,CAAC;AACpE,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAEpD,OAAO,EAAE,IAAI,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAEnF,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1C,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;IAE5B,qEAAqE;IACrE,IAAI,YAAY,EAAE,EAAE,CAAC;QACnB,MAAM,2BAA2B,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;IACzF,CAAC;IAED,MAAM,iBAAiB,GAAG,MAAM,SAAS,CACvC,GAAG,CAAC,yBAAyB,EAC7B;QACE,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;QACtC,gBAAgB,EAAE,GAAG,CAAC,MAAM,CAAC,gBAAgB;QAC7C,wEAAwE;QACxE,mEAAmE;QACnE,+BAA+B;QAC/B,sBAAsB,EAAE,GAAG,CAAC,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,OAAO;KACtE,EACD,sBAAsB,CACvB,CAAC;IAEF,MAAM,cAAc,GAAG,MAAM,SAAS,CACpC,GAAG,CAAC,sBAAsB,EAC1B;QACE,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;QACtC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ;QAC7B,yEAAyE;QACzE,sEAAsE;QACtE,wEAAwE;QACxE,yEAAyE;QACzE,wDAAwD;QACxD,gDAAgD;QAChD,kCAAkC,EAAE,GAAG,CAAC,KAAK,CAAC,kCAAkC,KAAK,MAAM;KAC5F,EACD,mBAAmB,CACpB,CAAC;IAEF,MAAM,iBAAiB,GAAG,MAAM,SAAS,CACvC,GAAG,CAAC,yBAAyB,EAC7B,EAAE,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,EAC1C,iBAAiB,CAClB,CAAC;IAEF,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,EAAE,iBAAiB,EAAE,cAAc,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC;AAClG,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { loadSqlEquiv, queryRows } from '@prairielearn/postgres';\n\nimport { redirectToTermsPageIfNeeded } from '../../ee/lib/terms.js';\nimport { config } from '../../lib/config.js';\nimport { InstitutionSchema } from '../../lib/db-types.js';\nimport { isEnterprise } from '../../lib/license.js';\n\nimport { Home, InstructorCourseSchema, StudentCourseSchema } from './home.html.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router();\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    res.locals.navPage = 'home';\n\n    // Potentially prompt the user to accept the terms before proceeding.\n    if (isEnterprise()) {\n      await redirectToTermsPageIfNeeded(res, res.locals.authn_user, req.ip, req.originalUrl);\n    }\n\n    const instructorCourses = await queryRows(\n      sql.select_instructor_courses,\n      {\n        user_id: res.locals.authn_user.user_id,\n        is_administrator: res.locals.is_administrator,\n        // Example courses are only shown to users who are either instructors of\n        // at least one other course, or who are admins. They're also shown\n        // unconditionally in dev mode.\n        include_example_course: res.locals.is_administrator || config.devMode,\n      },\n      InstructorCourseSchema,\n    );\n\n    const studentCourses = await queryRows(\n      sql.select_student_courses,\n      {\n        user_id: res.locals.authn_user.user_id,\n        req_date: res.locals.req_date,\n        // This is a somewhat ugly escape hatch specifically for load testing. In\n        // general, we don't want to clutter the home page with example course\n        // enrollments, but for load testing we want to enroll a large number of\n        // users in the example course and then have them find the example course\n        // on the home page. So, you'd make a request like this:\n        // `/pl?include_example_course_enrollments=true`\n        include_example_course_enrollments: req.query.include_example_course_enrollments === 'true',\n      },\n      StudentCourseSchema,\n    );\n\n    const adminInstitutions = await queryRows(\n      sql.select_admin_institutions,\n      { user_id: res.locals.authn_user.user_id },\n      InstitutionSchema,\n    );\n\n    res.send(Home({ resLocals: res.locals, instructorCourses, studentCourses, adminInstitutions }));\n  }),\n);\n\nexport default router;\n"]}