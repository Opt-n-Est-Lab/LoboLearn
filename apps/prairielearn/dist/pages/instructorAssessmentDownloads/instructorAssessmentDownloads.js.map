{"version":3,"file":"instructorAssessmentDownloads.js","sourceRoot":"","sources":["../../../src/pages/instructorAssessmentDownloads/instructorAssessmentDownloads.ts"],"names":[],"mappings":"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","sourcesContent":["import { pipeline } from 'node:stream/promises';\n\nimport archiver from 'archiver';\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport { stringifyStream } from '@prairielearn/csv';\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport {\n  AssessmentInstanceSchema,\n  AssessmentQuestionSchema,\n  GroupSchema,\n  InstanceQuestionSchema,\n  QuestionSchema,\n  RubricGradingItemSchema,\n  RubricGradingSchema,\n  type Submission,\n  SubmissionSchema,\n  UserSchema,\n  type Variant,\n  VariantSchema,\n} from '../../lib/db-types.js';\nimport { getGroupConfig } from '../../lib/groups.js';\nimport { assessmentFilenamePrefix } from '../../lib/sanitize-name.js';\n\nimport {\n  type Filenames,\n  InstructorAssessmentDownloads,\n} from './instructorAssessmentDownloads.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ntype Columns = [string, string][];\n\nconst AssessmentInstanceSubmissionRowSchema = z.object({\n  uid: UserSchema.shape.uid.nullable(),\n  uin: UserSchema.shape.uin.nullable(),\n  name: UserSchema.shape.name.nullable(),\n  role: z.string().nullable(),\n  assessment_label: z.string(),\n  assessment_instance_number: AssessmentInstanceSchema.shape.number,\n  qid: QuestionSchema.shape.qid,\n  instance_question_number: InstanceQuestionSchema.shape.number,\n  points: InstanceQuestionSchema.shape.points,\n  score_perc: InstanceQuestionSchema.shape.score_perc,\n  auto_points: InstanceQuestionSchema.shape.auto_points,\n  manual_points: InstanceQuestionSchema.shape.manual_points,\n  max_points: AssessmentQuestionSchema.shape.max_points,\n  max_auto_points: AssessmentQuestionSchema.shape.max_auto_points,\n  max_manual_points: AssessmentQuestionSchema.shape.max_manual_points,\n  variant_number: VariantSchema.shape.number,\n  variant_seed: VariantSchema.shape.variant_seed,\n  params: SubmissionSchema.shape.params,\n  true_answer: SubmissionSchema.shape.true_answer,\n  options: VariantSchema.shape.options,\n  date: SubmissionSchema.shape.date,\n  submission_id: SubmissionSchema.shape.id,\n  submission_date_formatted: z.string(),\n  submitted_answer: SubmissionSchema.shape.submitted_answer,\n  partial_scores: SubmissionSchema.shape.partial_scores,\n  override_score: SubmissionSchema.shape.override_score,\n  credit: SubmissionSchema.shape.credit,\n  mode: SubmissionSchema.shape.mode,\n  grading_requested_at_formatted: z.string().nullable(),\n  graded_at_formatted: z.string().nullable(),\n  correct: z.enum(['TRUE', 'FALSE']).nullable(),\n  feedback: SubmissionSchema.shape.feedback,\n  rubric_grading: RubricGradingSchema.pick({ computed_points: true, adjust_points: true })\n    .extend({ items: RubricGradingItemSchema.pick({ description: true, points: true }).array() })\n    .nullable(),\n  submission_number: z.number(),\n  final_submission_per_variant: z.boolean(),\n  best_submission_per_variant: z.boolean(),\n  group_name: GroupSchema.shape.name.nullable(),\n  uid_list: z.array(z.string()).nullable(),\n  submission_user: UserSchema.shape.uid.nullable(),\n  assigned_grader: UserSchema.shape.uid.nullable(),\n  last_grader: UserSchema.shape.uid.nullable(),\n  zone_number: z.number(),\n  zone_title: z.string().nullable(),\n});\ntype AssessmentInstanceSubmissionRow = z.infer<typeof AssessmentInstanceSubmissionRowSchema>;\n\nconst ManualGradingSubmissionRowSchema = z.object({\n  uid: UserSchema.shape.uid.nullable(),\n  uin: UserSchema.shape.uin.nullable(),\n  qid: QuestionSchema.shape.qid,\n  old_score_perc: InstanceQuestionSchema.shape.score_perc,\n  old_auto_points: InstanceQuestionSchema.shape.auto_points,\n  old_manual_points: InstanceQuestionSchema.shape.manual_points,\n  max_points: AssessmentQuestionSchema.shape.max_points,\n  max_auto_points: AssessmentQuestionSchema.shape.max_auto_points,\n  max_manual_points: AssessmentQuestionSchema.shape.max_manual_points,\n  old_feedback: SubmissionSchema.shape.feedback,\n  submission_id: SubmissionSchema.shape.id,\n  params: SubmissionSchema.shape.params,\n  true_answer: SubmissionSchema.shape.true_answer,\n  submitted_answer: SubmissionSchema.shape.submitted_answer,\n  old_partial_scores: SubmissionSchema.shape.partial_scores,\n  group_name: GroupSchema.shape.name.nullable(),\n  uid_list: z.array(z.string()).nullable(),\n});\n\ntype ManualGradingSubmissionRow = z.infer<typeof ManualGradingSubmissionRowSchema>;\n\nfunction getFilenames(locals: Record<string, any>) {\n  const prefix = assessmentFilenamePrefix(\n    locals.assessment,\n    locals.assessment_set,\n    locals.course_instance,\n    locals.course,\n  );\n\n  const filenames: Filenames = {\n    scoresCsvFilename: prefix + 'scores.csv',\n    scoresAllCsvFilename: prefix + 'scores_all.csv',\n    pointsCsvFilename: prefix + 'points.csv',\n    pointsAllCsvFilename: prefix + 'points_all.csv',\n    scoresByUsernameCsvFilename: prefix + 'scores_by_username.csv',\n    scoresByUsernameAllCsvFilename: prefix + 'scores_by_username_all.csv',\n    pointsByUsernameCsvFilename: prefix + 'points_by_username.csv',\n    pointsByUsernameAllCsvFilename: prefix + 'points_by_username_all.csv',\n    instancesCsvFilename: prefix + 'instances.csv',\n    instancesAllCsvFilename: prefix + 'instances_all.csv',\n    instanceQuestionsCsvFilename: prefix + 'instance_questions.csv',\n    submissionsForManualGradingCsvFilename: prefix + 'submissions_for_manual_grading.csv',\n    finalSubmissionsCsvFilename: prefix + 'final_submissions.csv',\n    bestSubmissionsCsvFilename: prefix + 'best_submissions.csv',\n    allSubmissionsCsvFilename: prefix + 'all_submissions.csv',\n    filesForManualGradingZipFilename: prefix + 'files_for_manual_grading.zip',\n    finalFilesZipFilename: prefix + 'final_files.zip',\n    bestFilesZipFilename: prefix + 'best_files.zip',\n    allFilesZipFilename: prefix + 'all_files.zip',\n  };\n  if (locals.assessment.group_work) {\n    filenames.groupsCsvFilename = prefix + 'groups.csv';\n    filenames.scoresGroupCsvFilename = prefix + 'scores_by_group.csv';\n    filenames.scoresGroupAllCsvFilename = prefix + 'scores_by_group_all.csv';\n    filenames.pointsGroupCsvFilename = prefix + 'points_by_group.csv';\n    filenames.pointsGroupAllCsvFilename = prefix + 'points_by_group_all.csv';\n  }\n  return filenames;\n}\n\nfunction parseFileContents(contents: any): Buffer | null {\n  if (contents == null) return null;\n\n  try {\n    return Buffer.from(typeof contents === 'string' ? contents : '', 'base64');\n  } catch {\n    // Ignore any errors in reading the contents and treat as a blank file.\n    return Buffer.from('');\n  }\n}\n\ninterface RowForFiles {\n  submitted_answer: Submission['submitted_answer'];\n  params: Variant['params'];\n}\n\nfunction extractFiles<T extends RowForFiles>(\n  row: T,\n  makeFilename: (filename: string | null) => string | null,\n): ArchiveFile[] | null {\n  if (row.submitted_answer?.fileData) {\n    // Legacy v2 question data.\n    return [\n      {\n        filename: makeFilename(row.params?.fileName),\n        contents: parseFileContents(row.submitted_answer.fileData),\n      },\n    ];\n  }\n\n  // v3 question data.\n  return row.submitted_answer?._files?.map((file: any) => ({\n    filename: makeFilename(file.name),\n    contents: parseFileContents(file.contents),\n  }));\n}\n\nfunction extractFilesForSubmissions(row: AssessmentInstanceSubmissionRow): ArchiveFile[] | null {\n  // This doesn't handle QIDs with slashes in them:\n  // https://github.com/PrairieLearn/PrairieLearn/issues/7715\n  //\n  // We should probably rethink the directory structure that this will spit out.\n  const filenamePrefix = [\n    row.group_name ?? row.uid,\n    row.assessment_instance_number,\n    row.qid,\n    row.variant_number,\n    row.submission_number,\n    row.submission_id,\n  ].join('_');\n\n  return extractFiles(row, (suffix) => {\n    if (suffix == null) return null;\n\n    return filenamePrefix + '_' + suffix;\n  });\n}\n\nfunction extractFilesForManualGrading(row: ManualGradingSubmissionRow): ArchiveFile[] | null {\n  // This doesn't handle QIDs with slashes in them:\n  // https://github.com/PrairieLearn/PrairieLearn/issues/7715\n  //\n  // We should probably rethink the directory structure that this will spit out.\n  // We should also aim for more consistency between this function and\n  // `extractFilesForSubmissions`.\n  const filenamePrefix = [\n    row.group_name ?? [row.uid, row.uin].join('_'),\n    row.qid,\n    row.submission_id,\n  ].join('_');\n\n  return extractFiles(row, (suffix) => {\n    if (suffix == null) return null;\n\n    return filenamePrefix + '_' + suffix;\n  });\n}\n\ninterface ArchiveFile {\n  filename: string | null;\n  contents: Buffer | null;\n}\n\nasync function pipeCursorToArchive<T>(\n  res: express.Response,\n  cursor: sqldb.CursorIterator<T>,\n  extractFiles: (row: T) => ArchiveFile[] | null,\n) {\n  const archive = archiver('zip');\n  const dirname = (res.locals.assessment_set.name + res.locals.assessment.number).replaceAll(\n    ' ',\n    '',\n  );\n  const prefix = `${dirname}/`;\n  archive.append('', { name: prefix });\n  archive.pipe(res);\n\n  for await (const rows of cursor.iterate(100)) {\n    for (const row of rows) {\n      // Sort files to ensure consistent ordering; this is done\n      // for backwards compatibility and may not be necessary.\n      const files = extractFiles(row)?.sort((a, b) =>\n        (a.filename ?? '').localeCompare(b.filename ?? ''),\n      );\n\n      if (!files) continue;\n\n      for (const file of files) {\n        // Exclude any files that are missing a name or contents.\n        // We allow empty files, so we specifically check for null, not truthiness.\n        if (!file.filename || file.contents == null) continue;\n\n        archive.append(file.contents, { name: prefix + file.filename });\n      }\n    }\n  }\n  archive.finalize();\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    res.send(\n      InstructorAssessmentDownloads({ resLocals: res.locals, filenames: getFilenames(res.locals) }),\n    );\n  }),\n);\n\n/*\n * Local abstraction to adapt our internal notion of columns to the columns\n * format that the CSV `stringify()` function expects.\n */\nfunction stringifyWithColumns(columns: Columns, transform?: (record: any) => any) {\n  return stringifyStream({\n    header: true,\n    columns: columns.map(([header, key]) => ({ header, key: key ?? header })),\n    transform,\n  });\n}\n\nasync function sendInstancesCsv(res, req, columns, options) {\n  const result = await sqldb.queryCursor(sql.select_assessment_instances, {\n    assessment_id: res.locals.assessment.id,\n    highest_score: options.only_highest,\n    group_work: options.group_work,\n  });\n\n  res.attachment(req.params.filename);\n  await pipeline(result.stream(100), stringifyWithColumns(columns), res);\n}\n\nrouter.get(\n  '/:filename',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    //\n    // NOTE: you could argue that some downloads should be restricted further to users with\n    // permission to view code (Course role: Viewer). For example, '*_all_submissions.csv'\n    // contains seed, params, true_answer, and so forth. We will ignore this for now.\n    //\n\n    const filenames = getFilenames(res.locals);\n\n    const assessmentName = res.locals.assessment_set.name + ' ' + res.locals.assessment.number;\n    const studentColumn: Columns = [\n      ['UID', 'uid'],\n      ['UIN', 'uin'],\n    ];\n    const usernameColumn: Columns = [['Username', 'username']];\n    const groupNameColumn: Columns = [\n      ['Group name', 'group_name'],\n      ['Usernames', 'uid_list'],\n    ];\n    const scoreColumn: Columns = [[assessmentName, 'score_perc']];\n    const pointColumn: Columns = [[assessmentName, 'points']];\n    const instanceColumn: Columns = [\n      ['Assessment', 'assessment_label'],\n      ['Instance', 'number'],\n      ['Started', 'date_formatted'],\n      ['Remaining', 'time_remaining'],\n      ['Score (%)', 'score_perc'],\n      ['Points', 'points'],\n      ['Max points', 'max_points'],\n      ['Duration (min)', 'duration_mins'],\n      ['Highest score', 'highest_score'],\n    ];\n    const scoresColumns = studentColumn.concat(scoreColumn);\n    const pointsColumns = studentColumn.concat(pointColumn);\n    const scoresGroupColumns = groupNameColumn.concat(scoreColumn);\n    const pointsGroupColumns = groupNameColumn.concat(pointColumn);\n    const scoresByUsernameColumns = usernameColumn.concat(scoreColumn);\n    const pointsByUsernameColumns = usernameColumn.concat(pointColumn);\n    let identityColumn = studentColumn.concat(\n      usernameColumn.concat([\n        ['Name', 'name'],\n        ['Role', 'role'],\n      ]),\n    );\n    if (res.locals.assessment.group_work) {\n      identityColumn = groupNameColumn;\n    }\n    const instancesColumns = identityColumn.concat(instanceColumn);\n\n    if (req.params.filename === filenames.scoresCsvFilename) {\n      await sendInstancesCsv(res, req, scoresColumns, { only_highest: true });\n    } else if (req.params.filename === filenames.scoresAllCsvFilename) {\n      await sendInstancesCsv(res, req, scoresColumns, { only_highest: false });\n    } else if (req.params.filename === filenames.scoresByUsernameCsvFilename) {\n      await sendInstancesCsv(res, req, scoresByUsernameColumns, { only_highest: true });\n    } else if (req.params.filename === filenames.scoresByUsernameAllCsvFilename) {\n      await sendInstancesCsv(res, req, scoresByUsernameColumns, { only_highest: false });\n    } else if (req.params.filename === filenames.pointsCsvFilename) {\n      await sendInstancesCsv(res, req, pointsColumns, { only_highest: true });\n    } else if (req.params.filename === filenames.pointsAllCsvFilename) {\n      await sendInstancesCsv(res, req, pointsColumns, { only_highest: false });\n    } else if (req.params.filename === filenames.pointsByUsernameCsvFilename) {\n      await sendInstancesCsv(res, req, pointsByUsernameColumns, { only_highest: true });\n    } else if (req.params.filename === filenames.pointsByUsernameAllCsvFilename) {\n      await sendInstancesCsv(res, req, pointsByUsernameColumns, { only_highest: false });\n    } else if (req.params.filename === filenames.instancesCsvFilename) {\n      await sendInstancesCsv(res, req, instancesColumns, {\n        only_highest: true,\n        group_work: res.locals.assessment.group_work,\n      });\n    } else if (req.params.filename === filenames.instancesAllCsvFilename) {\n      await sendInstancesCsv(res, req, instancesColumns, {\n        only_highest: false,\n        group_work: res.locals.assessment.group_work,\n      });\n    } else if (req.params.filename === filenames.instanceQuestionsCsvFilename) {\n      const cursor = await sqldb.queryCursor(sql.select_instance_questions, {\n        assessment_id: res.locals.assessment.id,\n      });\n\n      const columns = identityColumn.concat([\n        ['Assessment', 'assessment_label'],\n        ['Assessment instance', 'assessment_instance_number'],\n        ['Zone number', 'zone_number'],\n        ['Zone title', 'zone_title'],\n        ['Question', 'qid'],\n        ['Question instance', 'instance_question_number'],\n        ['Question points', 'points'],\n        ['Max points', 'max_points'],\n        ['Question % score', 'score_perc'],\n        ['Auto points', 'auto_points'],\n        ['Max auto points', 'max_auto_points'],\n        ['Manual points', 'manual_points'],\n        ['Max manual points', 'max_manual_points'],\n        ['Date', 'date_formatted'],\n        ['Highest submission score', 'highest_submission_score'],\n        ['Last submission score', 'last_submission_score'],\n        ['Number attempts', 'number_attempts'],\n        ['Duration seconds', 'duration_seconds'],\n        ['Assigned manual grader', 'assigned_grader'],\n        ['Last manual grader', 'last_grader'],\n      ]);\n\n      res.attachment(req.params.filename);\n      await pipeline(cursor.stream(100), stringifyWithColumns(columns), res);\n    } else if (req.params.filename === filenames.submissionsForManualGradingCsvFilename) {\n      const cursor = await sqldb.queryCursor(sql.submissions_for_manual_grading, {\n        assessment_id: res.locals.assessment.id,\n        include_files: false,\n      });\n\n      // Replace user-friendly column names with upload-friendly names\n      identityColumn = (res.locals.assessment.group_work ? groupNameColumn : studentColumn).map(\n        (pair) => [pair[1], pair[1]],\n      );\n      const columns = identityColumn.concat([\n        ['Zone number', 'zone_number'],\n        ['Zone title', 'zone_title'],\n        ['qid', 'qid'],\n        ['old_score_perc', 'old_score_perc'],\n        ['old_feedback', 'old_feedback'],\n        ['old_auto_points', 'old_auto_points'],\n        ['old_manual_points', 'old_manual_points'],\n        ['submission_id', 'submission_id'],\n        ['params', 'params'],\n        ['true_answer', 'true_answer'],\n        ['submitted_answer', 'submitted_answer'],\n        ['old_partial_scores', 'old_partial_scores'],\n        ['partial_scores', 'partial_scores'],\n        ['score_perc', 'score_perc'],\n        ['feedback', 'feedback'],\n      ]);\n\n      res.attachment(req.params.filename);\n      const stringifier = stringifyWithColumns(columns, (record) => {\n        return {\n          ...record,\n          // Add empty columns for the user to put data in.\n          partial_scores: '',\n          score_perc: '',\n          feedback: '',\n        };\n      });\n      await pipeline(cursor.stream(100), stringifier, res);\n    } else if (\n      req.params.filename === filenames.allSubmissionsCsvFilename ||\n      req.params.filename === filenames.finalSubmissionsCsvFilename ||\n      req.params.filename === filenames.bestSubmissionsCsvFilename\n    ) {\n      const include_all = req.params.filename === filenames.allSubmissionsCsvFilename;\n      const include_final = req.params.filename === filenames.finalSubmissionsCsvFilename;\n      const include_best = req.params.filename === filenames.bestSubmissionsCsvFilename;\n\n      const cursor = await sqldb.queryValidatedCursor(\n        sql.assessment_instance_submissions,\n        {\n          assessment_id: res.locals.assessment.id,\n          include_all,\n          include_final,\n          include_best,\n        },\n        AssessmentInstanceSubmissionRowSchema,\n      );\n\n      let submissionColumn = identityColumn;\n      if (res.locals.assessment.group_work) {\n        submissionColumn = identityColumn.concat([['SubmitStudent', 'submission_user']]);\n      }\n      const columns = submissionColumn.concat([\n        ['Assessment', 'assessment_label'],\n        ['Assessment instance', 'assessment_instance_number'],\n        ['Zone number', 'zone_number'],\n        ['Zone title', 'zone_title'],\n        ['Question', 'qid'],\n        ['Question instance', 'instance_question_number'],\n        ['Variant', 'variant_number'],\n        ['Seed', 'variant_seed'],\n        ['Params', 'params'],\n        ['True answer', 'true_answer'],\n        ['Options', 'options'],\n        ['submission_id', 'submission_id'],\n        ['Submission date', 'submission_date_formatted'],\n        ['Submitted answer', 'submitted_answer'],\n        ['Partial Scores', 'partial_scores'],\n        ['Override score', 'override_score'],\n        ['Credit', 'credit'],\n        ['Mode', 'mode'],\n        ['Grading requested date', 'grading_requested_at_formatted'],\n        ['Grading date', 'graded_at_formatted'],\n        ['Assigned manual grader', 'assigned_grader'],\n        ['Last manual grader', 'last_grader'],\n        ['Score', 'score'],\n        ['Correct', 'correct'],\n        ['Feedback', 'feedback'],\n        ['Rubric Grading', 'rubric_grading'],\n        ['Question points', 'points'],\n        ['Max points', 'max_points'],\n        ['Question % score', 'score_perc'],\n        ['Auto points', 'auto_points'],\n        ['Max auto points', 'max_auto_points'],\n        ['Manual points', 'manual_points'],\n        ['Max manual points', 'max_manual_points'],\n      ]);\n\n      res.attachment(req.params.filename);\n      await pipeline(cursor.stream(100), stringifyWithColumns(columns), res);\n    } else if (req.params.filename === filenames.filesForManualGradingZipFilename) {\n      const cursor = await sqldb.queryValidatedCursor(\n        sql.submissions_for_manual_grading,\n        {\n          assessment_id: res.locals.assessment.id,\n          include_files: true,\n        },\n        ManualGradingSubmissionRowSchema,\n      );\n\n      res.attachment(req.params.filename);\n      await pipeCursorToArchive(res, cursor, extractFilesForManualGrading);\n    } else if (\n      req.params.filename === filenames.allFilesZipFilename ||\n      req.params.filename === filenames.finalFilesZipFilename ||\n      req.params.filename === filenames.bestFilesZipFilename\n    ) {\n      const include_all = req.params.filename === filenames.allFilesZipFilename;\n      const include_final = req.params.filename === filenames.finalFilesZipFilename;\n      const include_best = req.params.filename === filenames.bestFilesZipFilename;\n\n      const cursor = await sqldb.queryValidatedCursor(\n        sql.assessment_instance_submissions,\n        {\n          assessment_id: res.locals.assessment.id,\n          include_all,\n          include_final,\n          include_best,\n        },\n        AssessmentInstanceSubmissionRowSchema,\n      );\n\n      res.attachment(req.params.filename);\n      await pipeCursorToArchive(res, cursor, extractFilesForSubmissions);\n    } else if (req.params.filename === filenames.groupsCsvFilename) {\n      const groupConfig = await getGroupConfig(res.locals.assessment.id);\n      const cursor = await sqldb.queryCursor(sql.group_configs, {\n        assessment_id: res.locals.assessment.id,\n      });\n\n      const columns: Columns = [\n        ['groupName', 'name'],\n        ['UID', 'uid'],\n      ];\n      if (groupConfig.has_roles) columns.push(['Role(s)', 'roles']);\n      res.attachment(req.params.filename);\n      await pipeline(cursor.stream(100), stringifyWithColumns(columns), res);\n    } else if (req.params.filename === filenames.scoresGroupCsvFilename) {\n      await sendInstancesCsv(res, req, scoresGroupColumns, {\n        only_highest: true,\n        group_work: true,\n      });\n    } else if (req.params.filename === filenames.scoresGroupAllCsvFilename) {\n      await sendInstancesCsv(res, req, scoresGroupColumns, {\n        only_highest: false,\n        group_work: true,\n      });\n    } else if (req.params.filename === filenames.pointsGroupCsvFilename) {\n      await sendInstancesCsv(res, req, pointsGroupColumns, {\n        only_highest: true,\n        group_work: true,\n      });\n    } else if (req.params.filename === filenames.pointsGroupAllCsvFilename) {\n      await sendInstancesCsv(res, req, pointsGroupColumns, {\n        only_highest: false,\n        group_work: true,\n      });\n    } else {\n      throw new error.HttpStatusError(404, 'Unknown filename: ' + req.params.filename);\n    }\n  }),\n);\n\nexport default router;\n"]}