{"version":3,"file":"instructorAssessmentGroups.js","sourceRoot":"","sources":["../../../src/pages/instructorAssessmentGroups/instructorAssessmentGroups.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { GroupConfigSchema } from '../../lib/db-types.js';\nimport { randomGroups, uploadInstanceGroups } from '../../lib/group-update.js';\nimport {\n  GroupOperationError,\n  addUserToGroup,\n  createGroup,\n  deleteAllGroups,\n  deleteGroup,\n  leaveGroup,\n} from '../../lib/groups.js';\nimport { assessmentFilenamePrefix } from '../../lib/sanitize-name.js';\nimport { parseUidsString } from '../../lib/user.js';\n\nimport {\n  GroupUsersRowSchema,\n  InstructorAssessmentGroups,\n} from './instructorAssessmentGroups.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\n/**\n * The maximum number of UIDs that can be provided in a single request.\n */\nconst MAX_UIDS = 50;\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    const prefix = assessmentFilenamePrefix(\n      res.locals.assessment,\n      res.locals.assessment_set,\n      res.locals.course_instance,\n      res.locals.course,\n    );\n    const groupsCsvFilename = prefix + 'groups.csv';\n\n    const groupConfigInfo = await sqldb.queryOptionalRow(\n      sql.config_info,\n      { assessment_id: res.locals.assessment.id },\n      GroupConfigSchema,\n    );\n\n    if (!groupConfigInfo) {\n      res.send(InstructorAssessmentGroups({ resLocals: res.locals }));\n      return;\n    }\n\n    const groups = await sqldb.queryRows(\n      sql.select_group_users,\n      { group_config_id: groupConfigInfo.id },\n      GroupUsersRowSchema,\n    );\n\n    const notAssigned = await sqldb.queryRows(\n      sql.select_not_in_group,\n      {\n        group_config_id: groupConfigInfo.id,\n        course_instance_id: groupConfigInfo.course_instance_id,\n      },\n      z.string(),\n    );\n\n    res.send(\n      InstructorAssessmentGroups({\n        resLocals: res.locals,\n        groupsCsvFilename,\n        groupConfigInfo,\n        groups,\n        notAssigned,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data editor)');\n    }\n\n    if (req.body.__action === 'upload_assessment_groups') {\n      const job_sequence_id = await uploadInstanceGroups(\n        res.locals.assessment.id,\n        req.file,\n        res.locals.user.user_id,\n        res.locals.authn_user.user_id,\n      );\n      res.redirect(res.locals.urlPrefix + '/jobSequence/' + job_sequence_id);\n    } else if (req.body.__action === 'random_assessment_groups') {\n      const job_sequence_id = await randomGroups(\n        res.locals.assessment.id,\n        res.locals.user.user_id,\n        res.locals.authn_user.user_id,\n        Number(req.body.max_group_size),\n        Number(req.body.min_group_size),\n      );\n      res.redirect(res.locals.urlPrefix + '/jobSequence/' + job_sequence_id);\n    } else if (req.body.__action === 'delete_all') {\n      await deleteAllGroups(res.locals.assessment.id, res.locals.authn_user.user_id);\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'add_group') {\n      const assessment_id = res.locals.assessment.id;\n      const group_name = req.body.group_name;\n\n      await createGroup(\n        group_name,\n        assessment_id,\n        parseUidsString(req.body.uids, MAX_UIDS),\n        res.locals.authn_user.user_id,\n      ).catch((err) => {\n        if (err instanceof GroupOperationError) {\n          flash('error', err.message);\n        } else {\n          throw err;\n        }\n      });\n\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'add_member') {\n      const assessment_id = res.locals.assessment.id;\n      const group_id = req.body.group_id;\n      for (const uid of parseUidsString(req.body.add_member_uids, MAX_UIDS)) {\n        try {\n          await addUserToGroup({\n            assessment_id,\n            group_id,\n            uid,\n            authn_user_id: res.locals.authn_user.user_id,\n            enforceGroupSize: false, // Enforce group size limits (instructors can override limits)\n          });\n        } catch (err) {\n          if (err instanceof GroupOperationError) {\n            flash('error', `Failed to add the user ${uid}: ${err.message}`);\n          } else {\n            throw err;\n          }\n        }\n      }\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'delete_member') {\n      const assessment_id = res.locals.assessment.id;\n      const group_id = req.body.group_id;\n      const user_id = req.body.user_id;\n      await leaveGroup(assessment_id, user_id, res.locals.authn_user.user_id, group_id);\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'delete_group') {\n      await deleteGroup(res.locals.assessment.id, req.body.group_id, res.locals.authn_user.user_id);\n      res.redirect(req.originalUrl);\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}