{"version":3,"file":"assessment.js","sourceRoot":"","sources":["../../../../src/pages/instructorAssessmentManualGrading/assessment/assessment.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport {\n  loadSqlEquiv,\n  queryAsync,\n  queryOptionalRow,\n  queryRows,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\n\nimport { selectCourseInstanceGraderStaff } from '../../../models/course-instances.js';\n\nimport { ManualGradingAssessment, ManualGradingQuestionSchema } from './assessment.html.js';\n\nconst router = Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    const questions = await queryRows(\n      sql.select_questions_manual_grading,\n      {\n        assessment_id: res.locals.assessment.id,\n        user_id: res.locals.authz_data.user.user_id,\n      },\n      ManualGradingQuestionSchema,\n    );\n    const num_open_instances = questions[0]?.num_open_instances || 0;\n    const courseStaff = await selectCourseInstanceGraderStaff({\n      course_instance_id: res.locals.course_instance.id,\n    });\n    res.send(\n      ManualGradingAssessment({\n        resLocals: res.locals,\n        questions,\n        courseStaff,\n        num_open_instances,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be a student data editor)');\n    }\n    if (req.body.__action === 'assign_graders') {\n      if (!req.body.assigned_grader) {\n        flash('error', 'No graders were selected for assignment.');\n        res.redirect(req.originalUrl);\n        return;\n      }\n      const assignedGraderIds: string[] = Array.isArray(req.body.assigned_grader)\n        ? req.body.assigned_grader\n        : [req.body.assigned_grader];\n      const allowedGraderIds = (\n        await selectCourseInstanceGraderStaff({\n          course_instance_id: res.locals.course_instance.id,\n        })\n      ).map((user) => user.user_id);\n      if (assignedGraderIds.some((graderId) => !allowedGraderIds.includes(graderId))) {\n        flash(\n          'error',\n          'Selected graders do not have student data editor access to this course instance.',\n        );\n        res.redirect(req.originalUrl);\n        return;\n      }\n      await runInTransactionAsync(async () => {\n        const numInstancesToGrade = await queryOptionalRow(\n          sql.count_instance_questions_to_grade,\n          {\n            assessment_id: res.locals.assessment.id,\n            unsafe_assessment_question_id: req.body.unsafe_assessment_question_id,\n          },\n          z.number(),\n        );\n        if (!numInstancesToGrade) {\n          flash('warning', 'No instances to assign.');\n          return;\n        }\n        // We use ceil to ensure that all instances are graded, even if the\n        // division is not exact. The last grader may not be assigned the same\n        // number of instances as the others, and that is expected.\n        const numInstancesPerGrader = Math.ceil(numInstancesToGrade / assignedGraderIds.length);\n        for (const graderId of assignedGraderIds) {\n          await queryAsync(sql.update_instance_question_graders, {\n            assessment_id: res.locals.assessment.id,\n            unsafe_assessment_question_id: req.body.unsafe_assessment_question_id,\n            assigned_grader: graderId,\n            limit: numInstancesPerGrader,\n          });\n        }\n      });\n      res.redirect(req.originalUrl);\n    } else {\n      throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}