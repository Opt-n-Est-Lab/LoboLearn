{"version":3,"file":"assessmentQuestion.js","sourceRoot":"","sources":["../../../../src/pages/instructorAssessmentManualGrading/assessmentQuestion/assessmentQuestion.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\nimport { loadSqlEquiv, queryAsync, queryRows } from '@prairielearn/postgres';\n\nimport { features } from '../../../lib/features/index.js';\nimport { idsEqual } from '../../../lib/id.js';\nimport * as manualGrading from '../../../lib/manualGrading.js';\nimport { selectCourseInstanceGraderStaff } from '../../../models/course-instances.js';\n\nimport { AssessmentQuestion } from './assessmentQuestion.html.js';\nimport { InstanceQuestionRowSchema } from './assessmentQuestion.types.js';\n\nconst router = express.Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    const courseStaff = await selectCourseInstanceGraderStaff({\n      course_instance_id: res.locals.course_instance.id,\n    });\n    const aiGradingEnabled = await features.enabledFromLocals('ai-grading', res.locals);\n    res.send(AssessmentQuestion({ resLocals: res.locals, courseStaff, aiGradingEnabled }));\n  }),\n);\n\nrouter.get(\n  '/instances.json',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n\n    const instance_questions = await queryRows(\n      sql.select_instance_questions_manual_grading,\n      {\n        assessment_id: res.locals.assessment.id,\n        assessment_question_id: res.locals.assessment_question.id,\n      },\n      InstanceQuestionRowSchema,\n    );\n    res.send({ instance_questions });\n  }),\n);\n\nrouter.get(\n  '/next_ungraded',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    if (\n      req.query.prior_instance_question_id != null &&\n      typeof req.query.prior_instance_question_id !== 'string'\n    ) {\n      throw new error.HttpStatusError(400, 'prior_instance_question_id must be a single value');\n    }\n    res.redirect(\n      await manualGrading.nextUngradedInstanceQuestionUrl(\n        res.locals.urlPrefix,\n        res.locals.assessment.id,\n        res.locals.assessment_question.id,\n        res.locals.authz_data.user.user_id,\n        req.query.prior_instance_question_id ?? null,\n      ),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_edit) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data editor)');\n    }\n    if (req.body.__action === 'batch_action') {\n      const action_data = JSON.parse(req.body.batch_action_data) || {};\n      const instance_question_ids = Array.isArray(req.body.instance_question_id)\n        ? req.body.instance_question_id\n        : [req.body.instance_question_id];\n      if (action_data?.assigned_grader != null) {\n        const courseStaff = await selectCourseInstanceGraderStaff({\n          course_instance_id: res.locals.course_instance.id,\n        });\n        if (!courseStaff.some((staff) => idsEqual(staff.user_id, action_data.assigned_grader))) {\n          throw new error.HttpStatusError(\n            400,\n            'Assigned grader does not have Student Data Editor permission',\n          );\n        }\n      }\n      await queryAsync(sql.update_instance_questions, {\n        assessment_question_id: res.locals.assessment_question.id,\n        instance_question_ids,\n        update_requires_manual_grading: 'requires_manual_grading' in action_data,\n        requires_manual_grading: !!action_data?.requires_manual_grading,\n        update_assigned_grader: 'assigned_grader' in action_data,\n        assigned_grader: action_data?.assigned_grader,\n      });\n      res.send({});\n    } else if (req.body.__action === 'edit_question_points') {\n      const result = await manualGrading.updateInstanceQuestionScore(\n        res.locals.assessment.id,\n        req.body.instance_question_id,\n        null, // submission_id\n        req.body.modified_at,\n        {\n          points: req.body.points,\n          manual_points: req.body.manual_points,\n          auto_points: req.body.auto_points,\n          score_perc: req.body.score_perc,\n        },\n        res.locals.authn_user.user_id,\n      );\n      if (result.modified_at_conflict) {\n        res.send({\n          conflict_grading_job_id: result.grading_job_id,\n          conflict_details_url: `${res.locals.urlPrefix}/assessment/${res.locals.assessment.id}/manual_grading/instance_question/${req.body.instance_question_id}?conflict_grading_job_id=${result.grading_job_id}`,\n        });\n      } else {\n        res.send({});\n      }\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}