{"version":3,"file":"instanceQuestion.js","sourceRoot":"","sources":["../../../../src/pages/instructorAssessmentManualGrading/instanceQuestion/instanceQuestion.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport qs from 'qs';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { IdSchema } from '../../../lib/db-types.js';\nimport { idsEqual } from '../../../lib/id.js';\nimport { reportIssueFromForm } from '../../../lib/issues.js';\nimport * as manualGrading from '../../../lib/manualGrading.js';\nimport { getAndRenderVariant, renderPanelsForSubmission } from '../../../lib/question-render.js';\nimport { selectCourseInstanceGraderStaff } from '../../../models/course-instances.js';\nimport { selectUserById } from '../../../models/user.js';\nimport { selectAndAuthzVariant } from '../../../models/variant.js';\n\nimport { GradingPanel } from './gradingPanel.html.js';\nimport {\n  type GradingJobData,\n  GradingJobDataSchema,\n  InstanceQuestion,\n} from './instanceQuestion.html.js';\nimport { RubricSettingsModal } from './rubricSettingsModal.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nasync function prepareLocalsForRender(query: Record<string, any>, resLocals: Record<string, any>) {\n  // Even though getAndRenderVariant will select variants for the instance question, if the\n  // question has multiple variants, by default getAndRenderVariant may select a variant without\n  // submissions or even create a new one. We don't want that behaviour, so we select the last\n  // submission and pass it along to getAndRenderVariant explicitly.\n  const variant_with_submission_id = await sqldb.queryOptionalRow(\n    sql.select_variant_with_last_submission,\n    { instance_question_id: resLocals.instance_question.id },\n    IdSchema,\n  );\n\n  // If student never loaded question or never submitted anything (submission is null)\n  if (variant_with_submission_id == null) {\n    throw new error.HttpStatusError(404, 'Instance question does not have a gradable submission.');\n  }\n  resLocals.questionRenderContext = 'manual_grading';\n  await getAndRenderVariant(variant_with_submission_id, null, resLocals as any);\n\n  let conflict_grading_job: GradingJobData | null = null;\n  if (query.conflict_grading_job_id) {\n    conflict_grading_job = await sqldb.queryOptionalRow(\n      sql.select_grading_job_data,\n      {\n        grading_job_id: IdSchema.parse(query.conflict_grading_job_id),\n        instance_question_id: resLocals.instance_question.id, // for authz\n      },\n      GradingJobDataSchema,\n    );\n    if (conflict_grading_job != null) {\n      await manualGrading.populateManualGradingData(conflict_grading_job);\n    }\n  }\n\n  const graders = await selectCourseInstanceGraderStaff({\n    course_instance_id: resLocals.course_instance.id,\n  });\n  return { resLocals, conflict_grading_job, graders };\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n\n    const assignedGrader = res.locals.instance_question.assigned_grader\n      ? await selectUserById(res.locals.instance_question.assigned_grader)\n      : null;\n    const lastGrader = res.locals.instance_question.last_grader\n      ? await selectUserById(res.locals.instance_question.last_grader)\n      : null;\n    res.send(\n      InstanceQuestion({\n        ...(await prepareLocalsForRender(req.query, res.locals)),\n        assignedGrader,\n        lastGrader,\n      }),\n    );\n  }),\n);\n\nrouter.get(\n  '/variant/:unsafe_variant_id(\\\\d+)/submission/:unsafe_submission_id(\\\\d+)',\n  asyncHandler(async (req, res) => {\n    const variant = await selectAndAuthzVariant({\n      unsafe_variant_id: req.params.unsafe_variant_id,\n      variant_course: res.locals.course,\n      question_id: res.locals.question.id,\n      course_instance_id: res.locals.course_instance.id,\n      instance_question_id: res.locals.instance_question.id,\n      authz_data: res.locals.authz_data,\n      authn_user: res.locals.authn_user,\n      user: res.locals.user,\n      is_administrator: res.locals.is_administrator,\n    });\n\n    const panels = await renderPanelsForSubmission({\n      unsafe_submission_id: req.params.unsafe_submission_id,\n      question: res.locals.question,\n      instance_question: res.locals.instance_question,\n      variant,\n      user: res.locals.user,\n      urlPrefix: res.locals.urlPrefix,\n      questionContext: 'manual_grading',\n      questionRenderContext: 'manual_grading',\n      // This is only used by score panels, which are not rendered in this context.\n      authorizedEdit: false,\n      // The score panels never need to be live-updated in this context.\n      renderScorePanels: false,\n      // Group role permissions are not used in this context.\n      groupRolePermissions: null,\n    });\n    res.json(panels);\n  }),\n);\n\nrouter.get(\n  '/grading_rubric_panels',\n  asyncHandler(async (req, res) => {\n    try {\n      const locals = await prepareLocalsForRender({}, res.locals);\n      const gradingPanel = GradingPanel({ ...locals, context: 'main' }).toString();\n      const rubricSettings = RubricSettingsModal(locals).toString();\n      res.send({ gradingPanel, rubricSettings });\n    } catch (err) {\n      res.send({ err: String(err) });\n    }\n  }),\n);\n\nconst PostBodySchema = z.union([\n  z.object({\n    __action: z.literal('add_manual_grade'),\n    submission_id: IdSchema,\n    modified_at: z.string(),\n    rubric_item_selected_manual: IdSchema.or(z.record(z.string(), IdSchema))\n      .nullish()\n      .transform((val) =>\n        val == null ? [] : typeof val === 'string' ? [val] : Object.values(val),\n      ),\n    score_manual_adjust_points: z.coerce.number().nullish(),\n    use_score_perc: z.literal('on').optional(),\n    score_manual_points: z.coerce.number().nullish(),\n    score_manual_percent: z.coerce.number().nullish(),\n    score_auto_points: z.coerce.number().nullish(),\n    score_auto_percent: z.coerce.number().nullish(),\n    submission_note: z.string().nullish(),\n    unsafe_issue_ids_close: IdSchema.or(z.record(z.string(), IdSchema))\n      .nullish()\n      .transform((val) =>\n        val == null ? [] : typeof val === 'string' ? [val] : Object.values(val),\n      ),\n  }),\n  z.object({\n    __action: z.literal('modify_rubric_settings'),\n    use_rubric: z\n      .enum(['true', 'false'])\n      .optional()\n      .transform((val) => val === 'true'),\n    replace_auto_points: z\n      .enum(['true', 'false'])\n      .optional()\n      .transform((val) => val === 'true'),\n    starting_points: z.coerce.number(),\n    min_points: z.coerce.number(),\n    max_extra_points: z.coerce.number(),\n    tag_for_manual_grading: z\n      .literal('true')\n      .optional()\n      .transform((val) => val === 'true'),\n    rubric_item: z\n      .record(\n        z.string(),\n        z.object({\n          id: z.string().optional(),\n          order: z.coerce.number(),\n          points: z.coerce.number(),\n          description: z.string(),\n          explanation: z.string().optional(),\n          grader_note: z.string().optional(),\n          always_show_to_students: z.string().transform((val) => val === 'true'),\n        }),\n      )\n      .default({}),\n  }),\n  z.object({\n    __action: z.custom<`reassign_${string}`>(\n      (val) => typeof val === 'string' && val.startsWith('reassign_'),\n    ),\n  }),\n  z.object({\n    __action: z.literal('report_issue'),\n    __variant_id: IdSchema,\n    description: z.string(),\n  }),\n]);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_edit) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data editor)');\n    }\n    const body = PostBodySchema.parse(\n      // Parse using qs, which allows deep objects to be created based on parameter names\n      // e.g., the key `rubric_item[cur1][points]` converts to `rubric_item: { cur1: { points: ... } ... }`\n      // Array parsing is disabled, as it has special cases for 22+ items that\n      // we don't want to double-handle, so we always receive an object and\n      // convert it to an array if necessary\n      // (https://github.com/ljharb/qs#parsing-arrays).\n      // The order of the items in arrays is never important, so using Object.values is fine.\n      qs.parse(qs.stringify(req.body), { parseArrays: false }),\n    );\n    if (body.__action === 'add_manual_grade') {\n      const manual_rubric_data = res.locals.assessment_question.manual_rubric_id\n        ? {\n            rubric_id: res.locals.assessment_question.manual_rubric_id,\n            applied_rubric_items: body.rubric_item_selected_manual.map((id) => ({\n              rubric_item_id: id,\n            })),\n            adjust_points: body.score_manual_adjust_points || null,\n          }\n        : undefined;\n\n      const { modified_at_conflict, grading_job_id } =\n        await manualGrading.updateInstanceQuestionScore(\n          res.locals.assessment.id,\n          res.locals.instance_question.id,\n          body.submission_id,\n          body.modified_at,\n          {\n            manual_score_perc: body.use_score_perc ? body.score_manual_percent : null,\n            manual_points: body.use_score_perc ? null : body.score_manual_points,\n            auto_score_perc: body.use_score_perc ? body.score_auto_percent : null,\n            auto_points: body.use_score_perc ? null : body.score_auto_points,\n            feedback: { manual: body.submission_note },\n            manual_rubric_data,\n          },\n          res.locals.authn_user.user_id,\n        );\n\n      if (modified_at_conflict) {\n        return res.redirect(req.baseUrl + `?conflict_grading_job_id=${grading_job_id}`);\n      }\n      // Only close issues if the submission was successfully graded\n      if (body.unsafe_issue_ids_close.length > 0) {\n        await sqldb.queryAsync(sql.close_issues_for_instance_question, {\n          issue_ids: body.unsafe_issue_ids_close,\n          instance_question_id: res.locals.instance_question.id,\n          authn_user_id: res.locals.authn_user.user_id,\n        });\n      }\n      res.redirect(\n        await manualGrading.nextUngradedInstanceQuestionUrl(\n          res.locals.urlPrefix,\n          res.locals.assessment.id,\n          res.locals.assessment_question.id,\n          res.locals.authz_data.user.user_id,\n          res.locals.instance_question.id,\n        ),\n      );\n    } else if (body.__action === 'modify_rubric_settings') {\n      try {\n        await manualGrading.updateAssessmentQuestionRubric(\n          res.locals.instance_question.assessment_question_id,\n          body.use_rubric,\n          body.replace_auto_points,\n          body.starting_points,\n          body.min_points,\n          body.max_extra_points,\n          Object.values(body.rubric_item), // rubric items\n          body.tag_for_manual_grading,\n          res.locals.authn_user.user_id,\n        );\n        res.redirect(req.baseUrl + '/grading_rubric_panels');\n      } catch (err) {\n        res.status(500).send({ err: String(err) });\n      }\n    } else if (typeof body.__action === 'string' && body.__action.startsWith('reassign_')) {\n      const actionPrompt = body.__action.substring(9);\n      const assigned_grader = ['nobody', 'graded'].includes(actionPrompt) ? null : actionPrompt;\n      if (assigned_grader != null) {\n        const courseStaff = await selectCourseInstanceGraderStaff({\n          course_instance_id: res.locals.course_instance.id,\n        });\n        if (!courseStaff.some((staff) => idsEqual(staff.user_id, assigned_grader))) {\n          throw new error.HttpStatusError(\n            400,\n            'Assigned grader does not have Student Data Editor permission',\n          );\n        }\n      }\n      await sqldb.queryAsync(sql.update_assigned_grader, {\n        instance_question_id: res.locals.instance_question.id,\n        assigned_grader,\n        requires_manual_grading: actionPrompt !== 'graded',\n      });\n\n      res.redirect(\n        await manualGrading.nextUngradedInstanceQuestionUrl(\n          res.locals.urlPrefix,\n          res.locals.assessment.id,\n          res.locals.assessment_question.id,\n          res.locals.authz_data.user.user_id,\n          res.locals.instance_question.id,\n        ),\n      );\n    } else if (body.__action === 'report_issue') {\n      await reportIssueFromForm(req, res);\n      res.redirect(req.originalUrl);\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}