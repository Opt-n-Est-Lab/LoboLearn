{"version":3,"file":"instructorAssessmentQuestionStatistics.js","sourceRoot":"","sources":["../../../src/pages/instructorAssessmentQuestionStatistics/instructorAssessmentQuestionStatistics.ts"],"names":[],"mappings":"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","sourcesContent":["import { pipeline } from 'node:stream/promises';\n\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport { stringifyStream } from '@prairielearn/csv';\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport {\n  updateAssessmentQuestionStatsForAssessment,\n  updateAssessmentStatistics,\n} from '../../lib/assessment.js';\nimport { assessmentFilenamePrefix } from '../../lib/sanitize-name.js';\nimport { STAT_DESCRIPTIONS } from '../shared/assessmentStatDescriptions.js';\n\nimport {\n  AssessmentQuestionStatsRowSchema,\n  InstructorAssessmentQuestionStatistics,\n} from './instructorAssessmentQuestionStatistics.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nfunction makeStatsCsvFilename(locals) {\n  const prefix = assessmentFilenamePrefix(\n    locals.assessment,\n    locals.assessment_set,\n    locals.course_instance,\n    locals.course,\n  );\n  return prefix + 'question_stats.csv';\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    // make sure statistics are up to date\n    await updateAssessmentStatistics(res.locals.assessment.id);\n\n    // re-fetch assessment to get updated statistics\n    const assessmentResult = await sqldb.queryOneRowAsync(sql.select_assessment, {\n      assessment_id: res.locals.assessment.id,\n    });\n    res.locals.assessment = assessmentResult.rows[0].assessment;\n\n    // Fetch assessments.stats_last_updated (the time when we last updated\n    // the _question_ statistics for this assessment). Note that this is\n    // different to assessments.statistics_last_updated_at (the time we last\n    // updated the assessment instance statistics stored in the assessments\n    // row itself).\n    const statsLastUpdated = await sqldb.queryRow(\n      sql.assessment_stats_last_updated,\n      { assessment_id: res.locals.assessment.id },\n      z.string(),\n    );\n\n    const rows = await sqldb.queryRows(\n      sql.questions,\n      {\n        assessment_id: res.locals.assessment.id,\n      },\n      AssessmentQuestionStatsRowSchema,\n    );\n\n    res.send(\n      InstructorAssessmentQuestionStatistics({\n        questionStatsCsvFilename: makeStatsCsvFilename(res.locals),\n        statsLastUpdated,\n        rows,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nrouter.get(\n  '/:filename',\n  asyncHandler(async (req, res) => {\n    if (req.params.filename === makeStatsCsvFilename(res.locals)) {\n      const cursor = await sqldb.queryCursor(sql.questions, {\n        assessment_id: res.locals.assessment.id,\n      });\n\n      const stringifier = stringifyStream({\n        header: true,\n        columns: [\n          'Course',\n          'Instance',\n          'Assessment',\n          'Question number',\n          'QID',\n          'Question title',\n          'Question topic',\n          'Question tags',\n          ...Object.values(STAT_DESCRIPTIONS).map((d) => d.non_html_title),\n        ],\n        transform(record) {\n          return [\n            record.course_short_name,\n            record.course_instance_short_name,\n            record.assessment_label,\n            record.assessment_question_number,\n            record.qid,\n            record.question_title,\n            record.topic.name,\n            record.question_tags,\n            record.mean_question_score,\n            record.median_question_score,\n            record.question_score_variance,\n            record.discrimination,\n            record.some_submission_perc,\n            record.some_perfect_submission_perc,\n            record.some_nonzero_submission_perc,\n            record.average_first_submission_score,\n            record.first_submission_score_variance,\n            record.first_submission_score_hist,\n            record.average_last_submission_score,\n            record.last_submission_score_variance,\n            record.last_submission_score_hist,\n            record.average_max_submission_score,\n            record.max_submission_score_variance,\n            record.max_submission_score_hist,\n            record.average_average_submission_score,\n            record.average_submission_score_variance,\n            record.average_submission_score_hist,\n            record.submission_score_array_averages,\n            record.incremental_submission_score_array_averages,\n            record.incremental_submission_points_array_averages,\n            record.average_number_submissions,\n            record.number_submissions_variance,\n            record.number_submissions_hist,\n            record.quintile_question_scores,\n          ];\n        },\n      });\n\n      res.attachment(req.params.filename);\n      await pipeline(cursor.stream(100), stringifier, res);\n    } else {\n      throw new error.HttpStatusError(404, 'Unknown filename: ' + req.params.filename);\n    }\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    // The action \"refresh_stats\" (from the button \"Recalculate statistics\") does\n    // not change student data. Statistics *should* be recalculated automatically,\n    // e.g., every time this page is loaded, but until then we will let anyone who\n    // can view the page post this action and trigger a recalculation.\n    if (req.body.__action === 'refresh_stats') {\n      await updateAssessmentQuestionStatsForAssessment(res.locals.assessment.id);\n      res.redirect(req.originalUrl);\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}