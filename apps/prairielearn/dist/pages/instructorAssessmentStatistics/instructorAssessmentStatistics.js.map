{"version":3,"file":"instructorAssessmentStatistics.js","sourceRoot":"","sources":["../../../src/pages/instructorAssessmentStatistics/instructorAssessmentStatistics.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { stringify } from '@prairielearn/csv';\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { updateAssessmentStatistics } from '../../lib/assessment.js';\nimport { AssessmentSchema } from '../../lib/db-types.js';\nimport { assessmentFilenamePrefix } from '../../lib/sanitize-name.js';\n\nimport {\n  AssessmentScoreHistogramByDateSchema,\n  DurationStatSchema,\n  type Filenames,\n  InstructorAssessmentStatistics,\n  UserScoreSchema,\n} from './instructorAssessmentStatistics.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nfunction getFilenames(locals: Record<string, any>): Filenames {\n  const prefix = assessmentFilenamePrefix(\n    locals.assessment,\n    locals.assessment_set,\n    locals.course_instance,\n    locals.course,\n  );\n\n  return {\n    scoreStatsCsvFilename: prefix + 'score_stats.csv',\n    durationStatsCsvFilename: prefix + 'duration_stats.csv',\n    statsByDateCsvFilename: prefix + 'scores_by_date.csv',\n  };\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    await updateAssessmentStatistics(res.locals.assessment.id);\n\n    // re-fetch assessment to get updated statistics\n    const assessment = await sqldb.queryRow(\n      sql.select_assessment,\n      { assessment_id: res.locals.assessment.id },\n      AssessmentSchema,\n    );\n\n    // get formatted duration statistics\n    //\n    // Note that these statistics only consider the highest-scoring assessment\n    // instance for each user, so the scatter plot of instance durations vs\n    // scores won't include low-scoring instances. It's not clear if we want to\n    // change this.\n    const durationStat = await sqldb.queryRow(\n      sql.select_duration_stats,\n      { assessment_id: res.locals.assessment.id },\n      DurationStatSchema,\n    );\n\n    const assessmentScoreHistogramByDate = await sqldb.queryRows(\n      sql.assessment_score_histogram_by_date,\n      { assessment_id: res.locals.assessment.id },\n      AssessmentScoreHistogramByDateSchema,\n    );\n\n    const userScores = await sqldb.queryRows(\n      sql.user_scores,\n      { assessment_id: res.locals.assessment.id },\n      UserScoreSchema,\n    );\n\n    res.send(\n      InstructorAssessmentStatistics({\n        resLocals: res.locals,\n        assessment,\n        durationStat,\n        assessmentScoreHistogramByDate,\n        userScores,\n        filenames: getFilenames(res.locals),\n      }),\n    );\n  }),\n);\n\nrouter.get(\n  '/:filename',\n  asyncHandler(async (req, res) => {\n    const filenames = getFilenames(res.locals);\n\n    await updateAssessmentStatistics(res.locals.assessment.id);\n\n    // re-fetch assessment to get updated statistics\n    const assessmentResult = await sqldb.queryOneRowAsync(sql.select_assessment, {\n      assessment_id: res.locals.assessment.id,\n    });\n    res.locals.assessment = assessmentResult.rows[0].assessment;\n\n    if (req.params.filename === filenames.scoreStatsCsvFilename) {\n      const csvData = [\n        [\n          res.locals.course.short_name,\n          res.locals.course_instance.short_name,\n          res.locals.assessment_set.name,\n          res.locals.assessment.number,\n          res.locals.assessment_set.abbreviation + res.locals.assessment.number,\n          res.locals.assessment.title,\n          res.locals.assessment.tid,\n          res.locals.assessment.score_stat_number,\n          res.locals.assessment.score_stat_mean,\n          res.locals.assessment.score_stat_std,\n          res.locals.assessment.score_stat_min,\n          res.locals.assessment.score_stat_max,\n          res.locals.assessment.score_stat_median,\n          res.locals.assessment.score_stat_n_zero,\n          res.locals.assessment.score_stat_n_hundred,\n          res.locals.assessment.score_stat_n_zero_perc,\n          res.locals.assessment.score_stat_n_hundred_perc,\n          ...res.locals.assessment.score_stat_hist,\n        ],\n      ];\n\n      res.attachment(req.params.filename);\n      stringify(csvData, {\n        header: true,\n        columns: [\n          'Course',\n          'Instance',\n          'Set',\n          'Number',\n          'Assessment',\n          'Title',\n          'AID',\n          'NStudents',\n          'Mean',\n          'Std',\n          'Min',\n          'Max',\n          'Median',\n          'NZero',\n          'NHundred',\n          'NZeroPerc',\n          'NHundredPerc',\n          ...res.locals.assessment.score_stat_hist.map((_, i) => `Hist ${i + 1}`),\n        ],\n      }).pipe(res);\n    } else if (req.params.filename === filenames.durationStatsCsvFilename) {\n      // get formatted duration statistics\n      const durationStatsResult = await sqldb.queryOneRowAsync(sql.select_duration_stats, {\n        assessment_id: res.locals.assessment.id,\n      });\n      const duration_stat = durationStatsResult.rows[0];\n\n      const csvData = [\n        [\n          res.locals.course.short_name,\n          res.locals.course_instance.short_name,\n          res.locals.assessment_set.name,\n          res.locals.assessment.number,\n          res.locals.assessment_set.abbreviation + res.locals.assessment.number,\n          res.locals.assessment.title,\n          res.locals.assessment.tid,\n          duration_stat.mean_mins,\n          duration_stat.median_mins,\n          duration_stat.min_mins,\n          duration_stat.max_mins,\n          ...duration_stat.threshold_seconds,\n          ...duration_stat.hist,\n        ],\n      ];\n\n      res.attachment(req.params.filename);\n      stringify(csvData, {\n        header: true,\n        columns: [\n          'Course',\n          'Instance',\n          'Set',\n          'Number',\n          'Assessment',\n          'Title',\n          'AID',\n          'Mean duration (min)',\n          'Median duration (min)',\n          'Min duration (min)',\n          'Max duration (min)',\n          ...duration_stat.threshold_seconds.map((_, i) => `Hist boundary ${i + 1} (s)`),\n          ...duration_stat.hist.map((_, i) => `Hist ${i + 1}`),\n        ],\n      }).pipe(res);\n    } else if (req.params.filename === filenames.statsByDateCsvFilename) {\n      const histByDateResult = await sqldb.queryAsync(sql.assessment_score_histogram_by_date, {\n        assessment_id: res.locals.assessment.id,\n      });\n      const scoresByDay = histByDateResult.rows;\n\n      const numDays = scoresByDay.length;\n      const numGroups = scoresByDay[0].histogram.length;\n\n      const csvData: (string | number)[][] = [];\n\n      let groupData = ['Number'];\n      for (let day = 0; day < numDays; day++) {\n        groupData.push(scoresByDay[day].number);\n      }\n      csvData.push(groupData);\n\n      groupData = ['Mean score perc'];\n      for (let day = 0; day < numDays; day++) {\n        groupData.push(scoresByDay[day].mean_score_perc);\n      }\n      csvData.push(groupData);\n\n      for (let group = 0; group < numGroups; group++) {\n        groupData = [group * 10 + '% to ' + (group + 1) * 10 + '%'];\n        for (let day = 0; day < numDays; day++) {\n          groupData.push(scoresByDay[day].histogram[group]);\n        }\n        csvData.push(groupData);\n      }\n\n      res.attachment(req.params.filename);\n      stringify(csvData, {\n        header: true,\n        columns: ['Date', ...scoresByDay.map((day) => day.date_formatted)],\n      }).pipe(res);\n    } else {\n      throw new error.HttpStatusError(404, 'Unknown filename: ' + req.params.filename);\n    }\n  }),\n);\n\nexport default router;\n"]}