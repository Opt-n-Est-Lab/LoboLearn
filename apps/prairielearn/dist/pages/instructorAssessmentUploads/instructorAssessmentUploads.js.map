{"version":3,"file":"instructorAssessmentUploads.js","sourceRoot":"","sources":["../../../src/pages/instructorAssessmentUploads/instructorAssessmentUploads.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EACL,8BAA8B,EAC9B,4BAA4B,GAC7B,MAAM,2BAA2B,CAAC;AAEnC,OAAO,EACL,2BAA2B,EAC3B,uBAAuB,GACxB,MAAM,uCAAuC,CAAC;AAE/C,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAChC,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,mCAAmC,EAAE,CAAC;QAC/D,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,+CAA+C,CAAC,CAAC;IACxF,CAAC;IACD,MAAM,kBAAkB,GAAG,MAAM,KAAK,CAAC,SAAS,CAC9C,GAAG,CAAC,2BAA2B,EAC/B,EAAE,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE,EAC3C,uBAAuB,CACxB,CAAC;IACF,GAAG,CAAC,IAAI,CAAC,2BAA2B,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,IAAI,CACT,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,mCAAmC,EAAE,CAAC;QAC/D,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,+CAA+C,CAAC,CAAC;IACxF,CAAC;IAED,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,iCAAiC,EAAE,CAAC;QAC5D,MAAM,aAAa,GAAG,MAAM,4BAA4B,CACtD,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EACxB,GAAG,CAAC,IAAI,EACR,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EACvB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAC9B,CAAC;QACF,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,GAAG,eAAe,GAAG,aAAa,CAAC,CAAC;IACvE,CAAC;SAAM,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,mCAAmC,EAAE,CAAC;QACrE,MAAM,aAAa,GAAG,MAAM,8BAA8B,CACxD,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EACxB,GAAG,CAAC,IAAI,EACR,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EACvB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAC9B,CAAC;QACF,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,GAAG,eAAe,GAAG,aAAa,CAAC,CAAC;IACvE,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,qBAAqB,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjF,CAAC;AACH,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import * as express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport {\n  uploadAssessmentInstanceScores,\n  uploadInstanceQuestionScores,\n} from '../../lib/score-upload.js';\n\nimport {\n  InstructorAssessmentUploads,\n  UploadJobSequenceSchema,\n} from './instructorAssessmentUploads.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    const uploadJobSequences = await sqldb.queryRows(\n      sql.select_upload_job_sequences,\n      { assessment_id: res.locals.assessment.id },\n      UploadJobSequenceSchema,\n    );\n    res.send(InstructorAssessmentUploads({ resLocals: res.locals, uploadJobSequences }));\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_edit) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data editor)');\n    }\n\n    if (req.body.__action === 'upload_instance_question_scores') {\n      const jobSequenceId = await uploadInstanceQuestionScores(\n        res.locals.assessment.id,\n        req.file,\n        res.locals.user.user_id,\n        res.locals.authn_user.user_id,\n      );\n      res.redirect(res.locals.urlPrefix + '/jobSequence/' + jobSequenceId);\n    } else if (req.body.__action === 'upload_assessment_instance_scores') {\n      const jobSequenceId = await uploadAssessmentInstanceScores(\n        res.locals.assessment.id,\n        req.file,\n        res.locals.user.user_id,\n        res.locals.authn_user.user_id,\n      );\n      res.redirect(res.locals.urlPrefix + '/jobSequence/' + jobSequenceId);\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}