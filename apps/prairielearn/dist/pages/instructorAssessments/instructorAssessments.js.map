{"version":3,"file":"instructorAssessments.js","sourceRoot":"","sources":["../../../src/pages/instructorAssessments/instructorAssessments.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EACL,YAAY,EACZ,WAAW,EACX,gBAAgB,EAChB,QAAQ,EACR,SAAS,GACV,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EACL,0BAA0B,EAC1B,2CAA2C,GAC5C,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAEL,sBAAsB,EACtB,gBAAgB,EAChB,mBAAmB,EACnB,QAAQ,GACT,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAC3D,OAAO,EAAE,4BAA4B,EAAE,MAAM,4BAA4B,CAAC;AAE1E,OAAO,EACL,mBAAmB,EACnB,eAAe,EACf,qBAAqB,GACtB,MAAM,iCAAiC,CAAC;AAEzC,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AACxB,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,SAAS,gBAAgB,CAAC,MAA2B;IACnD,OAAO,GAAG,4BAA4B,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC;AACtG,CAAC;AAED,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,WAAW,GAAG,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAEjD,MAAM,IAAI,GAAG,MAAM,SAAS,CAC1B,GAAG,CAAC,kBAAkB,EACtB;QACE,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;QACjD,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU;QACjC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ;QAC7B,oBAAoB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,oBAAoB;KACtE,EACD,mBAAmB,CACpB,CAAC;IAEF,MAAM,+BAA+B,GAAG,IAAI;SACzC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,uBAAuB,CAAC;SAC5C,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAExB,MAAM,cAAc,GAAG,MAAM,SAAS,CACpC,GAAG,CAAC,sBAAsB,EAC1B,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,EACnC,mBAAmB,CACpB,CAAC;IAEF,IAAI,iBAAiB,GAAuB,EAAE,CAAC;IAE/C,IAAI,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,oBAAoB,KAAK,QAAQ,EAAE,CAAC;QACjE,iBAAiB,GAAG,MAAM,SAAS,CACjC,GAAG,CAAC,yBAAyB,EAC7B,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,EACnC,sBAAsB,CACvB,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,IAAI,CACN,qBAAqB,CAAC;QACpB,SAAS,EAAE,GAAG,CAAC,MAAM;QACrB,IAAI;QACJ,+BAA+B;QAC/B,WAAW;QACX,cAAc;QACd,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,oBAAoB;QACnE,iBAAiB;KAClB,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,GAAG,CACR,uBAAuB,EACvB,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,0EAA0E;IAC1E,0EAA0E;IAC1E,wBAAwB;IACxB,MAAM,0BAA0B,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAE3D,0EAA0E;IAC1E,qEAAqE;IACrE,+CAA+C;IAC/C,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAChC,GAAG,CAAC,iBAAiB,EACrB;QACE,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,EAAE,qBAAqB;QACxE,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,aAAa;QACvC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU;QACjC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ;KAC9B,EACD,gBAAgB,CACjB,CAAC;IACF,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAChB,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,yBAAyB,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;IACtF,CAAC;IAED,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;AAChD,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,GAAG,CACR,iBAAiB,EACjB,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,KAAK,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QACzD,uEAAuE;QACvE,mDAAmD;QAEnD,yCAAyC;QACzC,MAAM,2CAA2C,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAEjF,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,GAAG,CAAC,kBAAkB,EAAE;YACvD,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;YACjD,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU;YACjC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ;YAC7B,oBAAoB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,oBAAoB;SACtE,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,eAAe,CAAC;YAClC,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE;gBACP,QAAQ;gBACR,UAAU;gBACV,KAAK;gBACL,QAAQ;gBACR,YAAY;gBACZ,OAAO;gBACP,KAAK;gBACL,WAAW;gBACX,MAAM;gBACN,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,QAAQ;gBACR,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,cAAc;gBACd,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,QAAQ;aACT;YACD,SAAS,CAAC,MAAM;gBACd,OAAO;oBACL,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU;oBAC5B,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU;oBACrC,MAAM,CAAC,IAAI;oBACX,MAAM,CAAC,iBAAiB;oBACxB,MAAM,CAAC,KAAK;oBACZ,MAAM,CAAC,KAAK;oBACZ,MAAM,CAAC,GAAG;oBACV,MAAM,CAAC,iBAAiB;oBACxB,MAAM,CAAC,eAAe;oBACtB,MAAM,CAAC,cAAc;oBACrB,MAAM,CAAC,cAAc;oBACrB,MAAM,CAAC,cAAc;oBACrB,MAAM,CAAC,iBAAiB;oBACxB,MAAM,CAAC,iBAAiB;oBACxB,MAAM,CAAC,oBAAoB;oBAC3B,MAAM,CAAC,sBAAsB;oBAC7B,MAAM,CAAC,yBAAyB;oBAChC,GAAG,MAAM,CAAC,eAAe;iBAC1B,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;IACvD,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,qBAAqB,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC7E,CAAC;AACH,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,IAAI,CACT,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,gBAAgB,EAAE,CAAC;QAC3C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACpB,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACtD,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YAClB,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QACpD,CAAC;QACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAC5C,MAAM,IAAI,eAAe,CACvB,GAAG,EACH,kGAAkG,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CACjH,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;QACrD,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YAClB,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC;YACrC,MAAM,EAAE,GAAG,CAAC,MAAa;YACzB,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK;YACrB,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG;YACjB,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI;YACnB,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG;YACjB,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,gBAAgB,EAAE,CAAC;QAClD,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC;QAAC,MAAM,CAAC;YACP,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,eAAe,SAAS,CAAC,aAAa,EAAE,CAAC,CAAC;YAC9E,OAAO;QACT,CAAC;QAED,KAAK,CAAC,SAAS,EAAE,kCAAkC,CAAC,CAAC;QAErD,MAAM,aAAa,GAAG,MAAM,QAAQ,CAClC,GAAG,CAAC,8BAA8B,EAClC,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,EAAE,EACxE,QAAQ,CACT,CAAC;QACF,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,eAAe,aAAa,YAAY,CAAC,CAAC;IAChF,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,qBAAqB,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3E,CAAC;AACH,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { pipeline } from 'node:stream/promises';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { stringifyStream } from '@prairielearn/csv';\nimport { HttpStatusError } from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport {\n  loadSqlEquiv,\n  queryCursor,\n  queryOptionalRow,\n  queryRow,\n  queryRows,\n} from '@prairielearn/postgres';\n\nimport {\n  updateAssessmentStatistics,\n  updateAssessmentStatisticsForCourseInstance,\n} from '../../lib/assessment.js';\nimport {\n  type AssessmentModule,\n  AssessmentModuleSchema,\n  AssessmentSchema,\n  AssessmentSetSchema,\n  IdSchema,\n} from '../../lib/db-types.js';\nimport { AssessmentAddEditor } from '../../lib/editors.js';\nimport { courseInstanceFilenamePrefix } from '../../lib/sanitize-name.js';\n\nimport {\n  AssessmentRowSchema,\n  AssessmentStats,\n  InstructorAssessments,\n} from './instructorAssessments.html.js';\n\nconst router = Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nfunction buildCsvFilename(locals: Record<string, any>) {\n  return `${courseInstanceFilenamePrefix(locals.course_instance, locals.course)}assessment_stats.csv`;\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const csvFilename = buildCsvFilename(res.locals);\n\n    const rows = await queryRows(\n      sql.select_assessments,\n      {\n        course_instance_id: res.locals.course_instance.id,\n        authz_data: res.locals.authz_data,\n        req_date: res.locals.req_date,\n        assessments_group_by: res.locals.course_instance.assessments_group_by,\n      },\n      AssessmentRowSchema,\n    );\n\n    const assessmentIdsNeedingStatsUpdate = rows\n      .filter((row) => row.needs_statistics_update)\n      .map((row) => row.id);\n\n    const assessmentSets = await queryRows(\n      sql.select_assessment_sets,\n      { course_id: res.locals.course.id },\n      AssessmentSetSchema,\n    );\n\n    let assessmentModules: AssessmentModule[] = [];\n\n    if (res.locals.course_instance.assessments_group_by === 'Module') {\n      assessmentModules = await queryRows(\n        sql.select_assessment_modules,\n        { course_id: res.locals.course.id },\n        AssessmentModuleSchema,\n      );\n    }\n\n    res.send(\n      InstructorAssessments({\n        resLocals: res.locals,\n        rows,\n        assessmentIdsNeedingStatsUpdate,\n        csvFilename,\n        assessmentSets,\n        assessmentsGroupBy: res.locals.course_instance.assessments_group_by,\n        assessmentModules,\n      }),\n    );\n  }),\n);\n\nrouter.get(\n  '/stats/:assessment_id',\n  asyncHandler(async (req, res) => {\n    // Update statistics for this assessment. We do this before checking authz\n    // on the assessment but this is ok because we won't send any data back if\n    // we aren't authorized.\n    await updateAssessmentStatistics(req.params.assessment_id);\n\n    // When fetching the assessment, we don't check whether it needs an update\n    // again because we don't want to get get stuck in a loop perpetually\n    // updating because students are still working.\n    const row = await queryOptionalRow(\n      sql.select_assessment,\n      {\n        course_instance_id: res.locals.course_instance.id, // for authz checking\n        assessment_id: req.params.assessment_id,\n        authz_data: res.locals.authz_data,\n        req_date: res.locals.req_date,\n      },\n      AssessmentSchema,\n    );\n    if (row == null) {\n      throw new HttpStatusError(404, `Assessment not found: ${req.params.assessment_id}`);\n    }\n\n    res.send(AssessmentStats({ row }).toString());\n  }),\n);\n\nrouter.get(\n  '/file/:filename',\n  asyncHandler(async (req, res) => {\n    if (req.params.filename === buildCsvFilename(res.locals)) {\n      // There is no need to check if the user has permission to view student\n      // data, because this file only has aggregate data.\n\n      // update assessment statistics if needed\n      await updateAssessmentStatisticsForCourseInstance(res.locals.course_instance.id);\n\n      const cursor = await queryCursor(sql.select_assessments, {\n        course_instance_id: res.locals.course_instance.id,\n        authz_data: res.locals.authz_data,\n        req_date: res.locals.req_date,\n        assessments_group_by: res.locals.course_instance.assessments_group_by,\n      });\n\n      const stringifier = stringifyStream({\n        header: true,\n        columns: [\n          'Course',\n          'Instance',\n          'Set',\n          'Number',\n          'Assessment',\n          'Title',\n          'AID',\n          'NStudents',\n          'Mean',\n          'Std',\n          'Min',\n          'Max',\n          'Median',\n          'NZero',\n          'NHundred',\n          'NZeroPerc',\n          'NHundredPerc',\n          'Hist1',\n          'Hist2',\n          'Hist3',\n          'Hist4',\n          'Hist5',\n          'Hist6',\n          'Hist7',\n          'Hist8',\n          'Hist9',\n          'Hist10',\n        ],\n        transform(record) {\n          return [\n            res.locals.course.short_name,\n            res.locals.course_instance.short_name,\n            record.name,\n            record.assessment_number,\n            record.label,\n            record.title,\n            record.tid,\n            record.score_stat_number,\n            record.score_stat_mean,\n            record.score_stat_std,\n            record.score_stat_min,\n            record.score_stat_max,\n            record.score_stat_median,\n            record.score_stat_n_zero,\n            record.score_stat_n_hundred,\n            record.score_stat_n_zero_perc,\n            record.score_stat_n_hundred_perc,\n            ...record.score_stat_hist,\n          ];\n        },\n      });\n\n      res.attachment(req.params.filename);\n      await pipeline(cursor.stream(100), stringifier, res);\n    } else {\n      throw new HttpStatusError(404, `Unknown filename: ${req.params.filename}`);\n    }\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (req.body.__action === 'add_assessment') {\n      if (!req.body.title) {\n        throw new HttpStatusError(400, 'title is required');\n      }\n      if (!req.body.aid) {\n        throw new HttpStatusError(400, 'aid is required');\n      }\n      if (!/^[-A-Za-z0-9_/]+$/.test(req.body.aid)) {\n        throw new HttpStatusError(\n          400,\n          `Invalid aid (was not only letters, numbers, dashes, slashes, and underscores, with no spaces): ${req.body.aid}`,\n        );\n      }\n      if (!req.body.type) {\n        throw new HttpStatusError(400, 'type is required');\n      }\n      if (!req.body.set) {\n        throw new HttpStatusError(400, 'set is required');\n      }\n\n      const editor = new AssessmentAddEditor({\n        locals: res.locals as any,\n        title: req.body.title,\n        aid: req.body.aid,\n        type: req.body.type,\n        set: req.body.set,\n        module: req.body.module,\n      });\n      const serverJob = await editor.prepareServerJob();\n      try {\n        await editor.executeWithServerJob(serverJob);\n      } catch {\n        res.redirect(`${res.locals.urlPrefix}/edit_error/${serverJob.jobSequenceId}`);\n        return;\n      }\n\n      flash('success', 'Assessment created successfully.');\n\n      const assessment_id = await queryRow(\n        sql.select_assessment_id_from_uuid,\n        { uuid: editor.uuid, course_instance_id: res.locals.course_instance.id },\n        IdSchema,\n      );\n      res.redirect(`${res.locals.urlPrefix}/assessment/${assessment_id}/questions`);\n    } else {\n      throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}