{"version":3,"file":"instructorCopyPublicQuestion.js","sourceRoot":"","sources":["../../../src/pages/instructorCopyPublicQuestion/instructorCopyPublicQuestion.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAEhE,OAAO,EAAE,0BAA0B,EAAE,MAAM,4BAA4B,CAAC;AACxE,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAE3C,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AACxB,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,IAAI,CACT,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,uEAAuE;IACvE,6DAA6D;IAC7D,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;QACvD,MAAM,IAAI,KAAK,CAAC,eAAe,CAC7B,GAAG,EACH,gEAAgE,CACjE,CAAC;IACJ,CAAC;IAED,0EAA0E;IAC1E,wEAAwE;IACxE,MAAM,MAAM,GAAG,MAAM,QAAQ,CAC3B,GAAG,CAAC,eAAe,EACnB;QACE,kCAAkC;QAClC,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,WAAW;QACjC,kDAAkD;QAClD,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS;KAC9B,EACD,CAAC,CAAC,MAAM,CAAC;QACP,QAAQ,EAAE,cAAc;QACxB,MAAM,EAAE,YAAY;KACrB,CAAC,CACH,CAAC;IAEF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC;QAC7E,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,wCAAwC,CAAC,CAAC;IACjF,CAAC;IAED,MAAM,0BAA0B,CAAC,GAAG,EAAE;QACpC,UAAU,EAAE,MAAM,CAAC,MAAM;QACzB,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;QAChC,QAAQ,EAAE,MAAM,CAAC,QAAQ;KAC1B,CAAC,CAAC;AACL,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { loadSqlEquiv, queryRow } from '@prairielearn/postgres';\n\nimport { copyQuestionBetweenCourses } from '../../lib/copy-question.js';\nimport { CourseSchema, QuestionSchema } from '../../lib/db-types.js';\nimport { idsEqual } from '../../lib/id.js';\n\nconst router = Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    // It doesn't make much sense to transfer a template course question to\n    // the same template course, so we'll explicitly forbid that.\n    if (idsEqual(req.body.course_id, res.locals.course.id)) {\n      throw new error.HttpStatusError(\n        400,\n        'Template course questions cannot be copied to the same course.',\n      );\n    }\n\n    // This query will implicitly check that the question belongs to the given\n    // course. We ensure below that the course is in fact a template course.\n    const result = await queryRow(\n      sql.select_question,\n      {\n        // The ID of the question to copy.\n        question_id: req.body.question_id,\n        // The ID of the course to copy the question from.\n        course_id: req.body.course_id,\n      },\n      z.object({\n        question: QuestionSchema,\n        course: CourseSchema,\n      }),\n    );\n\n    if (!result.course.template_course && !result.question.share_source_publicly) {\n      throw new error.HttpStatusError(400, 'Copying this question is not permitted');\n    }\n\n    await copyQuestionBetweenCourses(res, {\n      fromCourse: result.course,\n      toCourseId: res.locals.course.id,\n      question: result.question,\n    });\n  }),\n);\n\nexport default router;\n"]}