{"version":3,"file":"instructorCourseAdminInstances.js","sourceRoot":"","sources":["../../../src/pages/instructorCourseAdminInstances/instructorCourseAdminInstances.ts"],"names":[],"mappings":"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","sourcesContent":["import { Temporal } from '@js-temporal/polyfill';\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport fs from 'fs-extra';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { CourseInstanceSchema, IdSchema } from '../../lib/db-types.js';\nimport { CourseInstanceAddEditor } from '../../lib/editors.js';\nimport { idsEqual } from '../../lib/id.js';\nimport { selectCourseInstancesWithStaffAccess } from '../../models/course-instances.js';\n\nimport {\n  type CourseInstanceAuthzRow,\n  InstructorCourseAdminInstances,\n} from './instructorCourseAdminInstances.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    try {\n      await fs.access(res.locals.course.path);\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        res.locals.needToSync = true;\n      } else {\n        throw new Error('Invalid course path');\n      }\n    }\n\n    const courseInstances: CourseInstanceAuthzRow[] = await selectCourseInstancesWithStaffAccess({\n      course_id: res.locals.course.id,\n      user_id: res.locals.user.user_id,\n      authn_user_id: res.locals.authn_user.user_id,\n      is_administrator: res.locals.is_administrator,\n      authn_is_administrator: res.locals.authz_data.authn_is_administrator,\n    });\n\n    const enrollmentCounts = await sqldb.queryRows(\n      sql.select_enrollment_counts,\n      { course_id: res.locals.course.id },\n      z.object({ course_instance_id: CourseInstanceSchema.shape.id, enrollment_count: z.number() }),\n    );\n\n    courseInstances.forEach((ci) => {\n      const row = enrollmentCounts.find((row) => idsEqual(row.course_instance_id, ci.id));\n      ci.enrollment_count = row?.enrollment_count || 0;\n    });\n\n    res.send(InstructorCourseAdminInstances({ resLocals: res.locals, courseInstances }));\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (req.body.__action === 'add_course_instance') {\n      if (!req.body.short_name) {\n        throw new error.HttpStatusError(400, 'short_name is required');\n      }\n      if (!req.body.long_name) {\n        throw new error.HttpStatusError(400, 'long_name is required');\n      }\n\n      let startAccessDate: Temporal.ZonedDateTime | undefined;\n      let endAccessDate: Temporal.ZonedDateTime | undefined;\n\n      if (req.body.access_dates_enabled === 'on') {\n        // Only parse the dates if access dates are enabled (the corresponding checkbox is checked)\n        if (req.body.start_access_date) {\n          startAccessDate = Temporal.PlainDateTime.from(req.body.start_access_date).toZonedDateTime(\n            res.locals.course.display_timezone,\n          );\n        }\n        if (req.body.end_access_date) {\n          endAccessDate = Temporal.PlainDateTime.from(req.body.end_access_date).toZonedDateTime(\n            res.locals.course.display_timezone,\n          );\n        }\n      }\n\n      if (\n        startAccessDate &&\n        endAccessDate &&\n        startAccessDate.epochMilliseconds >= endAccessDate.epochMilliseconds\n      ) {\n        throw new error.HttpStatusError(400, 'end_access_date must be after start_access_date');\n      }\n\n      const editor = new CourseInstanceAddEditor({\n        locals: res.locals as any,\n        short_name: req.body.short_name,\n        long_name: req.body.long_name,\n        start_access_date: startAccessDate,\n        end_access_date: endAccessDate,\n      });\n\n      const serverJob = await editor.prepareServerJob();\n      try {\n        await editor.executeWithServerJob(serverJob);\n      } catch {\n        res.redirect(res.locals.urlPrefix + '/edit_error/' + serverJob.jobSequenceId);\n        return;\n      }\n\n      const courseInstanceId = await sqldb.queryRow(\n        sql.select_course_instance_id_from_uuid,\n        {\n          uuid: editor.uuid,\n          course_id: res.locals.course.id,\n        },\n        IdSchema,\n      );\n\n      flash('success', 'Course instance created successfully.');\n\n      res.redirect(\n        res.locals.plainUrlPrefix +\n          '/course_instance/' +\n          courseInstanceId +\n          '/instructor/instance_admin/assessments',\n      );\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}