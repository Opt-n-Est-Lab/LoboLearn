{"version":3,"file":"instructorCourseAdminSharing.js","sourceRoot":"","sources":["../../../src/pages/instructorCourseAdminSharing/instructorCourseAdminSharing.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AAEjE,OAAO,EACL,4BAA4B,EAC5B,mBAAmB,GACpB,MAAM,wCAAwC,CAAC;AAEhD,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AACxB,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,KAAK,UAAU,0BAA0B,CAAC,MAAM;IAC9C,OAAO,CACL,MAAM,CAAC,YAAY,KAAK,IAAI;QAC5B,CAAC,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAC5B,GAAG,CAAC,6BAA6B,EACjC;YACE,SAAS,EAAE,MAAM,CAAC,EAAE;SACrB,EACD,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CACvB,CAAC,CACH,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,wBAAwB,EAAE,CAAC;QACzC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,uCAAuC,CAAC,CAAC;IAChF,CAAC;IAED,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,SAAS,CACvC,GAAG,CAAC,mBAAmB,EACvB,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,EACnC,mBAAmB,CACpB,CAAC;IAEF,MAAM,IAAI,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACnC,MAAM,iBAAiB,GAAG,IAAI,GAAG,CAC/B,GAAG,GAAG,CAAC,MAAM,CAAC,cAAc,kBAAkB,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,YAAY,EAC9E,IAAI,CACL,CAAC,IAAI,CAAC;IAEP,MAAM,oBAAoB,GAAG,MAAM,0BAA0B,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAEjF,GAAG,CAAC,IAAI,CACN,4BAA4B,CAAC;QAC3B,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY;QAC3C,YAAY,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa;QAC7C,WAAW;QACX,iBAAiB;QACjB,oBAAoB;QACpB,SAAS,EAAE,GAAG,CAAC,MAAM;KACtB,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,IAAI,CACT,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,CAAC;QACrD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,sCAAsC,CAAC,CAAC;IAC/E,CAAC;IACD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,wBAAwB,EAAE,CAAC;QACzC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,uCAAuC,CAAC,CAAC;IAChF,CAAC;IAED,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,0BAA0B,EAAE,CAAC;QACrD,MAAM,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,oBAAoB,EAAE;YAC3D,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;SAChC,CAAC,CAAC;IACL,CAAC;SAAM,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,wBAAwB,EAAE,CAAC;QAC1D,MAAM,mBAAmB,GAAG,MAAM,KAAK,CAAC,gBAAgB,CACtD,GAAG,CAAC,sBAAsB,EAC1B;YACE,iBAAiB,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YACvC,qBAAqB,EAAE,GAAG,CAAC,IAAI,CAAC,qBAAqB;YACrD,2BAA2B,EAAE,GAAG,CAAC,IAAI,CAAC,2BAA2B;SAClE,EACD,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CACtB,CAAC;QACF,IAAI,mBAAmB,KAAK,IAAI,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,sCAAsC,CAAC,CAAC;QAC/E,CAAC;IACH,CAAC;SAAM,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,qBAAqB,EAAE,CAAC;QACvD,IACE,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC1C,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC1C,GAAG,CAAC,IAAI,CAAC,mBAAmB,KAAK,EAAE,EACnC,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,eAAe,CAC7B,GAAG,EACH,iFAAiF,CAClF,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,oBAAoB,GAAG,MAAM,0BAA0B,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACjF,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,eAAe,CAC7B,GAAG,EACH,uEAAuE,CACxE,CAAC;YACJ,CAAC;YAED,MAAM,uBAAuB,CAAC;gBAC5B,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;gBAC/B,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE;aAClD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,qBAAqB,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjF,CAAC;IACD,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AAChC,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { getCanonicalHost } from '../../lib/url.js';\nimport { updateCourseSharingName } from '../../models/course.js';\n\nimport {\n  InstructorCourseAdminSharing,\n  SharingSetRowSchema,\n} from './instructorCourseAdminSharing.html.js';\n\nconst router = Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nasync function selectCanChooseSharingName(course) {\n  return (\n    course.sharing_name === null ||\n    !(await sqldb.queryOptionalRow(\n      sql.select_shared_question_exists,\n      {\n        course_id: course.id,\n      },\n      z.boolean().nullable(),\n    ))\n  );\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.question_sharing_enabled) {\n      throw new error.HttpStatusError(403, 'Access denied (feature not available)');\n    }\n\n    const sharingSets = await sqldb.queryRows(\n      sql.select_sharing_sets,\n      { course_id: res.locals.course.id },\n      SharingSetRowSchema,\n    );\n\n    const host = getCanonicalHost(req);\n    const publicSharingLink = new URL(\n      `${res.locals.plainUrlPrefix}/public/course/${res.locals.course.id}/questions`,\n      host,\n    ).href;\n\n    const canChooseSharingName = await selectCanChooseSharingName(res.locals.course);\n\n    res.send(\n      InstructorCourseAdminSharing({\n        sharingName: res.locals.course.sharing_name,\n        sharingToken: res.locals.course.sharing_token,\n        sharingSets,\n        publicSharingLink,\n        canChooseSharingName,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_own) {\n      throw new error.HttpStatusError(403, 'Access denied (must be course owner)');\n    }\n    if (!res.locals.question_sharing_enabled) {\n      throw new error.HttpStatusError(403, 'Access denied (feature not available)');\n    }\n\n    if (req.body.__action === 'sharing_token_regenerate') {\n      await sqldb.queryZeroOrOneRowAsync(sql.update_sharing_token, {\n        course_id: res.locals.course.id,\n      });\n    } else if (req.body.__action === 'course_sharing_set_add') {\n      const consuming_course_id = await sqldb.queryOptionalRow(\n        sql.course_sharing_set_add,\n        {\n          sharing_course_id: res.locals.course.id,\n          unsafe_sharing_set_id: req.body.unsafe_sharing_set_id,\n          unsafe_course_sharing_token: req.body.unsafe_course_sharing_token,\n        },\n        z.string().nullable(),\n      );\n      if (consuming_course_id === null) {\n        throw new error.HttpStatusError(400, 'Failed to add course to sharing set.');\n      }\n    } else if (req.body.__action === 'choose_sharing_name') {\n      if (\n        req.body.course_sharing_name.includes('/') ||\n        req.body.course_sharing_name.includes('@') ||\n        req.body.course_sharing_name === ''\n      ) {\n        throw new error.HttpStatusError(\n          400,\n          'Course Sharing Name must be non-empty and is not allowed to contain \"/\" or \"@\".',\n        );\n      } else {\n        const canChooseSharingName = await selectCanChooseSharingName(res.locals.course);\n        if (!canChooseSharingName) {\n          throw new error.HttpStatusError(\n            400,\n            'Unable to change sharing name. At least one question has been shared.',\n          );\n        }\n\n        await updateCourseSharingName({\n          course_id: res.locals.course.id,\n          sharing_name: req.body.course_sharing_name.trim(),\n        });\n      }\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n    res.redirect(req.originalUrl);\n  }),\n);\n\nexport default router;\n"]}