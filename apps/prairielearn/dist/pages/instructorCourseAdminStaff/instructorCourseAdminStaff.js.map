{"version":3,"file":"instructorCourseAdminStaff.js","sourceRoot":"","sources":["../../../src/pages/instructorCourseAdminStaff/instructorCourseAdminStaff.ts"],"names":[],"mappings":"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","sourcesContent":["import * as async from 'async';\nimport debugfn from 'debug';\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\nimport { type HtmlSafeString, html } from '@prairielearn/html';\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { type User } from '../../lib/db-types.js';\nimport { httpPrefixForCourseRepo } from '../../lib/github.js';\nimport { idsEqual } from '../../lib/id.js';\nimport { parseUidsString } from '../../lib/user.js';\nimport {\n  type CourseInstanceAuthz,\n  selectCourseInstancesWithStaffAccess,\n} from '../../models/course-instances.js';\nimport {\n  deleteAllCourseInstancePermissionsForCourse,\n  deleteCourseInstancePermissions,\n  deleteCoursePermissions,\n  deleteCoursePermissionsForNonOwners,\n  deleteCoursePermissionsForUsersWithoutAccess,\n  insertCourseInstancePermissions,\n  insertCoursePermissionsByUserUid,\n  updateCourseInstancePermissionsRole,\n  updateCoursePermissionsRole,\n} from '../../models/course-permissions.js';\n\nimport {\n  CourseUsersRowSchema,\n  InstructorCourseAdminStaff,\n} from './instructorCourseAdminStaff.html.js';\n\nconst debug = debugfn('prairielearn:instructorCourseAdminStaff');\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst router = express.Router();\n\n/**\n * The maximum number of UIDs that can be provided in a single request.\n */\nconst MAX_UIDS = 100;\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_own) {\n      throw new error.HttpStatusError(403, 'Access denied (must be course owner)');\n    }\n\n    const courseInstances = await selectCourseInstancesWithStaffAccess({\n      course_id: res.locals.course.id,\n      user_id: res.locals.user.user_id,\n      authn_user_id: res.locals.authn_user.user_id,\n      is_administrator: res.locals.is_administrator,\n      authn_is_administrator: res.locals.authz_data.authn_is_administrator,\n    });\n\n    const courseUsers = await sqldb.queryRows(\n      sql.select_course_users,\n      {\n        course_id: res.locals.course.id,\n      },\n      CourseUsersRowSchema,\n    );\n\n    let githubAccessLink: string | null = null;\n    if (!res.locals.course.example_course) {\n      const githubPrefix = httpPrefixForCourseRepo(res.locals.course.repository);\n      if (githubPrefix) {\n        githubAccessLink = `${githubPrefix}/settings/access`;\n      }\n    }\n\n    res.send(\n      InstructorCourseAdminStaff({\n        resLocals: res.locals,\n        courseInstances,\n        courseUsers,\n        uidsLimit: MAX_UIDS,\n        githubAccessLink,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_own) {\n      throw new error.HttpStatusError(403, 'Access denied (must be course owner)');\n    }\n\n    if (req.body.__action === 'course_permissions_insert_by_user_uids') {\n      const uids = parseUidsString(req.body.uid, MAX_UIDS);\n\n      // Verify there is at least one UID\n      if (uids.length === 0) throw new error.HttpStatusError(400, 'Empty list of UIDs');\n\n      // Verify the requested course role is valid\n      if (!['None', 'Previewer', 'Viewer', 'Editor', 'Owner'].includes(req.body.course_role)) {\n        throw new error.HttpStatusError(\n          400,\n          `Invalid requested course role: ${req.body.course_role}`,\n        );\n      }\n\n      // Verify the course instance id associated with the requested course instance\n      // role is valid (should such a role have been requested)\n      const course_instances = await selectCourseInstancesWithStaffAccess({\n        course_id: res.locals.course.id,\n        user_id: res.locals.user.user_id,\n        authn_user_id: res.locals.authn_user.user_id,\n        is_administrator: res.locals.is_administrator,\n        authn_is_administrator: res.locals.authz_data.authn_is_administrator,\n      });\n      let course_instance: CourseInstanceAuthz | undefined;\n      if (req.body.course_instance_id) {\n        course_instance = course_instances.find((ci) =>\n          idsEqual(ci.id, req.body.course_instance_id),\n        );\n        if (!course_instance) {\n          throw new error.HttpStatusError(400, 'Invalid requested course instance role');\n        }\n      }\n\n      // Verify the requested course instance role is valid\n      if (\n        course_instance &&\n        !['Student Data Viewer', 'Student Data Editor'].includes(req.body.course_instance_role)\n      ) {\n        throw new error.HttpStatusError(\n          400,\n          `Invalid requested course instance role: ${req.body.course_instance_role}`,\n        );\n      }\n      // Iterate through UIDs\n      const result = await async.reduce(\n        uids,\n        { given_cp: [], not_given_cp: [], not_given_cip: [], errors: [] },\n        async (\n          memo: {\n            given_cp: string[];\n            not_given_cp: string[];\n            not_given_cip: string[];\n            errors: string[];\n          },\n          uid,\n        ) => {\n          let user: User;\n          try {\n            user = await insertCoursePermissionsByUserUid({\n              course_id: res.locals.course.id,\n              uid,\n              course_role: req.body.course_role,\n              authn_user_id: res.locals.authz_data.authn_user.user_id,\n            });\n          } catch (err) {\n            logger.verbose(`Failed to insert course permission for uid: ${uid}`, err);\n            memo.not_given_cp.push(uid);\n            memo.errors.push(`Failed to give course content access to ${uid}\\n(${err.message})`);\n            return memo;\n          }\n\n          memo.given_cp.push(uid);\n\n          if (!course_instance) return memo;\n\n          try {\n            await insertCourseInstancePermissions({\n              course_id: res.locals.course.id,\n              user_id: user.user_id,\n              course_instance_id: course_instance.id,\n              course_instance_role: req.body.course_instance_role,\n              authn_user_id: res.locals.authz_data.authn_user.user_id,\n            });\n          } catch (err) {\n            logger.verbose(`Failed to insert course instance permission for uid: ${uid}`, err);\n            memo.not_given_cip.push(uid);\n            memo.errors.push(`Failed to give student data access to ${uid}\\n(${err.message})`);\n          }\n\n          return memo;\n        },\n      );\n\n      if (result.errors.length > 0) {\n        const info: HtmlSafeString[] = [];\n        const given_cp_and_cip = result.given_cp.filter(\n          (uid) => !result.not_given_cip.includes(uid),\n        );\n        debug(`given_cp: ${result.given_cp}`);\n        debug(`not_given_cip: ${result.not_given_cip}`);\n        debug(`given_cp_and_cip: ${given_cp_and_cip}`);\n        if (given_cp_and_cip.length > 0) {\n          if (course_instance) {\n            info.push(html`\n              <hr />\n              <p>\n                The following users were added to the course staff, were given course content access\n                <strong>${req.body.course_role}</strong>, and were given student data access\n                <strong>${course_instance.short_name} (Viewer)</strong>:\n              </p>\n              <div class=\"container\">\n                <pre class=\"bg-dark text-white rounded p-2\">${given_cp_and_cip.join(',\\n')}</pre>\n              </div>\n            `);\n          } else {\n            info.push(html`\n              <hr />\n              <p>\n                The following users were added to the course staff and were given course content\n                access <strong>${req.body.course_role}</strong>:\n              </p>\n              <div class=\"container\">\n                <pre class=\"bg-dark text-white rounded p-2\">\n${given_cp_and_cip.join(',\\n')}\n                </pre\n                >\n              </div>\n            `);\n          }\n        }\n        if (course_instance && result.not_given_cip.length > 0) {\n          info.push(html`\n            <hr />\n            <p>\n              The following users were added to the course staff and were given course content\n              access <strong>${req.body.course_role}</strong>, but were <strong>not</strong> given\n              student data access <strong>${course_instance.short_name} (Viewer)</strong>:\n            </p>\n            <div class=\"container\">\n              <pre class=\"bg-dark text-white rounded p-2\">${result.not_given_cip.join(',\\n')}</pre>\n            </div>\n            <p>\n              If you return to the <a href=\"${req.originalUrl}\">access page</a>, you will find these\n              users in the list of course staff and can add student data access to each of them.\n            </p>\n          `);\n        }\n        if (result.not_given_cp.length > 0) {\n          info.push(html`\n            <hr />\n            <p>The following users were <strong>not</strong> added to the course staff:</p>\n            <div class=\"container\">\n              <pre class=\"bg-dark text-white rounded p-2\">${result.not_given_cp.join(',\\n')}</pre>\n            </div>\n            <p>\n              If you return to the <a href=\"${req.originalUrl}\">access page</a>, you can try to add\n              them again. However, you should first check the reason for each failure to grant\n              access (see below). For example, it may be that a user you tried to add was already a\n              member of the course staff, in which case you will find them in the list and can\n              update their course content access as appropriate.\n            </p>\n          `);\n        }\n        info.push(html`\n          <hr />\n          <p>Here is the reason for each failure to grant access:</p>\n          <div class=\"container\">\n            <pre class=\"bg-dark text-white rounded p-2\">${result.errors.join('\\n\\n')}</pre>\n          </div>\n        `);\n        throw new error.AugmentedError('Failed to grant access to some users', {\n          status: 409,\n          info: html`${info}`,\n        });\n      }\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'course_permissions_update_role') {\n      if (\n        idsEqual(req.body.user_id, res.locals.user.user_id) &&\n        !res.locals.authz_data.is_administrator\n      ) {\n        throw new error.HttpStatusError(\n          403,\n          'Owners cannot change their own course content access',\n        );\n      }\n\n      if (\n        idsEqual(req.body.user_id, res.locals.authn_user.user_id) &&\n        !res.locals.authz_data.is_administrator\n      ) {\n        throw new error.HttpStatusError(\n          403,\n          'Owners cannot change their own course content access even if they are emulating another user',\n        );\n      }\n\n      // Before proceeding, we *could* make some effort to verify that the user\n      // is still a member of the course staff. The reason we might want to do\n      // so is that updateCoursePermissionsRole will throw an error if the user\n      // has been removed from the course staff, and we might want to throw a\n      // more informative error beforehand.\n      //\n      // We are making the design choice *not* to do this verification, because\n      // it is unlikely that a course will have many owners all making changes\n      // to permissions simultaneously, and so we are choosing to prioritize\n      // speed in responding to the POST request.\n\n      await updateCoursePermissionsRole({\n        course_id: res.locals.course.id,\n        user_id: req.body.user_id,\n        course_role: req.body.course_role,\n        authn_user_id: res.locals.authz_data.authn_user.user_id,\n      });\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'course_permissions_delete') {\n      if (\n        idsEqual(req.body.user_id, res.locals.user.user_id) &&\n        !res.locals.authz_data.is_administrator\n      ) {\n        throw new error.HttpStatusError(\n          403,\n          'Owners cannot remove themselves from the course staff',\n        );\n      }\n\n      if (\n        idsEqual(req.body.user_id, res.locals.authn_user.user_id) &&\n        !res.locals.authz_data.is_administrator\n      ) {\n        throw new error.HttpStatusError(\n          403,\n          'Owners cannot remove themselves from the course staff even if they are emulating another user',\n        );\n      }\n\n      await deleteCoursePermissions({\n        course_id: res.locals.course.id,\n        user_id: req.body.user_id,\n        authn_user_id: res.locals.authz_data.authn_user.user_id,\n      });\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'course_instance_permissions_update_role_or_delete') {\n      // Again, we could make some effort to verify that the user is still a\n      // member of the course staff and that they still have student data access\n      // in the given course instance. We choose not to do this for the same\n      // reason as above (see handler for course_permissions_update_role).\n\n      const course_instances = await selectCourseInstancesWithStaffAccess({\n        course_id: res.locals.course.id,\n        user_id: res.locals.user.user_id,\n        authn_user_id: res.locals.authn_user.user_id,\n        is_administrator: res.locals.is_administrator,\n        authn_is_administrator: res.locals.authz_data.authn_is_administrator,\n      });\n\n      if (req.body.course_instance_id) {\n        if (!course_instances.find((ci) => idsEqual(ci.id, req.body.course_instance_id))) {\n          throw new error.HttpStatusError(400, 'Invalid requested course instance role');\n        }\n      } else {\n        throw new error.HttpStatusError(400, 'Undefined course instance id');\n      }\n\n      if (req.body.course_instance_role) {\n        // In this case, we update the role associated with the course instance permission\n        await updateCourseInstancePermissionsRole({\n          course_id: res.locals.course.id,\n          user_id: req.body.user_id,\n          course_instance_id: req.body.course_instance_id,\n          course_instance_role: req.body.course_instance_role,\n          authn_user_id: res.locals.authz_data.authn_user.user_id,\n        });\n        res.redirect(req.originalUrl);\n      } else {\n        // In this case, we delete the course instance permission\n        await deleteCourseInstancePermissions({\n          course_id: res.locals.course.id,\n          user_id: req.body.user_id,\n          course_instance_id: req.body.course_instance_id,\n          authn_user_id: res.locals.authz_data.authn_user.user_id,\n        });\n        res.redirect(req.originalUrl);\n      }\n    } else if (req.body.__action === 'course_instance_permissions_insert') {\n      // Again, we could make some effort to verify that the user is still a\n      // member of the course staff. We choose not to do this for the same\n      // reason as above (see handler for course_permissions_update_role).\n\n      const course_instances = await selectCourseInstancesWithStaffAccess({\n        course_id: res.locals.course.id,\n        user_id: res.locals.user.user_id,\n        authn_user_id: res.locals.authn_user.user_id,\n        is_administrator: res.locals.is_administrator,\n        authn_is_administrator: res.locals.authz_data.authn_is_administrator,\n      });\n\n      if (req.body.course_instance_id) {\n        if (!course_instances.find((ci) => idsEqual(ci.id, req.body.course_instance_id))) {\n          throw new error.HttpStatusError(400, 'Invalid requested course instance role');\n        }\n      } else {\n        throw new error.HttpStatusError(400, 'Undefined course instance id');\n      }\n\n      await insertCourseInstancePermissions({\n        course_id: res.locals.course.id,\n        user_id: req.body.user_id,\n        course_instance_id: req.body.course_instance_id,\n        course_instance_role: 'Student Data Viewer',\n        authn_user_id: res.locals.authz_data.authn_user.user_id,\n      });\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'delete_non_owners') {\n      debug('Delete non-owners');\n      await deleteCoursePermissionsForNonOwners({\n        course_id: res.locals.course.id,\n        authn_user_id: res.locals.authz_data.authn_user.user_id,\n      });\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'delete_no_access') {\n      debug('Delete users with no access');\n      await deleteCoursePermissionsForUsersWithoutAccess({\n        course_id: res.locals.course.id,\n        authn_user_id: res.locals.authz_data.authn_user.user_id,\n      });\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'remove_all_student_data_access') {\n      debug('Remove all student data access');\n      await deleteAllCourseInstancePermissionsForCourse({\n        course_id: res.locals.course.id,\n        authn_user_id: res.locals.authz_data.authn_user.user_id,\n      });\n      res.redirect(req.originalUrl);\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}