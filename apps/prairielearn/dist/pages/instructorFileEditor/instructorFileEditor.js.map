{"version":3,"file":"instructorFileEditor.js","sourceRoot":"","sources":["../../../src/pages/instructorFileEditor/instructorFileEditor.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAC;AAC9D,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,MAAM,UAAU,CAAC;AAC1B,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAE5C,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EACL,YAAY,EACZ,UAAU,EACV,gBAAgB,EAChB,QAAQ,EACR,SAAS,GACV,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EAAE,qCAAqC,EAAE,MAAM,uDAAuD,CAAC;AAC9G,OAAO,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAC9E,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjE,OAAO,EAAE,+BAA+B,EAAE,MAAM,yBAAyB,CAAC;AAC1E,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAC1E,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAE1D,OAAO,EAGL,oBAAoB,GACrB,MAAM,gCAAgC,CAAC;AAExC,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AACxB,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,GAAG,CACR,IAAI,EACJ,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,+CAA+C;IAC/C,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;QACrC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAClB,qCAAqC,CAAC;YACpC,SAAS,EAAE,GAAG,CAAC,MAAM;YACrB,YAAY,EAAE,EAAE;YAChB,SAAS,EAAE,aAAa;YACxB,mBAAmB,EAAE,QAAQ;SAC9B,CAAC,CACH,CAAC;QACF,OAAO;IACT,CAAC;IAED,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,0BAA0B,EAAE,CAAC;QACtD,0EAA0E;QAC1E,uEAAuE;QACvE,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACjE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAClB,qCAAqC,CAAC;YACpC,SAAS,EAAE,GAAG,CAAC,MAAM;YACrB,YAAY;YACZ,SAAS,EAAE,aAAa;YACxB,mBAAmB,EAAE,QAAQ;SAC9B,CAAC,CACH,CAAC;QACF,OAAO;IACT,CAAC;IAED,uEAAuE;IACvE,yEAAyE;IACzE,wEAAwE;IACxE,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IAElD,oEAAoE;IACpE,qEAAqE;IACrE,qEAAqE;IACrE,6BAA6B;IAC7B,EAAE;IACF,qEAAqE;IACrE,oEAAoE;IACpE,4BAA4B;IAE5B,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC;IACnC,MAAM,OAAO,GAAG,KAAK,CAAC,2BAA2B,CAAC;IAElD,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC7C,IAAI,MAAM,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,eAAe,GAAG,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACpE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,MAAM,+BAA+B,CAC5F,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EACpB,OAAO,CACR,CAAC;IAEF,MAAM,UAAU,GAAmB;QACjC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;QAChC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;QAC3C,OAAO,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI;QACrC,YAAY,EAAE,eAAe;QAC7B,QAAQ,EAAE,OAAO,CAAC,eAAe,CAAC;QAClC,WAAW;QACX,aAAa;KACd,CAAC;IAEF,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC;QACpC,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;QAChC,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;QAC5C,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;QAC/B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QAC/B,SAAS,EAAE,UAAU,CAAC,QAAQ;KAC/B,CAAC,CAAC;IAEH,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;QACtB,IAAI,SAAS,CAAC,QAAQ,CAAC,eAAe,IAAI,IAAI,EAAE,CAAC;YAC/C,SAAS,CAAC,WAAW,GAAG,MAAM,cAAc,CAC1C,SAAS,CAAC,QAAQ,CAAC,eAAe,EAClC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CACrB,CAAC;QACJ,CAAC;QAED,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;YAC1B,IAAI,SAAS,CAAC,WAAW,EAAE,MAAM,KAAK,SAAS,EAAE,CAAC;gBAChD,wEAAwE;gBACxE,yEAAyE;gBACzE,uCAAuC;gBACvC,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,gBAAgB,SAAS,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;gBAChF,OAAO;YACT,CAAC;YAED,MAAM,GAAG,GAAG,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE1C,gEAAgE;YAChE,mEAAmE;YACnE,kEAAkE;YAClE,sCAAsC;YACtC,IAAI,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;gBAC3B,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;gBAEzB,6DAA6D;gBAC7D,iEAAiE;gBACjE,+DAA+D;gBAC/D,mCAAmC;gBACnC,EAAE;gBACF,6DAA6D;gBAC7D,8DAA8D;gBAC9D,8DAA8D;gBAC9D,6DAA6D;gBAC7D,4DAA4D;gBAC5D,qBAAqB;gBACrB,IAAI,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;oBAC3B,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;gBAC3B,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,KAAK,UAAU,CAAC,QAAQ,EAAE,CAAC;YACjE,sGAAsG;YACtG,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AAC1F,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,IAAI,CACT,IAAI,EACJ,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,0BAA0B,EAAE,CAAC;QACtD,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,yCAAyC,CAAC,CAAC;IAC5E,CAAC;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IAElD,MAAM,SAAS,GAAG;QAChB,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;KACzC,CAAC;IAEF,6EAA6E;IAC7E,6EAA6E;IAC7E,4CAA4C;IAE5C,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,eAAe,EAAE,CAAC;QAC1C,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC;YAClC,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;YAChC,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO;YAC5C,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAC/B,QAAQ,EAAE,KAAK,CAAC,gBAAgB;YAChC,SAAS,EAAE,KAAK,CAAC,eAAe;YAChC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,mBAAmB;YACvC,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,kBAAkB;SAC1C,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,IAAI,gBAAgB,CAAC;YAClC,MAAM,EAAE,GAAG,CAAC,MAAa;YACzB,SAAS;YACT,QAAQ,EAAE,KAAK,CAAC,WAAW;YAC3B,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,kBAAkB;YACzC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,mBAAmB;SACvC,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,gBAAgB,EAAE,CAAC;QAClD,MAAM,mBAAmB,CAAC,MAAM,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC;QAAC,MAAM,CAAC;YACP,qEAAqE;YACrE,yEAAyE;YACzE,kCAAkC;QACpC,CAAC;QAED,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,qBAAqB,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3E,CAAC;AACH,CAAC,CAAC,CACH,CAAC;AAEF,SAAS,OAAO,CAAC,QAAgB;IAC/B,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;AACrC,CAAC;AAED,KAAK,UAAU,aAAa,CAAC,EAC3B,OAAO,EACP,SAAS,EACT,QAAQ,EACR,SAAS,EACT,aAAa,GAOd;IACC,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CACrC,GAAG,CAAC,gBAAgB,EACpB,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EACtE,cAAc,CACf,CAAC;IAEF,iEAAiE;IACjE,oEAAoE;IACpE,qEAAqE;IACrE,oEAAoE;IACpE,MAAM,gBAAgB,GAAG,MAAM,SAAS,CACtC,GAAG,CAAC,qBAAqB,EACzB,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,EAC3C,QAAQ,CAAC,QAAQ,EAAE,CACpB,CAAC;IACF,KAAK,MAAM,OAAO,IAAI,gBAAgB,EAAE,CAAC;QACvC,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE,OAAO,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;YAC3F,MAAM,UAAU,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IACD,IAAI,QAAQ,IAAI,IAAI;QAAE,OAAO,IAAI,CAAC;IAElC,IAAI,QAA4B,CAAC;IACjC,IAAI,IAAwB,CAAC;IAC7B,IAAI,QAAQ,CAAC,OAAO,IAAI,IAAI,EAAE,CAAC;QAC7B,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC/C,QAAQ,GAAG,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;QAC9D,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEzB,MAAM,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IACpD,CAAC;IAED,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;AACtC,CAAC;AAED,KAAK,UAAU,mBAAmB,CAAC,OAAe,EAAE,eAAuB;IACzE,MAAM,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC,CAAC;AACjF,CAAC;AAED,KAAK,UAAU,cAAc,CAAC,EAC5B,OAAO,EACP,aAAa,EACb,SAAS,EACT,QAAQ,EACR,SAAS,EACT,SAAS,EACT,YAAY,GASb;IACC,MAAM,gBAAgB,GAAG,MAAM,SAAS,CACtC,GAAG,CAAC,qBAAqB,EACzB,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,EAC3C,QAAQ,CAAC,QAAQ,EAAE,CACpB,CAAC;IACF,KAAK,MAAM,OAAO,IAAI,gBAAgB,EAAE,CAAC;QACvC,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;YACpB,MAAM,UAAU,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC;QAC/B,gBAAgB,EAAE,SAAS;QAC3B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC;QAC7D,IAAI,EAAE,sBAAsB;QAC5B,aAAa,EAAE,IAAI;QACnB,sBAAsB,EAAE,IAAI;QAC5B,oBAAoB,EAAE,IAAI;QAC1B,OAAO;QACP,aAAa;KACd,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,MAAM,QAAQ,CAC3B,GAAG,CAAC,gBAAgB,EACpB,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,EAC/D,QAAQ,CACT,CAAC;IACF,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,eAAe,MAAM,CAAC","sourcesContent":["import * as path from 'path';\n\nimport { getModeForPath } from 'ace-code/src/ext/modelist.js';\nimport sha256 from 'crypto-js/sha256.js';\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport fs from 'fs-extra';\nimport { isBinaryFile } from 'isbinaryfile';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport {\n  loadSqlEquiv,\n  queryAsync,\n  queryOptionalRow,\n  queryRow,\n  queryRows,\n} from '@prairielearn/postgres';\n\nimport { InsufficientCoursePermissionsCardPage } from '../../components/InsufficientCoursePermissionsCard.js';\nimport { b64DecodeUnicode, b64EncodeUnicode } from '../../lib/base64-util.js';\nimport { getCourseOwners } from '../../lib/course.js';\nimport { FileEditSchema, IdSchema } from '../../lib/db-types.js';\nimport { getErrorsAndWarningsForFilePath } from '../../lib/editorUtil.js';\nimport { FileModifyEditor } from '../../lib/editors.js';\nimport { deleteFile, getFile, uploadFile } from '../../lib/file-store.js';\nimport { idsEqual } from '../../lib/id.js';\nimport { getPaths } from '../../lib/instructorFiles.js';\nimport { getJobSequence } from '../../lib/server-jobs.js';\n\nimport {\n  type DraftEdit,\n  type FileEditorData,\n  InstructorFileEditor,\n} from './instructorFileEditor.html.js';\n\nconst router = Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/*',\n  asyncHandler(async (req, res) => {\n    // Do not allow users to edit the exampleCourse\n    if (res.locals.course.example_course) {\n      res.status(403).send(\n        InsufficientCoursePermissionsCardPage({\n          resLocals: res.locals,\n          courseOwners: [],\n          pageTitle: 'File editor',\n          requiredPermissions: 'Editor',\n        }),\n      );\n      return;\n    }\n\n    if (!res.locals.authz_data.has_course_permission_edit) {\n      // Access denied, but instead of sending them to an error page, we'll show\n      // them an explanatory message and prompt them to get edit permissions.\n      const courseOwners = await getCourseOwners(res.locals.course.id);\n      res.status(403).send(\n        InsufficientCoursePermissionsCardPage({\n          resLocals: res.locals,\n          courseOwners,\n          pageTitle: 'File editor',\n          requiredPermissions: 'Editor',\n        }),\n      );\n      return;\n    }\n\n    // Do not allow users to edit files in bad locations (e.g., outside the\n    // current course, outside the current course instance, etc.). Do this by\n    // wrapping everything in getPaths, which throws an error on a bad path.\n    const paths = getPaths(req.params[0], res.locals);\n\n    // We could also check if the file exists, if the file actually is a\n    // file and not a directory, if the file is non-binary, etc., and try\n    // to give a graceful error message on the edit page rather than send\n    // the user to an error page.\n    //\n    // We won't do that, on the assumption that most users get to an edit\n    // page through our UI, which already tries to prevent letting users\n    // go where they should not.\n\n    const fullPath = paths.workingPath;\n    const relPath = paths.workingPathRelativeToCourse;\n\n    const contents = await fs.readFile(fullPath);\n    if (await isBinaryFile(contents)) {\n      throw new Error('Cannot edit binary file');\n    }\n\n    const encodedContents = b64EncodeUnicode(contents.toString('utf8'));\n    const { errors: sync_errors, warnings: sync_warnings } = await getErrorsAndWarningsForFilePath(\n      res.locals.course.id,\n      relPath,\n    );\n\n    const editorData: FileEditorData = {\n      fileName: path.basename(relPath),\n      normalizedFileName: path.normalize(relPath),\n      aceMode: getModeForPath(relPath).mode,\n      diskContents: encodedContents,\n      diskHash: getHash(encodedContents),\n      sync_errors,\n      sync_warnings,\n    };\n\n    const draftEdit = await readDraftEdit({\n      user_id: res.locals.user.user_id,\n      authn_user_id: res.locals.authn_user.user_id,\n      course_id: res.locals.course.id,\n      dir_name: path.dirname(relPath),\n      file_name: editorData.fileName,\n    });\n\n    if (draftEdit != null) {\n      if (draftEdit.fileEdit.job_sequence_id != null) {\n        draftEdit.jobSequence = await getJobSequence(\n          draftEdit.fileEdit.job_sequence_id,\n          res.locals.course.id,\n        );\n      }\n\n      if (draftEdit.jobSequence) {\n        if (draftEdit.jobSequence?.status === 'Running') {\n          // Because of the redirect, if the job sequence ends up failing to save,\n          // then the corresponding draft will be lost (all drafts are soft-deleted\n          // from the database on readDraftEdit).\n          res.redirect(`${res.locals.urlPrefix}/jobSequence/${draftEdit.jobSequence.id}`);\n          return;\n        }\n\n        const job = draftEdit.jobSequence.jobs[0];\n\n        // We check for the presence of a `saveSucceeded` key to know if\n        // the edit was saved (i.e., written to disk in the case of no git,\n        // or written to disk and then pushed in the case of git). If this\n        // key exists, its value will be true.\n        if (job.data.saveSucceeded) {\n          draftEdit.didSave = true;\n\n          // We check for the presence of a `syncSucceeded` key to know\n          // if the sync was successful. If this key exists, its value will\n          // be true. Note that the cause of sync failure could be a file\n          // other than the one being edited.\n          //\n          // By \"the sync\" we mean \"the sync after a successfully saved\n          // edit.\" Remember that, if using git, we pull before we push.\n          // So, if we error on save, then we still try to sync whatever\n          // was pulled from the remote repository, even though changes\n          // made by the edit will have been discarded. We ignore this\n          // in the UI for now.\n          if (job.data.syncSucceeded) {\n            draftEdit.didSync = true;\n          }\n        }\n      }\n\n      if (!draftEdit.didSave && draftEdit.hash !== editorData.diskHash) {\n        // There is a recently saved draft that was not written to disk and that differs from what is on disk.\n        draftEdit.alertChoice = true;\n      }\n    }\n\n    res.send(InstructorFileEditor({ resLocals: res.locals, editorData, paths, draftEdit }));\n  }),\n);\n\nrouter.post(\n  '/*',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be a course Editor)');\n    }\n\n    const paths = getPaths(req.params[0], res.locals);\n\n    const container = {\n      rootPath: paths.rootPath,\n      invalidRootPaths: paths.invalidRootPaths,\n    };\n\n    // NOTE: All actions are meant to do things to *files* and not to directories\n    // (or anything else). However, nowhere do we check that it is actually being\n    // applied to a file and not to a directory.\n\n    if (req.body.__action === 'save_and_sync') {\n      const editID = await writeDraftEdit({\n        user_id: res.locals.user.user_id,\n        authn_user_id: res.locals.authn_user.user_id,\n        course_id: res.locals.course.id,\n        dir_name: paths.workingDirectory,\n        file_name: paths.workingFilename,\n        orig_hash: req.body.file_edit_orig_hash,\n        editContents: req.body.file_edit_contents,\n      });\n\n      const editor = new FileModifyEditor({\n        locals: res.locals as any,\n        container,\n        filePath: paths.workingPath,\n        editContents: req.body.file_edit_contents,\n        origHash: req.body.file_edit_orig_hash,\n      });\n\n      const serverJob = await editor.prepareServerJob();\n      await updateJobSequenceId(editID, serverJob.jobSequenceId);\n\n      try {\n        await editor.executeWithServerJob(serverJob);\n      } catch {\n        // We're deliberately choosing to ignore errors here. If there was an\n        // error, we'll still redirect the user back to the same page, which will\n        // allow them to handle the error.\n      }\n\n      res.redirect(req.originalUrl);\n    } else {\n      throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nfunction getHash(contents: string) {\n  return sha256(contents).toString();\n}\n\nasync function readDraftEdit({\n  user_id,\n  course_id,\n  dir_name,\n  file_name,\n  authn_user_id,\n}: {\n  user_id: string;\n  course_id: string;\n  dir_name: string;\n  file_name: string;\n  authn_user_id: string;\n}): Promise<DraftEdit | null> {\n  const fileEdit = await queryOptionalRow(\n    sql.select_file_edit,\n    { user_id, course_id, dir_name, file_name, max_age_sec: 24 * 60 * 60 },\n    FileEditSchema,\n  );\n\n  // We are choosing to soft-delete all drafts *before* reading the\n  // contents of whatever draft we found, because we don't want to get\n  // in a situation where the user is trapped with an unreadable draft.\n  // We accept the possibility that a draft will occasionally be lost.\n  const deletedFileEdits = await queryRows(\n    sql.soft_delete_file_edit,\n    { user_id, course_id, dir_name, file_name },\n    IdSchema.nullable(),\n  );\n  for (const file_id of deletedFileEdits) {\n    if (file_id != null && (fileEdit?.file_id == null || !idsEqual(file_id, fileEdit.file_id))) {\n      await deleteFile(file_id, authn_user_id);\n    }\n  }\n  if (fileEdit == null) return null;\n\n  let contents: string | undefined;\n  let hash: string | undefined;\n  if (fileEdit.file_id != null) {\n    const result = await getFile(fileEdit.file_id);\n    contents = b64EncodeUnicode(result.contents.toString('utf8'));\n    hash = getHash(contents);\n\n    await deleteFile(fileEdit.file_id, authn_user_id);\n  }\n\n  return { fileEdit, contents, hash };\n}\n\nasync function updateJobSequenceId(edit_id: string, job_sequence_id: string) {\n  await queryAsync(sql.update_job_sequence_id, { id: edit_id, job_sequence_id });\n}\n\nasync function writeDraftEdit({\n  user_id,\n  authn_user_id,\n  course_id,\n  dir_name,\n  file_name,\n  orig_hash,\n  editContents,\n}: {\n  user_id: string;\n  authn_user_id: string;\n  course_id: string;\n  dir_name: string;\n  file_name: string;\n  orig_hash: string;\n  editContents: string;\n}) {\n  const deletedFileEdits = await queryRows(\n    sql.soft_delete_file_edit,\n    { user_id, course_id, dir_name, file_name },\n    IdSchema.nullable(),\n  );\n  for (const file_id of deletedFileEdits) {\n    if (file_id != null) {\n      await deleteFile(file_id, authn_user_id);\n    }\n  }\n\n  const file_id = await uploadFile({\n    display_filename: file_name,\n    contents: Buffer.from(b64DecodeUnicode(editContents), 'utf8'),\n    type: 'instructor_file_edit',\n    assessment_id: null,\n    assessment_instance_id: null,\n    instance_question_id: null,\n    user_id,\n    authn_user_id,\n  });\n\n  const editID = await queryRow(\n    sql.insert_file_edit,\n    { user_id, course_id, dir_name, file_name, orig_hash, file_id },\n    IdSchema,\n  );\n  return editID;\n}\n\nexport default router;\n"]}