{"version":3,"file":"instructorFileTransfer.js","sourceRoot":"","sources":["../../../src/pages/instructorFileTransfer/instructorFileTransfer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport debugfn from 'debug';\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { flash } from '@prairielearn/flash';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../../lib/config.js';\nimport { type FileTransfer, FileTransferSchema } from '../../lib/db-types.js';\nimport { QuestionTransferEditor } from '../../lib/editors.js';\nimport { idsEqual } from '../../lib/id.js';\nimport { selectCourseById } from '../../models/course.js';\nimport { selectQuestionByUuid } from '../../models/question.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst debug = debugfn('prairielearn:instructorFileTransfer');\n\nasync function getFileTransfer(file_transfer_id: string, user_id: string): Promise<FileTransfer> {\n  const file_transfer = await sqldb.queryRow(\n    sql.select_file_transfer,\n    { id: file_transfer_id },\n    FileTransferSchema,\n  );\n  if (file_transfer.transfer_type !== 'CopyQuestion') {\n    throw new Error(`bad transfer_type: ${file_transfer.transfer_type}`);\n  }\n  if (!idsEqual(file_transfer.user_id, user_id)) {\n    throw new Error(\n      `must have same user_id: ${\n        file_transfer.user_id\n      } and ${user_id} (types: ${typeof file_transfer.user_id}, ${typeof user_id})`,\n    );\n  }\n  return file_transfer;\n}\n\nrouter.get(\n  '/:file_transfer_id',\n  asyncHandler(async (req, res) => {\n    if (config.filesRoot == null) throw new Error('config.filesRoot is null');\n    const file_transfer = await getFileTransfer(\n      req.params.file_transfer_id,\n      res.locals.user.user_id,\n    );\n    const from_course = await selectCourseById(file_transfer.from_course_id);\n    // Split the full path and grab everything after questions/ to get the QID\n    const question_exploded = path.normalize(file_transfer.from_filename).split(path.sep);\n    const questions_dir_idx = question_exploded.findIndex((x) => x === 'questions');\n    const qid = question_exploded.slice(questions_dir_idx + 1).join(path.sep);\n    const editor = new QuestionTransferEditor({\n      locals: res.locals as any,\n      from_qid: qid,\n      from_course_short_name: from_course.short_name,\n      from_path: path.join(config.filesRoot, file_transfer.storage_filename),\n    });\n    const serverJob = await editor.prepareServerJob();\n    try {\n      await editor.executeWithServerJob(serverJob);\n    } catch {\n      res.redirect(res.locals.urlPrefix + '/edit_error/' + serverJob.jobSequenceId);\n      return;\n    }\n\n    debug('Soft-delete file transfer');\n    await sqldb.queryOneRowAsync(sql.soft_delete_file_transfer, {\n      id: req.params.file_transfer_id,\n      user_id: res.locals.user.user_id,\n    });\n    debug(`Get question_id from uuid=${editor.uuid} with course_id=${res.locals.course.id}`);\n    const question = await selectQuestionByUuid({\n      // TODO: we'll have to change something here once we allow instructors to\n      // copy questions that have been shared with their course.\n      course_id: res.locals.course.id,\n      uuid: editor.uuid,\n    });\n    flash(\n      'success',\n      'Question copied successfully. You are now viewing your copy of the question.',\n    );\n    res.redirect(`${res.locals.urlPrefix}/question/${question.id}/settings`);\n  }),\n);\n\nexport default router;\n"]}