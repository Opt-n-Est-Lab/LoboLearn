{"version":3,"file":"instructorGradebook.js","sourceRoot":"","sources":["../../../src/pages/instructorGradebook/instructorGradebook.ts"],"names":[],"mappings":"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","sourcesContent":["import { pipeline } from 'node:stream/promises';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { stringifyStream } from '@prairielearn/csv';\nimport { HttpStatusError } from '@prairielearn/error';\nimport { loadSqlEquiv, queryCursor, queryRows } from '@prairielearn/postgres';\n\nimport { updateAssessmentInstanceScore } from '../../lib/assessment.js';\nimport {\n  checkAssessmentInstanceBelongsToCourseInstance,\n  getCourseOwners,\n} from '../../lib/course.js';\nimport { courseInstanceFilenamePrefix } from '../../lib/sanitize-name.js';\n\nimport { InstructorGradebook } from './instructorGradebook.html.js';\nimport {\n  AssessmentInstanceScoreResultSchema,\n  CourseAssessmentRowSchema,\n  type GradebookRow,\n  GradebookRowSchema,\n} from './instructorGradebook.types.js';\n\nconst router = Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nfunction buildCsvFilename(locals: Record<string, any>) {\n  return courseInstanceFilenamePrefix(locals.course_instance, locals.course) + 'gradebook.csv';\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const csvFilename = buildCsvFilename(res.locals);\n\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      // We don't actually forbid access to this page if the user is not a student\n      // data viewer, because we want to allow users to click the gradebook tab and\n      // see instructions for how to get student data viewer permissions. Otherwise,\n      // users just wouldn't see the tab at all, and this caused a lot of questions\n      // about why staff couldn't see the gradebook tab.\n      const courseOwners = await getCourseOwners(res.locals.course.id);\n      res\n        .status(403)\n        .send(InstructorGradebook({ resLocals: res.locals, courseOwners, csvFilename }));\n      return;\n    }\n\n    const courseAssessments = await queryRows(\n      sql.course_assessments,\n      { course_instance_id: res.locals.course_instance.id },\n      CourseAssessmentRowSchema,\n    );\n    res.send(\n      InstructorGradebook({\n        resLocals: res.locals,\n        courseOwners: [], // Not needed in this context\n        csvFilename,\n        courseAssessments,\n      }),\n    );\n  }),\n);\n\nrouter.get(\n  '/raw_data.json',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    const userScores = await queryRows(\n      sql.user_scores,\n      { course_id: res.locals.course.id, course_instance_id: res.locals.course_instance.id },\n      GradebookRowSchema,\n    );\n    res.json(userScores);\n  }),\n);\n\nrouter.get(\n  '/:filename',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_view) {\n      throw new HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n\n    if (req.params.filename === buildCsvFilename(res.locals)) {\n      const assessments = await queryRows(\n        sql.course_assessments,\n        { course_instance_id: res.locals.course_instance.id },\n        CourseAssessmentRowSchema,\n      );\n      const userScoresCursor = await queryCursor(sql.user_scores, {\n        course_id: res.locals.course.id,\n        course_instance_id: res.locals.course_instance.id,\n      });\n\n      const stringifier = stringifyStream({\n        header: true,\n        columns: ['UID', 'UIN', 'Name', 'Role', ...assessments.map((a) => a.label)],\n        transform: (record: GradebookRow) => [\n          record.uid,\n          record.uin,\n          record.user_name,\n          record.role,\n          ...assessments.map((a) => record.scores[a.assessment_id]?.score_perc ?? null),\n        ],\n      });\n\n      res.attachment(req.params.filename);\n      await pipeline(userScoresCursor.stream(100), stringifier, res);\n    } else {\n      throw new HttpStatusError(404, 'Unknown filename: ' + req.params.filename);\n    }\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_instance_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be a student data editor)');\n    }\n\n    if (req.body.__action === 'edit_total_score_perc') {\n      await checkAssessmentInstanceBelongsToCourseInstance(\n        req.body.assessment_instance_id,\n        res.locals.course_instance.id,\n      );\n      await updateAssessmentInstanceScore(\n        req.body.assessment_instance_id,\n        req.body.score_perc,\n        res.locals.authn_user.user_id,\n      );\n\n      const updatedScores = await queryRows(\n        sql.assessment_instance_score,\n        { assessment_instance_id: req.body.assessment_instance_id },\n        AssessmentInstanceScoreResultSchema,\n      );\n      res.json(updatedScores);\n    } else {\n      throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}