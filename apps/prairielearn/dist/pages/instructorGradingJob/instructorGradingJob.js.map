{"version":3,"file":"instructorGradingJob.js","sourceRoot":"","sources":["../../../src/pages/instructorGradingJob/instructorGradingJob.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as stream from 'node:stream';\nimport { pipeline } from 'node:stream/promises';\n\nimport { NoSuchKey, S3 } from '@aws-sdk/client-s3';\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { makeS3ClientConfig } from '../../lib/aws.js';\n\nimport { GradingJobRowSchema, InstructorGradingJob } from './instructorGradingJob.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/:job_id(\\\\d+)',\n  asyncHandler(async (req, res) => {\n    const gradingJobRow = await sqldb.queryOptionalRow(\n      sql.select_job,\n      {\n        job_id: req.params.job_id,\n        course_instance_id: res.locals.course_instance?.id ?? null,\n        course_id: res.locals.course.id,\n        authz_data: res.locals.authz_data,\n        req_date: res.locals.req_date,\n      },\n      GradingJobRowSchema,\n    );\n    if (gradingJobRow === null) {\n      throw new error.HttpStatusError(404, 'Job not found');\n    }\n\n    // If the grading job is associated with an assessment instance (through a\n    // submission, a variant, and an instance question), then we need to check\n    // if the effective user is authorized to view this assessment instance.\n    //\n    // The way we implement this check right now with authz_assessment_instance\n    // is overkill, yes, but is easy and robust (we hope).\n    if (gradingJobRow.aai && !gradingJobRow.aai.authorized) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n    res.send(InstructorGradingJob({ resLocals: res.locals, gradingJobRow }));\n  }),\n);\n\nrouter.get(\n  '/:job_id(\\\\d+)/file/:file',\n  asyncHandler(async (req, res) => {\n    const file = req.params.file;\n    const allowList = res.locals.authz_data.has_course_permission_view\n      ? ['job.tar.gz', 'archive.tar.gz', 'output.log', 'results.json']\n      : ['output.log', 'results.json'];\n\n    if (allowList.indexOf(file) === -1) {\n      throw new error.HttpStatusError(404, `Unknown file ${file}`);\n    }\n\n    const gradingJobRow = await sqldb.queryOptionalRow(\n      sql.select_job,\n      {\n        job_id: req.params.job_id,\n        course_instance_id: res.locals.course_instance?.id ?? null,\n        course_id: res.locals.course.id,\n        authz_data: res.locals.authz_data,\n        req_date: res.locals.req_date,\n      },\n      GradingJobRowSchema,\n    );\n    if (gradingJobRow === null) {\n      throw new error.HttpStatusError(404, 'Job not found');\n    }\n    // If the grading job is associated with an assessment instance (through a\n    // submission, a variant, and an instance question), then we need to check\n    // if the effective user is authorized to view this assessment instance.\n    //\n    // The way we implement this check right now with authz_assessment_instance\n    // is overkill, yes, but is easy and robust (we hope).\n    if (gradingJobRow.aai && !gradingJobRow.aai.authorized) {\n      throw new error.HttpStatusError(403, 'Access denied (must be a student data viewer)');\n    }\n\n    const grading_job = gradingJobRow.grading_job;\n\n    if (!grading_job.s3_bucket || !grading_job.s3_root_key) {\n      throw new Error(`Job ${grading_job.id} does not have any files stored in S3.`);\n    }\n\n    res.attachment(file);\n\n    const s3 = new S3(makeS3ClientConfig());\n    try {\n      const s3Object = await s3.getObject({\n        Bucket: grading_job.s3_bucket,\n        Key: `${grading_job.s3_root_key}/${file}`,\n      });\n\n      if (s3Object.Body === undefined) {\n        throw new Error(\n          `S3 object ${grading_job.s3_bucket}/${grading_job.s3_root_key}/${file} has no body.`,\n        );\n      }\n      return pipeline(s3Object.Body as stream.Readable, res);\n    } catch (err) {\n      if (err instanceof NoSuchKey) {\n        res.status(404).send();\n      } else {\n        throw err;\n      }\n    }\n  }),\n);\n\nexport default router;\n"]}