{"version":3,"file":"instructorInstanceAdminAccess.html.js","sourceRoot":"","sources":["../../../src/pages/instructorInstanceAdminAccess/instructorInstanceAdminAccess.html.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AACrD,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAE1C,OAAO,EAAE,UAAU,EAAE,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAE,mCAAmC,EAAE,MAAM,gDAAgD,CAAC;AACrG,OAAO,EAAiC,MAAM,uBAAuB,CAAC;AAEtE,MAAM,UAAU,6BAA6B,CAAC,EAC5C,SAAS,EACT,WAAW,GAIZ;IACC,MAAM,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,SAAS,CAAC;IAElD,OAAO,UAAU,CAAC;QAChB,SAAS;QACT,SAAS,EAAE,QAAQ;QACnB,UAAU,EAAE;YACV,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,gBAAgB;YACtB,OAAO,EAAE,QAAQ;SAClB;QACD,OAAO,EAAE;YACP,SAAS,EAAE,IAAI;SAChB;QACD,OAAO,EAAE,IAAI,CAAA;QACT,mCAAmC,CAAC;YACpC,UAAU;YACV,cAAc,EAAE,eAAe;YAC/B,MAAM,EAAE,SAAS,CAAC,MAAM;YACxB,SAAS,EAAE,SAAS,CAAC,SAAS;SAC/B,CAAC;;;gBAGQ,eAAe,CAAC,SAAS;;;;;;;;;;;;;;gBAczB,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAC/B,aAAa,CAAC;YACZ,UAAU;YACV,QAAQ,EAAE,eAAe,CAAC,gBAAgB;YAC1C,+BAA+B,EAAE,UAAU,CAAC,mCAAmC;SAChF,CAAC,CACH;;;;;KAKV;KACF,CAAC,CAAC;AACL,CAAC;AAED,SAAS,aAAa,CAAC,EACrB,UAAU,EACV,QAAQ,EACR,+BAA+B,GAKhC;IACC,OAAO,IAAI,CAAA;;;UAGH,UAAU,CAAC,IAAI,IAAI,IAAI;QACvB,CAAC,CAAC,IAAI,CAAA,SAAS;QACf,CAAC,CAAC,iEAAiE;YACjE,6DAA6D;YAC7D,iEAAiE;YACjE,oEAAoE;YACpE,iEAAiE;YACjE,mEAAmE;YACnE,+BAA+B;gBAC/B,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC5B,CAAC,CAAC,IAAI,CAAA;;;;;;;;;;;;eAYH;;;UAGL,UAAU,CAAC,UAAU,IAAI,IAAI;QAC7B,CAAC,CAAC,IAAI,CAAA,SAAS;QACf,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,EAAE,QAAQ,CAAC;;;UAG7C,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC;;YAErF,UAAU,CAAC,WAAW,IAAI,IAAI,CAAA,SAAS;;GAEhD,CAAC;AACJ,CAAC","sourcesContent":["import { formatDate } from '@prairielearn/formatter';\nimport { html } from '@prairielearn/html';\n\nimport { PageLayout } from '../../components/PageLayout.html.js';\nimport { CourseInstanceSyncErrorsAndWarnings } from '../../components/SyncErrorsAndWarnings.html.js';\nimport { type CourseInstanceAccessRule } from '../../lib/db-types.js';\n\nexport function InstructorInstanceAdminAccess({\n  resLocals,\n  accessRules,\n}: {\n  resLocals: Record<string, any>;\n  accessRules: CourseInstanceAccessRule[];\n}) {\n  const { authz_data, course_instance } = resLocals;\n\n  return PageLayout({\n    resLocals,\n    pageTitle: 'Access',\n    navContext: {\n      type: 'instructor',\n      page: 'instance_admin',\n      subPage: 'access',\n    },\n    options: {\n      fullWidth: true,\n    },\n    content: html`\n      ${CourseInstanceSyncErrorsAndWarnings({\n        authz_data,\n        courseInstance: course_instance,\n        course: resLocals.course,\n        urlPrefix: resLocals.urlPrefix,\n      })}\n      <div class=\"card mb-4\">\n        <div class=\"card-header bg-primary text-white d-flex align-items-center\">\n          <h1>${course_instance.long_name} course instance access rules</h1>\n        </div>\n\n        <div class=\"table-responsive\">\n          <table class=\"table table-sm table-hover\" aria-label=\"Access rules\">\n            <thead>\n              <tr>\n                <th>UIDs</th>\n                <th>Start date</th>\n                <th>End date</th>\n                <th>Institution</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${accessRules.map((accessRule) =>\n                AccessRuleRow({\n                  accessRule,\n                  timeZone: course_instance.display_timezone,\n                  hasCourseInstancePermissionView: authz_data.has_course_instance_permission_view,\n                }),\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    `,\n  });\n}\n\nfunction AccessRuleRow({\n  accessRule,\n  timeZone,\n  hasCourseInstancePermissionView,\n}: {\n  accessRule: CourseInstanceAccessRule;\n  timeZone: string;\n  hasCourseInstancePermissionView: boolean;\n}) {\n  return html`\n    <tr>\n      <td>\n        ${accessRule.uids == null\n          ? html`&mdash;`\n          : // Only users with permission to view student data are allowed to\n            // see the list of uids associated with an access rule. Note,\n            // however, that any user with permission to view course code (or\n            // with access to the course git repository) will be able to see the\n            // list of uids, because these access rules are defined in course\n            // code. This should be changed in future, to protect student data.\n            hasCourseInstancePermissionView\n            ? accessRule.uids.join(', ')\n            : html`\n                <button\n                  type=\"button\"\n                  class=\"btn btn-xs btn-warning\"\n                  data-bs-toggle=\"popover\"\n                  data-bs-container=\"body\"\n                  data-bs-placement=\"auto\"\n                  data-bs-title=\"Hidden UIDs\"\n                  data-bs-content=\"This access rule is specific to individual students. You need permission to view student data in order to see which ones.\"\n                >\n                  Hidden\n                </button>\n              `}\n      </td>\n      <td>\n        ${accessRule.start_date == null\n          ? html`&mdash;`\n          : formatDate(accessRule.start_date, timeZone)}\n      </td>\n      <td>\n        ${accessRule.end_date == null ? html`&mdash;` : formatDate(accessRule.end_date, timeZone)}\n      </td>\n      <td>${accessRule.institution ?? html`&mdash;`}</td>\n    </tr>\n  `;\n}\n"]}