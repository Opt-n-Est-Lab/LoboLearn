{"version":3,"file":"instructorIssues.js","sourceRoot":"","sources":["../../../src/pages/instructorIssues/instructorIssues.ts"],"names":[],"mappings":"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","sourcesContent":["import * as url from 'node:url';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport SearchString from 'search-string';\nimport { z } from 'zod';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport { loadSqlEquiv, queryOptionalRow, queryRow, queryRows } from '@prairielearn/postgres';\n\nimport { IdSchema } from '../../lib/db-types.js';\nimport { idsEqual } from '../../lib/id.js';\nimport { selectCourseInstancesWithStaffAccess } from '../../models/course-instances.js';\n\nimport { InstructorIssues, IssueRowSchema, PAGE_SIZE } from './instructorIssues.html.js';\n\nconst router = Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nfunction formatForLikeClause(str: string) {\n  // https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-LIKE\n  return str\n    .replaceAll('\\\\', '\\\\\\\\')\n    .replaceAll('%', '\\\\%')\n    .replaceAll('_', '\\\\_')\n    .replaceAll('*', '%');\n}\n\nfunction parseRawQuery(str: string) {\n  const parsedQuery = SearchString.parse(str);\n  const filters = {\n    filter_is_open: null as boolean | null,\n    filter_is_closed: null as boolean | null,\n    filter_manually_reported: null as boolean | null,\n    filter_automatically_reported: null as boolean | null,\n    filter_qids: null as string[] | null,\n    filter_not_qids: null as string[] | null,\n    filter_query_text: null as string | null,\n    filter_users: null as string[] | null,\n    filter_not_users: null as string[] | null,\n    filter_assessments: null as string[] | null,\n    filter_not_assessments: null as string[] | null,\n  };\n\n  const queryText = parsedQuery.getAllText();\n  if (queryText) {\n    filters.filter_query_text = queryText;\n  }\n\n  for (const option of parsedQuery.getConditionArray()) {\n    switch (option.keyword) {\n      case 'is': // boolean option\n        switch (option.value) {\n          case 'open':\n            filters.filter_is_open = !option.negated;\n            break;\n          case 'closed':\n            filters.filter_is_closed = !option.negated;\n            break;\n          case 'manually-reported':\n            filters.filter_manually_reported = !option.negated;\n            break;\n          case 'automatically-reported':\n            filters.filter_automatically_reported = !option.negated;\n            break;\n        }\n        break;\n      case 'qid':\n        if (!option.negated) {\n          filters.filter_qids = filters.filter_qids || [];\n          filters.filter_qids.push(formatForLikeClause(option.value));\n        } else {\n          filters.filter_not_qids = filters.filter_not_qids || [];\n          filters.filter_not_qids.push(formatForLikeClause(option.value));\n        }\n        break;\n      case 'user':\n        if (!option.negated) {\n          filters.filter_users = filters.filter_users || [];\n          filters.filter_users.push(formatForLikeClause(option.value));\n        } else {\n          filters.filter_not_users = filters.filter_not_users || [];\n          filters.filter_not_users.push(formatForLikeClause(option.value));\n        }\n        break;\n      case 'assessment':\n        if (!option.negated) {\n          filters.filter_assessments = filters.filter_assessments || [];\n          filters.filter_assessments.push(formatForLikeClause(option.value));\n        } else {\n          filters.filter_not_assessments = filters.filter_not_assessments || [];\n          filters.filter_not_assessments.push(formatForLikeClause(option.value));\n        }\n        break;\n    }\n  }\n\n  return filters;\n}\n\nasync function updateIssueOpen(\n  issue_id: string,\n  new_open: boolean,\n  course_id: string,\n  authn_user_id: string,\n) {\n  const updated_issue_id = await queryOptionalRow(\n    sql.update_issue_open,\n    { issue_id, new_open, course_id, authn_user_id },\n    IdSchema,\n  );\n  if (!updated_issue_id) {\n    throw new HttpStatusError(\n      403,\n      `Unable to ${new_open ? 'open' : 'close'} issue ${issue_id}: issue does not exist in this course.`,\n    );\n  }\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const filterQuery = typeof req.query.q === 'string' ? req.query.q : 'is:open';\n\n    const [closedCount, openCount] = await queryRows(\n      sql.issues_count,\n      { course_id: res.locals.course.id },\n      z.number(),\n    );\n\n    const queryPageNumber = Number(req.query.page);\n    const filters = parseRawQuery(filterQuery);\n    const offset = Number.isInteger(queryPageNumber) ? (queryPageNumber - 1) * PAGE_SIZE : 0;\n    const issueRows = await queryRows(\n      sql.select_issues,\n      { course_id: res.locals.course.id, offset, limit: PAGE_SIZE, ...filters },\n      IssueRowSchema,\n    );\n    // If the offset is not zero and there are no returned issues, this\n    // typically means the page number was incorrectly set to a value larger\n    // than the number of actual issues. In this case, redirect to the same page\n    // without setting the page number.\n    if (offset > 0 && issueRows.length === 0) {\n      res.redirect(`${url.parse(req.originalUrl).pathname}?q=${encodeURIComponent(filterQuery)}`);\n      return;\n    }\n\n    // Compute the IDs of the course instances to which the effective user has access.\n\n    const course_instances = await selectCourseInstancesWithStaffAccess({\n      course_id: res.locals.course.id,\n      user_id: res.locals.user.user_id,\n      authn_user_id: res.locals.authn_user.user_id,\n      is_administrator: res.locals.is_administrator,\n      authn_is_administrator: res.locals.authz_data.authn_is_administrator,\n    });\n    const linkableCourseInstanceIds = new Set(course_instances.map((ci) => ci.id));\n\n    const issues = issueRows.map((row) => ({\n      ...row,\n\n      // Each issue is associated with a question variant. If an issue is also\n      // associated with a course instance, then this question variant is from\n      // some assessment in that course instance. We can provide a link to this\n      // assessment, but we only want to do so if the effective user has access\n      // to the corresponding course instance.\n      //\n      // Add a flag to each row saying if the effective user has this access.\n      hideAssessmentLink:\n        row.course_instance_id != null && !linkableCourseInstanceIds.has(row.course_instance_id),\n\n      // There are three situations in which the issue need not be anonymized:\n      //\n      //  1) The issue is not associated with a course instance. The only way\n      //     for a user to generate an issue that is not associated with a course\n      //     instance is if they are an instructor, so there are no student data\n      //     to be protected in this case.\n      //\n      //  2) We are accessing this page through a course instance, the issue is\n      //     associated with the same course instance, and the user has student\n      //     data view access.\n      //\n      //  3) We are not accessing this page through the course instance\n      //     associated to the issue (i.e., we are accessing it through the\n      //     course or through a different course instance), and the user has\n      //     student data view access in the course instance associated to the\n      //     issue. This is distinguished from situation 2 above to ensure\n      //     effective user roles are taken into account.\n      //\n      // Otherwise, all issues must be anonymized.\n      showUser:\n        !row.course_instance_id ||\n        (res.locals.course_instance &&\n          idsEqual(res.locals.course_instance.id, row.course_instance_id) &&\n          res.locals.authz_data.has_course_instance_permission_view) ||\n        ((!res.locals.course_instance ||\n          !idsEqual(res.locals.course_instance.id, row.course_instance_id)) &&\n          course_instances.some(\n            (ci) => ci.id === row.course_instance_id && ci.has_course_instance_permission_view,\n          )),\n    }));\n\n    const openFilteredIssuesCount = issueRows.reduce((acc, row) => (row.open ? acc + 1 : acc), 0);\n\n    res.send(\n      InstructorIssues({\n        resLocals: res.locals,\n        issues,\n        filterQuery,\n        openFilteredIssuesCount,\n        openCount,\n        closedCount,\n        chosenPage: queryPageNumber,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (!res.locals.authz_data.has_course_permission_edit) {\n      throw new HttpStatusError(403, 'Access denied (must be a course editor)');\n    }\n\n    if (req.body.__action === 'open') {\n      await updateIssueOpen(\n        req.body.issue_id,\n        true, // open status\n        res.locals.course.id,\n        res.locals.authn_user.user_id,\n      );\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'close') {\n      await updateIssueOpen(\n        req.body.issue_id,\n        false, // open status\n        res.locals.course.id,\n        res.locals.authn_user.user_id,\n      );\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'close_matching') {\n      const issueIds = req.body.unsafe_issue_ids.split(',').filter((id) => id !== '');\n      const closedCount = await queryRow(\n        sql.close_issues,\n        {\n          issue_ids: issueIds,\n          course_id: res.locals.course.id,\n          authn_user_id: res.locals.authn_user.user_id,\n        },\n        z.number(),\n      );\n      flash('success', `Closed ${closedCount} ${closedCount === 1 ? 'issue' : 'issues'}.`);\n      res.redirect(req.originalUrl);\n    } else {\n      throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}