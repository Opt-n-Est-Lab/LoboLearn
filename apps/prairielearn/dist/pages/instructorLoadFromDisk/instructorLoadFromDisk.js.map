{"version":3,"file":"instructorLoadFromDisk.js","sourceRoot":"","sources":["../../../src/pages/instructorLoadFromDisk/instructorLoadFromDisk.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport * as async from 'async';\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport fs from 'fs-extra';\n\nimport { loadSqlEquiv, queryRows } from '@prairielearn/postgres';\n\nimport { chalk } from '../../lib/chalk.js';\nimport { logChunkChangesToJob, updateChunksForCourse } from '../../lib/chunks.js';\nimport { config } from '../../lib/config.js';\nimport { CourseSchema } from '../../lib/db-types.js';\nimport { REPOSITORY_ROOT_PATH } from '../../lib/paths.js';\nimport { createServerJob } from '../../lib/server-jobs.js';\nimport * as syncFromDisk from '../../sync/syncFromDisk.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router();\n\nasync function update(locals: Record<string, any>) {\n  const serverJob = await createServerJob({\n    courseId: locals.course ? locals.course.id : null,\n    type: 'loadFromDisk',\n    description: 'Load data from local disk',\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    let anyCourseHadJsonErrors = false;\n\n    // Merge the list of courses in the config with the list of courses in the database.\n    // We use a set to ensure that we don't double-count courses that are both\n    // in the config and in the database.\n    //\n    // A set also maintains insertion order, which ensures that courses that are\n    // listed in the config (and listed earlier in the config) are synced first.\n    const courseDirs = new Set<string>(\n      config.courseDirs.map((courseDir) => path.resolve(REPOSITORY_ROOT_PATH, courseDir)),\n    );\n    const courses = await queryRows(sql.select_all_courses, CourseSchema);\n    courses.forEach((course) => courseDirs.add(course.path));\n\n    await async.eachOfSeries(Array.from(courseDirs), async (courseDir, index) => {\n      job.info(chalk.bold(courseDir));\n      const infoCourseFile = path.join(courseDir, 'infoCourse.json');\n      const hasInfoCourseFile = await fs.pathExists(infoCourseFile);\n      if (!hasInfoCourseFile) {\n        job.verbose('infoCourse.json not found, skipping');\n        if (index !== config.courseDirs.length - 1) job.info('');\n        return;\n      }\n      const syncResult = await syncFromDisk.syncOrCreateDiskToSql(courseDir, job);\n      if (syncResult.status === 'sharing_error') {\n        job.fail('Sync completely failed due to invalid question sharing edit.');\n        return;\n      }\n      if (index !== config.courseDirs.length - 1) job.info('');\n      if (syncResult.hadJsonErrors) anyCourseHadJsonErrors = true;\n      if (config.chunksGenerator) {\n        const chunkChanges = await updateChunksForCourse({\n          coursePath: courseDir,\n          courseId: syncResult.courseId,\n          courseData: syncResult.courseData,\n          oldHash: 'HEAD~1',\n          newHash: 'HEAD',\n        });\n        logChunkChangesToJob(chunkChanges, job);\n      }\n    });\n\n    if (anyCourseHadJsonErrors) {\n      throw new Error(\n        'One or more courses had JSON files that contained errors and were unable to be synced',\n      );\n    }\n  });\n\n  return serverJob.jobSequenceId;\n}\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res, next) => {\n    if (!config.devMode) return next();\n    const jobSequenceId = await update(res.locals);\n    res.redirect(res.locals.urlPrefix + '/jobSequence/' + jobSequenceId);\n  }),\n);\n\nexport default router;\n"]}