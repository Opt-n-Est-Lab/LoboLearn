{"version":3,"file":"instructorQuestionPreview.js","sourceRoot":"","sources":["../../../src/pages/instructorQuestionPreview/instructorQuestionPreview.ts"],"names":[],"mappings":"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","sourcesContent":["import * as url from 'node:url';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { run } from '@prairielearn/run';\n\nimport { setQuestionCopyTargets } from '../../lib/copy-question.js';\nimport { IdSchema } from '../../lib/db-types.js';\nimport { features } from '../../lib/features/index.js';\nimport { reportIssueFromForm } from '../../lib/issues.js';\nimport {\n  getAndRenderVariant,\n  renderPanelsForSubmission,\n  setRendererHeader,\n} from '../../lib/question-render.js';\nimport { processSubmission } from '../../lib/question-submission.js';\nimport { getSearchParams } from '../../lib/url.js';\nimport { logPageView } from '../../middlewares/logPageView.js';\nimport { selectAndAuthzVariant } from '../../models/variant.js';\n\nimport { InstructorQuestionPreview } from './instructorQuestionPreview.html.js';\n\nconst router = Router();\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (req.body.__action === 'grade' || req.body.__action === 'save') {\n      const variant_id = await processSubmission(req, res);\n      res.redirect(\n        `${res.locals.urlPrefix}/question/${res.locals.question.id}/preview/?variant_id=${variant_id}`,\n      );\n    } else if (req.body.__action === 'report_issue') {\n      const variant_id = await reportIssueFromForm(req, res);\n      res.redirect(\n        `${res.locals.urlPrefix}/question/${res.locals.question.id}/preview/?variant_id=${variant_id}`,\n      );\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const aiGradingEnabled = await features.enabledFromLocals('ai-grading', res.locals);\n    const manualGradingPreviewEnabled = req.query.manual_grading_preview === 'true';\n    const aiGradingPreviewEnabled = aiGradingEnabled && req.query.ai_grading_preview === 'true';\n\n    // The `questionRenderContext` flag will be respected by the rendering process.\n    if (aiGradingPreviewEnabled) {\n      res.locals.questionRenderContext = 'ai_grading';\n    } else if (manualGradingPreviewEnabled) {\n      res.locals.questionRenderContext = 'manual_grading';\n    }\n\n    const variant_seed = req.query.variant_seed ? z.string().parse(req.query.variant_seed) : null;\n    const variant_id = req.query.variant_id ? IdSchema.parse(req.query.variant_id) : null;\n    // req.query.variant_id might be undefined, which will generate a new variant\n    await getAndRenderVariant(variant_id, variant_seed, res.locals as any);\n    await logPageView('instructorQuestionPreview', req, res);\n    await setQuestionCopyTargets(res);\n\n    const searchParams = getSearchParams(req);\n\n    // Construct a URL to preview the question as it would appear in the manual\n    // grading interface. We need to include the `variant_id` in the URL so that\n    // we show the current variant and not a new one.\n    const manualGradingPreviewSearchParams = new URLSearchParams(searchParams);\n    manualGradingPreviewSearchParams.set('variant_id', res.locals.variant.id.toString());\n    manualGradingPreviewSearchParams.set('manual_grading_preview', 'true');\n    manualGradingPreviewSearchParams.delete('variant_seed');\n    manualGradingPreviewSearchParams.delete('ai_grading_preview');\n    const manualGradingPreviewUrl = url.format({\n      pathname: `${res.locals.urlPrefix}/question/${res.locals.question.id}/preview`,\n      search: manualGradingPreviewSearchParams.toString(),\n    });\n\n    // As above, the AI grading preview needs to include the `variant_id`.\n    const aiGradingPreviewSearchParams = new URLSearchParams(searchParams);\n    aiGradingPreviewSearchParams.set('variant_id', res.locals.variant.id.toString());\n    aiGradingPreviewSearchParams.set('ai_grading_preview', 'true');\n    aiGradingPreviewSearchParams.delete('variant_seed');\n    aiGradingPreviewSearchParams.delete('manual_grading_preview');\n    const aiGradingPreviewUrl = aiGradingEnabled\n      ? url.format({\n          pathname: `${res.locals.urlPrefix}/question/${res.locals.question.id}/preview`,\n          search: aiGradingPreviewSearchParams.toString(),\n        })\n      : undefined;\n\n    // Construct a URL for the normal preview. This will be used to exit the manual grading preview.\n    const normalPreviewSearchParams = new URLSearchParams(searchParams);\n    normalPreviewSearchParams.set('variant_id', res.locals.variant.id.toString());\n    normalPreviewSearchParams.delete('manual_grading_preview');\n    normalPreviewSearchParams.delete('ai_grading_preview');\n    normalPreviewSearchParams.delete('variant_seed');\n    const normalPreviewUrl = url.format({\n      pathname: `${res.locals.urlPrefix}/question/${res.locals.question.id}/preview`,\n      search: normalPreviewSearchParams.toString(),\n    });\n\n    // These will be passed back when submissions are rendered asynchronously.\n    // We treat these as mutually exclusive.\n    const renderSubmissionSearchParams = new URLSearchParams();\n    if (manualGradingPreviewEnabled) {\n      renderSubmissionSearchParams.set('manual_grading_preview', 'true');\n    } else if (aiGradingPreviewEnabled) {\n      renderSubmissionSearchParams.set('ai_grading_preview', 'true');\n    }\n\n    setRendererHeader(res);\n    res.send(\n      InstructorQuestionPreview({\n        normalPreviewUrl,\n        manualGradingPreviewEnabled,\n        manualGradingPreviewUrl,\n        aiGradingPreviewEnabled,\n        aiGradingPreviewUrl,\n        renderSubmissionSearchParams,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nrouter.get(\n  '/variant/:unsafe_variant_id(\\\\d+)/submission/:unsafe_submission_id(\\\\d+)',\n  asyncHandler(async (req, res) => {\n    const aiGradingEnabled = await features.enabledFromLocals('ai-grading', res.locals);\n\n    // As with the normal route, we need to respect the `manual_grading_preview`\n    // and the `ai_grading_preview` flags.\n    const manualGradingPreviewEnabled = req.query.manual_grading_preview === 'true';\n    const aiGradingPreviewEnabled = aiGradingEnabled && req.query.ai_grading_preview === 'true';\n\n    const variant = await selectAndAuthzVariant({\n      unsafe_variant_id: req.params.unsafe_variant_id,\n      variant_course: res.locals.course,\n      question_id: res.locals.question.id,\n      course_instance_id: res.locals.course_instance?.id,\n      authz_data: res.locals.authz_data,\n      authn_user: res.locals.authn_user,\n      user: res.locals.user,\n      is_administrator: res.locals.is_administrator,\n    });\n\n    const panels = await renderPanelsForSubmission({\n      unsafe_submission_id: req.params.unsafe_submission_id,\n      question: res.locals.question,\n      instance_question: null,\n      variant,\n      user: res.locals.user,\n      urlPrefix: res.locals.urlPrefix,\n      questionContext: 'instructor',\n      questionRenderContext: run(() => {\n        if (manualGradingPreviewEnabled) return 'manual_grading';\n        if (aiGradingPreviewEnabled) return 'ai_grading';\n        return undefined;\n      }),\n      // This is only used by score panels, which are not rendered in this context.\n      authorizedEdit: false,\n      // Score panels are never rendered on the instructor question preview page.\n      renderScorePanels: false,\n      // Group role permissions are not used in this context.\n      groupRolePermissions: null,\n    });\n\n    res.json(panels);\n  }),\n);\n\nexport default router;\n"]}