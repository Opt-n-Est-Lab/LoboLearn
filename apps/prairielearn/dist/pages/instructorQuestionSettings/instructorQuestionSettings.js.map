{"version":3,"file":"instructorQuestionSettings.js","sourceRoot":"","sources":["../../../src/pages/instructorQuestionSettings/instructorQuestionSettings.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport sha256 from 'crypto-js/sha256.js';\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport fs from 'fs-extra';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport * as sqldb from '@prairielearn/postgres';\nimport { run } from '@prairielearn/run';\nimport { generateSignedToken } from '@prairielearn/signed-token';\n\nimport { b64EncodeUnicode } from '../../lib/base64-util.js';\nimport { config } from '../../lib/config.js';\nimport { copyQuestionBetweenCourses } from '../../lib/copy-question.js';\nimport {\n  FileModifyEditor,\n  MultiEditor,\n  QuestionCopyEditor,\n  QuestionDeleteEditor,\n  QuestionRenameEditor,\n  propertyValueWithDefault,\n} from '../../lib/editors.js';\nimport { features } from '../../lib/features/index.js';\nimport { httpPrefixForCourseRepo } from '../../lib/github.js';\nimport { idsEqual } from '../../lib/id.js';\nimport { getPaths } from '../../lib/instructorFiles.js';\nimport { formatJsonWithPrettier } from '../../lib/prettier.js';\nimport { startTestQuestion } from '../../lib/question-testing.js';\nimport { getCanonicalHost } from '../../lib/url.js';\nimport { selectCoursesWithEditAccess } from '../../models/course.js';\nimport { selectQuestionByUuid } from '../../models/question.js';\nimport { selectTagsByCourseId } from '../../models/tags.js';\nimport { selectTopicsByCourseId } from '../../models/topics.js';\n\nimport {\n  InstructorQuestionSettings,\n  SelectedAssessmentsSchema,\n  SharingSetRowSchema,\n} from './instructorQuestionSettings.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nrouter.post(\n  '/test',\n  asyncHandler(async (req, res) => {\n    if (res.locals.question.course_id !== res.locals.course.id) {\n      throw new error.HttpStatusError(403, 'Access denied');\n    }\n    // We use a separate `test/` POST route so that we can always use the\n    // route to distinguish between pages that need to execute course code\n    // (this `test/` handler) and pages that need access to course content\n    // editing (here the plain '/' POST handler).\n    if (req.body.__action === 'test_once') {\n      if (!res.locals.authz_data.has_course_permission_view) {\n        throw new error.HttpStatusError(403, 'Access denied (must be a course Viewer)');\n      }\n      const count = 1;\n      const showDetails = true;\n      const jobSequenceId = await startTestQuestion(\n        count,\n        showDetails,\n        res.locals.question,\n        res.locals.course_instance,\n        res.locals.course,\n        res.locals.user.user_id,\n        res.locals.authn_user.user_id,\n      );\n      res.redirect(res.locals.urlPrefix + '/jobSequence/' + jobSequenceId);\n    } else if (req.body.__action === 'test_100') {\n      if (!res.locals.authz_data.has_course_permission_view) {\n        throw new error.HttpStatusError(403, 'Access denied (must be a course Viewer)');\n      }\n      if (res.locals.question.grading_method !== 'External') {\n        const count = 100;\n        const showDetails = false;\n        const jobSequenceId = await startTestQuestion(\n          count,\n          showDetails,\n          res.locals.question,\n          res.locals.course_instance,\n          res.locals.course,\n          res.locals.user.user_id,\n          res.locals.authn_user.user_id,\n        );\n        res.redirect(res.locals.urlPrefix + '/jobSequence/' + jobSequenceId);\n      } else {\n        throw new Error('Not supported for externally-graded questions');\n      }\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (res.locals.question.course_id !== res.locals.course.id) {\n      throw new error.HttpStatusError(403, 'Access denied');\n    }\n    if (req.body.__action === 'update_question') {\n      const infoPath = path.join(\n        res.locals.course.path,\n        'questions',\n        res.locals.question.qid,\n        'info.json',\n      );\n      if (!(await fs.pathExists(infoPath))) {\n        throw new error.HttpStatusError(400, 'Question info file does not exist');\n      }\n\n      if (!req.body.qid) {\n        throw new error.HttpStatusError(400, `Invalid QID (was falsy): ${req.body.qid}`);\n      }\n      if (!/^[-A-Za-z0-9_/]+$/.test(req.body.qid)) {\n        throw new error.HttpStatusError(\n          400,\n          `Invalid QID (was not only letters, numbers, dashes, slashes, and underscores, with no spaces): ${req.body.qid}`,\n        );\n      }\n\n      const paths = getPaths(undefined, res.locals);\n\n      const questionInfo = JSON.parse(await fs.readFile(infoPath, 'utf8'));\n\n      const origHash = req.body.orig_hash;\n      questionInfo.title = req.body.title;\n      questionInfo.topic = req.body.topic;\n      questionInfo.tags = run(() => {\n        // If no tags are provided, remove the entire property.\n        if (!req.body.tags) return undefined;\n\n        // Handle multiple and single tags.\n        if (Array.isArray(req.body.tags)) return req.body.tags;\n        return [req.body.tags];\n      });\n\n      questionInfo.gradingMethod = propertyValueWithDefault(\n        questionInfo.gradingMethod,\n        req.body.grading_method,\n        'Internal',\n      );\n\n      questionInfo.singleVariant = propertyValueWithDefault(\n        questionInfo.singleVariant,\n        req.body.single_variant === 'on',\n        false,\n      );\n\n      questionInfo.showCorrectAnswer = propertyValueWithDefault(\n        questionInfo.showCorrectAnswer,\n        req.body.show_correct_answer === 'on',\n        true,\n      );\n\n      const formattedJson = await formatJsonWithPrettier(JSON.stringify(questionInfo));\n\n      const qid_new = run(() => {\n        try {\n          return path.normalize(req.body.qid);\n        } catch {\n          throw new error.HttpStatusError(\n            400,\n            `Invalid QID (could not be normalized): ${req.body.qid}`,\n          );\n        }\n      });\n\n      const editor = new MultiEditor(\n        {\n          locals: res.locals as any,\n          // This won't reflect if the operation is an update or a rename; we think that's OK.\n          description: `Update question ${res.locals.question.qid}`,\n        },\n        [\n          // Each of these editors will no-op if there wasn't any change.\n          new FileModifyEditor({\n            locals: res.locals as any,\n            container: {\n              rootPath: paths.rootPath,\n              invalidRootPaths: paths.invalidRootPaths,\n            },\n            filePath: path.join(paths.rootPath, 'info.json'),\n            editContents: b64EncodeUnicode(formattedJson),\n            origHash,\n          }),\n          new QuestionRenameEditor({\n            locals: res.locals as any,\n            qid_new,\n          }),\n        ],\n      );\n      const serverJob = await editor.prepareServerJob();\n      try {\n        await editor.executeWithServerJob(serverJob);\n      } catch {\n        return res.redirect(res.locals.urlPrefix + '/edit_error/' + serverJob.jobSequenceId);\n      }\n\n      flash('success', 'Question settings updated successfully');\n      return res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'copy_question') {\n      if (idsEqual(req.body.to_course_id, res.locals.course.id)) {\n        // In this case, we are making a duplicate of this question in the same course\n        const editor = new QuestionCopyEditor({\n          locals: res.locals as any,\n        });\n        const serverJob = await editor.prepareServerJob();\n        try {\n          await editor.executeWithServerJob(serverJob);\n        } catch {\n          return res.redirect(res.locals.urlPrefix + '/edit_error/' + serverJob.jobSequenceId);\n        }\n\n        const question = await selectQuestionByUuid({\n          course_id: res.locals.course.id,\n          uuid: editor.uuid,\n        });\n\n        flash(\n          'success',\n          'Question copied successfully. You are now viewing your copy of the question.',\n        );\n        res.redirect(res.locals.urlPrefix + '/question/' + question.id + '/settings');\n      } else {\n        await copyQuestionBetweenCourses(res, {\n          fromCourse: res.locals.course,\n          toCourseId: req.body.to_course_id,\n          question: res.locals.question,\n        });\n      }\n    } else if (req.body.__action === 'delete_question') {\n      const editor = new QuestionDeleteEditor({\n        locals: res.locals as any,\n        questions: res.locals.question,\n      });\n      const serverJob = await editor.prepareServerJob();\n      try {\n        await editor.executeWithServerJob(serverJob);\n        res.redirect(res.locals.urlPrefix + '/course_admin/questions');\n      } catch {\n        res.redirect(res.locals.urlPrefix + '/edit_error/' + serverJob.jobSequenceId);\n      }\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (res.locals.question.course_id !== res.locals.course.id) {\n      throw new error.HttpStatusError(403, 'Access denied');\n    }\n    // Construct the path of the question test route. We'll do this based on\n    // `originalUrl` so that this router doesn't have to be aware of where it's\n    // mounted.\n    const host = getCanonicalHost(req);\n    let questionTestPath = new URL(req.originalUrl, host).pathname;\n    if (!questionTestPath.endsWith('/')) {\n      questionTestPath += '/';\n    }\n    questionTestPath += 'test';\n\n    // Generate a CSRF token for the test route. We can't use `res.locals.__csrf_token`\n    // here because this form will actually post to a different route, not `req.originalUrl`.\n    const questionTestCsrfToken = generateSignedToken(\n      { url: questionTestPath, authn_user_id: res.locals.authn_user.user_id },\n      config.secretKey,\n    );\n\n    let questionGHLink: string | null = null;\n    if (res.locals.course.example_course) {\n      // The example course is not found at the root of its repository, so its path is hardcoded\n      questionGHLink = `https://github.com/PrairieLearn/PrairieLearn/tree/master/exampleCourse/questions/${res.locals.question.qid}`;\n    } else if (res.locals.course.repository) {\n      const githubPrefix = httpPrefixForCourseRepo(res.locals.course.repository);\n      if (githubPrefix) {\n        questionGHLink = `${githubPrefix}/tree/${res.locals.course.branch}/questions/${res.locals.question.qid}`;\n      }\n    }\n\n    const qids = await sqldb.queryRows(sql.qids, { course_id: res.locals.course.id }, z.string());\n\n    const assessmentsWithQuestion = await sqldb.queryRows(\n      sql.select_assessments_with_question_for_display,\n      { question_id: res.locals.question.id },\n      SelectedAssessmentsSchema,\n    );\n\n    const courseTopics = await selectTopicsByCourseId(res.locals.course.id);\n    const courseTags = await selectTagsByCourseId(res.locals.course.id);\n\n    const sharingEnabled = await features.enabledFromLocals('question-sharing', res.locals);\n\n    let sharingSetsIn;\n    if (sharingEnabled) {\n      const result = await sqldb.queryRows(\n        sql.select_sharing_sets,\n        {\n          question_id: res.locals.question.id,\n          course_id: res.locals.course.id,\n        },\n        SharingSetRowSchema,\n      );\n      sharingSetsIn = result.filter((row) => row.in_set);\n    }\n    const editableCourses = await selectCoursesWithEditAccess({\n      user_id: res.locals.user.user_id,\n      is_administrator: res.locals.is_administrator,\n    });\n    const infoPath = path.join('questions', res.locals.question.qid, 'info.json');\n    const fullInfoPath = path.join(res.locals.course.path, infoPath);\n    const questionInfoExists = await fs.pathExists(fullInfoPath);\n\n    let origHash = '';\n    if (questionInfoExists) {\n      origHash = sha256(b64EncodeUnicode(await fs.readFile(fullInfoPath, 'utf8'))).toString();\n    }\n\n    const canEdit =\n      res.locals.authz_data.has_course_permission_edit && !res.locals.course.example_course;\n\n    res.send(\n      InstructorQuestionSettings({\n        resLocals: res.locals,\n        questionTestPath,\n        questionTestCsrfToken,\n        questionGHLink,\n        qids,\n        assessmentsWithQuestion,\n        sharingEnabled,\n        sharingSetsIn,\n        editableCourses,\n        infoPath,\n        origHash,\n        canEdit,\n        courseTopics,\n        courseTags,\n      }),\n    );\n  }),\n);\n\nexport default router;\n"]}