{"version":3,"file":"instructorRequestCourse.js","sourceRoot":"","sources":["../../../src/pages/instructorRequestCourse/instructorRequestCourse.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport { flash } from '@prairielearn/flash';\nimport { logger } from '@prairielearn/logger';\nimport { loadSqlEquiv, queryRow, queryRows } from '@prairielearn/postgres';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport { Lti13Claim } from '../../ee/lib/lti13.js';\nimport { config } from '../../lib/config.js';\nimport { IdSchema } from '../../lib/db-types.js';\nimport * as github from '../../lib/github.js';\nimport { isEnterprise } from '../../lib/license.js';\nimport * as opsbot from '../../lib/opsbot.js';\n\nimport {\n  CourseRequestRowSchema,\n  type Lti13CourseRequestInput,\n  RequestCourse,\n} from './instructorRequestCourse.html.js';\n\nconst router = express.Router();\nconst sql = loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const rows = await queryRows(\n      sql.get_requests,\n      { user_id: res.locals.authn_user.user_id },\n      CourseRequestRowSchema,\n    );\n\n    let lti13Info: Lti13CourseRequestInput = null;\n    if (isEnterprise() && 'lti13_claims' in req.session) {\n      try {\n        const ltiClaim = new Lti13Claim(req);\n\n        lti13Info = {\n          'cr-firstname': ltiClaim.get('given_name') ?? '',\n          'cr-lastname': ltiClaim.get('family_name') ?? '',\n          'cr-email': ltiClaim.get('email') ?? '',\n          'cr-shortname':\n            ltiClaim.get(['https://purl.imsglobal.org/spec/lti/claim/context', 'label']) ?? '',\n          'cr-title':\n            ltiClaim.get(['https://purl.imsglobal.org/spec/lti/claim/context', 'title']) ?? '',\n          'cr-institution': res.locals.authn_institution.long_name ?? '',\n        };\n      } catch {\n        // If LTI information expired or otherwise errors, don't error here.\n        // Continue on like there isn't LTI 1.3 information.\n        lti13Info = null;\n      }\n    }\n\n    res.send(RequestCourse({ rows, lti13Info, resLocals: res.locals }));\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    const short_name = req.body['cr-shortname'].toUpperCase() || '';\n    const title = req.body['cr-title'] || '';\n    const github_user = req.body['cr-ghuser'] || null;\n    const first_name = req.body['cr-firstname'] || '';\n    const last_name = req.body['cr-lastname'] || '';\n    const work_email = req.body['cr-email'] || '';\n    const institution = req.body['cr-institution'] || '';\n    const referral_source_option = req.body['cr-referral-source'] || '';\n    const referral_source_other = req.body['cr-referral-source-other'] || '';\n    const referral_source =\n      referral_source_option === 'other' ? referral_source_other : referral_source_option;\n\n    let error = false;\n\n    if (!short_name.match(/[A-Z]+ [A-Z0-9]+/)) {\n      flash(\n        'error',\n        'The course rubric and number should be a series of letters, followed by a space, followed by a series of numbers and/or letters.',\n      );\n      error = true;\n    }\n    if (title.length < 1) {\n      flash('error', 'The course title should not be empty.');\n      error = true;\n    }\n    if (first_name.length < 1) {\n      flash('error', 'The first name should not be empty.');\n      error = true;\n    }\n    if (last_name.length < 1) {\n      flash('error', 'The last name should not be empty.');\n      error = true;\n    }\n    if (work_email.length < 1) {\n      flash('error', 'The work email should not be empty.');\n      error = true;\n    }\n    if (institution.length < 1) {\n      flash('error', 'The institution should not be empty.');\n      error = true;\n    }\n    if (referral_source.length < 1) {\n      flash('error', 'The referral source should not be empty.');\n      error = true;\n    }\n\n    const hasExistingCourseRequest = await queryRow(\n      sql.get_existing_course_requests,\n      {\n        user_id: res.locals.authn_user.user_id,\n        short_name,\n      },\n      z.boolean(),\n    );\n\n    if (hasExistingCourseRequest) {\n      flash('error', 'You already have a request for this course.');\n      error = true;\n    }\n\n    if (error) {\n      res.redirect(req.originalUrl);\n      return;\n    }\n\n    // Otherwise, insert the course request and send a Slack message.\n    const course_request_id = await queryRow(\n      sql.insert_course_request,\n      {\n        short_name,\n        title,\n        user_id: res.locals.authn_user.user_id,\n        github_user,\n        first_name,\n        last_name,\n        work_email,\n        institution,\n        referral_source,\n      },\n      IdSchema,\n    );\n\n    // Check if we can automatically approve and create the course.\n    const canAutoCreateCourse = await queryRow(\n      sql.can_auto_create_course,\n      {\n        user_id: res.locals.authn_user.user_id,\n      },\n      z.boolean(),\n    );\n\n    if (config.courseRequestAutoApprovalEnabled && canAutoCreateCourse) {\n      // Automatically fill in institution ID and display timezone from the user's other courses.\n      const existingSettingsResult = await queryRow(\n        sql.get_existing_owner_course_settings,\n        { user_id: res.locals.authn_user.user_id },\n        z.object({\n          institution_id: IdSchema,\n          display_timezone: z.string(),\n        }),\n      );\n      const repo_short_name = github.reponameFromShortname(short_name);\n      const repo_options = {\n        short_name,\n        title,\n        institution_id: existingSettingsResult.institution_id,\n        display_timezone: existingSettingsResult.display_timezone,\n        path: path.join(config.coursesRoot, repo_short_name),\n        repo_short_name,\n        github_user,\n        course_request_id,\n      };\n      await github.createCourseRepoJob(repo_options, res.locals.authn_user);\n\n      // Redirect on success so that refreshing doesn't create another request\n      res.redirect(req.originalUrl);\n\n      // Do this in the background once we've redirected the response.\n      try {\n        await opsbot.sendCourseRequestMessage(\n          '*Automatically creating course*\\n' +\n            `Course repo: ${repo_short_name}\\n` +\n            `Course rubric: ${short_name}\\n` +\n            `Course title: ${title}\\n` +\n            `Requested by: ${first_name} ${last_name} (${work_email})\\n` +\n            `Logged in as: ${res.locals.authn_user.name} (${res.locals.authn_user.uid})\\n` +\n            `GitHub username: ${github_user || 'not provided'}`,\n        );\n      } catch (err) {\n        logger.error('Error sending course request message to Slack', err);\n        Sentry.captureException(err);\n      }\n    } else {\n      // Not automatically created.\n      res.redirect(req.originalUrl);\n\n      // Do this in the background once we've redirected the response.\n      try {\n        await opsbot.sendCourseRequestMessage(\n          '*Incoming course request*\\n' +\n            `Course rubric: ${short_name}\\n` +\n            `Course title: ${title}\\n` +\n            `Requested by: ${first_name} ${last_name} (${work_email})\\n` +\n            `Logged in as: ${res.locals.authn_user.name} (${res.locals.authn_user.uid})\\n` +\n            `GitHub username: ${github_user || 'not provided'}`,\n        );\n      } catch (err) {\n        logger.error('Error sending course request message to Slack', err);\n        Sentry.captureException(err);\n      }\n    }\n  }),\n);\n\nexport default router;\n"]}