{"version":3,"file":"legacyQuestionText.js","sourceRoot":"","sources":["../../../src/pages/legacyQuestionText/legacyQuestionText.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAC9C,OAAO,KAAK,SAAS,MAAM,yBAAyB,CAAC;AAErD,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB,MAAM,CAAC,GAAG,CACR,YAAY,EACZ,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;IACrC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;IACjC,MAAM,QAAQ,GAAG,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC/C,MAAM,UAAU,GAAG,MAAM,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;IAE/D,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IAElE,MAAM,sBAAsB,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACtD,IAAI,EAAE,UAAmB;QACzB,UAAU,EAAE,EAAE;KACf,CAAC,CAAC,CAAC;IACJ,MAAM,YAAY,GAAmB;QACnC;YACE,IAAI,EAAE,UAAmB;YACzB,UAAU,EAAE,QAAQ,CAAC,EAAE;SACxB;KACF,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;IACjC,MAAM,MAAM,CAAC,0BAA0B,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;IAEjE,MAAM,EAAE,QAAQ,EAAE,iBAAiB,EAAE,GAAG,MAAM,SAAS,CAAC,gBAAgB,CACtE,QAAQ,EACR,QAAQ,CAAC,SAAS,EAClB,UAAU,EACV,QAAQ,CACT,CAAC;IAEF,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AACtD,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as chunks from '../../lib/chunks.js';\nimport * as filePaths from '../../lib/file-paths.js';\n\nconst router = Router();\n\nrouter.get(\n  '/:filename',\n  asyncHandler(async (req, res) => {\n    const question = res.locals.question;\n    const course = res.locals.course;\n    const filename = 'text/' + req.params.filename;\n    const coursePath = chunks.getRuntimeDirectoryForCourse(course);\n\n    const questionIds = await chunks.getTemplateQuestionIds(question);\n\n    const templateQuestionChunks = questionIds.map((id) => ({\n      type: 'question' as const,\n      questionId: id,\n    }));\n    const chunksToLoad: chunks.Chunk[] = [\n      {\n        type: 'question' as const,\n        questionId: question.id,\n      },\n    ].concat(templateQuestionChunks);\n    await chunks.ensureChunksForCourseAsync(course.id, chunksToLoad);\n\n    const { rootPath, effectiveFilename } = await filePaths.questionFilePath(\n      filename,\n      question.directory,\n      coursePath,\n      question,\n    );\n\n    res.sendFile(effectiveFilename, { root: rootPath });\n  }),\n);\n\nexport default router;\n"]}