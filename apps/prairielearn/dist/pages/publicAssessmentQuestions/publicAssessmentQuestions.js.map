{"version":3,"file":"publicAssessmentQuestions.js","sourceRoot":"","sources":["../../../src/pages/publicAssessmentQuestions/publicAssessmentQuestions.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,aAAa,CAAC;AAEjC,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAE7C,OAAO,EAAE,yBAAyB,EAAE,MAAM,qCAAqC,CAAC;AAChF,OAAO,EAAE,uBAAuB,EAAE,MAAM,gCAAgC,CAAC;AACzE,OAAO,EAAE,oBAAoB,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAC5F,OAAO,EAAE,8BAA8B,EAAE,MAAM,wBAAwB,CAAC;AAExE,OAAO,EAAE,yBAAyB,EAAE,MAAM,qCAAqC,CAAC;AAEhF,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAErD,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;IAC/C,MAAM,kBAAkB,GAAG,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC;IACzD,MAAM,kBAAkB,GAAG,MAAM,wBAAwB,CAAC,aAAa,CAAC,CAAC;IACzE,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,8BAA8B,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC;IACnF,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;IAC3B,MAAM,UAAU,GAAG,MAAM,oBAAoB,CAAC,aAAa,CAAC,CAAC;IAC7D,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;IAEnC,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;IACrC,MAAM,cAAc,GAAG,MAAM,uBAAuB,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAEnF,MAAM,SAAS,GAAG,MAAM,yBAAyB,CAAC,aAAa,CAAC,CAAC;IAEjE,oCAAoC;IACpC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;QACjC,QAAQ,CAAC,iBAAiB;YACxB,QAAQ,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;IAC/F,CAAC;IAED,GAAG,CAAC,IAAI,CACN,yBAAyB,CAAC;QACxB,SAAS,EAAE,GAAG,CAAC,MAAM;QACrB,UAAU;QACV,cAAc;QACd,MAAM;QACN,kBAAkB;QAClB,SAAS;KACV,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import assert from 'node:assert';\n\nimport * as express from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\n\nimport { selectAssessmentQuestions } from '../../models/assessment-question.js';\nimport { selectAssessmentSetById } from '../../models/assessment-set.js';\nimport { selectAssessmentById, selectAssessmentIsPublic } from '../../models/assessment.js';\nimport { selectCourseByCourseInstanceId } from '../../models/course.js';\n\nimport { PublicAssessmentQuestions } from './publicAssessmentQuestions.html.js';\n\nconst router = express.Router({ mergeParams: true });\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const assessment_id = req.params.assessment_id;\n    const course_instance_id = req.params.course_instance_id;\n    const isAssessmentPublic = await selectAssessmentIsPublic(assessment_id);\n    if (!isAssessmentPublic) {\n      throw new error.HttpStatusError(404, 'Not Found');\n    }\n\n    const course = await selectCourseByCourseInstanceId(course_instance_id.toString());\n    res.locals.course = course;\n    const assessment = await selectAssessmentById(assessment_id);\n    res.locals.assessment = assessment;\n\n    assert(assessment.assessment_set_id);\n    const assessment_set = await selectAssessmentSetById(assessment.assessment_set_id);\n\n    const questions = await selectAssessmentQuestions(assessment_id);\n\n    // Filter out non-public assessments\n    for (const question of questions) {\n      question.other_assessments =\n        question.other_assessments?.filter((assessment) => assessment.share_source_publicly) ?? [];\n    }\n\n    res.send(\n      PublicAssessmentQuestions({\n        resLocals: res.locals,\n        assessment,\n        assessment_set,\n        course,\n        course_instance_id,\n        questions,\n      }),\n    );\n  }),\n);\n\nexport default router;\n"]}