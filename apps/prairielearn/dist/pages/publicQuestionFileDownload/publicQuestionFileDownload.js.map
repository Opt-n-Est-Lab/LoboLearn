{"version":3,"file":"publicQuestionFileDownload.js","sourceRoot":"","sources":["../../../src/pages/publicQuestionFileDownload/publicQuestionFileDownload.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAE7C,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EAAE,kBAAkB,EAAE,MAAM,0BAA0B,CAAC;AAE9D,MAAM,MAAM,GAAG,MAAM,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAE7C,KAAK,UAAU,SAAS,CAAC,GAAG,EAAE,GAAG;IAC/B,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC1D,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAClD,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACjE,GAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAEvE,IACE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,qBAAqB;QAC1C,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAC9D,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACpD,CAAC;AACH,CAAC;AAED,MAAM,CAAC,GAAG,CACR,IAAI,EACJ,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1B,sFAAsF;IACtF,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IAEpC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI;QAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACxD,IAAI,GAAG,CAAC,KAAK,CAAC,UAAU;QAAE,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1E,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;AAChE,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport * as error from '@prairielearn/error';\n\nimport { UserSchema } from '../../lib/db-types.js';\nimport { idsEqual } from '../../lib/id.js';\nimport { getPaths } from '../../lib/instructorFiles.js';\nimport { selectCourseById } from '../../models/course.js';\nimport { selectQuestionById } from '../../models/question.js';\n\nconst router = Router({ mergeParams: true });\n\nasync function setLocals(req, res) {\n  res.locals.user = UserSchema.parse(res.locals.authn_user);\n  res.locals.authz_data = { user: res.locals.user };\n  res.locals.course = await selectCourseById(req.params.course_id);\n  res.locals.question = await selectQuestionById(req.params.question_id);\n\n  if (\n    !res.locals.question.share_source_publicly ||\n    !idsEqual(res.locals.question.course_id, res.locals.course.id)\n  ) {\n    throw new error.HttpStatusError(404, 'Not Found');\n  }\n}\n\nrouter.get(\n  '/*',\n  asyncHandler(async (req, res) => {\n    await setLocals(req, res);\n    // Calling this only to catch illegal paths (e.g., working path outside question path)\n    getPaths(req.params[0], res.locals);\n\n    if (req.query.type) res.type(req.query.type.toString());\n    if (req.query.attachment) res.attachment(req.query.attachment.toString());\n    res.sendFile(req.params[0], { root: res.locals.course.path });\n  }),\n);\n\nexport default router;\n"]}