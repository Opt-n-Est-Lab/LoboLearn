{"version":3,"file":"publicQuestionPreview.js","sourceRoot":"","sources":["../../../src/pages/publicQuestionPreview/publicQuestionPreview.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { z } from 'zod';\n\nimport * as error from '@prairielearn/error';\n\nimport { setQuestionCopyTargets } from '../../lib/copy-question.js';\nimport { IdSchema, UserSchema } from '../../lib/db-types.js';\nimport { features } from '../../lib/features/index.js';\nimport {\n  getAndRenderVariant,\n  renderPanelsForSubmission,\n  setRendererHeader,\n} from '../../lib/question-render.js';\nimport { processSubmission } from '../../lib/question-submission.js';\nimport { logPageView } from '../../middlewares/logPageView.js';\nimport { selectCourseById } from '../../models/course.js';\nimport { selectQuestionById } from '../../models/question.js';\nimport { selectAndAuthzVariant } from '../../models/variant.js';\n\nimport { PublicQuestionPreview } from './publicQuestionPreview.html.js';\n\nconst router = Router({ mergeParams: true });\n\nasync function setLocals(req, res) {\n  res.locals.user = UserSchema.parse(res.locals.authn_user);\n  res.locals.authz_data = { user: res.locals.user };\n  res.locals.course = await selectCourseById(req.params.course_id);\n  res.locals.question = await selectQuestionById(req.params.question_id);\n\n  const disablePublicWorkspaces = await features.enabledFromLocals(\n    'disable-public-workspaces',\n    res.locals,\n  );\n\n  if (res.locals.question.workspace_image && disablePublicWorkspaces) {\n    throw new error.HttpStatusError(403, 'Access denied');\n  }\n\n  if (\n    !(res.locals.question.share_publicly || res.locals.question.share_source_publicly) ||\n    res.locals.course.id !== res.locals.question.course_id\n  ) {\n    throw new error.HttpStatusError(404, 'Not Found');\n  }\n}\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    await setLocals(req, res);\n    if (req.body.__action === 'grade' || req.body.__action === 'save') {\n      const variant_id = await processSubmission(req, res, { publicQuestionPreview: true });\n      res.redirect(\n        `${res.locals.urlPrefix}/question/${res.locals.question.id}/preview/?variant_id=${variant_id}`,\n      );\n    } else if (req.body.__action === 'report_issue') {\n      // we currently don't report issues for public facing previews\n      res.redirect(req.originalUrl);\n    } else {\n      throw new error.HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nrouter.get(\n  '/variant/:unsafe_variant_id(\\\\d+)/submission/:unsafe_submission_id(\\\\d+)',\n  asyncHandler(async (req, res) => {\n    await setLocals(req, res);\n\n    const variant = await selectAndAuthzVariant({\n      unsafe_variant_id: req.params.unsafe_variant_id,\n      variant_course: res.locals.course,\n      question_id: res.locals.question.id,\n      authz_data: res.locals.authz_data,\n      authn_user: res.locals.authn_user,\n      user: res.locals.user,\n      is_administrator: res.locals.is_administrator,\n      publicQuestionPreview: true,\n    });\n\n    const panels = await renderPanelsForSubmission({\n      unsafe_submission_id: req.params.unsafe_submission_id,\n      question: res.locals.question,\n      instance_question: null,\n      variant,\n      user: res.locals.user,\n      urlPrefix: res.locals.urlPrefix,\n      questionContext: 'public',\n      // This is only used by score panels, which are not rendered in this context.\n      authorizedEdit: false,\n      // Score panels are never rendered on the public question preview page.\n      renderScorePanels: false,\n      // Group role permissions are not used in this context.\n      groupRolePermissions: null,\n    });\n    res.json(panels);\n  }),\n);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    await setLocals(req, res);\n    const variant_seed = req.query.variant_seed ? z.string().parse(req.query.variant_seed) : null;\n    const variant_id = req.query.variant_id ? IdSchema.parse(req.query.variant_id) : null;\n    await getAndRenderVariant(variant_id, variant_seed, res.locals as any, {\n      publicQuestionPreview: true,\n    });\n    await logPageView('publicQuestionPreview', req, res);\n    await setQuestionCopyTargets(res);\n    setRendererHeader(res);\n    res.send(PublicQuestionPreview({ resLocals: res.locals }));\n  }),\n);\n\nexport default router;\n"]}