{"version":3,"file":"syncHelpers.js","sourceRoot":"","sources":["../../../src/pages/shared/syncHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ECR,\n  ECRClient,\n  RepositoryAlreadyExistsException,\n  RepositoryNotFoundException,\n} from '@aws-sdk/client-ecr';\nimport * as async from 'async';\nimport Docker from 'dockerode';\n\nimport { type DockerAuth, DockerName, setupDockerAuth } from '@prairielearn/docker-utils';\nimport * as Sentry from '@prairielearn/sentry';\n\nimport { makeAwsClientConfig } from '../../lib/aws.js';\nimport { config } from '../../lib/config.js';\nimport { pullAndUpdateCourse } from '../../lib/course.js';\nimport { type ServerJob, createServerJob } from '../../lib/server-jobs.js';\n\nconst docker = new Docker();\n\n/**\n * @param locals res.locals\n * @returns The ID of the job sequence created for this process\n */\nexport async function pullAndUpdate(locals: Record<string, any>): Promise<string> {\n  const { jobSequenceId } = await pullAndUpdateCourse({\n    courseId: locals.course.id,\n    userId: locals.user.user_id,\n    authnUserId: locals.authz_data.authn_user.user_id,\n    ...locals.course,\n  });\n  return jobSequenceId;\n}\n\n/**\n * @param locals res.locals\n * @returns The ID of the job sequence created for this process\n */\nexport async function gitStatus(locals: Record<string, any>): Promise<string> {\n  const serverJob = await createServerJob({\n    courseId: locals.course.id,\n    userId: locals.user.user_id,\n    authnUserId: locals.authz_data.authn_user.user_id,\n    type: 'git_status',\n    description: 'Show server git status',\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    job.info('Describe current git HEAD');\n    await job.exec('git', ['show', '--format=fuller', '--quiet', 'HEAD'], {\n      cwd: locals.course.path,\n    });\n\n    job.info('List git history');\n    await job.exec(\n      'git',\n      ['log', '--all', '--graph', '--date=short', '--format=format:%h %cd%d %cn %s'],\n      {\n        cwd: locals.course.path,\n      },\n    );\n  });\n\n  return serverJob.jobSequenceId;\n}\n\nasync function ensureECRRepo(repo: string, job: ServerJob) {\n  const ecr = new ECR(makeAwsClientConfig());\n  job.info(`Describing repositories with name: ${repo}`);\n\n  try {\n    const data = await ecr.describeRepositories({ repositoryNames: [repo] });\n\n    if (data.repositories?.some((r) => r.repositoryName === repo)) {\n      // The repository already exists; there's nothing for us to do.\n      job.info('Repository found');\n      return;\n    }\n  } catch (err) {\n    if (err instanceof RepositoryNotFoundException) {\n      // Repository not found; this is expected.\n    } else {\n      // Something else went wrong; allow it to bubble up.\n      Sentry.captureException(err, { tags: { repository: repo } });\n      throw err;\n    }\n  }\n\n  job.info('Repository not found');\n  job.info(`Creating repository: ${repo}`);\n\n  try {\n    await ecr.createRepository({ repositoryName: repo });\n  } catch (err) {\n    if (err instanceof RepositoryAlreadyExistsException) {\n      // Someone else created the repository before we could; this is fine.\n    } else {\n      // Something else went wrong; allow it to bubble up.\n      Sentry.captureException(err, { tags: { repository: repo } });\n      throw err;\n    }\n  }\n\n  job.info('Successfully created repository');\n}\n\nfunction logProgressOutput(output: any, job: ServerJob, printedInfos: Set<string>, prefix: string) {\n  let info: string | null = null;\n  if (\n    'status' in output &&\n    'id' in output &&\n    'progressDetail' in output &&\n    output.progressDetail.total\n  ) {\n    info = `${output.status} ${output.id} (${output.progressDetail.total} bytes)`;\n  } else if ('status' in output && 'id' in output) {\n    info = `${output.status} ${output.id}`;\n  } else if ('status' in output) {\n    info = `${output.status}`;\n  }\n  if (info !== null && !printedInfos.has(info)) {\n    printedInfos.add(info);\n    job.info(prefix + info);\n  }\n}\n\nasync function pullAndPushToECR(image: string, dockerAuth: DockerAuth, job: ServerJob) {\n  const { cacheImageRegistry } = config;\n  if (!cacheImageRegistry) {\n    throw new Error('cacheImageRegistry not defined');\n  }\n\n  const repository = new DockerName(image);\n  job.info(`Pulling ${repository.getCombined()}`);\n  const pullStream = await docker.createImage({\n    fromImage: repository.getRepository(),\n    tag: repository.getTag() || 'latest',\n  });\n\n  await new Promise((resolve, reject) => {\n    const printedInfos = new Set<string>();\n    docker.modem.followProgress(\n      pullStream,\n      (err) => {\n        if (err) reject(err);\n        resolve(null);\n      },\n      (output) => {\n        logProgressOutput(output, job, printedInfos, 'Pull progress: ');\n      },\n    );\n  });\n\n  job.info('Pull complete');\n\n  // Find the image we just downloaded\n  const downloadedImage = repository.getCombined(true);\n  const localImage = docker.getImage(downloadedImage);\n\n  // Tag the image to add the new registry\n  repository.setRegistry(cacheImageRegistry);\n\n  const options = {\n    repo: repository.getCombined(),\n  };\n  job.info(`Tagging image: ${options.repo}`);\n  await localImage.tag(options);\n  job.info('Successfully tagged image');\n\n  const repositoryName = repository.getRepository();\n  job.info(`Ensuring repository exists: ${repositoryName}`);\n  await ensureECRRepo(repositoryName, job);\n  job.info('Successfully ensured repository exists');\n\n  // Create a new docker image instance with the new registry name\n  // localImage isn't specific enough to the ECR repo\n  const pushImageName = repository.getCombined();\n  const pushImage = docker.getImage(pushImageName);\n\n  job.info(`Pushing image: ${repository.getCombined()}`);\n  const pushStream = await pushImage.push({ authconfig: dockerAuth });\n\n  await new Promise((resolve, reject) => {\n    const printedInfos = new Set<string>();\n    docker.modem.followProgress(\n      pushStream,\n      (err) => {\n        if (err) reject(err);\n        resolve(null);\n      },\n      (output) => {\n        logProgressOutput(output, job, printedInfos, 'Push progress: ');\n      },\n    );\n  });\n\n  job.info('Push complete');\n}\n\n/**\n * @returns The ID of the job sequence created for this process\n */\n\nexport async function ecrUpdate(\n  images: { image: string }[],\n  locals: Record<string, any>,\n): Promise<string> {\n  if (!config.cacheImageRegistry) {\n    throw new Error('cacheImageRegistry not defined');\n  }\n\n  const ecr = new ECRClient(makeAwsClientConfig());\n  const auth = await setupDockerAuth(ecr);\n\n  const serverJob = await createServerJob({\n    courseId: locals.course.id,\n    userId: locals.user.user_id,\n    authnUserId: locals.authz_data.authn_user.user_id,\n    type: 'images_sync',\n    description: 'Sync Docker images from Docker Hub to PL registry',\n  });\n\n  serverJob.executeInBackground(async (job) => {\n    await async.eachOfSeries(images ?? [], async (image) => {\n      job.info(`Pull image from Docker Hub and push to PL registry: ${image.image}`);\n      await pullAndPushToECR(image.image, auth, job);\n    });\n  });\n\n  return serverJob.jobSequenceId;\n}\n"]}