{"version":3,"file":"studentAssessmentInstance.js","sourceRoot":"","sources":["../../../src/pages/studentAssessmentInstance/studentAssessmentInstance.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Request, type Response, Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { loadSqlEquiv, queryRow, queryRows } from '@prairielearn/postgres';\n\nimport * as assessment from '../../lib/assessment.js';\nimport { AssessmentInstanceSchema } from '../../lib/db-types.js';\nimport { deleteFile, uploadFile } from '../../lib/file-store.js';\nimport {\n  canUserAssignGroupRoles,\n  getGroupConfig,\n  getGroupInfo,\n  getQuestionGroupPermissions,\n  leaveGroup,\n  updateGroupRoles,\n} from '../../lib/groups.js';\nimport { idsEqual } from '../../lib/id.js';\nimport clientFingerprint from '../../middlewares/clientFingerprint.js';\nimport logPageView from '../../middlewares/logPageView.js';\nimport selectAndAuthzAssessmentInstance from '../../middlewares/selectAndAuthzAssessmentInstance.js';\nimport studentAssessmentAccess from '../../middlewares/studentAssessmentAccess.js';\nimport { selectVariantsByInstanceQuestion } from '../../models/variant.js';\n\nimport {\n  InstanceQuestionRowSchema,\n  StudentAssessmentInstance,\n} from './studentAssessmentInstance.html.js';\n\nconst router = Router({ mergeParams: true });\nconst sql = loadSqlEquiv(import.meta.url);\n\nrouter.use(selectAndAuthzAssessmentInstance);\nrouter.use(studentAssessmentAccess);\nrouter.use(clientFingerprint);\nrouter.use(logPageView('studentAssessmentInstance'));\n\nasync function ensureUpToDate(locals: Record<string, any>) {\n  const updated = await assessment.updateAssessmentInstance(\n    locals.assessment_instance.id,\n    locals.authn_user.user_id,\n  );\n  if (updated) {\n    // we updated the assessment_instance, so reload it\n    locals.assessment_instance = await queryRow(\n      sql.select_assessment_instance,\n      { assessment_instance_id: locals.assessment_instance.id },\n      AssessmentInstanceSchema,\n    );\n  }\n}\n\nasync function processFileUpload(req: Request, res: Response) {\n  if (!res.locals.assessment_instance.open) {\n    throw new HttpStatusError(403, 'Assessment is not open');\n  }\n  if (!res.locals.assessment.allow_personal_notes) {\n    throw new HttpStatusError(403, 'This assessment does not allow personal notes.');\n  }\n  if (!res.locals.authz_result.active) {\n    throw new HttpStatusError(403, 'This assessment is not accepting submissions at this time.');\n  }\n  if (!req.file) {\n    throw new HttpStatusError(400, 'Upload requested but no file provided');\n  }\n  await uploadFile({\n    display_filename: req.file.originalname,\n    contents: req.file.buffer,\n    type: 'student_upload',\n    assessment_id: res.locals.assessment.id,\n    assessment_instance_id: res.locals.assessment_instance.id,\n    instance_question_id: null,\n    user_id: res.locals.user.user_id,\n    authn_user_id: res.locals.authn_user.user_id,\n  });\n}\n\nasync function processTextUpload(req: Request, res: Response) {\n  if (!res.locals.assessment_instance.open) {\n    throw new HttpStatusError(403, 'Assessment is not open');\n  }\n  if (!res.locals.assessment.allow_personal_notes) {\n    throw new HttpStatusError(403, 'This assessment does not allow personal notes.');\n  }\n  if (!res.locals.authz_result.active) {\n    throw new HttpStatusError(403, 'This assessment is not accepting submissions at this time.');\n  }\n  await uploadFile({\n    display_filename: req.body.filename,\n    contents: Buffer.from(req.body.contents),\n    type: 'student_upload',\n    assessment_id: res.locals.assessment.id,\n    assessment_instance_id: res.locals.assessment_instance.id,\n    instance_question_id: null,\n    user_id: res.locals.user.user_id,\n    authn_user_id: res.locals.authn_user.user_id,\n  });\n}\n\nasync function processDeleteFile(req: Request, res: Response) {\n  if (!res.locals.assessment_instance.open) {\n    throw new HttpStatusError(403, 'Assessment is not open');\n  }\n  if (!res.locals.assessment.allow_personal_notes) {\n    throw new HttpStatusError(403, 'This assessment does not allow personal notes.');\n  }\n  if (!res.locals.authz_result.active) {\n    throw new HttpStatusError(403, 'This assessment is not accepting submissions at this time.');\n  }\n\n  // Check the requested file belongs to the current assessment instance\n  const validFiles = (res.locals.file_list ?? []).filter((file) =>\n    idsEqual(file.id, req.body.file_id),\n  );\n  if (validFiles.length === 0) {\n    throw new HttpStatusError(404, `No such file_id: ${req.body.file_id}`);\n  }\n  const file = validFiles[0];\n\n  if (file.type !== 'student_upload') {\n    throw new HttpStatusError(403, `Cannot delete file type ${file.type} for file_id=${file.id}`);\n  }\n\n  await deleteFile(file.id, res.locals.authn_user.user_id);\n}\n\nrouter.post(\n  '/',\n  asyncHandler(async function (req, res, next) {\n    if (\n      !res.locals.authz_result.authorized_edit &&\n      !res.locals.authz_data.has_course_instance_permission_edit\n    ) {\n      throw new HttpStatusError(403, 'Not authorized');\n    }\n    if (\n      !res.locals.authz_result.authorized_edit &&\n      ['attach_file', 'attach_text', 'delete_file', 'timeLimitFinish', 'leave_group'].includes(\n        req.body.__action,\n      )\n    ) {\n      throw new HttpStatusError(403, 'Action is only permitted to students, not staff');\n    }\n\n    if (req.body.__action === 'attach_file') {\n      await processFileUpload(req, res);\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'attach_text') {\n      await processTextUpload(req, res);\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'delete_file') {\n      await processDeleteFile(req, res);\n      res.redirect(req.originalUrl);\n    } else if (['grade', 'finish', 'timeLimitFinish'].includes(req.body.__action)) {\n      const overrideGradeRate = false;\n      let closeExam: boolean;\n      if (req.body.__action === 'grade') {\n        if (!res.locals.assessment.allow_real_time_grading) {\n          throw new HttpStatusError(403, 'Real-time grading is not allowed for this assessment');\n        }\n        closeExam = false;\n      } else if (req.body.__action === 'finish') {\n        closeExam = true;\n      } else if (req.body.__action === 'timeLimitFinish') {\n        // Only close if the timer expired due to time limit, not for access end\n        if (!res.locals.assessment_instance_time_limit_expired) {\n          return res.redirect(req.originalUrl);\n        }\n        closeExam = true;\n      } else {\n        throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n      }\n      const requireOpen = true;\n      await assessment.gradeAssessmentInstance(\n        res.locals.assessment_instance.id,\n        res.locals.user.user_id,\n        res.locals.authn_user.user_id,\n        requireOpen,\n        closeExam,\n        overrideGradeRate,\n        res.locals.client_fingerprint_id,\n      );\n      if (req.body.__action === 'timeLimitFinish') {\n        res.redirect(req.originalUrl + '?timeLimitExpired=true');\n      } else {\n        res.redirect(req.originalUrl);\n      }\n    } else if (req.body.__action === 'leave_group') {\n      if (!res.locals.authz_result.active) {\n        throw new HttpStatusError(400, 'Unauthorized request.');\n      }\n      await leaveGroup(\n        res.locals.assessment.id,\n        res.locals.user.user_id,\n        res.locals.authn_user.user_id,\n      );\n      res.redirect(\n        `/pl/course_instance/${res.locals.course_instance.id}/assessment/${res.locals.assessment.id}`,\n      );\n    } else if (req.body.__action === 'update_group_roles') {\n      await updateGroupRoles(\n        req.body,\n        res.locals.assessment.id,\n        res.locals.assessment_instance.group_id,\n        res.locals.user.user_id,\n        res.locals.authz_data.has_course_instance_permission_edit,\n        res.locals.authn_user.user_id,\n      );\n      res.redirect(req.originalUrl);\n    } else {\n      // The 'regenerate_instance' action is handled in the\n      // studentAssessmentAccess middleware, so it doesn't need to be handled\n      // here.\n      next(new HttpStatusError(400, `unknown __action: ${req.body.__action}`));\n    }\n  }),\n);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res, _next) => {\n    if (res.locals.assessment.type === 'Homework') {\n      await ensureUpToDate(res.locals);\n    }\n    const instance_question_rows = await queryRows(\n      sql.select_instance_questions,\n      {\n        assessment_instance_id: res.locals.assessment_instance.id,\n      },\n      InstanceQuestionRowSchema,\n    );\n    const allPreviousVariants = await selectVariantsByInstanceQuestion({\n      assessment_instance_id: res.locals.assessment_instance.id,\n    });\n    for (const instance_question of instance_question_rows) {\n      instance_question.previous_variants = allPreviousVariants.filter((variant) =>\n        idsEqual(variant.instance_question_id, instance_question.id),\n      );\n    }\n\n    res.locals.has_manual_grading_question = instance_question_rows?.some(\n      (q) => q.max_manual_points || q.manual_points || q.requires_manual_grading,\n    );\n    res.locals.has_auto_grading_question = instance_question_rows?.some(\n      (q) => q.max_auto_points || q.auto_points || !q.max_points,\n    );\n    const assessment_text_templated = assessment.renderText(\n      res.locals.assessment,\n      res.locals.urlPrefix,\n    );\n    res.locals.assessment_text_templated = assessment_text_templated;\n\n    const showTimeLimitExpiredModal = req.query.timeLimitExpired === 'true';\n\n    if (!res.locals.assessment.group_work) {\n      res.send(\n        StudentAssessmentInstance({\n          instance_question_rows,\n          showTimeLimitExpiredModal,\n          userCanDeleteAssessmentInstance: assessment.canDeleteAssessmentInstance(res.locals),\n          resLocals: res.locals,\n        }),\n      );\n      return;\n    }\n\n    // Get the group config info\n    const groupConfig = await getGroupConfig(res.locals.assessment.id);\n    const groupInfo = await getGroupInfo(res.locals.assessment_instance.group_id, groupConfig);\n    const userCanAssignRoles =\n      groupInfo != null &&\n      groupConfig.has_roles &&\n      (canUserAssignGroupRoles(groupInfo, res.locals.user.user_id) ||\n        res.locals.authz_data.has_course_instance_permission_edit);\n\n    if (groupConfig.has_roles) {\n      // Get the role permissions. If the authorized user has course instance\n      // permission, then role restrictions don't apply.\n      if (!res.locals.authz_data.has_course_instance_permission_view) {\n        for (const question of instance_question_rows) {\n          question.group_role_permissions = await getQuestionGroupPermissions(\n            question.id,\n            res.locals.assessment_instance.group_id,\n            res.locals.authz_data.user.user_id,\n          );\n        }\n      }\n    }\n\n    res.send(\n      StudentAssessmentInstance({\n        instance_question_rows,\n        showTimeLimitExpiredModal,\n        groupConfig,\n        groupInfo,\n        userCanAssignRoles,\n        userCanDeleteAssessmentInstance: assessment.canDeleteAssessmentInstance(res.locals),\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nexport default router;\n"]}