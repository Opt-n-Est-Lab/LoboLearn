{"version":3,"file":"studentGradebook.js","sourceRoot":"","sources":["../../../src/pages/studentGradebook/studentGradebook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAEvF,OAAO,EAAE,4BAA4B,EAAE,MAAM,4BAA4B,CAAC;AAC1E,OAAO,WAAW,MAAM,kCAAkC,CAAC;AAE3D,OAAO,EACL,gBAAgB,EAEhB,yBAAyB,GAC1B,MAAM,4BAA4B,CAAC;AAEpC,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1C,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB,SAAS,gBAAgB,CAAC,MAA2B;IACnD,OAAO,4BAA4B,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC;AAC/F,CAAC;AAED,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAE5C,MAAM,CAAC,GAAG,CACR,GAAG,EACH,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,IAAI,GAAG,MAAM,SAAS,CAC1B,GAAG,CAAC,2BAA2B,EAC/B;QACE,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;QACjD,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;QAChC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU;QACjC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ;KAC9B,EACD,yBAAyB,CAC1B,CAAC;IACF,GAAG,CAAC,IAAI,CACN,gBAAgB,CAAC;QACf,SAAS,EAAE,GAAG,CAAC,MAAM;QACrB,IAAI;QACJ,WAAW,EAAE,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC;KAC1C,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,GAAG,CACR,YAAY,EACZ,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,KAAK,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QACzD,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,qBAAqB,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,oBAAoB,CACvC,GAAG,CAAC,2BAA2B,EAC/B;QACE,kBAAkB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;QACjD,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;QAChC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU;QACjC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ;KAC9B,EACD,yBAAyB,CAC1B,CAAC;IAEF,MAAM,WAAW,GAAG,eAAe,CAAsB;QACvD,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,CAAC;QACvC,SAAS,CAAC,GAAG;YACX,OAAO;gBACL,GAAG,CAAC,KAAK;gBACT,GAAG,CAAC,sBAAsB;gBAC1B,GAAG,CAAC,4BAA4B,CAAC,CAAC,CAAC,GAAG,CAAC,8BAA8B,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;aACzF,CAAC;QACJ,CAAC;KACF,CAAC,CAAC;IAEH,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;IAC1C,GAAG,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IAC7C,MAAM,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;AACvD,CAAC,CAAC,CACH,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { pipeline } from 'node:stream/promises';\n\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\n\nimport { stringifyStream } from '@prairielearn/csv';\nimport { HttpStatusError } from '@prairielearn/error';\nimport { loadSqlEquiv, queryRows, queryValidatedCursor } from '@prairielearn/postgres';\n\nimport { courseInstanceFilenamePrefix } from '../../lib/sanitize-name.js';\nimport logPageView from '../../middlewares/logPageView.js';\n\nimport {\n  StudentGradebook,\n  type StudentGradebookRow,\n  StudentGradebookRowSchema,\n} from './studentGradebook.html.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\nconst router = Router();\n\nfunction buildCsvFilename(locals: Record<string, any>) {\n  return courseInstanceFilenamePrefix(locals.course_instance, locals.course) + 'gradebook.csv';\n}\n\nrouter.use(logPageView('studentGradebook'));\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const rows = await queryRows(\n      sql.select_assessment_instances,\n      {\n        course_instance_id: res.locals.course_instance.id,\n        user_id: res.locals.user.user_id,\n        authz_data: res.locals.authz_data,\n        req_date: res.locals.req_date,\n      },\n      StudentGradebookRowSchema,\n    );\n    res.send(\n      StudentGradebook({\n        resLocals: res.locals,\n        rows,\n        csvFilename: buildCsvFilename(res.locals),\n      }),\n    );\n  }),\n);\n\nrouter.get(\n  '/:filename',\n  asyncHandler(async (req, res) => {\n    if (req.params.filename !== buildCsvFilename(res.locals)) {\n      throw new HttpStatusError(404, `Unknown filename: ${req.params.filename}`);\n    }\n\n    const cursor = await queryValidatedCursor(\n      sql.select_assessment_instances,\n      {\n        course_instance_id: res.locals.course_instance.id,\n        user_id: res.locals.user.user_id,\n        authz_data: res.locals.authz_data,\n        req_date: res.locals.req_date,\n      },\n      StudentGradebookRowSchema,\n    );\n\n    const stringifier = stringifyStream<StudentGradebookRow>({\n      header: true,\n      columns: ['Assessment', 'Set', 'Score'],\n      transform(row) {\n        return [\n          row.title,\n          row.assessment_set_heading,\n          row.show_closed_assessment_score ? row.assessment_instance_score_perc?.toFixed(6) : null,\n        ];\n      },\n    });\n\n    res.setHeader('Content-Type', 'text/csv');\n    res.attachment(buildCsvFilename(res.locals));\n    await pipeline(cursor.stream(100), stringifier, res);\n  }),\n);\n\nexport default router;\n"]}