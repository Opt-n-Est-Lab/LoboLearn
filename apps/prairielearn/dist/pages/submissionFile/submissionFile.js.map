{"version":3,"file":"submissionFile.js","sourceRoot":"","sources":["../../../src/pages/submissionFile/submissionFile.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { isBinaryFile } from 'isbinaryfile';\nimport mime from 'mime';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { IdSchema, UserSchema } from '../../lib/db-types.js';\nimport { selectCourseById } from '../../models/course.js';\nimport { selectQuestionById } from '../../models/question.js';\nimport { selectAndAuthzVariant } from '../../models/variant.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst MEDIA_PREFIXES = ['image/', 'audio/', 'video/', 'application/pdf'];\n\n/**\n * Guesses the mime type for a file based on its name and contents.\n *\n * @param name The file's name\n * @param buffer The file's contents\n * @returns The guessed mime type\n */\nasync function guessMimeType(name: string, buffer: Buffer): Promise<string> {\n  const mimeType = mime.getType(name);\n  if (mimeType && MEDIA_PREFIXES.some((p) => mimeType.startsWith(p))) {\n    return mimeType;\n  }\n\n  const isBinary = await isBinaryFile(buffer);\n  return isBinary ? 'application/octet-stream' : 'text/plain';\n}\n\nexport default function (options = { publicEndpoint: false }) {\n  const router = Router({ mergeParams: true });\n\n  router.get(\n    '/*',\n    asyncHandler(async (req, res) => {\n      if (options.publicEndpoint) {\n        res.locals.course = await selectCourseById(req.params.course_id);\n        res.locals.question = await selectQuestionById(req.params.question_id);\n        res.locals.user = UserSchema.parse(res.locals.authn_user);\n\n        if (\n          !(res.locals.question.share_publicly || res.locals.question.share_source_publicly) ||\n          res.locals.course.id !== res.locals.question.course_id\n        ) {\n          res.sendStatus(404);\n          return;\n        }\n      }\n\n      const fileName = req.params[0];\n\n      const unsafe_variant_id = await sqldb.queryOptionalRow(\n        sql.select_variant_id_by_submission_id,\n        {\n          submission_id: req.params.unsafe_submission_id,\n        },\n        IdSchema,\n      );\n\n      if (!unsafe_variant_id) {\n        res.sendStatus(404);\n        return;\n      }\n\n      // This doesn't perform any authorization for the submission itself. We\n      // assume that anyone with access to the variant should be able to access\n      // its submitted files.\n      await selectAndAuthzVariant({\n        unsafe_variant_id,\n        variant_course: res.locals.course,\n        question_id: res.locals.question.id,\n        course_instance_id: res.locals.course_instance?.id,\n        instance_question_id: res.locals.instance_question?.id,\n        authz_data: res.locals.authz_data,\n        authn_user: res.locals.authn_user,\n        user: res.locals.user,\n        is_administrator: res.locals.is_administrator,\n        publicQuestionPreview: options.publicEndpoint,\n      });\n\n      const contents = await sqldb.queryOptionalRow(\n        sql.select_submission_file,\n        {\n          // We used the submission ID to get and authorize the variant, so the\n          // submission ID is now considered safe.\n          submission_id: req.params.unsafe_submission_id,\n          file_name: fileName,\n        },\n        z.string().nullable(),\n      );\n\n      if (!contents) {\n        res.sendStatus(404);\n        return;\n      }\n\n      const buffer = Buffer.from(contents, 'base64');\n\n      // To avoid having to do expensive content checks on the client, we'll do\n      // our best to guess a mime type for the file.\n      const mimeType = await guessMimeType(fileName, buffer);\n      res.setHeader('Content-Type', mimeType);\n\n      res.status(200).send(buffer);\n    }),\n  );\n  return router;\n}\n"]}