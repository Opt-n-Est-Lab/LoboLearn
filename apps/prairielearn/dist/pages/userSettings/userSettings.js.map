{"version":3,"file":"userSettings.js","sourceRoot":"","sources":["../../../src/pages/userSettings/userSettings.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from 'crypto';\n\nimport express from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { HttpStatusError } from '@prairielearn/error';\nimport { flash } from '@prairielearn/flash';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { getPurchasesForUser } from '../../ee/lib/billing/purchases.js';\nimport { InstitutionSchema, UserSchema } from '../../lib/db-types.js';\nimport { ipToMode } from '../../lib/exam-mode.js';\nimport { features } from '../../lib/features/index.js';\nimport { isEnterprise } from '../../lib/license.js';\n\nimport { AccessTokenSchema, UserSettings } from './userSettings.html.js';\n\nconst router = express.Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nrouter.get(\n  '/',\n  asyncHandler(async (req, res) => {\n    const authn_user = UserSchema.parse(res.locals.authn_user);\n    const authn_institution = InstitutionSchema.parse(res.locals.authn_institution);\n\n    const accessTokens = await sqldb.queryRows(\n      sql.select_access_tokens,\n      {\n        user_id: authn_user.user_id,\n      },\n      AccessTokenSchema,\n    );\n\n    // If the raw tokens are present for any of these hashes, include them\n    // in this response and then delete them from memory\n    const newAccessTokens: string[] = [];\n    accessTokens.forEach((accessToken) => {\n      if (accessToken.token) {\n        newAccessTokens.push(accessToken.token);\n      }\n    });\n\n    // Now that we've rendered these tokens, remove any tokens from the DB\n    if (newAccessTokens.length > 0) {\n      await sqldb.queryAsync(sql.clear_tokens_for_user, {\n        user_id: authn_user.user_id,\n      });\n    }\n\n    const purchases = isEnterprise() ? await getPurchasesForUser(authn_user.user_id) : [];\n\n    const { mode } = await ipToMode({\n      ip: req.ip,\n      date: res.locals.req_date,\n      authn_user_id: authn_user.user_id,\n    });\n\n    const showEnhancedNavigationToggle = await features.enabled('enhanced-navigation-user-toggle', {\n      user_id: authn_user.user_id,\n    });\n    const enhancedNavigationEnabled = await features.enabled('enhanced-navigation', {\n      user_id: authn_user.user_id,\n    });\n\n    res.send(\n      UserSettings({\n        authn_user,\n        authn_institution,\n        authn_provider_name: res.locals.authn_provider_name,\n        accessTokens,\n        newAccessTokens,\n        purchases,\n        isExamMode: mode !== 'Public',\n        showEnhancedNavigationToggle,\n        enhancedNavigationEnabled,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nrouter.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    if (req.body.__action === 'update_features') {\n      const context = { user_id: res.locals.authn_user.user_id };\n\n      if (await features.enabled('enhanced-navigation-user-toggle', context)) {\n        if (req.body.enhanced_navigation) {\n          await features.enable('enhanced-navigation', context);\n        } else {\n          await features.disable('enhanced-navigation', context);\n        }\n      }\n\n      flash('success', 'Features updated successfully.');\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'token_generate') {\n      const { mode } = await ipToMode({\n        ip: req.ip,\n        date: res.locals.req_date,\n        authn_user_id: res.locals.authn_user.user_id,\n      });\n      if (mode !== 'Public') {\n        throw new HttpStatusError(403, 'Cannot generate access tokens in exam mode.');\n      }\n\n      const name = req.body.token_name;\n      const token = uuidv4();\n      const token_hash = crypto.createHash('sha256').update(token, 'utf8').digest('hex');\n\n      await sqldb.queryAsync(sql.insert_access_token, {\n        user_id: res.locals.authn_user.user_id,\n        name,\n        // The token will only be persisted until the next page render.\n        // After that, we'll remove it from the database.\n        token,\n        token_hash,\n      });\n      res.redirect(req.originalUrl);\n    } else if (req.body.__action === 'token_delete') {\n      await sqldb.queryAsync(sql.delete_access_token, {\n        token_id: req.body.token_id,\n        user_id: res.locals.authn_user.user_id,\n      });\n      res.redirect(req.originalUrl);\n    } else {\n      throw new HttpStatusError(400, `unknown __action: ${req.body.__action}`);\n    }\n  }),\n);\n\nexport default router;\n"]}