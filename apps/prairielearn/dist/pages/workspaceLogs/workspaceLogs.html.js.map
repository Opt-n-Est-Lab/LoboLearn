{"version":3,"file":"workspaceLogs.html.js","sourceRoot":"","sources":["../../../src/pages/workspaceLogs/workspaceLogs.html.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport { html } from '@prairielearn/html';\n\nimport { HeadContents } from '../../components/HeadContents.html.js';\nimport { Navbar } from '../../components/Navbar.html.js';\nimport { WorkspaceLogSchema } from '../../lib/db-types.js';\n\nexport const WorkspaceLogRowSchema = WorkspaceLogSchema.extend({\n  date_formatted: z.string(),\n});\nexport type WorkspaceLogRow = z.infer<typeof WorkspaceLogRowSchema>;\n\nexport function WorkspaceLogs({\n  workspaceLogs,\n  resLocals,\n}: {\n  workspaceLogs: WorkspaceLogRow[];\n  resLocals: Record<string, any>;\n}) {\n  // Get the list of unique versions and the date at which they were created.\n  // These are ordered by date, so we can use the date of the first log for\n  // each version as the version's creation date.\n  const knownVersions = new Set();\n  const uniqueVersions: { version: string; date_formatted: string }[] = [];\n  workspaceLogs.forEach((log) => {\n    if (!knownVersions.has(log.version)) {\n      knownVersions.add(log.version);\n      uniqueVersions.push({\n        version: log.version,\n        date_formatted: log.date_formatted,\n      });\n    }\n  });\n\n  return html`\n    <!doctype html>\n    <html lang=\"en\">\n      <head>\n        ${HeadContents({ resLocals, pageTitle: 'Workspace logs' })}\n      </head>\n      <body>\n        ${Navbar({ resLocals, navbarType: 'plain' })}\n\n        <main id=\"content\" class=\"container\">\n          <h1 class=\"mb-4\">Workspace logs</h1>\n\n          <h2>Versions</h2>\n          <div class=\"table-responsive\">\n            <table class=\"table table-sm\" aria-label=\"Workspace versions\">\n              <thead>\n                <th>Version</th>\n                <th>Created</th>\n                <th>Actions</th>\n              </thead>\n              <tbody>\n                ${uniqueVersions.map((version) => {\n                  const logsUrl = `${resLocals.urlPrefix}/workspace/${resLocals.workspace_id}/logs/version/${version.version}`;\n                  return html`\n                    <tr>\n                      <td>${version.version}</td>\n                      <td>${version.date_formatted}</td>\n                      <td>\n                        <a href=\"${logsUrl}\"> View detailed logs </a>\n                      </td>\n                    </tr>\n                  `;\n                })}\n              </tbody>\n            </table>\n          </div>\n\n          <h2>History</h2>\n          ${WorkspaceLogsTable({ workspaceLogs })}\n        </main>\n      </body>\n    </html>\n  `.toString();\n}\n\nexport function WorkspaceVersionLogs({\n  workspaceLogs,\n  containerLogs,\n  containerLogsEnabled,\n  containerLogsExpired,\n  resLocals,\n}: {\n  workspaceLogs: WorkspaceLogRow[];\n  containerLogs: string | null;\n  containerLogsEnabled: boolean;\n  containerLogsExpired: boolean;\n  resLocals: Record<string, any>;\n}) {\n  return html`\n    <!doctype html>\n    <html lang=\"en\">\n      <head>\n        ${HeadContents({ resLocals, pageTitle: 'Workspace version logs' })}\n      </head>\n      <body>\n        ${Navbar({ resLocals, navbarType: 'plain' })}\n\n        <main id=\"content\" class=\"container mb-4\">\n          <h1 class=\"mb-4\">Workspace version logs</h1>\n\n          <h2>Container logs</h2>\n          ${containerLogs !== null && containerLogsEnabled && !containerLogsExpired\n            ? html`\n                <pre class=\"bg-dark rounded text-white p-3 mb-3\"><code>${containerLogs}</code></pre>\n              `\n            : html`\n                <div class=\"bg-dark py-5 px-2 mb-3 rounded text-white text-center font-monospace\">\n                  <div class=\"mb-2\">\n                    <i\n                      class=\"fa ${containerLogsEnabled && containerLogsExpired\n                        ? 'fa-calendar'\n                        : 'fa-ban'} fa-2xl\"\n                      aria-hidden=\"true\"\n                    ></i>\n                  </div>\n                  <div>\n                    ${containerLogsEnabled\n                      ? 'The container logs for this workspace have expired and are no longer available.'\n                      : 'Container logs are not available for this workspace.'}\n                  </div>\n                </div>\n              `}\n\n          <h2>History</h2>\n          ${WorkspaceLogsTable({ workspaceLogs, includeVersion: false })}\n        </main>\n      </body>\n    </html>\n  `.toString();\n}\n\nexport function WorkspaceLogsTable({\n  workspaceLogs,\n  includeVersion = true,\n}: {\n  workspaceLogs: WorkspaceLogRow[];\n  includeVersion?: boolean;\n}) {\n  return html`\n    <div class=\"table-responsive\">\n      <table class=\"table table-sm\" aria-label=\"Workspace logs\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Message</th>\n            <th>State</th>\n            ${includeVersion ? html`<th>Version</th>` : ''}\n          </tr>\n        </thead>\n\n        <tbody>\n          ${workspaceLogs.map((log) => {\n            return html`\n              <tr>\n                <td>${log.date_formatted}</td>\n                <td>${log.message}</td>\n                <td>${log.state}</td>\n                ${includeVersion ? html`<td>${log.version}</td>` : ''}\n              </tr>\n            `;\n          })}\n        </tbody>\n      </table>\n    </div>\n  `;\n}\n"]}