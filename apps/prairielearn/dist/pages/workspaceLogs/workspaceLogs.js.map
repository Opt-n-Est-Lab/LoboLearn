{"version":3,"file":"workspaceLogs.js","sourceRoot":"","sources":["../../../src/pages/workspaceLogs/workspaceLogs.ts"],"names":[],"mappings":"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","sourcesContent":["import { S3 } from '@aws-sdk/client-s3';\nimport { Router } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport fetch from 'node-fetch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { makeS3ClientConfig } from '../../lib/aws.js';\nimport { config } from '../../lib/config.js';\n\nimport {\n  type WorkspaceLogRow,\n  WorkspaceLogRowSchema,\n  WorkspaceLogs,\n  WorkspaceVersionLogs,\n} from './workspaceLogs.html.js';\n\nconst router = Router();\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\n/**\n * Given a list of workspace logs for a specific version sorted by date in\n * ascending order, checks if the logs are considered expired.\n */\nfunction areContainerLogsExpired(workspaceLogs: WorkspaceLogRow[]): boolean {\n  if (config.workspaceLogsExpirationDays === null) {\n    // Expiration is disabled.\n    return false;\n  }\n\n  if (workspaceLogs.length === 0) return false;\n  const firstLog = workspaceLogs[0];\n  // @ts-expect-error -- We need to mark `workspace_logs.date` as non-nullable.\n  return firstLog.date < config.workspaceLogsExpirationDays * 24 * 60 * 60 * 1000;\n}\n\nfunction areContainerLogsEnabled() {\n  return config.workspaceLogsS3Bucket !== null;\n}\n\n/**\n * Loads all the logs for a given workspace version.\n *\n * The logs for the current running version, if any, are fetched from the\n * workspace host directly. We also load all the logs for the given version\n * from S3. Together, this gives us all the logs for the given version.\n */\nasync function loadLogsForWorkspaceVersion(\n  workspaceId: string,\n  version: string | number,\n): Promise<string | null> {\n  // Safety check for TypeScript.\n  if (!config.workspaceLogsS3Bucket) return null;\n\n  // Get the current workspace version.\n  const workspaceRes = await sqldb.queryOneRowAsync(sql.select_workspace, {\n    workspace_id: workspaceId,\n    version,\n  });\n  const workspace = workspaceRes.rows[0];\n\n  const logParts: string[] = [];\n\n  // Load the logs from S3. When workspaces are rebooted, we write the logs to\n  // an object before shutting down the container. This means that we may have\n  // multiple objects for each container. Load all of them. The objects are keyed\n  // such that they are sorted by date, so we can just load them in order.\n  const s3Client = new S3(makeS3ClientConfig({ maxAttempts: 3 }));\n  const logItems = await s3Client.listObjectsV2({\n    Bucket: config.workspaceLogsS3Bucket,\n    Prefix: `${workspaceId}/${version}/`,\n    MaxKeys: 1000,\n  });\n\n  // Load all parts serially to avoid hitting S3 rate limits.\n  for (const item of logItems.Contents ?? []) {\n    // This should never happen, but the AWS SDK types annoyingly list this as\n    // possible undefined.\n    if (!item.Key) continue;\n\n    const res = await s3Client.getObject({\n      Bucket: config.workspaceLogsS3Bucket,\n      Key: item.Key,\n    });\n\n    const body = await res.Body?.transformToString();\n    if (body) {\n      logParts.push(body);\n    }\n  }\n\n  // If the current workspace version matches the requested version, we can\n  // reach out to the workspace host directly to get the remaining logs. Otherwise,\n  // they should have been flushed to S3 already.\n  if (\n    ['launching', 'running'].includes(workspace.state) &&\n    workspace.is_current_version &&\n    workspace.hostname\n  ) {\n    const res = await fetch(`http://${workspace.hostname}/`, {\n      method: 'POST',\n      body: JSON.stringify({ workspace_id: workspaceId, action: 'getLogs' }),\n      headers: { 'Content-Type': 'application/json' },\n      signal: AbortSignal.timeout(30_000),\n    });\n    if (res.ok) {\n      logParts.push(await res.text());\n    }\n  }\n\n  return logParts.join('');\n}\n\n// Only instructors and admins can access these routes. We don't need to check\n// if the instructor has access to the workspace (i.e., course instance student\n// data view permission, or access to a workspace owned by the user); that's\n// already been checked by the workspace authorization middleware.\nrouter.use((await import('../../middlewares/authzHasCoursePreviewOrInstanceView.js')).default);\n\n// Overview of workspace logs, including all state transitions and links to\n// logs for individual versions.\nrouter.get(\n  '/',\n  asyncHandler(async (_req, res, _next) => {\n    const workspaceLogs = await sqldb.queryRows(\n      sql.select_workspace_logs,\n      {\n        workspace_id: res.locals.workspace_id,\n        workspace_version: null,\n        display_timezone:\n          res.locals.course_instance?.display_timezone ?? res.locals.course.display_timezone,\n      },\n      WorkspaceLogRowSchema,\n    );\n    res.send(WorkspaceLogs({ workspaceLogs, resLocals: res.locals }));\n  }),\n);\n\n// All state transitions for a single workspace version, as well as the container\n// output that's been stored in S3.\nrouter.get(\n  '/version/:version',\n  asyncHandler(async (req, res, _next) => {\n    const workspaceLogs = await sqldb.queryRows(\n      sql.select_workspace_logs,\n      {\n        workspace_id: res.locals.workspace_id,\n        workspace_version: req.params.version,\n        display_timezone:\n          res.locals.course_instance?.display_timezone ?? res.locals.course.display_timezone,\n      },\n      WorkspaceLogRowSchema,\n    );\n    const containerLogsEnabled = areContainerLogsEnabled();\n    const containerLogsExpired = areContainerLogsExpired(workspaceLogs);\n\n    let containerLogs: string | null = null;\n    if (containerLogsEnabled && !containerLogsExpired) {\n      containerLogs = await loadLogsForWorkspaceVersion(\n        res.locals.workspace_id,\n        req.params.version,\n      );\n    }\n\n    res.send(\n      WorkspaceVersionLogs({\n        workspaceLogs,\n        containerLogs,\n        containerLogsEnabled,\n        containerLogsExpired,\n        resLocals: res.locals,\n      }),\n    );\n  }),\n);\n\nexport default router;\n"]}