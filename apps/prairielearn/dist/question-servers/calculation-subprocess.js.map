{"version":3,"file":"calculation-subprocess.js","sourceRoot":"","sources":["../../src/question-servers/calculation-subprocess.js"],"names":[],"mappings":"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","sourcesContent":["// @ts-check\nimport assert from 'node:assert';\nimport * as path from 'node:path';\n\nimport { contains } from '@prairielearn/path-utils';\n\nimport * as chunks from '../lib/chunks.js';\nimport { withCodeCaller } from '../lib/code-caller/index.js';\nimport { config } from '../lib/config.js';\nimport * as filePaths from '../lib/file-paths.js';\nimport { REPOSITORY_ROOT_PATH } from '../lib/paths.js';\n\n/** @typedef {import('../lib/chunks.js').Chunk} Chunk */\n/**\n * @template T\n * @typedef {import('./types.ts').QuestionServerReturnValue<T>} QuestionServerReturnValue<T>\n */\n\nasync function prepareChunksIfNeeded(question, course) {\n  const questionIds = await chunks.getTemplateQuestionIds(question);\n\n  /** @type {Chunk[]} */\n  const templateQuestionChunks = questionIds.map((id) => ({ type: 'question', questionId: id }));\n\n  /** @type {Chunk[]} */\n  const chunksToLoad = [\n    { type: 'question', questionId: question.id },\n    { type: 'clientFilesCourse' },\n    { type: 'serverFilesCourse' },\n    ...templateQuestionChunks,\n  ];\n\n  await chunks.ensureChunksForCourseAsync(course.id, chunksToLoad);\n}\n\n/**\n * @param {string} questionServerPath\n * @param {string} courseHostPath\n * @param {string} courseRuntimePath\n * @returns {string}\n */\nfunction getQuestionRuntimePath(questionServerPath, courseHostPath, courseRuntimePath) {\n  const questionServerType = contains(courseHostPath, questionServerPath) ? 'course' : 'core';\n\n  if (questionServerType === 'course') {\n    const questionServerPathWithinCourse = path.relative(courseHostPath, questionServerPath);\n    return path.join(courseRuntimePath, questionServerPathWithinCourse);\n  }\n\n  if (config.workersExecutionMode === 'native') {\n    return questionServerPath;\n  } else {\n    const questionServerPathWithinRepo = path.relative(REPOSITORY_ROOT_PATH, questionServerPath);\n\n    // This is hardcoded to use the `/PrairieLearn` directory in our container\n    // image, which is where the repository files will be located.\n    return path.join('/PrairieLearn', questionServerPathWithinRepo);\n  }\n}\n\n/**\n * @param {string} func\n * @param {import('../lib/db-types.js').Course} question_course\n * @param {import('../lib/db-types.js').Question} question\n * @param {any} inputData\n */\nasync function callFunction(func, question_course, question, inputData) {\n  assert(question.directory, 'Question directory is required');\n\n  await prepareChunksIfNeeded(question, question_course);\n\n  const courseHostPath = chunks.getRuntimeDirectoryForCourse(question_course);\n  const courseRuntimePath = config.workersExecutionMode === 'native' ? courseHostPath : '/course';\n\n  const { fullPath: questionServerPath } = await filePaths.questionFilePath(\n    'server.js',\n    question.directory,\n    courseHostPath,\n    question,\n  );\n\n  // `questionServerPath` may be one of two things:\n  //\n  // - A path to a file within the course directory\n  // - A path to a file in PrairieLearn's `v2-question-servers` directory\n  //\n  // We need to handle these differently.\n  const questionServerRuntimePath = getQuestionRuntimePath(\n    questionServerPath,\n    courseHostPath,\n    courseRuntimePath,\n  );\n\n  try {\n    return await withCodeCaller(question_course, async (codeCaller) => {\n      const res = await codeCaller.call('v2-question', null, questionServerRuntimePath, null, [\n        {\n          questionServerPath: questionServerRuntimePath,\n          func,\n          coursePath: courseRuntimePath,\n          question,\n          ...inputData,\n        },\n      ]);\n      // Note that `res` also contains an `output` property. For v3 questions,\n      // we'd create a course issue if `output` is non-empty. However, we didn't\n      // historically have a restriction where v2 questions couldn't write logs,\n      // so we won't impose the same restriction here.\n      return { data: res.result, courseIssues: [] };\n    });\n  } catch (err) {\n    err.fatal = true;\n    return { data: {}, courseIssues: [err] };\n  }\n}\n\n/**\n * @param {import('../lib/db-types.js').Question} question\n * @param {import('../lib/db-types.js').Course} course\n * @param {string} variant_seed\n */\nexport async function generate(question, course, variant_seed) {\n  return await callFunction('generate', course, question, { variant_seed });\n}\n\n/**\n *\n * @param {import('../lib/db-types.js').Submission} submission\n * @param {import('../lib/db-types.js').Variant} variant\n * @param {import('../lib/db-types.js').Question} question\n * @param {import('../lib/db-types.js').Course} question_course\n */\nexport async function grade(submission, variant, question, question_course) {\n  return await callFunction('grade', question_course, question, { submission, variant });\n}\n\n// The following functions don't do anything for v2 questions; they're just\n// here to satisfy the question server interface.\n\n/**\n * @param {import('./types.ts').RenderSelection} _renderSelection\n * @param {import('../lib/db-types.js').Variant} _variant\n * @param {import('../lib/db-types.js').Question} _question\n * @param {import('../lib/db-types.js').Submission} _submission\n * @param {import('../lib/db-types.js').Submission[]} submissions\n * @param {import('../lib/db-types.js').Course} _course\n * @param {Record<string, any>} _locals\n * @returns {QuestionServerReturnValue<import('./types.ts').RenderResultData>}\n */\nexport async function render(\n  _renderSelection,\n  _variant,\n  _question,\n  _submission,\n  submissions,\n  _course,\n  _locals,\n) {\n  const data = {\n    extraHeadersHtml: '',\n    questionHtml: '',\n    submissionHtmls: submissions.map(() => ''),\n    answerHtml: '',\n  };\n  return { courseIssues: [], data };\n}\n\n/**\n * @param {import('../lib/db-types.js').Question} _question\n * @param {import('../lib/db-types.js').Course} _course\n * @param {import('../lib/db-types.js').Variant} variant\n * @returns {QuestionServerReturnValue<import('./types.ts').PrepareResultData>}\n */\nexport async function prepare(_question, _course, variant) {\n  const data = {\n    params: variant.params ?? {},\n    true_answer: variant.true_answer ?? {},\n    options: variant.options ?? {},\n  };\n  return { courseIssues: [], data };\n}\n\n/**\n * @param {import('../lib/db-types.js').Submission} submission\n * @param {import('../lib/db-types.js').Variant} variant\n * @param {import('../lib/db-types.js').Question} _question\n * @param {import('../lib/db-types.js').Course} _course\n * @returns {QuestionServerReturnValue<import('./types.ts').ParseResultData>}\n */\nexport async function parse(submission, variant, _question, _course) {\n  const data = {\n    params: variant.params ?? {},\n    true_answer: variant.true_answer ?? {},\n    submitted_answer: submission.submitted_answer ?? {},\n    raw_submitted_answer: submission.raw_submitted_answer ?? {},\n    feedback: {},\n    format_errors: {},\n    gradable: true,\n  };\n  return { courseIssues: [], data };\n}\n"]}