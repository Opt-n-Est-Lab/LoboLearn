{"version":3,"file":"infoAssessment.js","sourceRoot":"","sources":["../../src/schemas/infoAssessment.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,CAAC,EAAE,MAAM,KAAK,CAAC;AAExC,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAEjD,SAAS,WAAW,CAAsB,MAAS;IACjD,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,EAAE;QAC7E,OAAO,EAAE,uDAAuD;KACjE,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC;KACjC,MAAM,CAAC;IACN,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,4DAA4D,CAAC;IACvF,OAAO,EAAE,CAAC;SACP,MAAM,EAAE;SACR,QAAQ,CAAC,qEAAqE,CAAC;SAC/E,QAAQ,EAAE;SACV,OAAO,CAAC,CAAC,CAAC;IACb,OAAO,EAAE,CAAC;SACP,MAAM,EAAE;SACR,QAAQ,CAAC,qEAAqE,CAAC;SAC/E,QAAQ,EAAE;IACb,cAAc,EAAE,CAAC;SACd,OAAO,EAAE;SACT,QAAQ,CAAC,mEAAmE,CAAC;SAC7E,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;CAClB,CAAC;KACD,QAAQ,CACP,0FAA0F,CAC3F,CAAC;AAKJ,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC;KAC5C,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,sCAAsC,CAAC,CAAC,QAAQ,EAAE;IAC5F,QAAQ,EAAE,CAAC;SACR,MAAM,EAAE;SACR,KAAK,CAAC,+EAA+E,CAAC;SACtF,QAAQ,CACP,uFAAuF,CACxF;SACA,QAAQ,EAAE;IACb,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC,QAAQ,EAAE;IAC9F,IAAI,EAAE,CAAC;SACJ,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SACjB,QAAQ,CACP,oFAAoF,CACrF;SACA,QAAQ,EAAE;IACb,MAAM,EAAE,CAAC;SACN,MAAM,EAAE;SACR,GAAG,EAAE;SACL,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CACP,6FAA6F,CAC9F;SACA,QAAQ,EAAE;IACb,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,iDAAiD,CAAC,CAAC,QAAQ,EAAE;IAC5F,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,+CAA+C,CAAC,CAAC,QAAQ,EAAE;IACxF,YAAY,EAAE,CAAC;SACZ,MAAM,EAAE;SACR,GAAG,EAAE;SACL,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CAAC,yEAAyE,CAAC;SACnF,QAAQ,EAAE;IACb,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,oDAAoD,CAAC,CAAC,QAAQ,EAAE;IAC9F,oBAAoB,EAAE,CAAC;SACpB,OAAO,EAAE;SACT,QAAQ,CAAC,sEAAsE,CAAC;SAChF,QAAQ,EAAE;SACV,OAAO,CAAC,IAAI,CAAC;IAChB,yBAAyB,EAAE,CAAC;SACzB,OAAO,EAAE;SACT,QAAQ,CACP,qIAAqI,CACtI;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,IAAI,CAAC;IAChB,MAAM,EAAE,CAAC;SACN,OAAO,EAAE;SACT,QAAQ,CACP,4IAA4I,CAC7I;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,IAAI,CAAC;CACjB,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CACP,4IAA4I,CAC7I,CAAC;AAIJ,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC;KACpC,MAAM,EAAE;KACR,GAAG,CAAC,CAAC,CAAC;KACN,QAAQ,CAAC,uBAAuB,CAAC;KACjC,OAAO,CAAC,CAAC,CAAC,CAAC;AAEd,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC;KAClC,KAAK,CAAC,sBAAsB,CAAC;KAC7B,GAAG,CAAC,CAAC,CAAC;KACN,QAAQ,CAAC,2BAA2B,CAAC,CAAC;AAEzC,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,sBAAsB,EAAE,oBAAoB,CAAC,CAAC,CAAC;AAExF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC;KAClC,MAAM,EAAE;KACR,QAAQ,CAAC,+CAA+C,CAAC,CAAC;AAE7D,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC;KACtC,OAAO,EAAE;KACT,OAAO,CAAC,KAAK,CAAC;KACd,QAAQ,CAAC,2EAA2E,CAAC,CAAC;AAEzF,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC;KACxC,MAAM,EAAE;KACR,GAAG,CAAC,CAAC,CAAC;KACN,GAAG,CAAC,GAAG,CAAC;KACR,QAAQ,CAAC,oEAAoE,CAAC,CAAC;AAElF,MAAM,wBAAwB,GAAG,CAAC,CAAC,MAAM,CAAC;IACxC,MAAM,EAAE,gBAAgB,CAAC,QAAQ,EAAE;IACnC,UAAU,EAAE,gBAAgB,CAAC,QAAQ,EAAE;IACvC,SAAS,EAAE,sBAAsB,CAAC,QAAQ,EAAE;IAC5C,aAAa,EAAE,sBAAsB,CAAC,QAAQ,EAAE;IAChD,YAAY,EAAE,sBAAsB,CAAC,QAAQ,EAAE;CAChD,CAAC,CAAC;AAIH,MAAM,CAAC,MAAM,6BAA6B,GAAG,wBAAwB,CAAC,MAAM,CAAC;IAC3E,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,EAAE,EAAE,oBAAoB;IACxB,cAAc,EAAE,wBAAwB,CAAC,QAAQ,EAAE;IACnD,eAAe,EAAE,CAAC;SACf,MAAM,EAAE;SACR,QAAQ,CAAC,8EAA8E,CAAC;SACxF,QAAQ,EAAE;SACV,OAAO,CAAC,CAAC,CAAC;IACb,gBAAgB,EAAE,0BAA0B,CAAC,QAAQ,EAAE;IACvD,gBAAgB,EAAE,CAAC;SAChB,MAAM,EAAE;SACR,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CACP,sFAAsF,CACvF;SACA,QAAQ,EAAE;CACd,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,sBAAsB,GAAG,wBAAwB,CAAC,MAAM,CAAC;IACpE,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,MAAM,EAAE,gBAAgB,CAAC,QAAQ,EAAE;IACnC,UAAU,EAAE,gBAAgB,CAAC,QAAQ,EAAE;IACvC,SAAS,EAAE,sBAAsB,CAAC,QAAQ,EAAE;IAC5C,aAAa,EAAE,sBAAsB,CAAC,QAAQ,EAAE;IAChD,YAAY,EAAE,sBAAsB,CAAC,QAAQ,EAAE;IAC/C,EAAE,EAAE,oBAAoB,CAAC,QAAQ,EAAE;IACnC,cAAc,EAAE,wBAAwB,CAAC,QAAQ,EAAE;IACnD,YAAY,EAAE,CAAC;SACZ,KAAK,CAAC,6BAA6B,CAAC;SACpC,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CAAC,gDAAgD,CAAC;SAC1D,QAAQ,EAAE;IACb,YAAY,EAAE,CAAC;SACZ,MAAM,EAAE;SACR,GAAG,EAAE;SACL,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CAAC,gDAAgD,CAAC;SAC1D,QAAQ,EAAE;SACV,OAAO,CAAC,CAAC,CAAC;IACb,eAAe,EAAE,CAAC;SACf,MAAM,EAAE;SACR,QAAQ,CAAC,8EAA8E,CAAC;SACxF,QAAQ,EAAE;SACV,OAAO,CAAC,CAAC,CAAC;IACb,gBAAgB,EAAE,0BAA0B,CAAC,QAAQ,EAAE;IACvD,gBAAgB,EAAE,CAAC;SAChB,MAAM,EAAE;SACR,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CACP,sFAAsF,CACvF;SACA,QAAQ,EAAE;IACb,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAC/B,QAAQ,CACP,8HAA8H,CAC/H;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,EAAE,CAAC;IACd,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAC7B,QAAQ,CACP,4HAA4H,CAC7H;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,EAAE,CAAC;CACf,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,CAAC,MAAM,CAAC;IAC/C,KAAK,EAAE,CAAC;SACL,MAAM,EAAE;SACR,QAAQ,CAAC,qFAAqF,CAAC;SAC/F,QAAQ,EAAE;IACb,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,2CAA2C;IAC3C,QAAQ,EAAE,iBAAiB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,2BAA2B,CAAC;IAC5E,SAAS,EAAE,CAAC;SACT,MAAM,EAAE;SACR,QAAQ,CACP,wHAAwH,CACzH;SACA,QAAQ,EAAE;IACb,YAAY,EAAE,CAAC;SACZ,MAAM,EAAE;SACR,GAAG,EAAE;SACL,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CAAC,+CAA+C,CAAC;SACzD,QAAQ,EAAE;IACb,aAAa,EAAE,CAAC;SACb,MAAM,EAAE;SACR,GAAG,EAAE;SACL,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CACP,8HAA8H,CAC/H;SACA,QAAQ,EAAE;IACb,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,iCAAiC,CAAC;IAC7F,gBAAgB,EAAE,0BAA0B,CAAC,QAAQ,EAAE;IACvD,gBAAgB,EAAE,CAAC;SAChB,MAAM,EAAE;SACR,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CACP,sFAAsF,CACvF;SACA,QAAQ,EAAE;IACb,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAC/B,QAAQ,CACP,2GAA2G,CAC5G;SACA,QAAQ,EAAE;IACb,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAC7B,QAAQ,CACP,yGAAyG,CAC1G;SACA,QAAQ,EAAE;CACd,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC;KAClC,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,IAAI,EAAE,CAAC;SACJ,MAAM,EAAE;SACR,KAAK,CACJ,IAAI,MAAM,CAAC,+EAA+E,CAAC,CAC5F;SACA,QAAQ,CAAC,8BAA8B,CAAC;IAC3C,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,yBAAyB,CAAC;IACtE,KAAK,EAAE,CAAC;SACL,MAAM,EAAE;SACR,QAAQ,CAAC,yEAAyE,CAAC;IACtF,GAAG,EAAE,CAAC;SACH,MAAM,EAAE;SACR,QAAQ,CAAC,8EAA8E,CAAC;IAC3F,MAAM,EAAE,CAAC;SACN,MAAM,EAAE;SACR,QAAQ,CAAC,uEAAuE,CAAC;IACpF,mBAAmB,EAAE,CAAC;SACnB,OAAO,EAAE;SACT,QAAQ,CAAC,qEAAqE,CAAC;SAC/E,QAAQ,EAAE;SACV,OAAO,CAAC,IAAI,CAAC;IAChB,gBAAgB,EAAE,CAAC;SAChB,OAAO,EAAE;SACT,QAAQ,CAAC,4EAA4E,CAAC;SACtF,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,gBAAgB,EAAE,CAAC;SAChB,OAAO,EAAE;SACT,QAAQ,CAAC,6EAA6E,CAAC;SACvF,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,WAAW,EAAE,CAAC;SACX,KAAK,CAAC,8BAA8B,CAAC;SACrC,QAAQ,CACP,+FAA+F,CAChG;SACA,QAAQ,EAAE;IACb,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,kDAAkD,CAAC,CAAC,QAAQ,EAAE;IACxF,SAAS,EAAE,CAAC;SACT,MAAM,EAAE;SACR,QAAQ,CACP,yFAAyF,CAC1F;SACA,QAAQ,EAAE;IACb,cAAc,EAAE,CAAC;SACd,MAAM,EAAE;SACR,QAAQ,CAAC,8EAA8E,CAAC;SACxF,QAAQ,EAAE;IACb,kBAAkB,EAAE,CAAC;SAClB,OAAO,EAAE;SACT,QAAQ,CAAC,4EAA4E,CAAC;SACtF,QAAQ,EAAE;IACb,SAAS,EAAE,CAAC;SACT,OAAO,EAAE;SACT,QAAQ,CAAC,6EAA6E,CAAC;SACvF,QAAQ,EAAE;SACV,OAAO,CAAC,IAAI,CAAC;IAChB,KAAK,EAAE,CAAC;SACL,KAAK,CAAC,wBAAwB,CAAC;SAC/B,QAAQ,CACP,uGAAuG,CACxG;SACA,QAAQ,EAAE;IACb,qBAAqB,EAAE,CAAC;SACrB,OAAO,EAAE;SACT,QAAQ,CACP,uFAAuF,CACxF;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,oBAAoB,EAAE,CAAC;SACpB,OAAO,EAAE;SACT,QAAQ,CACP,uGAAuG,CACxG;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,IAAI,CAAC;IAChB,gBAAgB,EAAE,CAAC;SAChB,OAAO,EAAE;SACT,QAAQ,CAAC,gFAAgF,CAAC;SAC1F,QAAQ,EAAE;SACV,OAAO,CAAC,IAAI,CAAC;IAChB,SAAS,EAAE,CAAC;SACT,OAAO,EAAE;SACT,QAAQ,CAAC,iDAAiD,CAAC;SAC3D,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,wCAAwC,CAAC,CAAC,QAAQ,EAAE;IACtF,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,wCAAwC,CAAC,CAAC,QAAQ,EAAE;IACtF,UAAU,EAAE,CAAC;SACV,KAAK,CAAC,mBAAmB,CAAC;SAC1B,QAAQ,CAAC,wCAAwC,CAAC;SAClD,QAAQ,EAAE;IACb,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAC/B,QAAQ,CACP,2GAA2G,CAC5G;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,EAAE,CAAC;IACd,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAC7B,QAAQ,CACP,yGAAyG,CAC1G;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,EAAE,CAAC;IACd,kBAAkB,EAAE,CAAC;SAClB,OAAO,EAAE;SACT,QAAQ,CAAC,qCAAqC,CAAC;SAC/C,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,gBAAgB,EAAE,CAAC;SAChB,OAAO,EAAE;SACT,QAAQ,CAAC,mCAAmC,CAAC;SAC7C,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,iBAAiB,EAAE,CAAC;SACjB,OAAO,EAAE;SACT,QAAQ,CAAC,oCAAoC,CAAC;SAC9C,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,gBAAgB,EAAE,0BAA0B,CAAC,QAAQ,EAAE;IACvD,gBAAgB,EAAE,CAAC;SAChB,MAAM,EAAE;SACR,GAAG,CAAC,CAAC,CAAC;SACN,QAAQ,CACP,sFAAsF,CACvF;SACA,QAAQ,EAAE;IACb,MAAM,EAAE,CAAC;SACN,MAAM,EAAE;SACR,QAAQ,CAAC,wEAAwE,CAAC;SAClF,QAAQ,EAAE;IACb,mBAAmB,EAAE,CAAC;SACnB,OAAO,EAAE;SACT,QAAQ,CAAC,2DAA2D,CAAC;SACrE,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;CAClB,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CAAC,uCAAuC,CAAC,CAAC","sourcesContent":["import { type ZodSchema, z } from 'zod';\n\nimport { CommentJsonSchema } from './comment.js';\n\nfunction uniqueArray<T extends ZodSchema>(schema: T) {\n  return z.array(schema).refine((items) => new Set(items).size === items.length, {\n    message: 'All items must be unique, no duplicate values allowed',\n  });\n}\n\nexport const GroupRoleJsonSchema = z\n  .object({\n    name: z.string().describe(\"The group role's name (i.e. Manager, Reflector, Recorder).\"),\n    minimum: z\n      .number()\n      .describe('The minimum number of users that should be in this role in a group.')\n      .optional()\n      .default(0),\n    maximum: z\n      .number()\n      .describe('The maximum number of users that should be in this role in a group.')\n      .optional(),\n    canAssignRoles: z\n      .boolean()\n      .describe(\"Whether users with this role can assign other users' group roles.\")\n      .optional()\n      .default(false),\n  })\n  .describe(\n    'A custom role for use in group assessments that allows control over certain permissions.',\n  );\n\nexport type GroupRoleJson = z.infer<typeof GroupRoleJsonSchema>;\nexport type GroupRoleJsonInput = z.input<typeof GroupRoleJsonSchema>;\n\nexport const AssessmentAccessRuleJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    mode: z.enum(['Public', 'Exam']).describe('The server mode required for access.').optional(),\n    examUuid: z\n      .string()\n      .regex(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/)\n      .describe(\n        'The PrairieTest exam UUID for which a student must be registered. Implies mode: Exam.',\n      )\n      .optional(),\n    role: z.enum(['Student', 'TA', 'Instructor']).describe('DEPRECATED -- do not use.').optional(),\n    uids: z\n      .array(z.string())\n      .describe(\n        \"A list of UIDs (like 'username@example.com'), one of which is required for access.\",\n      )\n      .optional(),\n    credit: z\n      .number()\n      .int()\n      .gte(0)\n      .describe(\n        'How much credit is awarded for doing the homework, as a percentage (100 means full credit).',\n      )\n      .optional(),\n    startDate: z.string().describe('The earliest date on which access is permitted.').optional(),\n    endDate: z.string().describe('The latest date on which access is permitted.').optional(),\n    timeLimitMin: z\n      .number()\n      .int()\n      .gte(0)\n      .describe('The time limit to complete the assessment, in minutes (only for Exams).')\n      .optional(),\n    password: z.string().describe('Password to begin the assessment (only for Exams).').optional(),\n    showClosedAssessment: z\n      .boolean()\n      .describe('Whether the student can view the assessment after it has been closed')\n      .optional()\n      .default(true),\n    showClosedAssessmentScore: z\n      .boolean()\n      .describe(\n        'Whether the student can view the assessment grade after it has been closed. Only works if showClosedAssessment is also set to false',\n      )\n      .optional()\n      .default(true),\n    active: z\n      .boolean()\n      .describe(\n        'Whether the student can create a new assessment instance and submit answers to questions. If set to false, the available credit must be 0.',\n      )\n      .optional()\n      .default(true),\n  })\n  .strict()\n  .describe(\n    'An access rule that permits people to access this assessment. All restrictions in the rule must be satisfied for the rule to allow access.',\n  );\n\nexport type AssessmentAccessRuleJson = z.infer<typeof AssessmentAccessRuleJsonSchema>;\n\nexport const PointsSingleJsonSchema = z\n  .number()\n  .gte(0)\n  .describe('A single point value.')\n  .default(0);\n\nexport const PointsListJsonSchema = z\n  .array(PointsSingleJsonSchema)\n  .min(1)\n  .describe('An array of point values.');\n\nexport const PointsJsonSchema = z.union([PointsSingleJsonSchema, PointsListJsonSchema]);\n\nexport const QuestionIdJsonSchema = z\n  .string()\n  .describe('Question ID (directory name of the question).');\n\nexport const ForceMaxPointsJsonSchema = z\n  .boolean()\n  .default(false)\n  .describe('Whether to force this question to be awarded maximum points on a regrade.');\n\nexport const AdvanceScorePercJsonSchema = z\n  .number()\n  .gte(0)\n  .lte(100)\n  .describe('Minimum score percentage to unlock access to subsequent questions.');\n\nconst QuestionPointsJsonSchema = z.object({\n  points: PointsJsonSchema.optional(),\n  autoPoints: PointsJsonSchema.optional(),\n  maxPoints: PointsSingleJsonSchema.optional(),\n  maxAutoPoints: PointsSingleJsonSchema.optional(),\n  manualPoints: PointsSingleJsonSchema.optional(),\n});\n\nexport type QuestionPointsJson = z.infer<typeof QuestionPointsJsonSchema>;\n\nexport const QuestionAlternativeJsonSchema = QuestionPointsJsonSchema.extend({\n  comment: CommentJsonSchema.optional(),\n  id: QuestionIdJsonSchema,\n  forceMaxPoints: ForceMaxPointsJsonSchema.optional(),\n  triesPerVariant: z\n    .number()\n    .describe('The maximum number of graded submissions allowed for each question instance.')\n    .optional()\n    .default(1),\n  advanceScorePerc: AdvanceScorePercJsonSchema.optional(),\n  gradeRateMinutes: z\n    .number()\n    .gte(0)\n    .describe(\n      'Minimum amount of time (in minutes) between graded submissions to the same question.',\n    )\n    .optional(),\n});\n\nexport const ZoneQuestionJsonSchema = QuestionPointsJsonSchema.extend({\n  comment: CommentJsonSchema.optional(),\n  points: PointsJsonSchema.optional(),\n  autoPoints: PointsJsonSchema.optional(),\n  maxPoints: PointsSingleJsonSchema.optional(),\n  maxAutoPoints: PointsSingleJsonSchema.optional(),\n  manualPoints: PointsSingleJsonSchema.optional(),\n  id: QuestionIdJsonSchema.optional(),\n  forceMaxPoints: ForceMaxPointsJsonSchema.optional(),\n  alternatives: z\n    .array(QuestionAlternativeJsonSchema)\n    .min(1)\n    .describe('Array of question alternatives to choose from.')\n    .optional(),\n  numberChoose: z\n    .number()\n    .int()\n    .gte(0)\n    .describe('Number of questions to choose from this group.')\n    .optional()\n    .default(1),\n  triesPerVariant: z\n    .number()\n    .describe('The maximum number of graded submissions allowed for each question instance.')\n    .optional()\n    .default(1),\n  advanceScorePerc: AdvanceScorePercJsonSchema.optional(),\n  gradeRateMinutes: z\n    .number()\n    .gte(0)\n    .describe(\n      'Minimum amount of time (in minutes) between graded submissions to the same question.',\n    )\n    .optional(),\n  canSubmit: uniqueArray(z.string())\n    .describe(\n      'A list of group role names matching those in groupRoles that can submit the question. Only applicable for group assessments.',\n    )\n    .optional()\n    .default([]),\n  canView: uniqueArray(z.string())\n    .describe(\n      'A list of group role names matching those in groupRoles that can view the question. Only applicable for group assessments.',\n    )\n    .optional()\n    .default([]),\n});\n\nexport const ZoneAssessmentJsonSchema = z.object({\n  title: z\n    .string()\n    .describe('Zone title, displayed to the students at the top of the question list for the zone.')\n    .optional(),\n  comment: CommentJsonSchema.optional(),\n  // Do we need to allow for additional keys?\n  comments: CommentJsonSchema.optional().describe('DEPRECATED -- do not use.'),\n  maxPoints: z\n    .number()\n    .describe(\n      'Only this many of the points that are awarded for answering questions in this zone will count toward the total points.',\n    )\n    .optional(),\n  numberChoose: z\n    .number()\n    .int()\n    .gte(0)\n    .describe('Number of questions to choose from this zone.')\n    .optional(),\n  bestQuestions: z\n    .number()\n    .int()\n    .gte(0)\n    .describe(\n      'Only this many of the questions in this zone, with the highest number of awarded points, will count toward the total points.',\n    )\n    .optional(),\n  questions: z.array(ZoneQuestionJsonSchema).min(1).describe('Array of questions in the zone.'),\n  advanceScorePerc: AdvanceScorePercJsonSchema.optional(),\n  gradeRateMinutes: z\n    .number()\n    .gte(0)\n    .describe(\n      'Minimum amount of time (in minutes) between graded submissions to the same question.',\n    )\n    .optional(),\n  canSubmit: uniqueArray(z.string())\n    .describe(\n      'A list of group role names that can submit questions in this zone. Only applicable for group assessments.',\n    )\n    .optional(),\n  canView: uniqueArray(z.string())\n    .describe(\n      'A list of group role names that can view questions in this zone. Only applicable for group assessments.',\n    )\n    .optional(),\n});\n\nexport const AssessmentJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    uuid: z\n      .string()\n      .regex(\n        new RegExp('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'),\n      )\n      .describe('Unique identifier (UUID v4).'),\n    type: z.enum(['Homework', 'Exam']).describe('Type of the assessment.'),\n    title: z\n      .string()\n      .describe(\"The title of the assessment (e.g., 'Derivatives and anti-derivatives').\"),\n    set: z\n      .string()\n      .describe(\"Which assessmentSet this one belongs to (e.g., 'Homework', 'Practice Quiz').\"),\n    number: z\n      .string()\n      .describe(\"The number of this assessment within the set (e.g., '1', '2R', '3B').\"),\n    allowIssueReporting: z\n      .boolean()\n      .describe('Whether to allow students to report issues for assessment questions')\n      .optional()\n      .default(true),\n    multipleInstance: z\n      .boolean()\n      .describe('Whether to allow students to create additional instances of the assessment')\n      .optional()\n      .default(false),\n    shuffleQuestions: z\n      .boolean()\n      .describe('Whether the questions will be shuffled in the student view of an assessment')\n      .optional()\n      .default(false),\n    allowAccess: z\n      .array(AssessmentAccessRuleJsonSchema)\n      .describe(\n        'List of access rules for the assessment. Access is permitted if any access rule is satisfied.',\n      )\n      .optional(),\n    text: z.string().describe('HTML text shown on the assessment overview page.').optional(),\n    maxPoints: z\n      .number()\n      .describe(\n        'The number of points that must be earned in this assessment to achieve a score of 100%.',\n      )\n      .optional(),\n    maxBonusPoints: z\n      .number()\n      .describe('The maximum number of additional points that can be earned beyond maxPoints.')\n      .optional(),\n    allowPersonalNotes: z\n      .boolean()\n      .describe('Whether students are allowed to upload personal notes for this assessment.')\n      .optional(),\n    autoClose: z\n      .boolean()\n      .describe('Whether to automatically close the assessment after a period of inactivity.')\n      .optional()\n      .default(true),\n    zones: z\n      .array(ZoneAssessmentJsonSchema)\n      .describe(\n        'Array of \"zones\" in the assessment, each containing questions that can be randomized within the zone.',\n      )\n      .optional(),\n    constantQuestionValue: z\n      .boolean()\n      .describe(\n        'Whether to keep the value of a question constant after a student solves it correctly.',\n      )\n      .optional()\n      .default(false),\n    allowRealTimeGrading: z\n      .boolean()\n      .describe(\n        'Removes the student \"Grade\" buttons to prevent real-time grading while the assessment is being taken.',\n      )\n      .optional()\n      .default(true),\n    requireHonorCode: z\n      .boolean()\n      .describe('Requires the student to accept an honor code before starting exam assessments.')\n      .optional()\n      .default(true),\n    groupWork: z\n      .boolean()\n      .describe('Whether the assessment will support group work.')\n      .optional()\n      .default(false),\n    groupMaxSize: z.number().describe('Maximum number of students in a group.').optional(),\n    groupMinSize: z.number().describe('Minimum number of students in a group.').optional(),\n    groupRoles: z\n      .array(GroupRoleJsonSchema)\n      .describe('Array of custom user roles in a group.')\n      .optional(),\n    canSubmit: uniqueArray(z.string())\n      .describe(\n        'A list of group role names that can submit questions in this zone. Only applicable for group assessments.',\n      )\n      .optional()\n      .default([]),\n    canView: uniqueArray(z.string())\n      .describe(\n        'A list of group role names that can view questions in this zone. Only applicable for group assessments.',\n      )\n      .optional()\n      .default([]),\n    studentGroupCreate: z\n      .boolean()\n      .describe('Whether students can create groups.')\n      .optional()\n      .default(false),\n    studentGroupJoin: z\n      .boolean()\n      .describe('Whether students can join groups.')\n      .optional()\n      .default(false),\n    studentGroupLeave: z\n      .boolean()\n      .describe('Whether students can leave groups.')\n      .optional()\n      .default(false),\n    advanceScorePerc: AdvanceScorePercJsonSchema.optional(),\n    gradeRateMinutes: z\n      .number()\n      .gte(0)\n      .describe(\n        'Minimum amount of time (in minutes) between graded submissions to the same question.',\n      )\n      .optional(),\n    module: z\n      .string()\n      .describe('Module that this assessment belongs to, as defined in infoCourse.json.')\n      .optional(),\n    shareSourcePublicly: z\n      .boolean()\n      .describe(\"If true, the assessment's source code is shared publicly.\")\n      .optional()\n      .default(false),\n  })\n  .strict()\n  .describe('Configuration data for an assessment.');\n\nexport type AssessmentJson = z.infer<typeof AssessmentJsonSchema>;\nexport type AssessmentJsonInput = z.input<typeof AssessmentJsonSchema>;\n"]}