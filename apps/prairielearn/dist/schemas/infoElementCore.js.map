{"version":3,"file":"infoElementCore.js","sourceRoot":"","sources":["../../src/schemas/infoElementCore.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAEjD,MAAM,oBAAoB,GAAG,CAAC;KAC3B,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,UAAU,EAAE,CAAC;SACV,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,6CAA6C,CAAC,CAAC;SACzE,QAAQ,CACP,wFAAwF,CACzF;SACA,QAAQ,EAAE;IACb,WAAW,EAAE,CAAC;SACX,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,4CAA4C,CAAC,CAAC;SACxE,QAAQ,CACP,yFAAyF,CAC1F;SACA,QAAQ,EAAE;IACb,iBAAiB,EAAE,CAAC;SACjB,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,uCAAuC,CAAC,CAAC;SACnE,QAAQ,CAAC,yDAAyD,CAAC;SACnE,QAAQ,EAAE;IACb,kBAAkB,EAAE,CAAC;SAClB,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sCAAsC,CAAC,CAAC;SAClE,QAAQ,CAAC,0DAA0D,CAAC;SACpE,QAAQ,EAAE;IACb,aAAa,EAAE,CAAC;SACb,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,iDAAiD,CAAC,CAAC;SAC7E,QAAQ,CAAC,mEAAmE,CAAC;SAC7E,QAAQ,EAAE;IACb,cAAc,EAAE,CAAC;SACd,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,gDAAgD,CAAC,CAAC;SAC5E,QAAQ,CAAC,oEAAoE,CAAC;SAC9E,QAAQ,EAAE;CACd,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CAAC,yCAAyC,CAAC,CAAC;AAEvD,MAAM,2BAA2B,GAAG,CAAC;KAClC,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,kBAAkB,EAAE,CAAC;SAClB,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAClB,QAAQ,CAAC,0EAA0E,CAAC;SACpF,QAAQ,EAAE;IACb,cAAc,EAAE,CAAC;SACd,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAClB,QAAQ,CACP,oFAAoF,CACrF;SACA,QAAQ,EAAE;CACd,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CAAC,iDAAiD,CAAC,CAAC;AAE/D,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC;KACnC,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,4CAA4C,CAAC;IAC7E,YAAY,EAAE,oBAAoB,CAAC,QAAQ,EAAE;IAC7C,mBAAmB,EAAE,2BAA2B,CAAC,QAAQ,EAAE;IAC3D,eAAe,EAAE,CAAC;SACf,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,4DAA4D,CAAC,CAAC;SACxF,QAAQ,CAAC,8EAA8E,CAAC;SACxF,QAAQ,EAAE;CACd,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CAAC,6BAA6B,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { CommentJsonSchema } from './comment.js';\n\nconst DependencyJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    coreStyles: z\n      .array(z.string().describe('A .css file located in /public/stylesheets.'))\n      .describe(\n        '[DEPRECATED, DO NOT USE] The styles required by this element from /public/stylesheets.',\n      )\n      .optional(),\n    coreScripts: z\n      .array(z.string().describe('A .js file located in /public/javascripts.'))\n      .describe(\n        '[DEPRECATED, DO NOT USE] The scripts required by this element from /public/javascripts.',\n      )\n      .optional(),\n    nodeModulesStyles: z\n      .array(z.string().describe('A .css file located in /node_modules.'))\n      .describe('The styles required by this element from /node_modules.')\n      .optional(),\n    nodeModulesScripts: z\n      .array(z.string().describe('A .js file located in /node_modules.'))\n      .describe('The scripts required by this element from /node_modules.')\n      .optional(),\n    elementStyles: z\n      .array(z.string().describe(\"A .css file located in the element's directory.\"))\n      .describe(\"The styles required by this element from the element's directory.\")\n      .optional(),\n    elementScripts: z\n      .array(z.string().describe(\"A .js file located in the element's directory.\"))\n      .describe(\"The scripts required by this element from the element's directory.\")\n      .optional(),\n  })\n  .strict()\n  .describe(\"The element's client-side dependencies.\");\n\nconst DynamicDependencyJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    nodeModulesScripts: z\n      .record(z.string())\n      .describe('The scripts required by this element from /node_modules as an importmap.')\n      .optional(),\n    elementScripts: z\n      .record(z.string())\n      .describe(\n        \"The scripts required by this element from the element's directory as an importmap.\",\n      )\n      .optional(),\n  })\n  .strict()\n  .describe(\"The element's client-side dynamic dependencies.\");\n\nexport const ElementCoreJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    controller: z.string().describe(\"The name of the element's controller file.\"),\n    dependencies: DependencyJsonSchema.optional(),\n    dynamicDependencies: DynamicDependencyJsonSchema.optional(),\n    additionalNames: z\n      .array(z.string().describe('A name for this element to be used in question HTML files.'))\n      .describe('Any additional names to give this element, i.e. for backwards compatibility.')\n      .optional(),\n  })\n  .strict()\n  .describe('Info files for v3 elements.');\n\nexport type ElementCoreJson = z.infer<typeof ElementCoreJsonSchema>;\n"]}