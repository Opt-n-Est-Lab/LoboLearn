{"version":3,"file":"infoQuestion.js","sourceRoot":"","sources":["../../src/schemas/infoQuestion.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAEjD,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC;KAC1C,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,UAAU,EAAE,CAAC;SACV,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,6CAA6C,CAAC,CAAC;SACzE,QAAQ,CACP,yFAAyF,CAC1F;SACA,QAAQ,EAAE;IACb,WAAW,EAAE,CAAC;SACX,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,4CAA4C,CAAC,CAAC;SACxE,QAAQ,CACP,0FAA0F,CAC3F;SACA,QAAQ,EAAE;IACb,iBAAiB,EAAE,CAAC;SACjB,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,uCAAuC,CAAC,CAAC;SACnE,QAAQ,CAAC,0DAA0D,CAAC;SACpE,QAAQ,EAAE;IACb,kBAAkB,EAAE,CAAC;SAClB,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sCAAsC,CAAC,CAAC;SAClE,QAAQ,CAAC,2DAA2D,CAAC;SACrE,QAAQ,EAAE;IACb,uBAAuB,EAAE,CAAC;SACvB,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2CAA2C,CAAC,CAAC;SACvE,QAAQ,CAAC,8DAA8D,CAAC;SACxE,QAAQ,EAAE;IACb,wBAAwB,EAAE,CAAC;SACxB,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,0CAA0C,CAAC,CAAC;SACtE,QAAQ,CAAC,+DAA+D,CAAC;SACzE,QAAQ,EAAE;IACb,yBAAyB,EAAE,CAAC;SACzB,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,iDAAiD,CAAC,CAAC;SAC7E,QAAQ,CAAC,gEAAgE,CAAC;SAC1E,QAAQ,EAAE;IACb,0BAA0B,EAAE,CAAC;SAC1B,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,gDAAgD,CAAC,CAAC;SAC5E,QAAQ,CAAC,iEAAiE,CAAC;SAC3E,QAAQ,EAAE;CACd,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CAAC,0CAA0C,CAAC,CAAC;AAExD,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC;KACxC,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,KAAK,EAAE,CAAC;SACL,MAAM,EAAE;SACR,QAAQ,CACP,oGAAoG,CACrG;IACH,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,2CAA2C,CAAC;IAC5E,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,gDAAgD,CAAC;IAC3E,IAAI,EAAE,CAAC;SACJ,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SACxC,QAAQ,CAAC,yDAAyD,CAAC;SACnE,QAAQ,EAAE;IACb,UAAU,EAAE,CAAC;SACV,OAAO,EAAE;SACT,QAAQ,CACP,mHAAmH,CACpH;SACA,QAAQ,EAAE;IACb,WAAW,EAAE,CAAC;SACX,KAAK,CACJ,CAAC;SACE,MAAM,EAAE;SACR,QAAQ,CACP,yGAAyG,CAC1G,CACJ;SACA,QAAQ,CACP,+GAA+G,CAChH;SACA,QAAQ,EAAE;IACb,gBAAgB,EAAE,CAAC;SAChB,OAAO,EAAE;SACT,QAAQ,CAAC,kFAAkF,CAAC;SAC5F,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,WAAW,EAAE,CAAC;SACX,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAClB,QAAQ,CAAC,8DAA8D,CAAC;SACxE,QAAQ,EAAE;IACb,UAAU,EAAE,CAAC;SACV,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,6DAA6D,CAAC,CAAC;SACzF,QAAQ,CACP,4FAA4F,CAC7F;SACA,QAAQ,EAAE;CACd,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CAAC,kCAAkC,CAAC,CAAC;AAEhD,MAAM,CAAC,MAAM,gCAAgC,GAAG,CAAC;KAC9C,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,OAAO,EAAE,CAAC;SACP,OAAO,EAAE;SACT,QAAQ,CACP,0FAA0F,CAC3F;SACA,QAAQ,EAAE;IACb,KAAK,EAAE,CAAC;SACL,MAAM,EAAE;SACR,QAAQ,CACP,oGAAoG,CACrG;IACH,UAAU,EAAE,CAAC;SACV,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SACxC,QAAQ,CACP,iIAAiI,CAClI;SACA,QAAQ,EAAE;IACb,iBAAiB,EAAE,CAAC;SACjB,KAAK,CACJ,CAAC;SACE,MAAM,EAAE;SACR,QAAQ,CAAC,wEAAwE,CAAC,CACtF;SACA,QAAQ,CACP,0GAA0G,CAC3G;SACA,QAAQ,EAAE;IACb,OAAO,EAAE,CAAC;SACP,MAAM,EAAE;SACR,GAAG,EAAE;SACL,QAAQ,CAAC,iEAAiE,CAAC;SAC3E,QAAQ,EAAE;IACb,gBAAgB,EAAE,CAAC;SAChB,OAAO,EAAE;SACT,QAAQ,CACP,2FAA2F,CAC5F;SACA,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,WAAW,EAAE,CAAC;SACX,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SAClB,QAAQ,CAAC,4DAA4D,CAAC;SACtE,QAAQ,EAAE;CACd,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CAAC,0CAA0C,CAAC,CAAC;AAExD,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC;KAChC,MAAM,CAAC;IACN,OAAO,EAAE,iBAAiB,CAAC,QAAQ,EAAE;IACrC,IAAI,EAAE,CAAC;SACJ,MAAM,EAAE;SACR,KAAK,CAAC,+EAA+E,CAAC;SACtF,QAAQ,CAAC,8BAA8B,CAAC;IAC3C,IAAI,EAAE,CAAC;SACJ,IAAI,CAAC,CAAC,aAAa,EAAE,gBAAgB,EAAE,UAAU,EAAE,MAAM,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;SACtF,QAAQ,CAAC,uBAAuB,CAAC;IACpC,KAAK,EAAE,CAAC;SACL,MAAM,EAAE;SACR,QAAQ,CACP,mFAAmF,CACpF;IACH,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,uDAAuD,CAAC;IACnF,IAAI,EAAE,CAAC;SACJ,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAAC;SAC/D,QAAQ,CAAC,wEAAwE,CAAC;SAClF,QAAQ,EAAE;IACb,WAAW,EAAE,CAAC;SACX,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,yCAAyC,CAAC,CAAC;SACrE,QAAQ,CAAC,kFAAkF,CAAC;SAC5F,QAAQ,EAAE;IACb,eAAe,EAAE,CAAC;SACf,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,kDAAkD,CAAC,CAAC;SAC9E,QAAQ,CAAC,4DAA4D,CAAC;SACtE,QAAQ,EAAE;IACb,QAAQ,EAAE,CAAC;SACR,MAAM,EAAE;SACR,QAAQ,CAAC,sEAAsE,CAAC;SAChF,QAAQ,EAAE;IACb,aAAa,EAAE,CAAC;SACb,IAAI,CAAC,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;SACxC,QAAQ,CAAC,4CAA4C,CAAC;SACtD,QAAQ,EAAE;IACb,aAAa,EAAE,CAAC;SACb,OAAO,EAAE;SACT,QAAQ,CAAC,6EAA6E,CAAC;SACvF,QAAQ,EAAE;SACV,OAAO,CAAC,KAAK,CAAC;IACjB,iBAAiB,EAAE,CAAC;SACjB,OAAO,EAAE;SACT,QAAQ,CAAC,2CAA2C,CAAC;SACrD,QAAQ,EAAE;SACV,OAAO,CAAC,IAAI,CAAC;IAChB,aAAa,EAAE,CAAC;SACb,OAAO,EAAE;SACT,QAAQ,CACP,gIAAgI,CACjI;SACA,QAAQ,EAAE;IACb,OAAO,EAAE,CAAC;SACP,MAAM,CAAC,EAAE,CAAC;SACV,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;SACjB,QAAQ,CACP,2FAA2F,CAC5F;SACA,QAAQ,EAAE;IACb,sBAAsB,EAAE,gCAAgC,CAAC,QAAQ,EAAE;IACnE,YAAY,EAAE,4BAA4B,CAAC,QAAQ,EAAE;IACrD,gBAAgB,EAAE,0BAA0B,CAAC,QAAQ,EAAE;IACvD,WAAW,EAAE,CAAC;SACX,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;SACvD,QAAQ,CAAC,yDAAyD,CAAC;SACnE,QAAQ,EAAE;IACb,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,2CAA2C,CAAC,CAAC,QAAQ,EAAE;IAC3F,mBAAmB,EAAE,CAAC;SACnB,OAAO,EAAE;SACT,QAAQ,CAAC,0DAA0D,CAAC;SACpE,QAAQ,EAAE;CACd,CAAC;KACD,MAAM,EAAE;KACR,QAAQ,CAAC,2BAA2B,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { CommentJsonSchema } from './comment.js';\n\nexport const QuestionDependencyJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    coreStyles: z\n      .array(z.string().describe('A .css file located in /public/stylesheets.'))\n      .describe(\n        '[DEPRECATED, DO NOT USE] The styles required by this question from /public/stylesheets.',\n      )\n      .optional(),\n    coreScripts: z\n      .array(z.string().describe('A .js file located in /public/javascripts.'))\n      .describe(\n        '[DEPRECATED, DO NOT USE] The scripts required by this question from /public/javascripts.',\n      )\n      .optional(),\n    nodeModulesStyles: z\n      .array(z.string().describe('A .css file located in /node_modules.'))\n      .describe('The styles required by this question from /node_modules.')\n      .optional(),\n    nodeModulesScripts: z\n      .array(z.string().describe('A .js file located in /node_modules.'))\n      .describe('The scripts required by this question from /node_modules.')\n      .optional(),\n    clientFilesCourseStyles: z\n      .array(z.string().describe('A .css file located in clientFilesCourse.'))\n      .describe('The styles required by this question from clientFilesCourse.')\n      .optional(),\n    clientFilesCourseScripts: z\n      .array(z.string().describe('A .js file located in clientFilesCourse.'))\n      .describe('The scripts required by this question from clientFilesCourse.')\n      .optional(),\n    clientFilesQuestionStyles: z\n      .array(z.string().describe('A .css file located in the clientFilesQuestion.'))\n      .describe('The styles required by this question from clientFilesQuestion.')\n      .optional(),\n    clientFilesQuestionScripts: z\n      .array(z.string().describe('A .js file located in the clientFilesQuestion.'))\n      .describe('The scripts required by this question from clientFilesQuestion.')\n      .optional(),\n  })\n  .strict()\n  .describe(\"The question's client-side dependencies.\");\n\nexport const WorkspaceOptionsJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    image: z\n      .string()\n      .describe(\n        'The Docker image that will be used to serve this question. Should be specified as Dockerhub image.',\n      ),\n    port: z.number().int().describe('The port number used in the Docker image.'),\n    home: z.string().describe('The home directory of the workspace container.'),\n    args: z\n      .union([z.string(), z.array(z.string())])\n      .describe('Command line arguments to pass to the Docker container.')\n      .optional(),\n    rewriteUrl: z\n      .boolean()\n      .describe(\n        'If true, the URL will be rewritten such that the workspace container will see all requests as originating from /.',\n      )\n      .optional(),\n    gradedFiles: z\n      .array(\n        z\n          .string()\n          .describe(\n            'A single file or directory that will be copied out of the workspace container when saving a submission.',\n          ),\n      )\n      .describe(\n        'The list of files or directories that will be copied out of the workspace container when saving a submission.',\n      )\n      .optional(),\n    enableNetworking: z\n      .boolean()\n      .describe('Whether the workspace should have network access. Access is disabled by default.')\n      .optional()\n      .default(false),\n    environment: z\n      .record(z.string())\n      .describe('Environment variables to set inside the workspace container.')\n      .optional(),\n    syncIgnore: z\n      .array(z.string().describe('A single file or directory that will be excluded from sync.'))\n      .describe(\n        '[DEPRECATED, DO NOT USE] The list of files or directories that will be excluded from sync.',\n      )\n      .optional(),\n  })\n  .strict()\n  .describe('Options for workspace questions.');\n\nexport const ExternalGradingOptionsJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    enabled: z\n      .boolean()\n      .describe(\n        'Whether the external grader is currently enabled. Useful if it is breaking, for example.',\n      )\n      .optional(),\n    image: z\n      .string()\n      .describe(\n        'The Docker image that will be used to grade this question. Should be specified as Dockerhub image.',\n      ),\n    entrypoint: z\n      .union([z.string(), z.array(z.string())])\n      .describe(\n        'Program or command to run as the entrypoint to your grader. If not provided, the default entrypoint for the image will be used.',\n      )\n      .optional(),\n    serverFilesCourse: z\n      .array(\n        z\n          .string()\n          .describe('A single file or directory that will be copied to the external grader.'),\n      )\n      .describe(\n        'The list of files or directories that will be copied from course/externalGradingFiles/ to /grade/shared/',\n      )\n      .optional(),\n    timeout: z\n      .number()\n      .int()\n      .describe('The number of seconds after which the grading job will timeout.')\n      .optional(),\n    enableNetworking: z\n      .boolean()\n      .describe(\n        'Whether the grading containers should have network access. Access is disabled by default.',\n      )\n      .optional()\n      .default(false),\n    environment: z\n      .record(z.string())\n      .describe('Environment variables to set inside the grading container.')\n      .optional(),\n  })\n  .strict()\n  .describe('Options for externally graded questions.');\n\nexport const QuestionJsonSchema = z\n  .object({\n    comment: CommentJsonSchema.optional(),\n    uuid: z\n      .string()\n      .regex(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/)\n      .describe('Unique identifier (UUID v4).'),\n    type: z\n      .enum(['Calculation', 'MultipleChoice', 'Checkbox', 'File', 'MultipleTrueFalse', 'v3'])\n      .describe('Type of the question.'),\n    title: z\n      .string()\n      .describe(\n        \"The title of the question (e.g., 'Addition of vectors in Cartesian coordinates').\",\n      ),\n    topic: z.string().describe(\"The category of question (e.g., 'Vectors', 'Energy').\"),\n    tags: z\n      .array(z.string().describe('A tag associated with a question.'))\n      .describe(\"Extra tags associated with the question (e.g., 'Exam Only', 'Broken').\")\n      .optional(),\n    clientFiles: z\n      .array(z.string().describe('A single file accessible by the client.'))\n      .describe('The list of question files accessible by the client (defaults to [\"client.js\"]).')\n      .optional(),\n    clientTemplates: z\n      .array(z.string().describe('A single template file accessible by the client.'))\n      .describe('List of client-accessible templates to render server-side.')\n      .optional(),\n    template: z\n      .string()\n      .describe('The QID of a question that serves at the template for this question.')\n      .optional(),\n    gradingMethod: z\n      .enum(['Internal', 'External', 'Manual'])\n      .describe('The grading method used for this question.')\n      .optional(),\n    singleVariant: z\n      .boolean()\n      .describe('Whether the question is not randomized and only generates a single variant.')\n      .optional()\n      .default(false),\n    showCorrectAnswer: z\n      .boolean()\n      .describe('Whether to show the correct answer panel.')\n      .optional()\n      .default(true),\n    partialCredit: z\n      .boolean()\n      .describe(\n        'Whether the question will give partial points for fractional scores (defaults to \"false\" for v2 questions and \"true\" for v3.).',\n      )\n      .optional(),\n    options: z\n      .object({})\n      .catchall(z.any())\n      .describe(\n        'Options that define how the question will work, specific to the individual question type.',\n      )\n      .optional(),\n    externalGradingOptions: ExternalGradingOptionsJsonSchema.optional(),\n    dependencies: QuestionDependencyJsonSchema.optional(),\n    workspaceOptions: WorkspaceOptionsJsonSchema.optional(),\n    sharingSets: z\n      .array(z.string().describe('The name of a sharing set'))\n      .describe('The list of sharing sets that this question belongs to.')\n      .optional(),\n    sharePublicly: z.boolean().describe('Whether this question is publicly shared.').optional(),\n    shareSourcePublicly: z\n      .boolean()\n      .describe(\"Whether this questions's source code is publicly shared.\")\n      .optional(),\n  })\n  .strict()\n  .describe('Info files for questions.');\n\nexport type QuestionJson = z.infer<typeof QuestionJsonSchema>;\nexport type QuestionJsonInput = z.input<typeof QuestionJsonSchema>;\n"]}