{"version":3,"file":"jsonSchemas.js","sourceRoot":"","sources":["../../src/schemas/jsonSchemas.ts"],"names":[],"mappings":"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","sourcesContent":["import { type JSONSchemaType } from 'ajv';\nimport { type ZodType, type ZodTypeDef } from 'zod';\nimport {\n  type JsonSchema7Type,\n  type Options,\n  type Refs,\n  ignoreOverride,\n  zodToJsonSchema,\n} from 'zod-to-json-schema';\n\nimport { CommentJsonSchema } from './comment.js';\nimport {\n  AdvanceScorePercJsonSchema,\n  AssessmentAccessRuleJsonSchema,\n  type AssessmentJson,\n  AssessmentJsonSchema,\n  ForceMaxPointsJsonSchema,\n  GroupRoleJsonSchema,\n  PointsJsonSchema,\n  PointsListJsonSchema,\n  PointsSingleJsonSchema,\n  QuestionAlternativeJsonSchema,\n  QuestionIdJsonSchema,\n  ZoneAssessmentJsonSchema,\n  ZoneQuestionJsonSchema,\n} from './infoAssessment.js';\nimport { ColorJsonSchema, type CourseJson, CourseJsonSchema } from './infoCourse.js';\nimport { type CourseInstanceJson, CourseInstanceJsonSchema } from './infoCourseInstance.js';\nimport { type ElementCoreJson, ElementCoreJsonSchema } from './infoElementCore.js';\nimport { type ElementCourseJson, ElementCourseJsonSchema } from './infoElementCourse.js';\nimport { type ElementExtensionJson, ElementExtensionJsonSchema } from './infoElementExtension.js';\nimport { type NewsItemJson, NewsItemJsonSchema } from './infoNewsItem.js';\nimport { type QuestionJson, QuestionJsonSchema } from './infoQuestion.js';\nimport {\n  type QuestionCalculationOptionsJson,\n  QuestionCalculationOptionsJsonSchema,\n} from './questionOptionsCalculation.js';\nimport { QuestionCheckboxOptionsJsonSchema } from './questionOptionsCheckbox.js';\nimport type { QuestionCheckboxOptionsJson } from './questionOptionsCheckbox.js';\nimport {\n  type QuestionFileOptionsJson,\n  QuestionFileOptionsJsonSchema,\n} from './questionOptionsFile.js';\nimport {\n  type QuestionMultipleChoiceOptionsJson,\n  QuestionMultipleChoiceOptionsJsonSchema,\n} from './questionOptionsMultipleChoice.js';\nimport {\n  type QuestionMultipleTrueFalseOptionsJson,\n  QuestionMultipleTrueFalseOptionsJsonSchema,\n} from './questionOptionsMultipleTrueFalse.js';\nimport { type QuestionOptionsv3Json, QuestionOptionsv3JsonSchema } from './questionOptionsv3.js';\n\n/**\n * Rewrite the group role annotation for canView and canSubmit fields.\n * zod-to-json-schema doesn't support a concept of unique items in an array (only sets),\n * so we need to override the schema.\n */\nconst rewriteGroupRoleAnnotation = (\n  def: ZodTypeDef,\n  refs: Refs,\n): JsonSchema7Type | undefined | typeof ignoreOverride => {\n  const segment = refs.currentPath[refs.currentPath.length - 1];\n  if (['canView', 'canSubmit'].includes(segment)) {\n    const action = segment === 'canView' ? 'view' : 'submit';\n    const inZone = refs.currentPath.includes('ZoneAssessmentJsonSchema');\n    let annotation = `A list of group role names matching those in groupRoles that can ${action} the question. Only applicable for group assessments.`;\n    if (inZone) {\n      annotation = `A list of group role names that can ${action} questions in this zone. Only applicable for group assessments.`;\n    }\n    return {\n      description: annotation,\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n      uniqueItems: true,\n      default: [],\n    };\n  }\n\n  return ignoreOverride;\n};\n\nconst prairielearnZodToJsonSchema = (\n  schema: ZodType<any>,\n  options: Partial<Options<'jsonSchema7'>>,\n) => {\n  const jsonSchema = zodToJsonSchema(schema, {\n    ...options,\n    override: rewriteGroupRoleAnnotation,\n    // Many people have done insane things in their JSON files that don't pass\n    // strict validation. For now, we'll be lenient and avoid the use of `.strict()`\n    // in our Zod schemas in places where that could cause problems. In the\n    // long run, we'll work towards getting all JSON compliant with strict schemas.\n    removeAdditionalStrategy: 'strict',\n  });\n\n  // Traverse the schema: if `DEPRECATED` in the description, add a `deprecated`: true field.\n\n  const traverse = (input: any) => {\n    if (\n      typeof input?.description === 'string' &&\n      input?.description.toLowerCase().includes('deprecated')\n    ) {\n      input.deprecated = true;\n    }\n    for (const value of Object.values(input)) {\n      if (typeof value === 'object' && value !== null) {\n        traverse(value);\n      }\n    }\n  };\n  traverse(jsonSchema);\n\n  return jsonSchema;\n};\n\nexport const infoNewsItem = prairielearnZodToJsonSchema(NewsItemJsonSchema, {\n  name: 'News Item Info',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: { CommentJsonSchema },\n}) as JSONSchemaType<NewsItemJson>;\n\nexport const infoAssessment = prairielearnZodToJsonSchema(AssessmentJsonSchema, {\n  name: 'Assessment info',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: {\n    PointsJsonSchema,\n    PointsListJsonSchema,\n    PointsSingleJsonSchema,\n    QuestionIdJsonSchema,\n    ForceMaxPointsJsonSchema,\n    AssessmentAccessRuleJsonSchema,\n    QuestionAlternativeJsonSchema,\n    ZoneAssessmentJsonSchema,\n    ZoneQuestionJsonSchema,\n    GroupRoleJsonSchema,\n    AdvanceScorePercJsonSchema,\n    CommentJsonSchema,\n  },\n}) as JSONSchemaType<AssessmentJson>;\n\nexport const infoCourse = prairielearnZodToJsonSchema(CourseJsonSchema, {\n  name: 'Course information',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: { ColorJsonSchema, CommentJsonSchema },\n}) as JSONSchemaType<CourseJson>;\n\nexport const infoCourseInstance = prairielearnZodToJsonSchema(CourseInstanceJsonSchema, {\n  name: 'Course instance information',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: { CommentJsonSchema },\n}) as JSONSchemaType<CourseInstanceJson>;\n\nexport const infoElementCore = prairielearnZodToJsonSchema(ElementCoreJsonSchema, {\n  name: 'Element Info',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: { CommentJsonSchema },\n}) as JSONSchemaType<ElementCoreJson>;\n\nexport const infoElementCourse = prairielearnZodToJsonSchema(ElementCourseJsonSchema, {\n  name: 'Element Info',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: { CommentJsonSchema },\n}) as JSONSchemaType<ElementCourseJson>;\n\nexport const infoElementExtension = prairielearnZodToJsonSchema(ElementExtensionJsonSchema, {\n  name: 'Element Extension Info',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: { CommentJsonSchema },\n}) as JSONSchemaType<ElementExtensionJson>;\n\nexport const infoQuestion = prairielearnZodToJsonSchema(QuestionJsonSchema, {\n  name: 'Question Info',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: {\n    CommentJsonSchema,\n  },\n}) as JSONSchemaType<QuestionJson>;\n\nexport const questionOptionsCalculation = prairielearnZodToJsonSchema(\n  QuestionCalculationOptionsJsonSchema,\n  {\n    name: 'Calculation question options',\n    nameStrategy: 'title',\n    target: 'jsonSchema7',\n    definitions: { CommentJsonSchema },\n  },\n) as JSONSchemaType<QuestionCalculationOptionsJson>;\n\nexport const questionOptionsCheckbox = prairielearnZodToJsonSchema(\n  QuestionCheckboxOptionsJsonSchema,\n  {\n    name: 'Checkbox question options',\n    nameStrategy: 'title',\n    target: 'jsonSchema7',\n    definitions: { CommentJsonSchema },\n  },\n) as JSONSchemaType<QuestionCheckboxOptionsJson>;\n\nexport const questionOptionsFile = prairielearnZodToJsonSchema(QuestionFileOptionsJsonSchema, {\n  name: 'File question options',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: { CommentJsonSchema },\n}) as JSONSchemaType<QuestionFileOptionsJson>;\n\nexport const questionOptionsMultipleChoice = prairielearnZodToJsonSchema(\n  QuestionMultipleChoiceOptionsJsonSchema,\n  {\n    name: 'MultipleChoice question options',\n    nameStrategy: 'title',\n    target: 'jsonSchema7',\n    definitions: { CommentJsonSchema },\n  },\n) as JSONSchemaType<QuestionMultipleChoiceOptionsJson>;\n\nexport const questionOptionsMultipleTrueFalse = prairielearnZodToJsonSchema(\n  QuestionMultipleTrueFalseOptionsJsonSchema,\n  {\n    name: 'MultipleTrueFalse question options',\n    nameStrategy: 'title',\n    target: 'jsonSchema7',\n    definitions: { CommentJsonSchema },\n  },\n) as JSONSchemaType<QuestionMultipleTrueFalseOptionsJson>;\n\nexport const questionOptionsv3 = prairielearnZodToJsonSchema(QuestionOptionsv3JsonSchema, {\n  name: 'v3 question options',\n  nameStrategy: 'title',\n  target: 'jsonSchema7',\n  definitions: { CommentJsonSchema },\n}) as JSONSchemaType<QuestionOptionsv3Json>;\n\nexport const ajvSchemas = {\n  infoNewsItem,\n  infoAssessment,\n  infoCourse,\n  infoCourseInstance,\n  infoElementCore,\n  infoElementCourse,\n  infoElementExtension,\n  infoQuestion,\n  questionOptionsCalculation,\n  questionOptionsCheckbox,\n  questionOptionsFile,\n  questionOptionsMultipleChoice,\n  questionOptionsMultipleTrueFalse,\n  questionOptionsv3,\n};\n"]}