{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/sprocs/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAE5B,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAEnC,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEpD,MAAM,CAAC,KAAK,UAAU,IAAI;IACxB,MAAM,CAAC,OAAO,CAAC,6CAA6C,CAAC,CAAC;IAC9D,MAAM,UAAU,CACd;QACE,4BAA4B;QAC5B,gCAAgC;QAChC,sBAAsB;QACtB,eAAe;QACf,eAAe;QACf,eAAe;QACf,qBAAqB;QACrB,qBAAqB;QACrB,2BAA2B;QAC3B,yBAAyB;QACzB,uBAAuB;QACvB,sBAAsB;QACtB,8BAA8B;QAC9B,gBAAgB;QAChB,8BAA8B;QAC9B,+BAA+B;QAC/B,2CAA2C;QAC3C,uCAAuC;QACvC,kCAAkC;QAClC,kCAAkC;QAClC,6BAA6B;QAC7B,wBAAwB;QACxB,qCAAqC;QACrC,uBAAuB;QACvB,mBAAmB;QACnB,oBAAoB;QACpB,sBAAsB;QACtB,+BAA+B;QAC/B,+BAA+B;QAC/B,sBAAsB;QACtB,sCAAsC;QACtC,kBAAkB;QAClB,2BAA2B;QAC3B,uCAAuC;QACvC,sCAAsC;QACtC,2BAA2B;QAC3B,gCAAgC;QAChC,wCAAwC;QACxC,oCAAoC;QACpC,+BAA+B;QAC/B,8BAA8B;QAC9B,2CAA2C;QAC3C,sBAAsB;QACtB,uBAAuB;QACvB,uCAAuC;QACvC,gBAAgB;QAChB,4BAA4B;QAC5B,2CAA2C;QAC3C,yCAAyC;QACzC,mCAAmC;QACnC,4CAA4C;QAC5C,8BAA8B;QAC9B,4BAA4B;QAC5B,+BAA+B;QAC/B,mBAAmB;QACnB,mCAAmC;QACnC,0BAA0B;QAC1B,0BAA0B;QAC1B,0BAA0B;QAC1B,wCAAwC;QACxC,iCAAiC;QACjC,2BAA2B;QAC3B,oBAAoB;QACpB,qBAAqB;QACrB,wBAAwB;QACxB,sBAAsB;QACtB,gBAAgB;QAChB,qBAAqB;QACrB,6BAA6B;KAC9B,EACD,KAAK,EAAE,QAAQ,EAAE,EAAE;QACjB,MAAM,CAAC,OAAO,CAAC,UAAU,GAAG,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;YACxE,MAAM,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC5B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;QAClD,CAAC;IACH,CAAC,CACF,CAAC;IACF,MAAM,CAAC,OAAO,CAAC,2DAA2D,CAAC,CAAC;AAC9E,CAAC","sourcesContent":["import { readFile } from 'fs/promises';\nimport { join } from 'path';\n\nimport { eachSeries } from 'async';\n\nimport * as error from '@prairielearn/error';\nimport { logger } from '@prairielearn/logger';\nimport { queryAsync } from '@prairielearn/postgres';\n\nexport async function init() {\n  logger.verbose('Starting DB stored procedure initialization');\n  await eachSeries(\n    [\n      'scores_to_points_array.sql',\n      'array_increments_above_max.sql',\n      'array_and_number.sql',\n      'array_avg.sql',\n      'array_var.sql',\n      'histogram.sql',\n      'array_histogram.sql',\n      'format_interval.sql',\n      'format_interval_short.sql',\n      'format_date_iso8601.sql',\n      'format_date_short.sql',\n      'format_date_full.sql',\n      'format_date_full_compact.sql',\n      'input_date.sql',\n      'interval_hist_thresholds.sql',\n      'jsonb_array_to_text_array.sql',\n      'jsonb_array_to_double_precision_array.sql',\n      'check_course_instance_access_rule.sql',\n      'check_course_instance_access.sql',\n      'check_assessment_access_rule.sql',\n      'check_assessment_access.sql',\n      'assessments_format.sql',\n      'assessments_format_for_question.sql',\n      'tags_for_question.sql',\n      'random_unique.sql',\n      'question_order.sql',\n      'authz_assessment.sql',\n      'authz_assessment_instance.sql',\n      'assessment_instance_label.sql',\n      'assessment_label.sql',\n      'admin_assessment_question_number.sql',\n      'authz_course.sql',\n      'authz_course_instance.sql',\n      'administrators_insert_by_user_uid.sql',\n      'administrators_delete_by_user_id.sql',\n      'courses_update_column.sql',\n      'assessment_instances_grade.sql',\n      'instance_questions_points_homework.sql',\n      'instance_questions_points_exam.sql',\n      'instance_questions_points.sql',\n      'instance_questions_grade.sql',\n      'instance_questions_next_allowed_grade.sql',\n      'submissions_lock.sql',\n      'grading_jobs_lock.sql',\n      'grading_jobs_update_after_grading.sql',\n      'ip_to_mode.sql',\n      'users_select_or_insert.sql',\n      'users_select_or_insert_and_enroll_lti.sql',\n      'users_are_instructors_in_any_course.sql',\n      'users_is_instructor_in_course.sql',\n      'users_is_instructor_in_course_instance.sql',\n      'users_get_displayed_role.sql',\n      'grading_jobs_stats_day.sql',\n      'issues_insert_for_variant.sql',\n      'variants_lock.sql',\n      'variants_update_after_grading.sql',\n      'grader_loads_current.sql',\n      'server_loads_current.sql',\n      'server_usage_current.sql',\n      'instance_questions_calculate_stats.sql',\n      'assessment_instances_points.sql',\n      'sync_course_instances.sql',\n      'sync_questions.sql',\n      'sync_news_items.sql',\n      'sync_question_tags.sql',\n      'sync_assessments.sql',\n      'group_info.sql',\n      'groups_uid_list.sql',\n      'workspace_loads_current.sql',\n    ],\n    async (filename) => {\n      logger.verbose('Loading ' + filename);\n      try {\n        const sql = await readFile(join(import.meta.dirname, filename), 'utf8');\n        await queryAsync(sql, []);\n      } catch (err) {\n        throw error.addData(err, { sqlFile: filename });\n      }\n    },\n  );\n  logger.verbose('Successfully completed DB stored procedure initialization');\n}\n"]}