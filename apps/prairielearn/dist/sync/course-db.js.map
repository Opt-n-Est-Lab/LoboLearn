{"version":3,"file":"course-db.js","sourceRoot":"","sources":["../../src/sync/course-db.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { Ajv, type JSONSchemaType } from 'ajv';\nimport * as async from 'async';\nimport betterAjvErrors from 'better-ajv-errors';\nimport { isAfter, isFuture, isPast, isValid, parseISO } from 'date-fns';\nimport fs from 'fs-extra';\nimport jju from 'jju';\nimport _ from 'lodash';\n\nimport { run } from '@prairielearn/run';\n\nimport { chalk } from '../lib/chalk.js';\nimport { config } from '../lib/config.js';\nimport { features } from '../lib/features/index.js';\nimport { validateJSON } from '../lib/json-load.js';\nimport { selectInstitutionForCourse } from '../models/institution.js';\nimport {\n  type AssessmentJson,\n  type AssessmentSetJson,\n  type CourseInstanceJson,\n  type CourseJson,\n  type QuestionJson,\n  type QuestionPointsJson,\n  type TagJson,\n} from '../schemas/index.js';\nimport * as schemas from '../schemas/index.js';\n\nimport * as infofile from './infofile.js';\nimport { isDraftQid } from './question.js';\n\n// We use a single global instance so that schemas aren't recompiled every time they're used\nconst ajv = new Ajv({ allErrors: true });\n\nconst DEFAULT_QUESTION_INFO = {\n  type: 'Calculation',\n  clientFiles: ['client.js', 'question.html', 'answer.html'],\n};\nconst DEFAULT_COURSE_INSTANCE_INFO = {\n  groupAssessmentsBy: 'Set',\n};\nconst DEFAULT_ASSESSMENT_INFO = {};\n\nconst DEFAULT_ASSESSMENT_SETS: AssessmentSetJson[] = [\n  {\n    abbreviation: 'HW',\n    name: 'Homework',\n    heading: 'Homeworks',\n    color: 'green1',\n  },\n  { abbreviation: 'Q', name: 'Quiz', heading: 'Quizzes', color: 'red1' },\n  {\n    abbreviation: 'PQ',\n    name: 'Practice Quiz',\n    heading: 'Practice Quizzes',\n    color: 'pink1',\n  },\n  { abbreviation: 'E', name: 'Exam', heading: 'Exams', color: 'brown1' },\n  {\n    abbreviation: 'PE',\n    name: 'Practice Exam',\n    heading: 'Practice Exams',\n    color: 'yellow1',\n  },\n  {\n    abbreviation: 'P',\n    name: 'Prep',\n    heading: 'Question Preparation',\n    color: 'gray1',\n  },\n  {\n    abbreviation: 'MP',\n    name: 'Machine Problem',\n    heading: 'Machine Problems',\n    color: 'turquoise1',\n  },\n  {\n    abbreviation: 'WS',\n    name: 'Worksheet',\n    heading: 'Worksheets',\n    color: 'purple1',\n  },\n  { abbreviation: 'U', name: 'Unknown', heading: 'Unknown', color: 'red3' },\n];\n\nconst DEFAULT_TAGS: TagJson[] = [\n  {\n    name: 'numeric',\n    color: 'brown1',\n    description: 'The answer format is one or more numerical values.',\n  },\n  {\n    name: 'symbolic',\n    color: 'blue1',\n    description: 'The answer format is a symbolic expression.',\n  },\n  {\n    name: 'drawing',\n    color: 'yellow1',\n    description:\n      'The answer format requires drawing on a canvas to input a graphical representation of an answer.',\n  },\n  {\n    name: 'MC',\n    color: 'green1',\n    description:\n      'The answer format is choosing from a small finite set of answers (multiple choice, possibly with multiple selections allowed, up to 10 possible answers).',\n  },\n  {\n    name: 'code',\n    color: 'turquoise1',\n    description: 'The answer format is a piece of code.',\n  },\n  {\n    name: 'multianswer',\n    color: 'orange2',\n    description:\n      'The question requires multiple answers, either as steps in a sequence or as separate questions.',\n  },\n  {\n    name: 'graph',\n    color: 'purple1',\n    description: 'The question tests reading information from a graph or drawing a graph.',\n  },\n  {\n    name: 'concept',\n    color: 'pink1',\n    description: 'The question tests conceptual understanding of a topic.',\n  },\n  {\n    name: 'calculate',\n    color: 'green2',\n    description:\n      'The questions tests performing a numerical calculation, with either a calculator or equivalent software.',\n  },\n  {\n    name: 'compute',\n    color: 'purple1',\n    description:\n      'The question tests the writing and running of a piece of code to compute the answer. The answer itself is not the code, but could be a numeric answer output by the code, for example (use `code` when the answer is the code).',\n  },\n  {\n    name: 'software',\n    color: 'orange1',\n    description: 'The question tests the use of a specific piece of software (e.g., Matlab).',\n  },\n  {\n    name: 'estimation',\n    color: 'red2',\n    description:\n      'Answering the question correctly will require some amount of estimation, so an exact answer is not possible.',\n  },\n  {\n    name: 'secret',\n    color: 'red3',\n    description:\n      \"Only use this question on exams or quizzes that won't be released to students, so the question can be kept secret.\",\n  },\n  {\n    name: 'nontest',\n    color: 'green3',\n    description:\n      'This question is not appropriate for use in a restricted testing environment, so only use it on homeworks or similar.',\n  },\n  { name: 'Sp15', color: 'gray1' },\n  { name: 'Su15', color: 'gray1' },\n  { name: 'Fa15', color: 'gray1' },\n  { name: 'Sp16', color: 'gray1' },\n  { name: 'Su16', color: 'gray1' },\n  { name: 'Fa16', color: 'gray1' },\n  { name: 'Sp17', color: 'gray1' },\n  { name: 'Su17', color: 'gray1' },\n  { name: 'Fa17', color: 'gray1' },\n  { name: 'Sp18', color: 'gray1' },\n  { name: 'Su18', color: 'gray1' },\n  { name: 'Fa18', color: 'gray1' },\n  { name: 'Sp19', color: 'gray1' },\n  { name: 'Su19', color: 'gray1' },\n  { name: 'Fa19', color: 'gray1' },\n  { name: 'Sp20', color: 'gray1' },\n  { name: 'Su20', color: 'gray1' },\n  { name: 'Fa20', color: 'gray1' },\n  { name: 'Sp21', color: 'gray1' },\n  { name: 'Su21', color: 'gray1' },\n  { name: 'Fa21', color: 'gray1' },\n];\n\n// For testing if a string is a v4 UUID\nconst UUID_REGEX = /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/;\n// For finding all v4 UUIDs in a string/file\nconst FILE_UUID_REGEX =\n  /\"uuid\":\\s*\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\"/g;\n\n// This type is used a lot, so make an alias\ntype InfoFile<T> = infofile.InfoFile<T>;\n\nexport interface CourseInstanceData {\n  courseInstance: InfoFile<CourseInstanceJson>;\n  assessments: Record<string, InfoFile<AssessmentJson>>;\n}\n\nexport interface CourseData {\n  course: InfoFile<CourseJson>;\n  questions: Record<string, InfoFile<QuestionJson>>;\n  courseInstances: Record<string, CourseInstanceData>;\n}\n\n/**\n * Loads and validates an entire course from a directory on disk.\n * Downstream callers of this function can use\n * ...Json types instead of ...JsonInput types.\n */\nexport async function loadFullCourse(\n  courseId: string | null,\n  courseDir: string,\n): Promise<CourseData> {\n  const questions = await loadQuestions(courseDir);\n  const tagsInUse = new Set<string>();\n\n  for (const question of Object.values(questions)) {\n    if (question.data?.tags) {\n      for (const tag of question.data.tags) {\n        tagsInUse.add(tag);\n      }\n    }\n  }\n\n  const courseInstanceInfos = await loadCourseInstances(courseDir);\n  const courseInstances: Record<string, CourseInstanceData> = {};\n  const assessmentSetsInUse = new Set<string>();\n\n  for (const [courseInstanceId, courseInstance] of Object.entries(courseInstanceInfos)) {\n    // Check if the course instance is \"expired\". A course instance is considered\n    // expired if it either has zero `allowAccess` rules (in which case it is never\n    // accessible), or if it has one or more `allowAccess` rules and they all have\n    // an `endDate` that is in the past.\n    const allowAccessRules = courseInstance.data?.allowAccess ?? [];\n    const courseInstanceExpired = allowAccessRules.every((rule) => {\n      const endDate = rule.endDate ? parseAllowAccessDate(rule.endDate) : null;\n      return endDate && isPast(endDate);\n    });\n\n    const assessments = await loadAssessments(\n      courseDir,\n      courseInstanceId,\n      courseInstanceExpired,\n      questions,\n    );\n\n    for (const assessment of Object.values(assessments)) {\n      if (assessment.data?.set) {\n        assessmentSetsInUse.add(assessment.data?.set);\n      }\n    }\n\n    courseInstances[courseInstanceId] = {\n      courseInstance,\n      assessments,\n    };\n  }\n\n  const courseInfo = await loadCourseInfo({\n    courseId,\n    coursePath: courseDir,\n    assessmentSetsInUse,\n    tagsInUse,\n  });\n\n  return {\n    course: courseInfo,\n    questions,\n    courseInstances,\n  };\n}\n\nfunction writeErrorsAndWarningsForInfoFileIfNeeded<T>(\n  filePath: string,\n  infoFile: InfoFile<T>,\n  writeLine: (line?: string) => void,\n): void {\n  if (!infofile.hasErrorsOrWarnings(infoFile)) return;\n\n  writeLine(chalk.bold(`• ${filePath}`));\n  if (infofile.hasErrors(infoFile)) {\n    infoFile.errors.forEach((error) => {\n      const indentedError = error.replace(/\\n/g, '\\n    ');\n      writeLine(chalk.red(`  ✖ ${indentedError}`));\n    });\n  }\n  if (infofile.hasWarnings(infoFile)) {\n    infoFile.warnings.forEach((warning) => {\n      const indentedWarning = warning.replace(/\\n/g, '\\n    ');\n      writeLine(chalk.yellow(`  ⚠ ${indentedWarning}`));\n    });\n  }\n}\n\nexport function writeErrorsAndWarningsForCourseData(\n  courseId: string,\n  courseData: CourseData,\n  writeLine: (line?: string) => void,\n): void {\n  writeErrorsAndWarningsForInfoFileIfNeeded('infoCourse.json', courseData.course, writeLine);\n  Object.entries(courseData.questions).forEach(([qid, question]) => {\n    const questionPath = path.posix.join('questions', qid, 'info.json');\n    writeErrorsAndWarningsForInfoFileIfNeeded(questionPath, question, writeLine);\n  });\n  Object.entries(courseData.courseInstances).forEach(([ciid, courseInstanceData]) => {\n    const courseInstancePath = path.posix.join('courseInstances', ciid, 'infoCourseInstance.json');\n    writeErrorsAndWarningsForInfoFileIfNeeded(\n      courseInstancePath,\n      courseInstanceData.courseInstance,\n      writeLine,\n    );\n    Object.entries(courseInstanceData.assessments).forEach(([aid, assessment]) => {\n      const assessmentPath = path.posix.join(\n        'courseInstances',\n        ciid,\n        'assessments',\n        aid,\n        'infoAssessment.json',\n      );\n      writeErrorsAndWarningsForInfoFileIfNeeded(assessmentPath, assessment, writeLine);\n    });\n  });\n}\n\nexport function courseDataHasErrors(courseData: CourseData): boolean {\n  if (infofile.hasErrors(courseData.course)) return true;\n  if (Object.values(courseData.questions).some(infofile.hasErrors)) return true;\n  if (\n    Object.values(courseData.courseInstances).some((courseInstance) => {\n      if (infofile.hasErrors(courseInstance.courseInstance)) return true;\n      return Object.values(courseInstance.assessments).some(infofile.hasErrors);\n    })\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function courseDataHasErrorsOrWarnings(courseData: CourseData): boolean {\n  if (infofile.hasErrorsOrWarnings(courseData.course)) return true;\n  if (Object.values(courseData.questions).some(infofile.hasErrorsOrWarnings)) return true;\n  if (\n    Object.values(courseData.courseInstances).some((courseInstance) => {\n      if (infofile.hasErrorsOrWarnings(courseInstance.courseInstance)) return true;\n      return Object.values(courseInstance.assessments).some(infofile.hasErrorsOrWarnings);\n    })\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Loads a JSON file at the path `path.join(coursePath, filePath). The\n * path is passed as two separate paths so that we can avoid leaking the\n * absolute path on disk to users.\n */\nexport async function loadInfoFile<T extends { uuid: string }>({\n  coursePath,\n  filePath,\n  schema,\n  tolerateMissing = false,\n}: {\n  coursePath: string;\n  filePath: string;\n  schema?: JSONSchemaType<T>;\n  /** Whether or not a missing file constitutes an error */\n  tolerateMissing?: boolean;\n}): Promise<InfoFile<T> | null> {\n  const absolutePath = path.join(coursePath, filePath);\n  let contents: string;\n  try {\n    // fs-extra uses graceful-fs, which in turn will enqueue open operations.\n    // this slows us down an unnecessary amount. Avoiding this queueing means\n    // we could potentially hit an EMFILE error, but we haven't seen that in\n    // practice in years, so that's a risk we're willing to take. We explicitly\n    // use the native Node fs API here to opt out of this queueing behavior.\n    contents = await fs.readFile(absolutePath, 'utf8');\n  } catch (err) {\n    if (err.code === 'ENOTDIR' && err.path === absolutePath) {\n      // In a previous version of this code, we'd pre-filter\n      // all files in the parent directory to remove anything\n      // that may have accidentally slipped in, like .DS_Store.\n      // However, that resulted in a huge number of system calls\n      // that got really slow for large directories. Now, we'll\n      // just blindly try to read a file from the directory and assume\n      // that if we see ENOTDIR, that means the directory was not\n      // in fact a directory.\n      return null;\n    }\n    if (tolerateMissing && err.code === 'ENOENT' && err.path === absolutePath) {\n      // For info files that are recursively loaded, this probably means\n      // we tried to load a file at an intermediate directory. This isn't\n      // an error; return null to let the caller handle this.\n      return null;\n    }\n\n    // If it wasn't a missing file, this is another error. Propagate it to\n    // the caller.\n    return infofile.makeError(`Error reading JSON file ${filePath}: ${err.code}`);\n  }\n\n  try {\n    // jju is about 5x slower than standard JSON.parse. In the average\n    // case, we'll have valid JSON, so we can take the fast path. If we\n    // fail to parse, we'll take the hit and reparse with jju to generate\n    // a better error report for users.\n    const json = JSON.parse(contents);\n    if (!json.uuid) {\n      return infofile.makeError('UUID is missing');\n    }\n    if (!UUID_REGEX.test(json.uuid)) {\n      return infofile.makeError(`UUID \"${json.uuid}\" is not a valid v4 UUID`);\n    }\n\n    if (!schema) {\n      // Skip schema validation, just return the data\n      return infofile.makeInfoFile({\n        uuid: json.uuid,\n        data: json,\n      });\n    }\n\n    // Validate file against schema\n    const validate = ajv.compile<T>(schema);\n    try {\n      validate(json);\n      if (validate.errors) {\n        const result = infofile.makeInfoFile<T>({ uuid: json.uuid });\n        const errorText = betterAjvErrors(schema, json, validate.errors, {\n          indent: 2,\n        });\n        const errorTextString = String(errorText); // hack to fix incorrect type in better-ajv-errors/typings.d.ts\n        infofile.addError(result, errorTextString);\n        return result;\n      }\n      return infofile.makeInfoFile({\n        uuid: json.uuid,\n        data: json,\n      });\n    } catch (err) {\n      return infofile.makeError(err.message);\n    }\n  } catch {\n    // Invalid JSON; let's reparse with jju to get a better error message\n    // for the user.\n    let result: InfoFile<T> = { errors: [], warnings: [] };\n    try {\n      // This should always throw\n      jju.parse(contents, { mode: 'json' });\n    } catch (e) {\n      result = infofile.makeError(`Error parsing JSON: ${e.message}`);\n    }\n\n    // The document was still valid JSON, but we may still be able to\n    // extract a UUID from the raw files contents with a regex.\n    const match = (contents || '').match(FILE_UUID_REGEX);\n    if (!match) {\n      infofile.addError(result, 'UUID not found in file');\n      return result;\n    }\n    if (match.length > 1) {\n      infofile.addError(result, 'More than one UUID found in file');\n      return result;\n    }\n\n    // Extract and store UUID. Checking for a falsy value isn't technically\n    // required, but it keeps TypeScript happy.\n    const uuid = match[0].match(UUID_REGEX);\n    if (!uuid) {\n      infofile.addError(result, 'UUID not found in file');\n      return result;\n    }\n\n    result.uuid = uuid[0];\n    return result;\n  }\n}\n\nexport async function loadCourseInfo({\n  courseId,\n  coursePath,\n  assessmentSetsInUse,\n  tagsInUse,\n}: {\n  courseId: string | null;\n  coursePath: string;\n  assessmentSetsInUse: Set<string>;\n  tagsInUse: Set<string>;\n}): Promise<InfoFile<CourseJson>> {\n  const maybeNullLoadedData: InfoFile<CourseJson> | null = await loadInfoFile({\n    coursePath,\n    filePath: 'infoCourse.json',\n    schema: schemas.infoCourse,\n  });\n\n  if (maybeNullLoadedData && infofile.hasErrors(maybeNullLoadedData)) {\n    // We'll only have an error if we couldn't parse JSON data; abort\n    return maybeNullLoadedData;\n  }\n\n  if (!maybeNullLoadedData || !maybeNullLoadedData.data) {\n    throw new Error('Could not load infoCourse.json');\n  }\n\n  // Reassign to a non-null type.\n  const loadedData = maybeNullLoadedData;\n  const info = maybeNullLoadedData.data;\n\n  /**\n   * Used to retrieve fields such as \"assessmentSets\" and \"topics\".\n   * Adds a warning when syncing if duplicates are found.\n   * If defaults are provided, the entries from defaults not present in the resulting list are merged.\n   * @param fieldName The member of `info` to inspect\n   * @param entryIdentifier The member of each element of the field which uniquely identifies it, usually \"name\"\n   */\n  function getFieldWithoutDuplicates<\n    K extends 'tags' | 'topics' | 'assessmentSets' | 'assessmentModules' | 'sharingSets',\n  >(fieldName: K, entryIdentifier: string, defaults?: CourseJson[K] | undefined): CourseJson[K] {\n    const known = new Map();\n    const duplicateEntryIds = new Set();\n\n    (info[fieldName] || []).forEach((entry) => {\n      const entryId = entry[entryIdentifier];\n      if (known.has(entryId)) {\n        duplicateEntryIds.add(entryId);\n      }\n      known.set(entryId, entry);\n    });\n\n    if (duplicateEntryIds.size > 0) {\n      const duplicateIdsString = [...duplicateEntryIds.values()]\n        .map((name) => `\"${name}\"`)\n        .join(', ');\n      const warning = `Found duplicates in '${fieldName}': ${duplicateIdsString}. Only the last of each duplicate will be synced.`;\n      infofile.addWarning(loadedData, warning);\n    }\n\n    if (defaults) {\n      defaults.forEach((defaultEntry) => {\n        const defaultEntryId = defaultEntry[entryIdentifier];\n        if (!known.has(defaultEntryId)) {\n          known.set(defaultEntryId, defaultEntry);\n        }\n      });\n    }\n\n    // Turn the map back into a list; the JS spec ensures that Maps remember\n    // insertion order, so the order is preserved.\n    return [...known.values()];\n  }\n\n  // Assessment sets in DEFAULT_ASSESSMENT_SETS may be in use but not present in the\n  // course info JSON file. This ensures that default assessment sets are added if\n  // an assessment uses them, and removed if not.\n  const defaultAssessmentSetsInUse = DEFAULT_ASSESSMENT_SETS.filter((set) =>\n    assessmentSetsInUse.has(set.name),\n  );\n\n  const assessmentSets = getFieldWithoutDuplicates(\n    'assessmentSets',\n    'name',\n    defaultAssessmentSetsInUse,\n  );\n\n  // Tags in DEFAULT_TAGS may be in use but not present in the course info JSON\n  // file. This ensures that default tags are added if a question uses them, and\n  // removed if not.\n  const defaultTagsInUse = DEFAULT_TAGS.filter((tag) => tagsInUse.has(tag.name));\n\n  const tags = getFieldWithoutDuplicates('tags', 'name', defaultTagsInUse);\n  const topics = getFieldWithoutDuplicates('topics', 'name');\n  const sharingSets = getFieldWithoutDuplicates('sharingSets', 'name');\n\n  const assessmentModules = getFieldWithoutDuplicates('assessmentModules', 'name');\n\n  const devModeFeatures = run(() => {\n    const features = info?.options?.devModeFeatures ?? {};\n\n    // Support for legacy values, where features were an array of strings instead\n    // of an object mapping feature names to booleans.\n    if (Array.isArray(features)) {\n      return Object.fromEntries(features.map((feature) => [feature, true]));\n    }\n\n    return features;\n  });\n\n  if (Object.keys(devModeFeatures).length > 0) {\n    if (courseId == null) {\n      if (!config.devMode) {\n        infofile.addWarning(\n          loadedData,\n          `Loading course ${coursePath} without an ID, features cannot be validated.`,\n        );\n      }\n    } else {\n      const institution = await selectInstitutionForCourse({ course_id: courseId });\n\n      for (const [feature, overrideEnabled] of Object.entries(devModeFeatures)) {\n        // Check if the feature even exists.\n        if (!features.hasFeature(feature)) {\n          infofile.addWarning(loadedData, `Feature \"${feature}\" does not exist.`);\n          continue;\n        }\n\n        // If we're in dev mode, any feature is allowed.\n        if (config.devMode) continue;\n\n        // If the feature exists, check if it's granted to the course and warn if not.\n        const featureEnabled = await features.enabled(feature, {\n          institution_id: institution.id,\n          course_id: courseId,\n        });\n        if (overrideEnabled && !featureEnabled) {\n          infofile.addWarning(\n            loadedData,\n            `Feature \"${feature}\" is enabled in devModeFeatures, but is actually disabled.`,\n          );\n        } else if (!overrideEnabled && featureEnabled) {\n          infofile.addWarning(\n            loadedData,\n            `Feature \"${feature}\" is disabled in devModeFeatures, but is actually enabled.`,\n          );\n        }\n      }\n    }\n  }\n\n  const course = {\n    uuid: info.uuid.toLowerCase(),\n    path: coursePath,\n    name: info.name,\n    title: info.title,\n    timezone: info.timezone,\n    assessmentSets,\n    assessmentModules,\n    tags,\n    topics,\n    sharingSets,\n    options: {\n      useNewQuestionRenderer: info.options?.useNewQuestionRenderer ?? false,\n      devModeFeatures,\n    },\n  };\n\n  loadedData.data = course;\n  return loadedData;\n}\n\nasync function loadAndValidateJson<T extends { uuid: string }>({\n  coursePath,\n  filePath,\n  defaults,\n  schema,\n  validate,\n  tolerateMissing,\n}: {\n  coursePath: string;\n  filePath: string;\n  defaults: any;\n  schema: any;\n  /** Whether or not a missing file constitutes an error */\n  tolerateMissing?: boolean;\n  validate: (info: T) => Promise<{ warnings: string[]; errors: string[] }>;\n}): Promise<InfoFile<T> | null> {\n  const loadedJson: InfoFile<T> | null = await loadInfoFile({\n    coursePath,\n    filePath,\n    schema,\n    tolerateMissing,\n  });\n  if (loadedJson === null) {\n    // This should only occur if we looked for a file in a non-directory,\n    // as would happen if there was a .DS_Store file, or if we're\n    // tolerating missing files, as we'd need to for nesting support.\n    return null;\n  }\n  if (infofile.hasErrors(loadedJson) || !loadedJson.data) {\n    return loadedJson;\n  }\n\n  const validationResult = await validate(loadedJson.data);\n  if (validationResult.errors.length > 0) {\n    infofile.addErrors(loadedJson, validationResult.errors);\n    return loadedJson;\n  }\n\n  loadedJson.data = { ...defaults, ...loadedJson.data };\n  infofile.addWarnings(loadedJson, validationResult.warnings);\n  return loadedJson;\n}\n\n/**\n * Loads and schema-validates all info files in a directory.\n */\nasync function loadInfoForDirectory<T extends { uuid: string }>({\n  coursePath,\n  directory,\n  infoFilename,\n  defaultInfo,\n  schema,\n  validate,\n  recursive = false,\n}: {\n  /** The path of the course being synced */\n  coursePath: string;\n  /** The path of the directory relative to `coursePath` */\n  directory: string;\n  infoFilename: string;\n  defaultInfo: any;\n  schema: any;\n  validate: (info: T) => Promise<{ warnings: string[]; errors: string[] }>;\n  /** Whether or not info files should be searched for recursively */\n  recursive?: boolean;\n}): Promise<Record<string, InfoFile<T>>> {\n  // Recursive lookup might not be enabled for some info types - if it's\n  // disabled, we'll still utilize the same recursive function, but the\n  // recursive function won't actually recurse.\n  const infoFilesRootDir = path.join(coursePath, directory);\n  const walk = async (relativeDir: string) => {\n    const infoFiles: Record<string, InfoFile<T>> = {};\n    const files = await fs.readdir(path.join(infoFilesRootDir, relativeDir));\n\n    // For each file in the directory, assume it is a question directory\n    // and attempt to access `info.json`. If we can successfully read it,\n    // hooray, we're done.\n    await async.each(files, async (dir: string) => {\n      const infoFilePath = path.join(directory, relativeDir, dir, infoFilename);\n      const info = await loadAndValidateJson({\n        coursePath,\n        filePath: infoFilePath,\n        defaults: defaultInfo,\n        schema,\n        validate,\n        // If we aren't operating in recursive mode, we want to ensure\n        // that missing files are correctly reflected as errors.\n        tolerateMissing: recursive,\n      });\n      if (info) {\n        infoFiles[path.join(relativeDir, dir)] = info;\n      } else if (recursive) {\n        try {\n          const subInfoFiles = await walk(path.join(relativeDir, dir));\n          if (_.isEmpty(subInfoFiles)) {\n            infoFiles[path.join(relativeDir, dir)] = infofile.makeError(\n              `Missing JSON file: ${infoFilePath}`,\n            );\n          }\n          Object.assign(infoFiles, subInfoFiles);\n        } catch (e) {\n          if (e.code === 'ENOTDIR') {\n            // This wasn't a directory; ignore it.\n          } else if (e.code === 'ENOENT') {\n            // Missing directory; record it\n            infoFiles[path.join(relativeDir, dir)] = infofile.makeError(\n              `Missing JSON file: ${infoFilePath}`,\n            );\n          } else {\n            // Some other error, permissions perhaps. Throw to abort sync.\n            throw e;\n          }\n        }\n      }\n    });\n    return infoFiles;\n  };\n\n  try {\n    return await walk('');\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      // Missing directory; return an empty list\n      return {};\n    }\n    // Some other error; Throw it to abort.\n    throw e;\n  }\n}\n\nfunction checkDuplicateUUIDs<T>(\n  infos: Record<string, InfoFile<T>>,\n  makeErrorMessage: (uuid: string, otherIds: string[]) => string,\n) {\n  // First, create a map from UUIDs to questions that use them\n  const uuids = Object.entries(infos).reduce((map, [id, info]) => {\n    if (!info.uuid) {\n      // Couldn't find UUID in the file\n      return map;\n    }\n    let ids = map.get(info.uuid);\n    if (!ids) {\n      ids = [];\n      map.set(info.uuid, ids);\n    }\n    ids.push(id);\n    return map;\n  }, new Map<string, string[]>());\n\n  // Do a second pass to add errors for things with duplicate IDs\n  // We also null out UUIDs for items where duplicates are found\n  uuids.forEach((ids, uuid) => {\n    if (ids.length === 1) {\n      // Only one question uses this UUID\n      return;\n    }\n    ids.forEach((id) => {\n      const otherIds = ids.filter((other) => other !== id);\n      infofile.addWarning(infos[id], makeErrorMessage(uuid, otherIds));\n      infos[id].uuid = undefined;\n    });\n  });\n}\n\n/**\n * Checks that roles are not present.\n * @returns A list of warnings, if any\n */\nfunction checkAllowAccessRoles(rule: { role?: string }): string[] {\n  const warnings: string[] = [];\n  if ('role' in rule && rule.role !== 'Student') {\n    warnings.push(\n      `The entire \"allowAccess\" rule with \"role: ${rule.role}\" should be deleted. Instead, course owners can now manage course staff access on the \"Staff\" page.`,\n    );\n  }\n  return warnings;\n}\n\n/**\n * Returns whether or not an `allowAccess` rule date is valid. It's considered\n * valid if it matches the regexp used in the `input_date` sproc and if it can\n * parse into a JavaScript `Date` object. If the supplied date is considered\n * invalid, `null` is returned.\n */\nfunction parseAllowAccessDate(date: string): Date | null {\n  // This ensures we don't accept strings like \"2024-04\", which `parseISO`\n  // would happily accept. We want folks to always be explicit about days/times.\n  //\n  // This matches the regexp used in the `input_date` sproc.\n  const match = /[0-9]{4}-[0-9]{2}-[0-9]{2}[ T][0-9]{2}:[0-9]{2}:[0-9]{2}/.exec(date);\n  if (!match) return null;\n\n  const parsedDate = parseISO(date);\n  return isValid(parsedDate) ? parsedDate : null;\n}\n\n/**\n * Checks that dates, if present, are valid and sequenced correctly.\n * @returns A list of errors, if any, and whether it allows access in the future\n */\nfunction checkAllowAccessDates(rule: { startDate?: string; endDate?: string }): {\n  errors: string[];\n  accessibleInFuture: boolean;\n} {\n  const errors: string[] = [];\n\n  let startDate: Date | null = null;\n  let endDate: Date | null = null;\n\n  // Note that we're deliberately choosing to ignore timezone handling here. These\n  // will ultimately be interpreted with the course instance's timezone, but all we\n  // care about here are if the dates are valid and that the end date is after the\n  // start date.\n  //\n  // See the `input_date` sproc for where these strings are ultimately parsed for\n  // storage in the database. That sproc actually has stricter validation\n  if (rule.startDate) {\n    startDate = parseAllowAccessDate(rule.startDate);\n    if (!startDate) {\n      errors.push(`Invalid allowAccess rule: startDate (${rule.startDate}) is not valid`);\n    }\n  }\n  if (rule.endDate) {\n    endDate = parseAllowAccessDate(rule.endDate);\n    if (!endDate) {\n      errors.push(`Invalid allowAccess rule: endDate (${rule.endDate}) is not valid`);\n    }\n  }\n  if (startDate && endDate && isAfter(startDate, endDate)) {\n    errors.push(\n      `Invalid allowAccess rule: startDate (${rule.startDate}) must not be after endDate (${rule.endDate})`,\n    );\n  }\n  return {\n    errors,\n    accessibleInFuture: !endDate || isFuture(endDate),\n  };\n}\n\nasync function validateQuestion(\n  question: QuestionJson,\n): Promise<{ warnings: string[]; errors: string[] }> {\n  const warnings: string[] = [];\n  const errors: string[] = [];\n\n  if (question.type && question.options) {\n    try {\n      const schema = schemas[`questionOptions${question.type}`];\n      const options = question.options;\n      validateJSON(options, schema);\n    } catch (err) {\n      errors.push(err.message);\n    }\n  }\n\n  if (question.externalGradingOptions?.timeout) {\n    if (question.externalGradingOptions.timeout > config.externalGradingMaximumTimeout) {\n      warnings.push(\n        `External grading timeout value of ${question.externalGradingOptions.timeout} seconds exceeds the maximum value and has been limited to ${config.externalGradingMaximumTimeout} seconds.`,\n      );\n      question.externalGradingOptions.timeout = config.externalGradingMaximumTimeout;\n    }\n  }\n\n  return { warnings, errors };\n}\n\n/**\n * Formats a set of QIDs into a string for use in error messages.\n * @returns A comma-separated list of double-quoted QIDs.\n */\nfunction formatQids(qids: Set<string>) {\n  return Array.from(qids)\n    .map((qid) => `\"${qid}\"`)\n    .join(', ');\n}\n\nasync function validateAssessment(\n  assessment: AssessmentJson,\n  questions: Record<string, InfoFile<QuestionJson>>,\n  courseInstanceExpired: boolean,\n): Promise<{ warnings: string[]; errors: string[] }> {\n  const warnings: string[] = [];\n  const errors: string[] = [];\n\n  const allowRealTimeGrading = assessment.allowRealTimeGrading ?? true;\n  if (assessment.type === 'Homework') {\n    // Because of how Homework-type assessments work, we don't allow\n    // real-time grading to be disabled for them.\n    if (!allowRealTimeGrading) {\n      errors.push('Real-time grading cannot be disabled for Homework-type assessments');\n    }\n\n    // Homework-type assessments with multiple instances are not supported\n    if (assessment.multipleInstance) {\n      errors.push('\"multipleInstance\" cannot be used for Homework-type assessments');\n    }\n  }\n\n  // Check assessment access rules.\n  (assessment.allowAccess || []).forEach((rule) => {\n    const allowAccessResult = checkAllowAccessDates(rule);\n\n    if ('active' in rule && rule.active === false && 'credit' in rule && rule.credit !== 0) {\n      errors.push('Invalid allowAccess rule: credit must be 0 if active is false');\n    }\n\n    errors.push(...allowAccessResult.errors);\n  });\n\n  // When additional validation is added, we don't want to warn for past course\n  // instances that instructors will never touch again, as they won't benefit\n  // from fixing things. So, we'll only show some warnings for course instances\n  // which are accessible either now or any time in the future.\n  if (!courseInstanceExpired) {\n    (assessment.allowAccess || []).forEach((rule) => {\n      const allowAccessWarnings = checkAllowAccessRoles(rule);\n      warnings.push(...allowAccessWarnings);\n\n      if (rule.examUuid && rule.mode === 'Public') {\n        warnings.push('Invalid allowAccess rule: examUuid cannot be used with \"mode\": \"Public\"');\n      }\n    });\n  }\n\n  const foundQids = new Set<string>();\n  const duplicateQids = new Set<string>();\n  const missingQids = new Set<string>();\n  const draftQids = new Set<string>();\n  const checkAndRecordQid = (qid: string): void => {\n    if (qid[0] === '@') {\n      // Question is being imported from another course. We hold off on validating this until\n      // sync time because we need to query the database to verify that the question exists\n      return;\n    }\n    if (!(qid in questions)) {\n      missingQids.add(qid);\n    }\n    if (!foundQids.has(qid)) {\n      foundQids.add(qid);\n    } else {\n      duplicateQids.add(qid);\n    }\n\n    if (isDraftQid(qid)) {\n      draftQids.add(qid);\n    }\n  };\n  (assessment.zones || []).forEach((zone) => {\n    (zone.questions || []).map((zoneQuestion) => {\n      const autoPoints = zoneQuestion.autoPoints ?? zoneQuestion.points;\n      if (!allowRealTimeGrading && Array.isArray(autoPoints) && autoPoints.length > 1) {\n        errors.push(\n          'Cannot specify an array of multiple point values for a question if real-time grading is disabled',\n        );\n      }\n      // We'll normalize either single questions or alternative groups\n      // to make validation easier\n      let alternatives: QuestionPointsJson[] = [];\n      if ('alternatives' in zoneQuestion && 'id' in zoneQuestion) {\n        errors.push('Cannot specify both \"alternatives\" and \"id\" in one question');\n      } else if (zoneQuestion?.alternatives) {\n        zoneQuestion.alternatives.forEach((alternative) => checkAndRecordQid(alternative.id));\n        alternatives = zoneQuestion.alternatives.map((alternative) => {\n          const autoPoints = alternative.autoPoints ?? alternative.points;\n          if (!allowRealTimeGrading && Array.isArray(autoPoints) && autoPoints.length > 1) {\n            errors.push(\n              'Cannot specify an array of multiple point values for an alternative if real-time grading is disabled',\n            );\n          }\n          return {\n            points: alternative.points ?? zoneQuestion.points,\n            maxPoints: alternative.maxPoints ?? zoneQuestion.maxPoints,\n            maxAutoPoints: alternative.maxAutoPoints ?? zoneQuestion.maxAutoPoints,\n            autoPoints: alternative.autoPoints ?? zoneQuestion.autoPoints,\n            manualPoints: alternative.manualPoints ?? zoneQuestion.manualPoints,\n          };\n        });\n      } else if (zoneQuestion.id) {\n        checkAndRecordQid(zoneQuestion.id);\n        alternatives = [\n          {\n            points: zoneQuestion.points,\n            maxPoints: zoneQuestion.maxPoints,\n            maxAutoPoints: zoneQuestion.maxAutoPoints,\n            autoPoints: zoneQuestion.autoPoints,\n            manualPoints: zoneQuestion.manualPoints,\n          },\n        ];\n      } else {\n        errors.push('Zone question must specify either \"alternatives\" or \"id\"');\n      }\n\n      alternatives.forEach((alternative) => {\n        if (\n          alternative.points === undefined &&\n          alternative.autoPoints === undefined &&\n          alternative.manualPoints === undefined\n        ) {\n          errors.push('Must specify \"points\", \"autoPoints\" or \"manualPoints\" for a question');\n        }\n        if (\n          alternative.points !== undefined &&\n          (alternative.autoPoints !== undefined ||\n            alternative.manualPoints !== undefined ||\n            alternative.maxAutoPoints !== undefined)\n        ) {\n          errors.push(\n            'Cannot specify \"points\" for a question if \"autoPoints\", \"manualPoints\" or \"maxAutoPoints\" are specified',\n          );\n        }\n        if (assessment.type === 'Exam') {\n          if (alternative.maxPoints !== undefined || alternative.maxAutoPoints !== undefined) {\n            errors.push(\n              'Cannot specify \"maxPoints\" or \"maxAutoPoints\" for a question in an \"Exam\" assessment',\n            );\n          }\n\n          const hasSplitPoints =\n            alternative.autoPoints !== undefined ||\n            alternative.maxAutoPoints !== undefined ||\n            alternative.manualPoints !== undefined;\n          const autoPoints = (hasSplitPoints ? alternative.autoPoints : alternative.points) ?? 0;\n          const pointsList = Array.isArray(autoPoints) ? autoPoints : [autoPoints];\n          const isNonIncreasing = pointsList.every(\n            (points, index) => index === 0 || points <= pointsList[index - 1],\n          );\n          if (!isNonIncreasing) {\n            errors.push('Points for a question must be non-increasing');\n          }\n        }\n        if (assessment.type === 'Homework') {\n          if (\n            alternative.maxPoints !== undefined &&\n            (alternative.autoPoints !== undefined ||\n              alternative.manualPoints !== undefined ||\n              alternative.maxAutoPoints !== undefined)\n          ) {\n            errors.push(\n              'Cannot specify \"maxPoints\" for a question if \"autoPoints\", \"manualPoints\" or \"maxAutoPoints\" are specified',\n            );\n          }\n\n          if (Array.isArray(alternative.autoPoints ?? alternative.points)) {\n            errors.push(\n              'Cannot specify \"points\" or \"autoPoints\" as a list for a question in a \"Homework\" assessment',\n            );\n          }\n\n          if (!courseInstanceExpired) {\n            if (\n              alternative.points === 0 &&\n              alternative.maxPoints !== undefined &&\n              alternative.maxPoints > 0\n            ) {\n              errors.push('Cannot specify \"points\": 0 when \"maxPoints\" > 0');\n            }\n\n            if (\n              alternative.autoPoints === 0 &&\n              alternative.maxAutoPoints !== undefined &&\n              alternative.maxAutoPoints > 0\n            ) {\n              errors.push('Cannot specify \"autoPoints\": 0 when \"maxAutoPoints\" > 0');\n            }\n          }\n        }\n      });\n    });\n  });\n\n  if (duplicateQids.size > 0) {\n    errors.push(`The following questions are used more than once: ${formatQids(duplicateQids)}`);\n  }\n\n  if (missingQids.size > 0) {\n    errors.push(`The following questions do not exist in this course: ${formatQids(missingQids)}`);\n  }\n\n  if (draftQids.size > 0) {\n    errors.push(\n      `The following questions are marked as draft and therefore cannot be used in assessments: ${formatQids(draftQids)}`,\n    );\n  }\n\n  if (assessment.groupRoles) {\n    // Ensure at least one mandatory role can assign roles\n    const foundCanAssignRoles = assessment.groupRoles.some(\n      (role) => role.canAssignRoles && role.minimum !== undefined && role.minimum >= 1,\n    );\n\n    if (!foundCanAssignRoles) {\n      errors.push('Could not find a role with minimum >= 1 and \"canAssignRoles\" set to \"true\".');\n    }\n\n    // Ensure values for role minimum and maximum are within bounds\n    assessment.groupRoles.forEach((role) => {\n      if (\n        role.minimum !== undefined &&\n        assessment.groupMinSize &&\n        role.minimum > assessment.groupMinSize\n      ) {\n        warnings.push(\n          `Group role \"${role.name}\" has a minimum greater than the group's minimum size.`,\n        );\n      }\n      if (\n        role.minimum !== undefined &&\n        assessment.groupMaxSize &&\n        role.minimum > assessment.groupMaxSize\n      ) {\n        errors.push(\n          `Group role \"${role.name}\" contains an invalid minimum. (Expected at most ${assessment.groupMaxSize}, found ${role.minimum}).`,\n        );\n      }\n      if (\n        role.maximum !== undefined &&\n        assessment.groupMaxSize &&\n        role.maximum > assessment.groupMaxSize\n      ) {\n        errors.push(\n          `Group role \"${role.name}\" contains an invalid maximum. (Expected at most ${assessment.groupMaxSize}, found ${role.maximum}).`,\n        );\n      }\n      if (role.minimum !== undefined && role.maximum !== undefined && role.minimum > role.maximum) {\n        errors.push(\n          `Group role \"${role.name}\" must have a minimum <= maximum. (Expected minimum <= ${role.maximum}, found minimum = ${role.minimum}).`,\n        );\n      }\n    });\n\n    const validRoleNames = new Set();\n    assessment.groupRoles?.forEach((role) => {\n      validRoleNames.add(role.name);\n    });\n\n    const validateViewAndSubmitRolePermissions = (\n      canView: string[] | null | undefined,\n      canSubmit: string[] | null | undefined,\n      area: string,\n    ): void => {\n      canView?.forEach((roleName) => {\n        if (!validRoleNames.has(roleName)) {\n          errors.push(\n            `The ${area}'s \"canView\" permission contains the non-existent group role name \"${roleName}\".`,\n          );\n        }\n      });\n\n      canSubmit?.forEach((roleName) => {\n        if (!validRoleNames.has(roleName)) {\n          errors.push(\n            `The ${area}'s \"canSubmit\" permission contains the non-existent group role name \"${roleName}\".`,\n          );\n        }\n      });\n    };\n\n    // Validate role names at the assessment level\n    validateViewAndSubmitRolePermissions(assessment.canView, assessment.canSubmit, 'assessment');\n\n    // Validate role names for each zone\n    (assessment.zones || []).forEach((zone) => {\n      validateViewAndSubmitRolePermissions(zone.canView, zone.canSubmit, 'zone');\n      // Validate role names for each question\n      (zone.questions || []).forEach((zoneQuestion) => {\n        validateViewAndSubmitRolePermissions(\n          zoneQuestion.canView,\n          zoneQuestion.canSubmit,\n          'zone question',\n        );\n      });\n    });\n  }\n\n  return { warnings, errors };\n}\n\nasync function validateCourseInstance(\n  courseInstance: CourseInstanceJson,\n): Promise<{ warnings: string[]; errors: string[] }> {\n  const warnings: string[] = [];\n  const errors: string[] = [];\n\n  if ('allowIssueReporting' in courseInstance) {\n    if (courseInstance.allowIssueReporting) {\n      warnings.push('\"allowIssueReporting\" is no longer needed.');\n    } else {\n      errors.push(\n        '\"allowIssueReporting\" is no longer permitted in \"infoCourseInstance.json\". Instead, set \"allowIssueReporting\" in \"infoAssessment.json\" files.',\n      );\n    }\n  }\n\n  let accessibleInFuture = false;\n  (courseInstance.allowAccess || []).forEach((rule) => {\n    const allowAccessResult = checkAllowAccessDates(rule);\n    if (allowAccessResult.accessibleInFuture) {\n      accessibleInFuture = true;\n    }\n\n    errors.push(...allowAccessResult.errors);\n  });\n\n  if (accessibleInFuture) {\n    // Only warn about new roles for current or future courses.\n    (courseInstance.allowAccess || []).forEach((rule) => {\n      const allowAccessWarnings = checkAllowAccessRoles(rule);\n      warnings.push(...allowAccessWarnings);\n    });\n\n    if ('userRoles' in courseInstance) {\n      warnings.push(\n        'The property \"userRoles\" should be deleted. Instead, course owners can now manage staff access on the \"Staff\" page.',\n      );\n    }\n\n    // `shortName` has never been a meaningful property in course instance config.\n    // However, for many years our template course erroneously included it in the\n    // template course instance, so it's been copied around to basically every course.\n    // We didn't set `additionalProperties: false` in the schema, so we never caught\n    // this and for a long time it was silently ignored.\n    //\n    // To avoid breaking existing courses, we added it as a valid property to the schema,\n    // but we'll warn about it for any active or future course instances.\n    if (courseInstance.shortName) {\n      warnings.push('The property \"shortName\" is not used and should be deleted.');\n    }\n  }\n\n  return { warnings, errors };\n}\n\n/**\n * Loads all questions in a course directory.\n */\nexport async function loadQuestions(\n  coursePath: string,\n): Promise<Record<string, InfoFile<QuestionJson>>> {\n  const questions = await loadInfoForDirectory({\n    coursePath,\n    directory: 'questions',\n    infoFilename: 'info.json',\n    defaultInfo: DEFAULT_QUESTION_INFO,\n    schema: schemas.infoQuestion,\n    validate: validateQuestion,\n    recursive: true,\n  });\n  // Don't allow question directories to start with '@', because it is\n  // used to import questions from other courses.\n  for (const qid in questions) {\n    if (qid[0] === '@') {\n      infofile.addError(questions[qid], \"Question IDs are not allowed to begin with '@'\");\n    }\n  }\n  checkDuplicateUUIDs(\n    questions,\n    (uuid, ids) => `UUID \"${uuid}\" is used in other questions: ${ids.join(', ')}`,\n  );\n  return questions;\n}\n\n/**\n * Loads all course instances in a course directory.\n */\nexport async function loadCourseInstances(\n  coursePath: string,\n): Promise<Record<string, InfoFile<CourseInstanceJson>>> {\n  const courseInstances = await loadInfoForDirectory({\n    coursePath,\n    directory: 'courseInstances',\n    infoFilename: 'infoCourseInstance.json',\n    defaultInfo: DEFAULT_COURSE_INSTANCE_INFO,\n    schema: schemas.infoCourseInstance,\n    validate: validateCourseInstance,\n    recursive: true,\n  });\n  checkDuplicateUUIDs(\n    courseInstances,\n    (uuid, ids) => `UUID \"${uuid}\" is used in other course instances: ${ids.join(', ')}`,\n  );\n  return courseInstances;\n}\n\n/**\n * Loads all assessments in a course instance.\n */\nexport async function loadAssessments(\n  coursePath: string,\n  courseInstance: string,\n  courseInstanceExpired: boolean,\n  questions: Record<string, InfoFile<QuestionJson>>,\n): Promise<Record<string, InfoFile<AssessmentJson>>> {\n  const assessmentsPath = path.join('courseInstances', courseInstance, 'assessments');\n  const assessments = await loadInfoForDirectory({\n    coursePath,\n    directory: assessmentsPath,\n    infoFilename: 'infoAssessment.json',\n    defaultInfo: DEFAULT_ASSESSMENT_INFO,\n    schema: schemas.infoAssessment,\n    validate: (assessment: AssessmentJson) =>\n      validateAssessment(assessment, questions, courseInstanceExpired),\n    recursive: true,\n  });\n  checkDuplicateUUIDs(\n    assessments,\n    (uuid, ids) =>\n      `UUID \"${uuid}\" is used in other assessments in this course instance: ${ids.join(', ')}`,\n  );\n  return assessments;\n}\n"]}