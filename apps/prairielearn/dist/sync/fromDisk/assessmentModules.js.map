{"version":3,"file":"assessmentModules.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/assessmentModules.ts"],"names":[],"mappings":"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","sourcesContent":["import { loadSqlEquiv, queryAsync, queryRows, runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { AssessmentModuleSchema } from '../../lib/db-types.js';\nimport { type CourseData } from '../course-db.js';\nimport * as infofile from '../infofile.js';\n\nimport { determineOperationsForEntities } from './entity-list.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\ninterface DesiredAssessmentModule {\n  name: string;\n  // TODO: make non-nullable once we make this non-null in the database schema.\n  heading: string | null;\n}\n\nexport async function sync(courseId: string, courseData: CourseData) {\n  // We can only safely remove unused assessment modules if both `infoCourse.json`\n  // and all `infoAssessment.json` files are valid.\n  const isInfoCourseValid = !infofile.hasErrors(courseData.course);\n  const areAllInfoAssessmentsValid = Object.values(courseData.courseInstances).every((ci) => {\n    return Object.values(ci.assessments).every((a) => !infofile.hasErrors(a));\n  });\n  const deleteUnused = isInfoCourseValid && areAllInfoAssessmentsValid;\n\n  const knownAssessmentModuleNames = new Set<string>();\n  Object.values(courseData.courseInstances).forEach((ci) => {\n    Object.values(ci.assessments).forEach((a) => {\n      if (!infofile.hasErrors(a) && a.data?.module !== undefined) {\n        knownAssessmentModuleNames.add(a.data.module);\n      }\n    });\n  });\n\n  const existingAssessmentModules = await queryRows(\n    sql.select_assessment_modules,\n    { course_id: courseId },\n    AssessmentModuleSchema,\n  );\n\n  // Based on the set of desired assessment modules, determine which ones must be\n  // added, updated, or deleted.\n  const {\n    entitiesToCreate: assessmentModulesToCreate,\n    entitiesToUpdate: assessmentModulesToUpdate,\n    entitiesToDelete: assessmentModulesToDelete,\n  } = determineOperationsForEntities<DesiredAssessmentModule>({\n    courseEntities: courseData.course.data?.assessmentModules ?? [],\n    extraEntities: [\n      {\n        name: 'Default',\n        heading: 'Default module',\n        implicit: true,\n      },\n    ],\n    existingEntities: existingAssessmentModules,\n    knownNames: knownAssessmentModuleNames,\n    makeImplicitEntity: (name) => ({\n      name,\n      heading: name,\n      implicit: true,\n    }),\n    comparisonProperties: ['heading'],\n    isInfoCourseValid,\n    deleteUnused,\n  });\n\n  if (\n    assessmentModulesToCreate.length ||\n    assessmentModulesToUpdate.length ||\n    assessmentModulesToDelete.length\n  ) {\n    await runInTransactionAsync(async () => {\n      if (assessmentModulesToCreate.length) {\n        await queryAsync(sql.insert_assessment_modules, {\n          course_id: courseId,\n          modules: assessmentModulesToCreate.map((am) =>\n            JSON.stringify([am.name, am.heading, am.number, am.implicit]),\n          ),\n        });\n      }\n\n      if (assessmentModulesToUpdate.length) {\n        await queryAsync(sql.update_assessment_modules, {\n          course_id: courseId,\n          modules: assessmentModulesToUpdate.map((am) =>\n            JSON.stringify([am.name, am.heading, am.number, am.implicit]),\n          ),\n        });\n      }\n\n      if (assessmentModulesToDelete.length) {\n        await queryAsync(sql.delete_assessment_modules, {\n          course_id: courseId,\n          modules: assessmentModulesToDelete,\n        });\n      }\n    });\n  }\n}\n"]}