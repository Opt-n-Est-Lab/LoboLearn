{"version":3,"file":"assessmentSets.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/assessmentSets.ts"],"names":[],"mappings":"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","sourcesContent":["import { loadSqlEquiv, queryAsync, queryRows, runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { AssessmentSetSchema } from '../../lib/db-types.js';\nimport { type CourseData } from '../course-db.js';\nimport * as infofile from '../infofile.js';\n\nimport { determineOperationsForEntities } from './entity-list.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\ninterface DesiredAssessmentSet {\n  name: string;\n  abbreviation: string;\n  heading: string;\n  color: string;\n}\n\nexport async function sync(courseId: string, courseData: CourseData) {\n  // We can only safely remove unused assessment sets if both `infoCourse.json`\n  // and all `infoAssessment.json` files are valid.\n  const isInfoCourseValid = !infofile.hasErrors(courseData.course);\n  const areAllInfoAssessmentsValid = Object.values(courseData.courseInstances).every((ci) => {\n    return Object.values(ci.assessments).every((a) => !infofile.hasErrors(a));\n  });\n  const deleteUnused = isInfoCourseValid && areAllInfoAssessmentsValid;\n\n  const knownAssessmentSetNames = new Set<string>();\n  Object.values(courseData.courseInstances).forEach((ci) => {\n    Object.values(ci.assessments).forEach((a) => {\n      if (!infofile.hasErrors(a) && a.data?.set) {\n        knownAssessmentSetNames.add(a.data.set);\n      }\n    });\n  });\n\n  const existingAssessmentSets = await queryRows(\n    sql.select_assessment_sets,\n    { course_id: courseId },\n    AssessmentSetSchema,\n  );\n\n  // Based on the set of desired assessment sets, determine which ones must be\n  // added, updated, or deleted.\n  const {\n    entitiesToCreate: assessmentSetsToCreate,\n    entitiesToUpdate: assessmentSetsToUpdate,\n    entitiesToDelete: assessmentSetsToDelete,\n  } = determineOperationsForEntities<DesiredAssessmentSet>({\n    courseEntities: courseData.course.data?.assessmentSets ?? [],\n    // Make sure we have the \"Unknown\" assessment set, because\n    // we will use this as a last resort for assessments.\n    //\n    // We only create this if we have invalid JSON somewhere. If all the JSON\n    // is valid, we're guaranteed not to need this.\n    extraEntities: !deleteUnused\n      ? [\n          {\n            name: 'Unknown',\n            abbreviation: 'U',\n            heading: 'Unknown',\n            color: 'red3',\n            implicit: true,\n          },\n        ]\n      : [],\n    existingEntities: existingAssessmentSets,\n    knownNames: knownAssessmentSetNames,\n    makeImplicitEntity: (name) => ({\n      name,\n      abbreviation: name,\n      heading: name,\n      color: 'gray1',\n      implicit: true,\n    }),\n    comparisonProperties: ['abbreviation', 'heading', 'color'],\n    isInfoCourseValid,\n    deleteUnused,\n  });\n\n  if (\n    assessmentSetsToCreate.length ||\n    assessmentSetsToUpdate.length ||\n    assessmentSetsToDelete.length\n  ) {\n    await runInTransactionAsync(async () => {\n      if (assessmentSetsToCreate.length) {\n        await queryAsync(sql.insert_assessment_sets, {\n          course_id: courseId,\n          sets: assessmentSetsToCreate.map((as) =>\n            JSON.stringify([\n              as.name,\n              as.abbreviation,\n              as.heading,\n              as.color,\n              as.number,\n              as.implicit,\n            ]),\n          ),\n        });\n      }\n\n      if (assessmentSetsToUpdate.length) {\n        await queryAsync(sql.update_assessment_sets, {\n          course_id: courseId,\n          sets: assessmentSetsToUpdate.map((as) =>\n            JSON.stringify([\n              as.name,\n              as.abbreviation,\n              as.heading,\n              as.color,\n              as.number,\n              as.implicit,\n            ]),\n          ),\n        });\n      }\n\n      if (assessmentSetsToDelete.length) {\n        await queryAsync(sql.delete_assessment_sets, {\n          course_id: courseId,\n          sets: assessmentSetsToDelete,\n        });\n      }\n    });\n  }\n}\n"]}