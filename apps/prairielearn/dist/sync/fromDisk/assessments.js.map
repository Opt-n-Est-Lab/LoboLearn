{"version":3,"file":"assessments.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/assessments.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\nimport { run } from '@prairielearn/run';\n\nimport { config } from '../../lib/config.js';\nimport { IdSchema } from '../../lib/db-types.js';\nimport { features } from '../../lib/features/index.js';\nimport { type AssessmentJson } from '../../schemas/index.js';\nimport { type CourseInstanceData } from '../course-db.js';\nimport { isAccessRuleAccessibleInFuture } from '../dates.js';\nimport * as infofile from '../infofile.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ntype AssessmentInfoFile = infofile.InfoFile<AssessmentJson>;\n\n/**\n * SYNCING PROCESS:\n *\n * 1. Assign order_by number to every assessment\n * 2. Check that no UUIDs are duplicated within this course instance\n * 3. Check that no UUIDS are duplicated in any other course instance\n * 4. For each assessment...\n *   a) Insert an assessment; associate the ID of the new assessment with the assessment object\n *   b) For each access rule from the assessment...\n *     i) Ensure that a PS exam exists if needed (if an `examUuid` exists)\n *     ii) Insert the access rule with a new number\n *   c) Delete excess assessment access rules\n *   d) For each zone from the assessment...\n *     i) Insert the zone with a new number; associate the ID of the new zone with the zone object\n *   e) Delete any excess zones from the current assessment using the zone number\n *   f) For each zone from the assessment...\n *     i) Generate a list of alternatives for the zone (either one or many questions, depending on if `id` or `alternatives` is used)\n *     ii) Insert a new alternative group\n *     iii) For each alternative in the group...\n *       1. Insert an assessment question\n *   g) Delete excess alternative groups\n *   h) Soft-delete unused assessments (that were deleted since the last sync)\n *   i) Soft-delete unused assessment questions (from deleted assessments)\n *   j) Soft-delete unused assessment questions (from deleted assessments)\n *   k) Delete unused assessment access rules (from deleted assessments)\n *   l) Delete unused zones (from deletes assessments)\n */\n\nfunction getParamsForAssessment(\n  assessmentInfoFile: AssessmentInfoFile,\n  questionIds: Record<string, any>,\n) {\n  if (infofile.hasErrors(assessmentInfoFile)) return null;\n  const assessment = assessmentInfoFile.data;\n  if (!assessment) throw new Error(`Missing assessment data for ${assessmentInfoFile.uuid}`);\n\n  const allowIssueReporting = assessment.allowIssueReporting ?? true;\n  const allowRealTimeGrading = assessment.allowRealTimeGrading ?? true;\n  const requireHonorCode = assessment.requireHonorCode ?? true;\n  const allowPersonalNotes = assessment.allowPersonalNotes ?? true;\n\n  // It used to be the case that assessment access rules could be associated with a\n  // particular user role, e.g., Student, TA, or Instructor. Now, all access rules\n  // apply only to students. So, we filter out (and ignore) any access rule with a\n  // non-empty role that is not Student.\n  const allowAccess = (assessment.allowAccess ?? [])\n    .filter((accessRule) => !('role' in accessRule) || accessRule.role === 'Student')\n    .map((accessRule, index) => {\n      return {\n        number: index + 1,\n        mode: run(() => {\n          if (accessRule.mode) return accessRule.mode;\n          if (accessRule.examUuid) return 'Exam';\n          return null;\n        }),\n        uids: accessRule.uids ?? null,\n        start_date: accessRule.startDate ?? null,\n        end_date: accessRule.endDate ?? null,\n        credit: accessRule.credit ?? null,\n        time_limit_min: accessRule.timeLimitMin ?? null,\n        password: accessRule.password ?? null,\n        exam_uuid: accessRule.examUuid ?? null,\n        show_closed_assessment: accessRule.showClosedAssessment ?? true,\n        show_closed_assessment_score: accessRule.showClosedAssessmentScore ?? true,\n        active: accessRule.active ?? true,\n      };\n    });\n\n  const zones = (assessment.zones ?? []).map((zone, index) => {\n    return {\n      number: index + 1,\n      title: zone.title,\n      number_choose: zone.numberChoose,\n      max_points: zone.maxPoints,\n      best_questions: zone.bestQuestions,\n      advance_score_perc: zone.advanceScorePerc,\n      grade_rate_minutes: zone.gradeRateMinutes,\n      json_can_view: zone.canView,\n      json_can_submit: zone.canSubmit,\n    };\n  });\n\n  let alternativeGroupNumber = 0;\n  let assessmentQuestionNumber = 0;\n  const allRoleNames = (assessment.groupRoles ?? []).map((role) => role.name);\n  const assessmentCanView = assessment?.canView ?? allRoleNames;\n  const assessmentCanSubmit = assessment?.canSubmit ?? allRoleNames;\n  const alternativeGroups = (assessment.zones ?? []).map((zone) => {\n    const zoneGradeRateMinutes = zone.gradeRateMinutes ?? assessment.gradeRateMinutes ?? 0;\n    const zoneCanView = zone?.canView ?? assessmentCanView;\n    const zoneCanSubmit = zone?.canSubmit ?? assessmentCanSubmit;\n    return zone.questions.map((question) => {\n      let alternatives: {\n        qid: string;\n        maxPoints: number | null;\n        points: number | number[] | null;\n        maxAutoPoints: number | null;\n        autoPoints: number | number[] | null;\n        manualPoints: number | null;\n        forceMaxPoints: boolean;\n        triesPerVariant: number;\n        gradeRateMinutes: number;\n        jsonGradeRateMinutes: number | undefined;\n        canView: string[] | null;\n        canSubmit: string[] | null;\n        advanceScorePerc: number | undefined;\n      }[] = [];\n      const questionGradeRateMinutes = question.gradeRateMinutes ?? zoneGradeRateMinutes;\n      const questionCanView = question.canView ?? zoneCanView;\n      const questionCanSubmit = question.canSubmit ?? zoneCanSubmit;\n      if (question.alternatives) {\n        alternatives = question.alternatives.map((alternative) => {\n          return {\n            qid: alternative.id,\n            maxPoints: alternative.maxPoints ?? question.maxPoints ?? null,\n            points: alternative.points ?? question.points ?? null,\n            maxAutoPoints: alternative.maxAutoPoints ?? question.maxAutoPoints ?? null,\n            autoPoints: alternative.autoPoints ?? question.autoPoints ?? null,\n            manualPoints: alternative.manualPoints ?? question.manualPoints ?? null,\n            forceMaxPoints: alternative.forceMaxPoints ?? question.forceMaxPoints ?? false,\n            triesPerVariant: alternative.triesPerVariant ?? question.triesPerVariant ?? 1,\n            advanceScorePerc: alternative.advanceScorePerc,\n            gradeRateMinutes: alternative.gradeRateMinutes ?? questionGradeRateMinutes,\n            jsonGradeRateMinutes: alternative.gradeRateMinutes,\n            canView: questionCanView,\n            canSubmit: questionCanSubmit,\n          };\n        });\n      } else if (question.id) {\n        alternatives = [\n          {\n            qid: question.id,\n            maxPoints: question.maxPoints ?? null,\n            points: question.points ?? null,\n            maxAutoPoints: question.maxAutoPoints ?? null,\n            autoPoints: question.autoPoints ?? null,\n            manualPoints: question.manualPoints ?? null,\n            forceMaxPoints: question.forceMaxPoints ?? false,\n            triesPerVariant: question.triesPerVariant ?? 1,\n            advanceScorePerc: question.advanceScorePerc,\n            gradeRateMinutes: questionGradeRateMinutes,\n            jsonGradeRateMinutes: question.gradeRateMinutes,\n            canView: questionCanView,\n            canSubmit: questionCanSubmit,\n          },\n        ];\n      }\n\n      const normalizedAlternatives = alternatives.map((alternative) => {\n        const hasSplitPoints =\n          alternative.autoPoints !== null ||\n          alternative.maxAutoPoints !== null ||\n          alternative.manualPoints !== null;\n        const autoPoints = (hasSplitPoints ? alternative.autoPoints : alternative.points) ?? 0;\n        const manualPoints = (hasSplitPoints ? alternative.manualPoints : 0) ?? 0;\n\n        if (assessment.type === 'Exam') {\n          const pointsList = Array.isArray(autoPoints) ? autoPoints : [autoPoints];\n          const maxPoints = Math.max(...pointsList);\n\n          return {\n            ...alternative,\n            hasSplitPoints,\n            maxPoints,\n            initPoints: undefined,\n            pointsList: hasSplitPoints ? pointsList.map((p) => p + manualPoints) : pointsList,\n          };\n        } else if (assessment.type === 'Homework') {\n          const initPoints =\n            (Array.isArray(autoPoints) ? autoPoints[0] : autoPoints) + manualPoints;\n          const maxPoints = alternative.maxAutoPoints ?? alternative.maxPoints ?? autoPoints;\n\n          return {\n            ...alternative,\n            hasSplitPoints,\n            maxPoints,\n            initPoints,\n            pointsList: undefined,\n          };\n        } else {\n          throw new Error(`Unknown assessment type: ${assessment.type}`);\n        }\n      });\n\n      alternativeGroupNumber++;\n\n      const questions = normalizedAlternatives.map((alternative, alternativeIndex) => {\n        assessmentQuestionNumber++;\n        const questionId = questionIds[alternative.qid];\n        return {\n          number: assessmentQuestionNumber,\n          has_split_points: alternative.hasSplitPoints,\n          points_list: alternative.pointsList,\n          init_points: alternative.initPoints,\n          max_points: alternative.maxPoints,\n          manual_points: alternative.manualPoints,\n          force_max_points: alternative.forceMaxPoints,\n          tries_per_variant: alternative.triesPerVariant,\n          grade_rate_minutes: alternative.gradeRateMinutes,\n          json_grade_rate_minutes: alternative.jsonGradeRateMinutes,\n          question_id: questionId,\n          number_in_alternative_group: alternativeIndex + 1,\n          can_view: alternative.canView,\n          can_submit: alternative.canSubmit,\n          advance_score_perc: alternative.advanceScorePerc,\n          effective_advance_score_perc:\n            alternative.advanceScorePerc ??\n            question.advanceScorePerc ??\n            zone.advanceScorePerc ??\n            assessment.advanceScorePerc ??\n            0,\n        };\n      });\n\n      return {\n        number: alternativeGroupNumber,\n        number_choose: question.numberChoose,\n        advance_score_perc: question.advanceScorePerc,\n        json_grade_rate_minutes: question.gradeRateMinutes,\n        json_can_view: question.canView,\n        json_can_submit: question.canSubmit,\n        json_has_alternatives: !!question.alternatives,\n        questions,\n      };\n    });\n  });\n\n  const groupRoles = (assessment.groupRoles ?? []).map((role) => ({\n    role_name: role.name,\n    minimum: role.minimum,\n    maximum: role.maximum,\n    can_assign_roles: role.canAssignRoles,\n  }));\n\n  return {\n    type: assessment.type,\n    number: assessment.number,\n    title: assessment.title,\n    multiple_instance: assessment.multipleInstance ? true : false,\n    shuffle_questions:\n      (assessment.type === 'Exam' && assessment.shuffleQuestions === undefined) ||\n      assessment.shuffleQuestions\n        ? true\n        : false,\n    allow_issue_reporting: allowIssueReporting,\n    allow_real_time_grading: allowRealTimeGrading,\n    allow_personal_notes: allowPersonalNotes,\n    require_honor_code: requireHonorCode,\n    auto_close: assessment.autoClose ?? true,\n    max_points: assessment.maxPoints,\n    max_bonus_points: assessment.maxBonusPoints,\n    set_name: assessment.set,\n    assessment_module_name: assessment.module,\n    text: assessment.text,\n    constant_question_value: assessment.constantQuestionValue ?? false,\n    group_work: !!assessment.groupWork,\n    group_max_size: assessment.groupMaxSize || null,\n    group_min_size: assessment.groupMinSize || null,\n    student_group_create: !!assessment.studentGroupCreate,\n    student_group_join: !!assessment.studentGroupJoin,\n    student_group_leave: !!assessment.studentGroupLeave,\n    advance_score_perc: assessment.advanceScorePerc,\n    has_roles: !!assessment.groupRoles,\n    json_can_view: assessment.canView,\n    json_can_submit: assessment.canSubmit,\n    allowAccess,\n    zones,\n    alternativeGroups,\n    groupRoles,\n    grade_rate_minutes: assessment.gradeRateMinutes,\n    // Needed when deleting unused alternative groups\n    lastAlternativeGroupNumber: alternativeGroupNumber,\n    share_source_publicly: assessment.shareSourcePublicly ?? false,\n  };\n}\n\nfunction parseSharedQuestionReference(qid) {\n  const firstSlash = qid.indexOf('/');\n  if (firstSlash === -1) {\n    // No QID, invalid question reference. An error will be recorded when trying to locate this question\n    return {\n      sharing_name: qid.substring(1, qid.length),\n      qid: '',\n    };\n  }\n\n  return {\n    sharing_name: qid.substring(1, firstSlash),\n    qid: qid.substring(firstSlash + 1, qid.length),\n  };\n}\n\n/**\n * Determines if a course instance is accessible. A course instance is considered\n * to be accessible if any access rules either have no end date or have an end date\n * in the future.\n *\n * Note that this check is only approximate, as this doesn't take into account the\n * course instance's timezone. See implementation below for more details.\n */\nfunction isCourseInstanceAccessible(courseInstanceData: CourseInstanceData) {\n  const courseInstance = courseInstanceData.courseInstance.data;\n\n  // If the course instance data is not available, treat it as though it's\n  // not accessible.\n  if (!courseInstance) return false;\n\n  // If there are no access rules, the course instance is not accessible.\n  if (!courseInstance.allowAccess?.length) return false;\n\n  return courseInstance.allowAccess.some(isAccessRuleAccessibleInFuture);\n}\n\nexport async function sync(\n  courseId: string,\n  courseInstanceId: string,\n  courseInstanceData: CourseInstanceData,\n  questionIds: Record<string, any>,\n) {\n  const assessments = courseInstanceData.assessments;\n\n  // We only check exam UUIDs if the course instance is accessible. This allows\n  // us to delete the legacy `exams` table without producing sync warnings for\n  // exam UUIDs corresponding to course instances that are no longer used.\n  if (isCourseInstanceAccessible(courseInstanceData) && config.checkAccessRulesExamUuid) {\n    // UUID-based exam access rules are validated here instead of course-db.js\n    // because we need to hit the DB to check for them; we can't validate based\n    // solely on the data we're reading off disk.\n    // To be efficient, we'll collect all UUIDs from all assessments and check for\n    // their existence in a single sproc call. We'll store a reverse mapping from UUID\n    // to exams to be able to efficiently add warning information for missing UUIDs.\n    const examUuids = new Set<string>();\n    const uuidAssessmentMap = new Map<string, string[]>();\n    Object.entries(assessments).forEach(([tid, assessment]) => {\n      if (!assessment.data) return;\n      (assessment.data.allowAccess || []).forEach((allowAccess) => {\n        const { examUuid } = allowAccess;\n        if (examUuid) {\n          examUuids.add(examUuid);\n          let tids = uuidAssessmentMap.get(examUuid);\n          if (!tids) {\n            tids = [];\n            uuidAssessmentMap.set(examUuid, tids);\n          }\n          tids.push(tid);\n        }\n      });\n    });\n\n    const uuidsRes = await sqldb.queryRows(\n      sql.check_access_rules_exam_uuid,\n      { exam_uuids: JSON.stringify([...examUuids]) },\n      z.object({ uuid: z.string(), uuid_exists: z.boolean() }),\n    );\n    uuidsRes.forEach(({ uuid, uuid_exists }) => {\n      if (!uuid_exists) {\n        uuidAssessmentMap.get(uuid)?.forEach((tid) => {\n          infofile.addWarning(\n            assessments[tid],\n            `examUuid \"${uuid}\" not found. Ensure you copied the correct UUID from PrairieTest.`,\n          );\n        });\n      }\n    });\n  }\n\n  // A set of all imported question IDs.\n  const importedQids = new Set<string>();\n\n  // A mapping from assessment \"TIDs\" to a list of questions they import.\n  const assessmentImportedQids = new Map<string, string[]>();\n\n  Object.entries(assessments).forEach(([tid, assessment]) => {\n    if (!assessment.data) return;\n    (assessment.data.zones || []).forEach((zone) => {\n      (zone.questions || []).forEach((question) => {\n        const qids = question.alternatives?.map((alternative) => alternative.id) ?? [];\n        if (question.id) {\n          qids.push(question.id);\n        }\n        qids.forEach((qid) => {\n          if (qid[0] !== '@') return;\n\n          importedQids.add(qid);\n          let qids = assessmentImportedQids.get(tid);\n          if (!qids) {\n            qids = [];\n            assessmentImportedQids.set(tid, qids);\n          }\n          qids.push(qid);\n        });\n      });\n    });\n  });\n\n  if (importedQids.size > 0) {\n    const institutionId = await sqldb.queryRow(\n      sql.get_institution_id,\n      { course_id: courseId },\n      z.string(),\n    );\n    const questionSharingEnabled = await features.enabled('question-sharing', {\n      course_id: courseId,\n      course_instance_id: courseInstanceId,\n      institution_id: institutionId,\n    });\n    const consumePublicQuestionsEnabled = await features.enabled('consume-public-questions', {\n      course_id: courseId,\n      course_instance_id: courseInstanceId,\n      institution_id: institutionId,\n    });\n    if (!(questionSharingEnabled || consumePublicQuestionsEnabled) && config.checkSharingOnSync) {\n      for (const [tid, qids] of assessmentImportedQids.entries()) {\n        if (qids.length > 0) {\n          infofile.addError(\n            assessments[tid],\n            \"You have attempted to import a question with '@', but question sharing is not enabled for your course.\",\n          );\n        }\n      }\n    }\n  }\n\n  const importedQuestions = await sqldb.queryRows(\n    sql.get_imported_questions,\n    {\n      course_id: courseId,\n      imported_question_info: JSON.stringify(\n        Array.from(importedQids, parseSharedQuestionReference),\n      ),\n    },\n    z.object({ sharing_name: z.string(), qid: z.string(), id: IdSchema }),\n  );\n  for (const row of importedQuestions) {\n    questionIds['@' + row.sharing_name + '/' + row.qid] = row.id;\n  }\n  const missingQids = new Set(Array.from(importedQids).filter((qid) => !(qid in questionIds)));\n  if (config.checkSharingOnSync) {\n    for (const [tid, qids] of assessmentImportedQids.entries()) {\n      const assessmentMissingQids = qids.filter((qid) => missingQids.has(qid));\n      if (assessmentMissingQids.length > 0) {\n        infofile.addError(\n          assessments[tid],\n          `For each of the following, either the course you are referencing does not exist, or the question does not exist within that course: ${[\n            ...assessmentMissingQids,\n          ].join(', ')}`,\n        );\n      }\n    }\n  }\n\n  const assessmentParams = Object.entries(assessments).map(([tid, assessment]) => {\n    return JSON.stringify([\n      tid,\n      assessment.uuid,\n      infofile.stringifyErrors(assessment),\n      infofile.stringifyWarnings(assessment),\n      getParamsForAssessment(assessment, questionIds),\n    ]);\n  });\n\n  await sqldb.callOneRowAsync('sync_assessments', [\n    assessmentParams,\n    courseId,\n    courseInstanceId,\n    config.checkSharingOnSync,\n  ]);\n}\n"]}