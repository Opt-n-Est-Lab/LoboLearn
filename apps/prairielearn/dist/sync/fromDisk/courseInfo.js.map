{"version":3,"file":"courseInfo.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/courseInfo.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAGhD,OAAO,EAAmB,MAAM,iBAAiB,CAAC;AAClD,OAAO,KAAK,QAAQ,MAAM,gBAAgB,CAAC;AAE3C,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,SAAS,eAAe,CAAC,UAAsB;IAC7C,OAAO,CACL,UAAU,CAAC,IAAI,KAAK,sCAAsC;QAC1D,UAAU,CAAC,KAAK,KAAK,gBAAgB;QACrC,UAAU,CAAC,IAAI,KAAK,QAAQ,CAC7B,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,UAAsB,EAAE,QAAgB;IACjE,IAAI,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;QAC1C,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,oBAAoB,EAAE;YACvE,SAAS,EAAE,QAAQ;YACnB,WAAW,EAAE,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,MAAM,CAAC;YACxD,aAAa,EAAE,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC;SAC7D,CAAC,CAAC;QACH,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,iCAAiC,QAAQ,EAAE,CAAC,CAAC;QACrF,OAAO;IACT,CAAC;IAED,MAAM,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;IAC1C,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,aAAa,EAAE;QAChE,SAAS,EAAE,QAAQ;QACnB,UAAU,EAAE,UAAU,CAAC,IAAI;QAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;QACvB,gBAAgB,EAAE,UAAU,CAAC,QAAQ,IAAI,IAAI;QAC7C,cAAc,EAAE,eAAe,CAAC,UAAU,CAAC;QAC3C,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,EAAE;QACjC,aAAa,EAAE,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC;KAC7D,CAAC,CAAC;IACH,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,iCAAiC,QAAQ,EAAE,CAAC,CAAC;IACrF,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC;AACrD,CAAC","sourcesContent":["import * as sqldb from '@prairielearn/postgres';\n\nimport type { CourseJson } from '../../schemas/infoCourse.js';\nimport { type CourseData } from '../course-db.js';\nimport * as infofile from '../infofile.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nfunction isExampleCourse(courseInfo: CourseJson): boolean {\n  return (\n    courseInfo.uuid === 'fcc5282c-a752-4146-9bd6-ee19aac53fc5' &&\n    courseInfo.title === 'Example Course' &&\n    courseInfo.name === 'XC 101'\n  );\n}\n\nexport async function sync(courseData: CourseData, courseId: string) {\n  if (infofile.hasErrors(courseData.course)) {\n    const res = await sqldb.queryZeroOrOneRowAsync(sql.update_course_errors, {\n      course_id: courseId,\n      sync_errors: infofile.stringifyErrors(courseData.course),\n      sync_warnings: infofile.stringifyWarnings(courseData.course),\n    });\n    if (res.rowCount !== 1) throw new Error(`Unable to find course with ID ${courseId}`);\n    return;\n  }\n\n  const courseInfo = courseData.course.data;\n  if (!courseInfo) {\n    throw new Error('Course info file is missing data');\n  }\n\n  const res = await sqldb.queryZeroOrOneRowAsync(sql.update_course, {\n    course_id: courseId,\n    short_name: courseInfo.name,\n    title: courseInfo.title,\n    display_timezone: courseInfo.timezone || null,\n    example_course: isExampleCourse(courseInfo),\n    options: courseInfo.options || {},\n    sync_warnings: infofile.stringifyWarnings(courseData.course),\n  });\n  if (res.rowCount !== 1) throw new Error(`Unable to find course with ID ${courseId}`);\n  courseInfo.timezone = res.rows[0].display_timezone;\n}\n"]}