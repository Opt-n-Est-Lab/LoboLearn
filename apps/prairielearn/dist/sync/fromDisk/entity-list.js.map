{"version":3,"file":"entity-list.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/entity-list.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\ninterface NamedEntity {\n  name: string;\n}\n\ntype ExistingEntity<Entity> = Entity & {\n  // TODO: make non-nullable once we make this non-null in the database schemas.\n  number: number | null;\n  implicit: boolean;\n};\n\ntype ExtraEntity<Entity> = Entity & {\n  implicit: boolean;\n};\n\ntype DesiredEntity<Entity> = Entity & { number: number; implicit: boolean };\n\n/**\n * This function is used to determine which entities need to be created, updated, or deleted.\n * An \"entity\" is a named object that exists in a course (a tag, a topic, an assessment\n * set, or an assessment module). Entities may be listed explicitly (e.g. in `infoCourse.json`)\n * or implicitly, e.g. by use in questions or assessments.\n *\n * This function takes in a variety of information, including the actual state of the\n * course the current list of entities from the database. In produces arrays of entities to\n * create and update, and entity names to delete.\n */\nexport function determineOperationsForEntities<Entity extends NamedEntity>({\n  courseEntities,\n  extraEntities,\n  existingEntities,\n  knownNames,\n  makeImplicitEntity,\n  comparisonProperties,\n  isInfoCourseValid,\n  deleteUnused,\n}: {\n  /** The entities that are listed explicitly in the course. */\n  courseEntities: Entity[];\n  /** Any extra entities that should always exist. */\n  extraEntities?: ExtraEntity<Entity>[];\n  /** The entities that already exist in the database. */\n  existingEntities: ExistingEntity<Entity>[];\n  /** The names of all known entities as used in questions or assessments. */\n  knownNames: Set<string>;\n  /** A function to produce an \"implicit\" entity for a given name. */\n  makeImplicitEntity: (name: string) => Entity;\n  /**\n   * A list of properties to use when comparing entities for equality.\n   * Need not include `name`, `number`, or `implicit`, these will always\n   * be used for comparisons.\n   */\n  comparisonProperties: Exclude<keyof ExistingEntity<Entity>, 'name' | 'number' | 'implicit'>[];\n  /** Whether or not the `infoCourse.json` file is valid. */\n  isInfoCourseValid: boolean;\n  /** Whether or not unused entities should be deleted. */\n  deleteUnused: boolean;\n}): {\n  entitiesToCreate: DesiredEntity<Entity>[];\n  entitiesToUpdate: DesiredEntity<Entity>[];\n  entitiesToDelete: string[];\n} {\n  const fullComparisonProperties = ['name', 'number', 'implicit', ...comparisonProperties];\n\n  const existingEntitiesMap = new Map(existingEntities.map((entity) => [entity.name, entity]));\n  const desiredEntities = new Map<string, DesiredEntity<Entity>>();\n\n  // If `infoCourse.json` is invalid, keep all existing entities in place.\n  // Otherwise, sync whatever is in the JSON file.\n  if (isInfoCourseValid) {\n    for (const entity of courseEntities) {\n      desiredEntities.set(entity.name, {\n        ...entity,\n        implicit: false,\n        number: desiredEntities.size + 1,\n      });\n    }\n  } else {\n    for (const entity of existingEntities) {\n      desiredEntities.set(entity.name, {\n        ...entity,\n        number: desiredEntities.size + 1,\n      });\n    }\n  }\n\n  // Consider each entity name that's actually used. If it doesn't already exist,\n  // add an implicit version. Sort for consistent ordering.\n  for (const name of Array.from(knownNames).sort()) {\n    if (desiredEntities.has(name)) continue;\n\n    desiredEntities.set(name, {\n      ...makeImplicitEntity(name),\n      implicit: true,\n      number: desiredEntities.size + 1,\n    } satisfies DesiredEntity<Entity>);\n  }\n\n  // Add any extra entities at the end.\n  if (extraEntities?.length) {\n    for (const entity of extraEntities) {\n      // Give precedence to user-provided entities if they have the same name.\n      if (desiredEntities.has(entity.name)) continue;\n\n      desiredEntities.set(entity.name, {\n        ...entity,\n        number: desiredEntities.size + 1,\n      });\n    }\n  }\n\n  // Based on the set of desired entities, determine which ones must be\n  // created, updated, or deleted.\n  const entitiesToCreate = new Map<string, DesiredEntity<Entity>>();\n  const entitiesToUpdate = new Map<string, DesiredEntity<Entity>>();\n  const entitiesToDelete = new Set<string>();\n\n  for (const [name, entity] of desiredEntities) {\n    const existingEntity = existingEntitiesMap.get(name);\n\n    if (!existingEntity) {\n      entitiesToCreate.set(name, entity);\n    } else if (\n      !_.isEqual(\n        _.pick(existingEntity, fullComparisonProperties),\n        _.pick(entity, fullComparisonProperties),\n      )\n    ) {\n      // We'll only update the entity if it has changed.\n      entitiesToUpdate.set(name, entity);\n    }\n  }\n\n  if (deleteUnused) {\n    for (const name of existingEntitiesMap.keys()) {\n      if (!desiredEntities.has(name)) {\n        entitiesToDelete.add(name);\n      }\n    }\n  }\n\n  return {\n    entitiesToCreate: Array.from(entitiesToCreate.values()),\n    entitiesToUpdate: Array.from(entitiesToUpdate.values()),\n    entitiesToDelete: Array.from(entitiesToDelete.values()),\n  };\n}\n"]}