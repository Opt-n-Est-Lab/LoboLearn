{"version":3,"file":"entity-list.test.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/entity-list.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,8BAA8B,EAAE,MAAM,kBAAkB,CAAC;AAWlE,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC7B,MAAM,MAAM,GAAG,8BAA8B,CAAa;YACxD,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE,EAAE;YACpB,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;YAChD,oBAAoB,EAAE,EAAE;YACxB,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,MAAM,GAAG,8BAA8B,CAAa;YACxD,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;YAC9C,gBAAgB,EAAE,EAAE;YACpB,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAChE,oBAAoB,EAAE,EAAE;YACxB,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACxF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QAExF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,MAAM,GAAG,8BAA8B,CAAa;YACxD,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE,EAAE;YACpB,UAAU,EAAE,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/B,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;YAChD,oBAAoB,EAAE,EAAE;YACxB,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACvF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QAEvF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,MAAM,GAAG,8BAA8B,CAAa;YACxD,cAAc,EAAE,EAAE;YAClB,aAAa,EAAE;gBACb,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE;gBAC7B,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE;aAC9B;YACD,gBAAgB,EAAE,EAAE;YACpB,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;YAChD,oBAAoB,EAAE,EAAE;YACxB,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACvF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QAEvF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE;gBACd,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE;gBAC3B,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,gBAAgB,EAAE;aAC/C;YACD,aAAa,EAAE;gBACb;oBACE,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE,gBAAgB;oBACzB,QAAQ,EAAE,IAAI;iBACf;aACF;YACD,gBAAgB,EAAE,EAAE;YACpB,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC;gBACrC,IAAI;gBACJ,OAAO,EAAE,GAAG,IAAI,aAAa;aAC9B,CAAC;YACF,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,GAAG;YACZ,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,gBAAgB;YACzB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,MAAM,GAAG,8BAA8B,CAAa;YACxD,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;YAC9C,gBAAgB,EAAE,EAAE;YACpB,UAAU,EAAE,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACzC,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;YAChD,oBAAoB,EAAE,EAAE;YACxB,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACxF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACxF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACvF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QAEvF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE;gBACd,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE;gBAC/B,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE;aAChC;YACD,gBAAgB,EAAE;gBAChB,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;gBACvD,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;aACxD;YACD,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC/D,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE;gBACd,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE;gBAC3B,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE;aAC5B;YACD,gBAAgB,EAAE;gBAChB,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;gBACvD,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;aACxD;YACD,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC/D,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE;gBACd,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE;gBAC/B,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE;aAChC;YACD,gBAAgB,EAAE;gBAChB,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE;gBACtD,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE;aACvD;YACD,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC/D,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE;gBAChB,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;gBACvD,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;aACxD;YACD,UAAU,EAAE,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/B,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC;gBACrC,IAAI;gBACJ,OAAO,EAAE,GAAG,IAAI,aAAa;aAC9B,CAAC;YACF,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,cAAc;YACvB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,cAAc;YACvB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE;gBAChB,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;gBACvD,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;aACxD;YACD,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC/D,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE;gBAChB,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE;gBACtD,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE;aACvD;YACD,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC/D,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE;gBAChB,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;gBACvD,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE;aACvD;YACD,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC/D,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,MAAM,GAAG,8BAA8B,CAAwB;YACnE,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE;gBAChB,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;gBACvD,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE;aACxD;YACD,UAAU,EAAE,IAAI,GAAG,EAAE;YACrB,kBAAkB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC/D,oBAAoB,EAAE,CAAC,SAAS,CAAC;YACjC,iBAAiB,EAAE,KAAK;YACxB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport { determineOperationsForEntities } from './entity-list.js';\n\ninterface TestEntity {\n  name: string;\n}\n\ninterface TestEntityWithHeading {\n  name: string;\n  heading: string;\n}\n\ndescribe('determineOperationsForEntities', () => {\n  it('handles empty lists', () => {\n    const result = determineOperationsForEntities<TestEntity>({\n      courseEntities: [],\n      existingEntities: [],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name }),\n      comparisonProperties: [],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n    assert.lengthOf(result.entitiesToUpdate, 0);\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles adding explicit entities', () => {\n    const result = determineOperationsForEntities<TestEntity>({\n      courseEntities: [{ name: 'A' }, { name: 'B' }],\n      existingEntities: [],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name, implicit: true }),\n      comparisonProperties: [],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 2);\n    assert.deepEqual(result.entitiesToCreate[0], { name: 'A', implicit: false, number: 1 });\n    assert.deepEqual(result.entitiesToCreate[1], { name: 'B', implicit: false, number: 2 });\n\n    assert.lengthOf(result.entitiesToUpdate, 0);\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles adding implicit entities', () => {\n    const result = determineOperationsForEntities<TestEntity>({\n      courseEntities: [],\n      existingEntities: [],\n      knownNames: new Set(['A', 'B']),\n      makeImplicitEntity: (name: string) => ({ name }),\n      comparisonProperties: [],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 2);\n    assert.deepEqual(result.entitiesToCreate[0], { name: 'A', implicit: true, number: 1 });\n    assert.deepEqual(result.entitiesToCreate[1], { name: 'B', implicit: true, number: 2 });\n\n    assert.lengthOf(result.entitiesToUpdate, 0);\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles adding extra entities', () => {\n    const result = determineOperationsForEntities<TestEntity>({\n      courseEntities: [],\n      extraEntities: [\n        { name: 'A', implicit: true },\n        { name: 'B', implicit: true },\n      ],\n      existingEntities: [],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name }),\n      comparisonProperties: [],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 2);\n    assert.deepEqual(result.entitiesToCreate[0], { name: 'A', implicit: true, number: 1 });\n    assert.deepEqual(result.entitiesToCreate[1], { name: 'B', implicit: true, number: 2 });\n\n    assert.lengthOf(result.entitiesToUpdate, 0);\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles adding extra entities with explicit overrides', () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [\n        { name: 'A', heading: 'A' },\n        { name: 'Default', heading: 'Custom default' },\n      ],\n      extraEntities: [\n        {\n          name: 'Default',\n          heading: 'Default entity',\n          implicit: true,\n        },\n      ],\n      existingEntities: [],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({\n        name,\n        heading: `${name} (implicit)`,\n      }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 2);\n    assert.deepEqual(result.entitiesToCreate[0], {\n      name: 'A',\n      heading: 'A',\n      implicit: false,\n      number: 1,\n    });\n    assert.deepEqual(result.entitiesToCreate[1], {\n      name: 'Default',\n      heading: 'Custom default',\n      implicit: false,\n      number: 2,\n    });\n\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles adding explicit and implicit entities', () => {\n    const result = determineOperationsForEntities<TestEntity>({\n      courseEntities: [{ name: 'A' }, { name: 'B' }],\n      existingEntities: [],\n      knownNames: new Set(['A', 'B', 'D', 'C']),\n      makeImplicitEntity: (name: string) => ({ name }),\n      comparisonProperties: [],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 4);\n    assert.deepEqual(result.entitiesToCreate[0], { name: 'A', implicit: false, number: 1 });\n    assert.deepEqual(result.entitiesToCreate[1], { name: 'B', implicit: false, number: 2 });\n    assert.deepEqual(result.entitiesToCreate[2], { name: 'C', implicit: true, number: 3 });\n    assert.deepEqual(result.entitiesToCreate[3], { name: 'D', implicit: true, number: 4 });\n\n    assert.lengthOf(result.entitiesToUpdate, 0);\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles updating explicit entities', () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [\n        { name: 'A', heading: 'A new' },\n        { name: 'B', heading: 'B new' },\n      ],\n      existingEntities: [\n        { name: 'A', heading: 'A', implicit: false, number: 1 },\n        { name: 'B', heading: 'B', implicit: false, number: 2 },\n      ],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name, heading: name }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n\n    assert.lengthOf(result.entitiesToUpdate, 2);\n    assert.deepEqual(result.entitiesToUpdate[0], {\n      name: 'A',\n      heading: 'A new',\n      implicit: false,\n      number: 1,\n    });\n    assert.deepEqual(result.entitiesToUpdate[1], {\n      name: 'B',\n      heading: 'B new',\n      implicit: false,\n      number: 2,\n    });\n\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('does not update unchanged entities', () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [\n        { name: 'A', heading: 'A' },\n        { name: 'B', heading: 'B' },\n      ],\n      existingEntities: [\n        { name: 'A', heading: 'A', implicit: false, number: 1 },\n        { name: 'B', heading: 'B', implicit: false, number: 2 },\n      ],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name, heading: name }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n    assert.lengthOf(result.entitiesToUpdate, 0);\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles transitioning from implicit to explicit entities', () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [\n        { name: 'A', heading: 'A new' },\n        { name: 'B', heading: 'B new' },\n      ],\n      existingEntities: [\n        { name: 'A', heading: 'A', implicit: true, number: 1 },\n        { name: 'B', heading: 'B', implicit: true, number: 2 },\n      ],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name, heading: name }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n\n    assert.lengthOf(result.entitiesToUpdate, 2);\n    assert.deepEqual(result.entitiesToUpdate[0], {\n      name: 'A',\n      heading: 'A new',\n      implicit: false,\n      number: 1,\n    });\n    assert.deepEqual(result.entitiesToUpdate[1], {\n      name: 'B',\n      heading: 'B new',\n      implicit: false,\n      number: 2,\n    });\n\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles transitioning from explicit to implicit entities', () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [],\n      existingEntities: [\n        { name: 'A', heading: 'A', implicit: false, number: 1 },\n        { name: 'B', heading: 'B', implicit: false, number: 2 },\n      ],\n      knownNames: new Set(['A', 'B']),\n      makeImplicitEntity: (name: string) => ({\n        name,\n        heading: `${name} (implicit)`,\n      }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n\n    assert.lengthOf(result.entitiesToUpdate, 2);\n    assert.deepEqual(result.entitiesToUpdate[0], {\n      name: 'A',\n      heading: 'A (implicit)',\n      implicit: true,\n      number: 1,\n    });\n    assert.deepEqual(result.entitiesToUpdate[1], {\n      name: 'B',\n      heading: 'B (implicit)',\n      implicit: true,\n      number: 2,\n    });\n\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('handles deleting explicit entities', () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [],\n      existingEntities: [\n        { name: 'A', heading: 'A', implicit: false, number: 1 },\n        { name: 'B', heading: 'B', implicit: false, number: 2 },\n      ],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name, heading: name }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n    assert.lengthOf(result.entitiesToUpdate, 0);\n\n    assert.lengthOf(result.entitiesToDelete, 2);\n    assert.deepEqual(result.entitiesToDelete, ['A', 'B']);\n  });\n\n  it('handles deleting implicit entities', () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [],\n      existingEntities: [\n        { name: 'A', heading: 'A', implicit: true, number: 1 },\n        { name: 'B', heading: 'B', implicit: true, number: 2 },\n      ],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name, heading: name }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: true,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n    assert.lengthOf(result.entitiesToUpdate, 0);\n\n    assert.lengthOf(result.entitiesToDelete, 2);\n    assert.deepEqual(result.entitiesToDelete, ['A', 'B']);\n  });\n\n  it('does not delete if it should not', async () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [],\n      existingEntities: [\n        { name: 'A', heading: 'A', implicit: false, number: 1 },\n        { name: 'B', heading: 'B', implicit: true, number: 2 },\n      ],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name, heading: name }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: true,\n      deleteUnused: false,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n    assert.lengthOf(result.entitiesToUpdate, 0);\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n\n  it('uses existing entities if infoCourse.json is invalid', () => {\n    const result = determineOperationsForEntities<TestEntityWithHeading>({\n      courseEntities: [],\n      existingEntities: [\n        { name: 'A', heading: 'A', implicit: false, number: 1 },\n        { name: 'B', heading: 'B', implicit: false, number: 2 },\n      ],\n      knownNames: new Set(),\n      makeImplicitEntity: (name: string) => ({ name, heading: name }),\n      comparisonProperties: ['heading'],\n      isInfoCourseValid: false,\n      deleteUnused: true,\n    });\n\n    assert.lengthOf(result.entitiesToCreate, 0);\n    assert.lengthOf(result.entitiesToUpdate, 0);\n    assert.lengthOf(result.entitiesToDelete, 0);\n  });\n});\n"]}