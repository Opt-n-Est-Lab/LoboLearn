{"version":3,"file":"sharing.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/sharing.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAmB,MAAM,iBAAiB,CAAC;AAClD,OAAO,KAAK,QAAQ,MAAM,gBAAgB,CAAC;AAC3C,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,CAAC,KAAK,UAAU,IAAI,CACxB,QAAgB,EAChB,UAAsB,EACtB,WAAgC;IAEhC,IAAI,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;QAC1C,OAAO;IACT,CAAC;IAED,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,wBAAwB,EAAE;QACnD,SAAS,EAAE,QAAQ;QACnB,uBAAuB,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,IAAI,EAAE,CAAC;KACnF,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,MAAM,KAAK,CAAC,SAAS,CAC7C,GAAG,CAAC,0BAA0B,EAC9B,EAAE,SAAS,EAAE,QAAQ,EAAE,EACvB,CAAC,CAAC,MAAM,CAAC;QACP,EAAE,EAAE,QAAQ;QACZ,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;KACjB,CAAC,CACH,CAAC;IACF,MAAM,mBAAmB,GAAG,EAAE,CAAC;IAC/B,KAAK,MAAM,UAAU,IAAI,iBAAiB,EAAE,CAAC;QAC3C,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC;IACvD,CAAC;IAED,MAAM,mBAAmB,GAAsD,EAAE,CAAC;IAClF,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE;QAC/D,IAAI,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC;YAAE,OAAO;QACzC,MAAM,8BAA8B,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,IAAI,EAAE,CAAC,CAAC;QACjF,MAAM,qBAAqB,GAAG,CAAC,GAAG,8BAA8B,CAAC,CAAC,GAAG,CACnE,CAAC,UAAU,EAAE,EAAE,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAChD,CAAC;QACF,qBAAqB,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;YAC7C,mBAAmB,CAAC,IAAI,CAAC;gBACvB,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC;gBAC7B,cAAc,EAAE,YAAY;aAC7B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,0BAA0B,EAAE;QACrD,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC;KAC/D,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { IdSchema } from '../../lib/db-types.js';\nimport { type CourseData } from '../course-db.js';\nimport * as infofile from '../infofile.js';\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport async function sync(\n  courseId: string,\n  courseData: CourseData,\n  questionIds: Record<string, any>,\n) {\n  if (infofile.hasErrors(courseData.course)) {\n    return;\n  }\n\n  await sqldb.queryAsync(sql.sync_course_sharing_sets, {\n    course_id: courseId,\n    new_course_sharing_sets: JSON.stringify(courseData.course.data?.sharingSets ?? []),\n  });\n\n  const courseSharingSets = await sqldb.queryRows(\n    sql.select_course_sharing_sets,\n    { course_id: courseId },\n    z.object({\n      id: IdSchema,\n      name: z.string(),\n    }),\n  );\n  const sharingSetIdsByName = {};\n  for (const sharingSet of courseSharingSets) {\n    sharingSetIdsByName[sharingSet.name] = sharingSet.id;\n  }\n\n  const questionSharingSets: { question_id: string; sharing_set_id: string }[] = [];\n  Object.entries(courseData.questions).forEach(([qid, question]) => {\n    if (infofile.hasErrors(question)) return;\n    const dedupedQuestionSharingSetNames = new Set(question.data?.sharingSets ?? []);\n    const questionSharingSetIds = [...dedupedQuestionSharingSetNames].map(\n      (sharingSet) => sharingSetIdsByName[sharingSet],\n    );\n    questionSharingSetIds.forEach((sharingSetId) => {\n      questionSharingSets.push({\n        question_id: questionIds[qid],\n        sharing_set_id: sharingSetId,\n      });\n    });\n  });\n\n  await sqldb.queryAsync(sql.sync_question_sharing_sets, {\n    new_question_sharing_sets: JSON.stringify(questionSharingSets),\n  });\n}\n"]}