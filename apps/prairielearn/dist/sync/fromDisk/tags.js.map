{"version":3,"file":"tags.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/tags.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  callAsync,\n  loadSqlEquiv,\n  queryAsync,\n  queryRows,\n  runInTransactionAsync,\n} from '@prairielearn/postgres';\nimport { run } from '@prairielearn/run';\n\nimport { type Tag, TagSchema } from '../../lib/db-types.js';\nimport { type CourseData } from '../course-db.js';\nimport * as infofile from '../infofile.js';\n\nimport { determineOperationsForEntities } from './entity-list.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\ninterface DesiredTag {\n  name: string;\n  color: string;\n  description?: string | null;\n}\n\nexport async function sync(\n  courseId: string,\n  courseData: CourseData,\n  questionIds: Record<string, any>,\n) {\n  // We can only safely remove unused tags if both `infoCourse.json` and all\n  // question `info.json` files are valid.\n  const isInfoCourseValid = !infofile.hasErrors(courseData.course);\n  const areAllInfoQuestionsValid = Object.values(courseData.questions).every(\n    (q) => !infofile.hasErrors(q),\n  );\n  const deleteUnused = isInfoCourseValid && areAllInfoQuestionsValid;\n\n  const knownQuestionTagsNames = new Set<string>();\n  Object.values(courseData.questions).forEach((q) => {\n    if (!infofile.hasErrors(q)) {\n      (q.data?.tags ?? []).forEach((t) => knownQuestionTagsNames.add(t));\n    }\n  });\n\n  const existingTags = await queryRows(sql.select_tags, { course_id: courseId }, TagSchema);\n\n  // Based on the set of desired tags, determine which ones must be\n  // added, updated, or deleted.\n  const {\n    entitiesToCreate: tagsToCreate,\n    entitiesToUpdate: tagsToUpdate,\n    entitiesToDelete: tagsToDelete,\n  } = determineOperationsForEntities<DesiredTag>({\n    courseEntities: courseData.course.data?.tags ?? [],\n    existingEntities: existingTags,\n    knownNames: knownQuestionTagsNames,\n    makeImplicitEntity: (name) => ({\n      name,\n      color: 'gray1',\n      description: name,\n    }),\n    comparisonProperties: ['color', 'description'],\n    isInfoCourseValid,\n    deleteUnused,\n  });\n\n  const newTags = await run(async () => {\n    if (!tagsToCreate.length && !tagsToUpdate.length && !tagsToDelete.length) return [];\n\n    return await runInTransactionAsync(async () => {\n      const insertedTags = await run(async () => {\n        if (tagsToCreate.length === 0) return [];\n\n        return queryRows(\n          sql.insert_tags,\n          {\n            course_id: courseId,\n            tags: tagsToCreate.map((t) =>\n              JSON.stringify([t.name, t.description, t.color, t.number, t.implicit]),\n            ),\n          },\n          TagSchema,\n        );\n      });\n\n      if (tagsToUpdate.length > 0) {\n        await queryAsync(sql.update_tags, {\n          course_id: courseId,\n          tags: tagsToUpdate.map((t) =>\n            JSON.stringify([t.name, t.description, t.color, t.number, t.implicit]),\n          ),\n        });\n      }\n\n      if (tagsToDelete.length > 0) {\n        await queryAsync(sql.delete_tags, {\n          course_id: courseId,\n          tags: tagsToDelete,\n        });\n      }\n\n      return insertedTags;\n    });\n  });\n\n  const tagIdsByName = new Map<string, Tag>();\n\n  for (const tag of existingTags) {\n    tagIdsByName.set(tag.name, tag);\n  }\n\n  for (const tag of newTags) {\n    tagIdsByName.set(tag.name, tag);\n  }\n\n  const questionTagsParam: string[] = [];\n  Object.entries(courseData.questions).forEach(([qid, question]) => {\n    if (infofile.hasErrors(question)) return;\n    const dedupedQuestionTagNames = new Set<string>();\n    (question.data?.tags ?? []).forEach((t) => dedupedQuestionTagNames.add(t));\n    const questionTagIds = [...dedupedQuestionTagNames].map((t) => {\n      const tag = tagIdsByName.get(t);\n\n      // This should never happen in practice, but this keeps the type checker\n      // happy, and if it does happen, we want it to fail obviously and loudly.\n      if (!tag) throw new Error(`Tag ${t} not found`);\n\n      return tag.id;\n    });\n    questionTagsParam.push(JSON.stringify([questionIds[qid], questionTagIds]));\n  });\n\n  await callAsync('sync_question_tags', [questionTagsParam]);\n}\n"]}