{"version":3,"file":"topics.js","sourceRoot":"","sources":["../../../src/sync/fromDisk/topics.ts"],"names":[],"mappings":"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","sourcesContent":["import { loadSqlEquiv, queryAsync, queryRows, runInTransactionAsync } from '@prairielearn/postgres';\n\nimport { TopicSchema } from '../../lib/db-types.js';\nimport { type CourseData } from '../course-db.js';\nimport * as infofile from '../infofile.js';\n\nimport { determineOperationsForEntities } from './entity-list.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\ninterface DesiredTopic {\n  name: string;\n  color: string;\n  description?: string | null;\n}\n\nexport async function sync(courseId: string, courseData: CourseData) {\n  // We can only safely remove unused topics if both `infoCourse.json` and all\n  // question `info.json` files are valid.\n  const isInfoCourseValid = !infofile.hasErrors(courseData.course);\n  const areAllInfoQuestionsValid = Object.values(courseData.questions).every(\n    (q) => !infofile.hasErrors(q),\n  );\n  const deleteUnused = isInfoCourseValid && areAllInfoQuestionsValid;\n\n  const knownQuestionTopicNames = new Set<string>();\n  Object.values(courseData.questions).forEach((q) => {\n    // We technically allow courses to define an \"empty string\" topic, so we'll\n    // support that for implicit topics as well by checking if the topic is\n    // nullish, rather than falsy (which wouldn't handle empty strings).\n    //\n    // TODO: consider requiring that all topics have a non-empty name.\n    if (!infofile.hasErrors(q) && q.data?.topic != null) {\n      knownQuestionTopicNames.add(q.data.topic);\n    }\n  });\n\n  const existingTopics = await queryRows(sql.select_topics, { course_id: courseId }, TopicSchema);\n\n  // Based on the set of desired topics, determine which ones must be\n  // added, updated, or deleted.\n  const {\n    entitiesToCreate: topicsToCreate,\n    entitiesToUpdate: topicsToUpdate,\n    entitiesToDelete: topicsToDelete,\n  } = determineOperationsForEntities<DesiredTopic>({\n    courseEntities: courseData.course.data?.topics ?? [],\n    existingEntities: existingTopics,\n    knownNames: knownQuestionTopicNames,\n    makeImplicitEntity: (name) => ({\n      name,\n      color: 'gray1',\n      description: name,\n    }),\n    comparisonProperties: ['color', 'description'],\n    isInfoCourseValid,\n    deleteUnused,\n  });\n\n  if (topicsToCreate.length || topicsToUpdate.length || topicsToDelete.length) {\n    await runInTransactionAsync(async () => {\n      if (topicsToCreate.length > 0) {\n        await queryAsync(sql.insert_topics, {\n          course_id: courseId,\n          topics: topicsToCreate.map((t) =>\n            JSON.stringify([t.name, t.description, t.color, t.number, t.implicit]),\n          ),\n        });\n      }\n\n      if (topicsToUpdate.length > 0) {\n        await queryAsync(sql.update_topics, {\n          course_id: courseId,\n          topics: topicsToUpdate.map((t) =>\n            JSON.stringify([t.name, t.description, t.color, t.number, t.implicit]),\n          ),\n        });\n      }\n\n      if (topicsToDelete.length > 0) {\n        await queryAsync(sql.delete_topics, { course_id: courseId, topics: topicsToDelete });\n      }\n    });\n  }\n}\n"]}