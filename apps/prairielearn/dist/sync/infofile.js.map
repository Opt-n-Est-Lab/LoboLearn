{"version":3,"file":"infofile.js","sourceRoot":"","sources":["../../src/sync/infofile.ts"],"names":[],"mappings":"AAWA,MAAM,UAAU,OAAO,CAAI,QAAqB;IAC9C,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,SAAS,CAAI,QAAqB;IAChD,OAAO,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,QAAqB;IAClD,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;AACtC,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAI,QAAqB;IAC1D,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,eAAe,CAAI,QAAqB;IACtD,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAI,QAAqB;IACxD,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtC,CAAC;AAED,MAAM,UAAU,QAAQ,CAAI,QAAqB,EAAE,KAAa;IAC9D,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AAED,MAAM,UAAU,SAAS,CAAI,QAAqB,EAAE,MAAgB;IAClE,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,UAAU,CAAI,QAAqB,EAAE,OAAe;IAClE,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,QAAqB,EAAE,QAAkB;IACtE,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,WAAqD,EAAE;IAEvD,OAAO,EAAE,GAAG,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,SAAS,CAAI,KAAa;IACxC,OAAO,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,OAAe;IAC5C,OAAO,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;AAC7C,CAAC","sourcesContent":["/**\n * Represents the result of attempting to load and validate an info file. May\n * contain any combination of errors, warnings, data, and a UUID.\n */\nexport interface InfoFile<T> {\n  errors: string[];\n  warnings: string[];\n  uuid?: string;\n  data?: T;\n}\n\nexport function hasUuid<T>(infoFile: InfoFile<T>): boolean {\n  return !!infoFile.uuid;\n}\n\nexport function hasErrors<T>(infoFile: InfoFile<T>): boolean {\n  return infoFile.errors.length > 0;\n}\n\nexport function hasWarnings<T>(infoFile: InfoFile<T>): boolean {\n  return infoFile.warnings.length > 0;\n}\n\nexport function hasErrorsOrWarnings<T>(infoFile: InfoFile<T>): boolean {\n  return hasErrors(infoFile) || hasWarnings(infoFile);\n}\n\nexport function stringifyErrors<T>(infoFile: InfoFile<T>): string {\n  return infoFile.errors.join('\\n');\n}\n\nexport function stringifyWarnings<T>(infoFile: InfoFile<T>): string {\n  return infoFile.warnings.join('\\n');\n}\n\nexport function addError<T>(infoFile: InfoFile<T>, error: string): void {\n  infoFile.errors.push(error);\n}\n\nexport function addErrors<T>(infoFile: InfoFile<T>, errors: string[]): void {\n  infoFile.errors = infoFile.errors.concat(errors);\n}\n\nexport function addWarning<T>(infoFile: InfoFile<T>, warning: string): void {\n  infoFile.warnings.push(warning);\n}\n\nexport function addWarnings<T>(infoFile: InfoFile<T>, warnings: string[]): void {\n  infoFile.warnings = infoFile.warnings.concat(warnings);\n}\n\nexport function makeInfoFile<T>(\n  infoFile: Omit<InfoFile<T>, 'errors' | 'warnings'> = {},\n): InfoFile<T> {\n  return { ...infoFile, errors: [], warnings: [] };\n}\n\nexport function makeError<T>(error: string): InfoFile<T> {\n  return { errors: [error], warnings: [] };\n}\n\nexport function makeWarning<T>(warning: string): InfoFile<T> {\n  return { warnings: [warning], errors: [] };\n}\n"]}