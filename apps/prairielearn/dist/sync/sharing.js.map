{"version":3,"file":"sharing.js","sourceRoot":"","sources":["../../src/sync/sharing.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { IdSchema } from '../lib/db-types.js';\nimport { type ServerJobLogger } from '../lib/server-jobs.js';\n\nimport { type CourseData } from './course-db.js';\nimport { isDraftQid } from './question.js';\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ninterface SharedQuestion {\n  id: string;\n  qid: string;\n  share_publicly: boolean;\n}\n\nexport async function selectSharedQuestions(courseId: string): Promise<SharedQuestion[]> {\n  return await sqldb.queryRows(\n    sql.select_shared_questions,\n    { course_id: courseId },\n    z.object({\n      id: IdSchema,\n      qid: z.string(),\n      share_publicly: z.boolean(),\n    }),\n  );\n}\n\nexport function getInvalidRenames(\n  sharedQuestions: SharedQuestion[],\n  courseData: CourseData,\n  logger: ServerJobLogger,\n): boolean {\n  const invalidRenames: string[] = [];\n  sharedQuestions.forEach((question) => {\n    if (!courseData.questions[question.qid]) {\n      invalidRenames.push(question.qid);\n    }\n  });\n\n  const existInvalidRenames = invalidRenames.length > 0;\n  if (existInvalidRenames) {\n    logger.error(\n      `✖ Course sync completely failed. The following questions are shared and cannot be renamed or deleted: ${invalidRenames.join(', ')}`,\n    );\n  }\n  return existInvalidRenames;\n}\n\nexport function checkInvalidPublicSharingRemovals(\n  sharedQuestions: SharedQuestion[],\n  courseData: CourseData,\n  logger: ServerJobLogger,\n): boolean {\n  const invalidUnshares: string[] = [];\n  sharedQuestions.forEach((question) => {\n    if (!question.share_publicly) {\n      return;\n    }\n\n    // TODO: allow if question is not used in anyone else's assessments\n    const questionData = courseData.questions[question.qid].data;\n    if (!questionData?.sharePublicly) {\n      invalidUnshares.push(question.qid);\n    }\n  });\n\n  const existInvalidUnshares = invalidUnshares.length > 0;\n  if (existInvalidUnshares) {\n    logger.error(\n      `✖ Course sync completely failed. The following questions are are publicly shared and cannot be unshared: ${invalidUnshares.join(', ')}`,\n    );\n  }\n  return existInvalidUnshares;\n}\n\nexport async function checkInvalidSharingSetDeletions(\n  courseId: string,\n  courseData: CourseData,\n  logger: ServerJobLogger,\n): Promise<boolean> {\n  const sharingSets = await sqldb.queryRows(\n    sql.select_sharing_sets,\n    { course_id: courseId },\n    z.string(),\n  );\n\n  const invalidSharingSetDeletions: string[] = [];\n  const sharingSetNames = (courseData.course.data?.sharingSets || []).map((ss) => ss.name);\n  sharingSets.forEach((sharingSet) => {\n    if (!sharingSetNames.includes(sharingSet)) {\n      invalidSharingSetDeletions.push(sharingSet);\n    }\n  });\n\n  const existInvalidSharingSetDeletions = invalidSharingSetDeletions.length > 0;\n  if (existInvalidSharingSetDeletions) {\n    logger.error(\n      `✖ Course sync completely failed. The following sharing sets cannot be removed from 'infoCourse.json': ${invalidSharingSetDeletions.join(', ')}`,\n    );\n  }\n  return existInvalidSharingSetDeletions;\n}\n\nexport function checkInvalidSharingSetAdditions(\n  courseData: CourseData,\n  logger: ServerJobLogger,\n): boolean {\n  const invalidSharingSetAdditions: Record<string, string[]> = {};\n  const sharingSetNames = (courseData.course.data?.sharingSets || []).map((ss) => ss.name);\n\n  for (const qid in courseData.questions) {\n    const question = courseData.questions[qid];\n    const questionSharingSets = question.data?.sharingSets || [];\n    questionSharingSets.forEach((sharingSet) => {\n      if (!sharingSetNames.includes(sharingSet)) {\n        if (!invalidSharingSetAdditions[qid]) {\n          invalidSharingSetAdditions[qid] = [];\n        }\n        invalidSharingSetAdditions[qid].push(sharingSet);\n      }\n    });\n  }\n\n  const existInvalidSharingSetAdditions = Object.keys(invalidSharingSetAdditions).length > 0;\n  if (existInvalidSharingSetAdditions) {\n    logger.error(\n      `✖ Course sync completely failed. The following questions are being added to sharing sets which do not exist: ${Object.keys(\n        invalidSharingSetAdditions,\n      )\n        .map((key) => `${key}: ${JSON.stringify(invalidSharingSetAdditions[key])}`)\n        .join(', ')}`,\n    );\n  }\n\n  return existInvalidSharingSetAdditions;\n}\n\nexport async function checkInvalidSharingSetRemovals(\n  courseId: string,\n  courseData: CourseData,\n  logger: ServerJobLogger,\n): Promise<boolean> {\n  const sharedQuestions = await sqldb.queryRows(\n    sql.select_question_sharing_sets,\n    { course_id: courseId },\n    z.object({\n      id: IdSchema,\n      qid: z.string(),\n      sharing_sets: z.string().array(),\n    }),\n  );\n\n  const invalidSharingSetRemovals: Record<string, string[]> = {};\n  sharedQuestions.forEach((question) => {\n    if (!courseData.questions[question.qid]) {\n      // this case is handled by the checks for shared questions being\n      // renamed or deleted\n      return;\n    }\n    if (!courseData.questions[question.qid].data?.sharingSets) {\n      invalidSharingSetRemovals[question.qid] = question.sharing_sets;\n      return;\n    }\n\n    question.sharing_sets.forEach((sharingSet) => {\n      // TODO: allow if the sharing set hasn't been shared to a course\n      if (!courseData.questions[question.qid].data?.sharingSets?.includes(sharingSet)) {\n        if (!invalidSharingSetRemovals[question.qid]) {\n          invalidSharingSetRemovals[question.qid] = [];\n        }\n        invalidSharingSetRemovals[question.qid].push(sharingSet);\n      }\n    });\n  });\n\n  const existInvalidSharingSetRemovals = Object.keys(invalidSharingSetRemovals).length > 0;\n  if (existInvalidSharingSetRemovals) {\n    logger.error(\n      `✖ Course sync completely failed. The following questions are not allowed to be removed from the listed sharing sets: ${Object.keys(\n        invalidSharingSetRemovals,\n      )\n        .map((key) => `${key}: ${JSON.stringify(invalidSharingSetRemovals[key])}`)\n        .join(', ')}`,\n    );\n  }\n\n  return existInvalidSharingSetRemovals;\n}\n\nexport function checkInvalidSharedAssessments(\n  courseData: CourseData,\n  logger: ServerJobLogger,\n): boolean {\n  const invalidSharedAssessments = new Set<string>();\n  for (const courseInstanceKey in courseData.courseInstances) {\n    const courseInstance = courseData.courseInstances[courseInstanceKey];\n    for (const tid in courseInstance.assessments) {\n      const assessment = courseInstance.assessments[tid];\n      if (!assessment?.data?.shareSourcePublicly) {\n        continue;\n      }\n      for (const zone of assessment?.data?.zones ?? []) {\n        for (const question of zone.questions ?? []) {\n          if (!question.id) {\n            continue;\n          }\n          const infoJson = courseData.questions[question.id];\n          if (!infoJson?.data?.sharePublicly) {\n            // Only `sharePublicly` and not `shareSourcePublicly` because we want to import the questions,\n            // not copy the questions into the destination course\n            invalidSharedAssessments.add(tid);\n          }\n        }\n      }\n    }\n  }\n\n  const existInvalidSharedAssessment = invalidSharedAssessments.size > 0;\n  if (existInvalidSharedAssessment) {\n    logger.error(\n      `✖ Course sync completely failed. The following assessments have their source publicly shared, but contain questions which are not publicly shared: ${Array.from(invalidSharedAssessments).join(', ')}`,\n    );\n  }\n  return existInvalidSharedAssessment;\n}\n\nexport function checkInvalidDraftQuestionSharing(\n  courseData: CourseData,\n  logger: ServerJobLogger,\n): boolean {\n  const draftQuestionsWithSharingSets: string[] = [];\n  const draftQuestionsWithPublicSharing: string[] = [];\n  for (const qid in courseData.questions) {\n    const question = courseData.questions[qid];\n\n    const isDraft = isDraftQid(qid);\n    const questionSharingSets = question.data?.sharingSets || [];\n\n    if (isDraft && questionSharingSets.length > 0) {\n      draftQuestionsWithSharingSets.push(qid);\n    }\n\n    if (isDraft && (question.data?.sharePublicly || question.data?.shareSourcePublicly)) {\n      draftQuestionsWithPublicSharing.push(qid);\n    }\n  }\n\n  if (draftQuestionsWithSharingSets.length > 0) {\n    logger.error(\n      `✖ Course sync completely failed. The following draft questions cannot be added to sharing sets: ${draftQuestionsWithSharingSets.join(', ')}`,\n    );\n  }\n\n  if (draftQuestionsWithPublicSharing.length > 0) {\n    logger.error(\n      `✖ Course sync completely failed. The following draft questions cannot be publicly shared: ${draftQuestionsWithPublicSharing.join(', ')}`,\n    );\n  }\n\n  return draftQuestionsWithSharingSets.length > 0 || draftQuestionsWithPublicSharing.length > 0;\n}\n"]}