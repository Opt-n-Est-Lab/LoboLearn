{"version":3,"file":"syncFromDisk.js","sourceRoot":"","sources":["../../src/sync/syncFromDisk.ts"],"names":[],"mappings":"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","sourcesContent":["import async from 'async';\n\nimport * as namedLocks from '@prairielearn/named-locks';\n\nimport { chalk } from '../lib/chalk.js';\nimport { config } from '../lib/config.js';\nimport { type ServerJobLogger } from '../lib/server-jobs.js';\nimport { getLockNameForCoursePath, selectOrInsertCourseByPath } from '../models/course.js';\nimport { flushElementCache } from '../question-servers/freeform.js';\n\nimport * as courseDB from './course-db.js';\nimport * as syncAssessmentModules from './fromDisk/assessmentModules.js';\nimport * as syncAssessmentSets from './fromDisk/assessmentSets.js';\nimport * as syncAssessments from './fromDisk/assessments.js';\nimport * as syncCourseInfo from './fromDisk/courseInfo.js';\nimport * as syncCourseInstances from './fromDisk/courseInstances.js';\nimport * as syncQuestions from './fromDisk/questions.js';\nimport * as syncSharingSets from './fromDisk/sharing.js';\nimport * as syncTags from './fromDisk/tags.js';\nimport * as syncTopics from './fromDisk/topics.js';\nimport {\n  checkInvalidDraftQuestionSharing,\n  checkInvalidPublicSharingRemovals,\n  checkInvalidSharedAssessments,\n  checkInvalidSharingSetAdditions,\n  checkInvalidSharingSetDeletions,\n  checkInvalidSharingSetRemovals,\n  getInvalidRenames,\n  selectSharedQuestions,\n} from './sharing.js';\n\ninterface SyncResultSharingError {\n  status: 'sharing_error';\n  courseId: string;\n}\n\ninterface SyncResultComplete {\n  status: 'complete';\n  hadJsonErrors: boolean;\n  hadJsonErrorsOrWarnings: boolean;\n  courseId: string;\n  courseData: courseDB.CourseData;\n}\n\nexport type SyncResults = SyncResultSharingError | SyncResultComplete;\n\nexport async function checkSharingConfigurationValid(\n  courseId: string,\n  courseData: courseDB.CourseData,\n  logger: ServerJobLogger,\n): Promise<boolean> {\n  if (!config.checkSharingOnSync) {\n    return true;\n  }\n\n  const sharedQuestions = await selectSharedQuestions(courseId);\n  const existInvalidRenames = getInvalidRenames(sharedQuestions, courseData, logger);\n  const existInvalidPublicSharingRemovals = checkInvalidPublicSharingRemovals(\n    sharedQuestions,\n    courseData,\n    logger,\n  );\n  const existInvalidSharingSetDeletions = await checkInvalidSharingSetDeletions(\n    courseId,\n    courseData,\n    logger,\n  );\n  const existInvalidSharingSetAdditions = checkInvalidSharingSetAdditions(courseData, logger);\n  const existInvalidSharingSetRemovals = await checkInvalidSharingSetRemovals(\n    courseId,\n    courseData,\n    logger,\n  );\n  const existInvalidDraftQuestionSharing = checkInvalidDraftQuestionSharing(courseData, logger);\n\n  const existInvalidSharedAssessment = checkInvalidSharedAssessments(courseData, logger);\n\n  const sharingConfigurationValid =\n    !existInvalidRenames &&\n    !existInvalidPublicSharingRemovals &&\n    !existInvalidSharingSetDeletions &&\n    !existInvalidSharingSetAdditions &&\n    !existInvalidSharingSetRemovals &&\n    !existInvalidSharedAssessment &&\n    !existInvalidDraftQuestionSharing;\n  return sharingConfigurationValid;\n}\n\nexport async function syncDiskToSqlWithLock(\n  courseId: string,\n  courseDir: string,\n  logger: ServerJobLogger,\n  courseData?: courseDB.CourseData,\n): Promise<SyncResults> {\n  async function timed<T>(label: string, fn: () => Promise<T>): Promise<T> {\n    const start = performance.now();\n\n    const result = await fn();\n\n    const duration = performance.now() - start;\n    logger.verbose(`${label} in ${duration.toFixed(2)}ms`);\n\n    return result;\n  }\n\n  logger.info('Loading info.json files from course repository');\n\n  if (!courseData) {\n    courseData = await timed('Loaded course data from disk', () =>\n      courseDB.loadFullCourse(courseId, courseDir),\n    );\n  }\n\n  const sharingConfigurationValid = await timed('Validated sharing configuration', () =>\n    checkSharingConfigurationValid(courseId, courseData, logger),\n  );\n  if (!sharingConfigurationValid) {\n    return {\n      status: 'sharing_error',\n      courseId,\n    };\n  }\n\n  logger.info('Syncing info to database');\n\n  await timed('Synced all course data', async () => {\n    await timed('Synced course info', () => syncCourseInfo.sync(courseData, courseId));\n    const courseInstanceIds = await timed('Synced course instances', () =>\n      syncCourseInstances.sync(courseId, courseData),\n    );\n    await timed('Synced topics', () => syncTopics.sync(courseId, courseData));\n    const questionIds = await timed('Synced questions', () =>\n      syncQuestions.sync(courseId, courseData),\n    );\n\n    await timed('Synced sharing sets', () =>\n      syncSharingSets.sync(courseId, courseData, questionIds),\n    );\n    await timed('Synced tags', () => syncTags.sync(courseId, courseData, questionIds));\n    await timed('Synced assessment sets', () => syncAssessmentSets.sync(courseId, courseData));\n    await timed('Synced assessment modules', () =>\n      syncAssessmentModules.sync(courseId, courseData),\n    );\n    await timed('Synced all assessments', async () => {\n      // Ensure that a single course with a ton of course instances can't\n      // monopolize the database connection pool.\n      await async.eachLimit(\n        Object.entries(courseData.courseInstances),\n        3,\n        async ([ciid, courseInstanceData]) => {\n          const courseInstanceId = courseInstanceIds[ciid];\n          await timed(`Synced assessments for ${ciid}`, () =>\n            syncAssessments.sync(courseId, courseInstanceId, courseInstanceData, questionIds),\n          );\n        },\n      );\n    });\n  });\n\n  if (config.devMode) {\n    logger.info('Flushing course element and extensions cache...');\n    flushElementCache();\n  }\n  const courseDataHasErrors = courseDB.courseDataHasErrors(courseData);\n  const courseDataHasErrorsOrWarnings = courseDB.courseDataHasErrorsOrWarnings(courseData);\n  if (courseDataHasErrors) {\n    logger.info(chalk.red('✖ Some JSON files contained errors and were unable to be synced'));\n  } else if (courseDataHasErrorsOrWarnings) {\n    logger.info(\n      chalk.yellow('⚠ Some JSON files contained warnings but all were successfully synced'),\n    );\n  } else {\n    logger.info(chalk.green('✓ Course sync successful'));\n  }\n\n  // Note that we deliberately log warnings/errors after syncing to the database\n  // since in some cases we actually discover new warnings/errors during the\n  // sync process. For instance, we don't actually validate exam UUIDs or qids of\n  // questions imported from other courses until the database sync step.\n  courseDB.writeErrorsAndWarningsForCourseData(courseId, courseData, (line) =>\n    logger.info(line || ''),\n  );\n\n  return {\n    status: 'complete',\n    hadJsonErrors: courseDataHasErrors,\n    hadJsonErrorsOrWarnings: courseDataHasErrorsOrWarnings,\n    courseId,\n    courseData,\n  };\n}\n\nexport async function syncDiskToSql(\n  course_id: string,\n  courseDir: string,\n  logger: ServerJobLogger,\n): Promise<SyncResults> {\n  const lockName = getLockNameForCoursePath(courseDir);\n  logger.verbose(`Trying lock ${lockName}`);\n  const result = await namedLocks.doWithLock(\n    lockName,\n    {\n      timeout: 0,\n      onNotAcquired: () => {\n        logger.verbose(chalk.red(`Did not acquire lock ${lockName}`));\n        throw new Error(`Another user is already syncing or modifying the course: ${courseDir}`);\n      },\n    },\n    async () => {\n      logger.verbose(`Acquired lock ${lockName}`);\n      return await syncDiskToSqlWithLock(course_id, courseDir, logger);\n    },\n  );\n\n  logger.verbose(`Released lock ${lockName}`);\n  return result;\n}\n\nexport async function syncOrCreateDiskToSql(\n  courseDir: string,\n  logger: ServerJobLogger,\n): Promise<SyncResults> {\n  const course = await selectOrInsertCourseByPath(courseDir);\n  return await syncDiskToSql(course.id, courseDir, logger);\n}\n"]}