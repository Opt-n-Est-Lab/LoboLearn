{"version":3,"file":"accessAsStudent.test.js","sourceRoot":"","sources":["../../src/tests/accessAsStudent.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAe,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAEvD,OAAO,KAAK,YAAY,MAAM,mBAAmB,CAAC;AAElD,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,OAAO,GAAG,mBAAmB,GAAG,MAAM,CAAC,UAAU,CAAC;AACxD,MAAM,OAAO,GAAG,OAAO,GAAG,KAAK,CAAC;AAChC,MAAM,iBAAiB,GAAG,OAAO,GAAG,oBAAoB,CAAC;AACzD,MAAM,cAAc,GAAG,iBAAiB,GAAG,cAAc,CAAC;AAE1D,MAAM,YAAY,GAAoB,EAAE,CAAC;AAEzC,QAAQ,CAAC,8BAA8B,EAAE;IACvC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEpB,MAAM,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACpC,YAAY,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QACtC,YAAY,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QACxC,YAAY,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QACtC,MAAM,CAAC,OAAO,GAAG,qBAAqB,CAAC;QACvC,MAAM,CAAC,QAAQ,GAAG,cAAc,CAAC;QACjC,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;IAC9B,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,uBAAuB,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;IACvD,KAAK,CAAC,0BAA0B,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;IACtD,KAAK,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACrC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+CAA+C,EAAE;QACxD,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,cAAc,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;YAC9C,MAAM,QAAQ,GAAG,CAAC,CAAC,iCAAiC,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kDAAkD,EAAE;QAC3D,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC9E,MAAM,MAAM,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChF,MAAM,iBAAiB,GAAG,OAAO,GAAG,oBAAoB,MAAM,CAAC,EAAE,cAAc,CAAC;YAChF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetch from 'node-fetch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { type Config, config } from '../lib/config.js';\n\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\nconst courseInstanceUrl = baseUrl + '/course_instance/1';\nconst assessmentsUrl = courseInstanceUrl + '/assessments';\n\nconst storedConfig: Partial<Config> = {};\n\ndescribe('Test student auto-enrollment', function () {\n  this.timeout(20000);\n\n  before('set authenticated user', () => {\n    storedConfig.authUid = config.authUid;\n    storedConfig.authName = config.authName;\n    storedConfig.authUin = config.authUin;\n    config.authUid = 'student@example.com';\n    config.authName = 'Student User';\n    config.authUin = '00000001';\n  });\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n  after('unset authenticated user', () => {\n    Object.assign(config, storedConfig);\n  });\n\n  describe('A student user with access to course instance', function () {\n    it('should have access to the assessments page', async () => {\n      const response = await fetch(assessmentsUrl);\n      assert.equal(response.status, 200);\n    });\n    it('should be enrolled in course instance', async () => {\n      const response = await fetch(baseUrl);\n      assert.equal(response.status, 200);\n      const $ = cheerio.load(await response.text());\n      const linkList = $('a[href=\"/pl/course_instance/1\"]');\n      assert.lengthOf(linkList, 1);\n    });\n  });\n\n  describe('A student user with no access to course instance', function () {\n    it('should not have access to assessments page with no access rule', async () => {\n      const result = (await sqldb.queryAsync(sql.insert_course_instance, {})).rows[0];\n      const newAssessmentsUrl = baseUrl + `/course_instance/${result.id}/assessments`;\n      const response = await fetch(newAssessmentsUrl);\n      assert.equal(response.status, 403);\n    });\n  });\n});\n"]}