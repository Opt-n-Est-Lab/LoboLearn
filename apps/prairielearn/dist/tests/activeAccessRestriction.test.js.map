{"version":3,"file":"activeAccessRestriction.test.js","sourceRoot":"","sources":["../../src/tests/activeAccessRestriction.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { AssessmentInstanceSchema, IdSchema } from '../lib/db-types.js';\n\nimport * as helperClient from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('Exam and homework assessment with active access restriction', function () {\n  this.timeout(60000);\n\n  const storedConfig: Record<string, any> = {};\n  const context: Record<string, any> = {};\n  context.siteUrl = `http://localhost:${config.serverPort}`;\n  context.baseUrl = `${context.siteUrl}/pl`;\n  context.courseInstanceBaseUrl = `${context.baseUrl}/course_instance/1`;\n  context.assessmentListUrl = `${context.courseInstanceBaseUrl}/assessments`;\n  context.gradeBookUrl = `${context.courseInstanceBaseUrl}/gradebook`;\n\n  const headers: Record<string, string> = {};\n\n  const VARIANT_FORBIDDEN_STRING = 'This question was not viewed while the assessment was open';\n\n  before('set authenticated user', function (callback) {\n    storedConfig.authUid = config.authUid;\n    storedConfig.authName = config.authName;\n    storedConfig.authUin = config.authUin;\n    config.authUid = 'student@example.com';\n    config.authName = 'Student User';\n    config.authUin = '00000001';\n    callback(null);\n  });\n  before('set up testing server', async function () {\n    await helperServer.before().call(this);\n    context.examId = await sqldb.queryRow(sql.select_exam11, IdSchema);\n    context.examUrl = `${context.courseInstanceBaseUrl}/assessment/${context.examId}/`;\n\n    context.hwId = await sqldb.queryRow(sql.select_homework8, IdSchema);\n    context.hwUrl = `${context.courseInstanceBaseUrl}/assessment/${context.hwId}/`;\n    context.hwNumber = '8';\n  });\n  after('shut down testing server', helperServer.after);\n  after('unset authenticated user', function (callback) {\n    Object.assign(config, storedConfig);\n    callback(null);\n  });\n\n  step('visit home page', async () => {\n    const response = await helperClient.fetchCheerio(context.baseUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n  });\n\n  step('enroll the test student user in the course', async () => {\n    await sqldb.queryOneRowAsync(sql.enroll_student_in_course, []);\n  });\n\n  step(\n    'ensure that the exam is not visible on the assessments page when no access rule applies',\n    async () => {\n      headers.cookie = 'pl_test_date=1850-06-01T00:00:01Z';\n\n      const response = await helperClient.fetchCheerio(context.assessmentListUrl, { headers });\n      assert.isTrue(response.ok);\n\n      assert.lengthOf(response.$('a:contains(\"Test Active Access Rule\")'), 0);\n    },\n  );\n\n  step('try to access the exam when no access rule applies', async () => {\n    headers.cookie = 'pl_test_date=1850-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.examUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step(\n    'ensure that the exam is visible without a link on the assessments page if student has not started the exam and active is false',\n    async () => {\n      headers.cookie = 'pl_test_date=2000-06-01T00:00:01Z';\n\n      const response = await helperClient.fetchCheerio(context.assessmentListUrl, { headers });\n      assert.isTrue(response.ok);\n\n      assert.lengthOf(response.$('td:contains(\"Test Active Access Rule\")'), 1);\n      assert.lengthOf(response.$('a:contains(\"Test Active Access Rule\")'), 0); // there should be no link\n    },\n  );\n\n  step('try to access the exam when it is not active', async () => {\n    headers.cookie = 'pl_test_date=2000-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.examUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n\n    const msg = response.$('[data-testid=\"assessment-closed-message\"]');\n    assert.lengthOf(msg, 1);\n    assert.match(msg.text(), /Assessment will become available on 2010-01-01 00:00:01/);\n  });\n\n  step('check that an assessment instance was not created', async () => {\n    const results = await sqldb.queryRows(\n      sql.select_assessment_instances,\n      AssessmentInstanceSchema,\n    );\n    assert.equal(results.length, 0);\n  });\n\n  step(\n    'ensure that a link to the exam is visible on the assessments page if active is true',\n    async () => {\n      headers.cookie = 'pl_test_date=2010-01-01T23:50:01Z';\n\n      const response = await helperClient.fetchCheerio(context.assessmentListUrl, { headers });\n      assert.isTrue(response.ok);\n\n      assert.lengthOf(response.$('a:contains(\"Test Active Access Rule\")'), 1);\n    },\n  );\n\n  step('visit start exam page when the exam is active', async () => {\n    headers.cookie = 'pl_test_date=2010-01-01T23:50:01Z';\n\n    const response = await helperClient.fetchCheerio(context.examUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    assert.equal(response.$('#start-assessment').text().trim(), 'Start assessment');\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, 'form');\n  });\n\n  step('start the exam and access questions', async () => {\n    const response = await helperClient.fetchCheerio(context.examUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'new_instance',\n        __csrf_token: context.__csrf_token,\n      }),\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    // We should have been redirected to the assessment instance\n    const examInstanceUrl = response.url;\n    assert.include(examInstanceUrl, '/assessment_instance/');\n    context.examInstanceUrl = examInstanceUrl;\n\n    // Save context for future tests\n    context.__csrf_token = response.$('span[id=test_csrf_token]').text();\n    const questionWithVariantPath = response.$('a:contains(\"Question 1\")').attr('href');\n    const questionWithoutVariantPath = response.$('a:contains(\"Question 2\")').attr('href');\n    const questionWithWorkspace = response.$('a:contains(\"Question 7\")').attr('href');\n    context.examQuestionUrl = `${context.siteUrl}${questionWithVariantPath}`;\n    context.examQuestionWithoutVariantUrl = `${context.siteUrl}${questionWithoutVariantPath}`;\n    context.examQuestionWithWorkspaceUrl = `${context.siteUrl}${questionWithWorkspace}`;\n\n    // Access the question to create a variant.\n    const questionResponse = await helperClient.fetchCheerio(context.examQuestionUrl, {\n      headers,\n    });\n    assert.isTrue(questionResponse.ok);\n\n    // Access the workspace question.\n    const workspaceQuestionResponse = await helperClient.fetchCheerio(\n      context.examQuestionWithWorkspaceUrl,\n      { headers },\n    );\n    assert.isTrue(workspaceQuestionResponse.ok);\n    const workspaceUrl = workspaceQuestionResponse.$('a:contains(\"Open workspace\")').attr('href');\n    context.examWorkspaceUrl = `${context.siteUrl}${workspaceUrl}`;\n\n    // Access the workspace to create it.\n    const workspaceResponse = await helperClient.fetchCheerio(context.examWorkspaceUrl, {\n      headers,\n    });\n    assert.isTrue(workspaceResponse.ok);\n  });\n\n  step('count number of variants generated', async () => {\n    context.numberOfVariants = await sqldb.queryRow(\n      sql.count_variants,\n      {\n        assessment_instance_id: helperClient.parseAssessmentInstanceId(context.examInstanceUrl),\n      },\n      z.number(),\n    );\n    assert.equal(context.numberOfVariants, 2);\n  });\n\n  step('simulate a time limit expiration', async () => {\n    const response = await helperClient.fetchCheerio(context.examInstanceUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'timeLimitFinish',\n        __csrf_token: context.__csrf_token,\n      }),\n      headers,\n    });\n\n    // At this time, showClosedAssessment is true, so the status of the HTTP response should be 200\n    assert.isTrue(response.ok);\n\n    // We should have been redirected back to the same assessment instance\n    assert.equal(response.url, `${context.examInstanceUrl}?timeLimitExpired=true`);\n\n    // Since showClosedAssessment is true, Question 1 is visible.\n    assert.lengthOf(response.$('a:contains(\"Question 1\")'), 1);\n  });\n\n  step('check that the assessment instance is closed', async () => {\n    const results = await sqldb.queryRows(\n      sql.select_assessment_instances,\n      AssessmentInstanceSchema,\n    );\n    assert.equal(results.length, 1);\n    assert.equal(results[0].open, false);\n  });\n\n  step('access question with existing variant when exam is closed', async () => {\n    const response = await helperClient.fetchCheerio(context.examQuestionUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    // There should be no save or grade buttons\n    assert.lengthOf(response.$('button.question-save'), 0);\n    assert.lengthOf(response.$('button.question-grade'), 0);\n  });\n\n  step('access question without existing variant when exam is closed', async () => {\n    const response = await helperClient.fetchCheerio(context.examQuestionWithoutVariantUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n    assert.lengthOf(response.$(`div.card-body:contains(${VARIANT_FORBIDDEN_STRING})`), 1);\n  });\n\n  step(\n    'ensure that a link to the exam is visible on the assessments page if student has started the exam and active is false',\n    async () => {\n      headers.cookie = 'pl_test_date=2010-01-02T00:01:01Z';\n\n      const response = await helperClient.fetchCheerio(context.assessmentListUrl, { headers });\n      assert.isTrue(response.ok);\n\n      assert.lengthOf(response.$('a:contains(\"Test Active Access Rule\")'), 1);\n    },\n  );\n\n  step('access the exam when it is no longer active', async () => {\n    headers.cookie = 'pl_test_date=2010-01-10T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.examInstanceUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    const msg = response.$('p.small.mb-0');\n    assert.lengthOf(msg, 1);\n    assert.match(msg.text(), /Notes can't be added or deleted because the assessment is closed\\./);\n  });\n\n  step('access question with existing variant when exam is not active', async () => {\n    const response = await helperClient.fetchCheerio(context.examQuestionUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    // There should be no save or grade buttons\n    assert.lengthOf(response.$('button.question-save'), 0);\n    assert.lengthOf(response.$('button.question-grade'), 0);\n  });\n\n  step('access question without existing variant when exam is not active', async () => {\n    const response = await helperClient.fetchCheerio(context.examQuestionWithoutVariantUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n    assert.lengthOf(response.$(`div.card-body:contains(${VARIANT_FORBIDDEN_STRING})`), 1);\n  });\n\n  step('access clientFilesCourse when exam is not active', async () => {\n    const response = await fetch(`${context.examUrl}clientFilesCourse/data.txt`, {\n      headers,\n    });\n    assert.equal(response.status, 200);\n    assert.equal(await response.text(), 'This data is specific to the course.');\n  });\n\n  step('access clientFilesCourseInstance when exam is not active', async () => {\n    const response = await fetch(`${context.examUrl}clientFilesCourseInstance/data.txt`, {\n      headers,\n    });\n    assert.equal(response.status, 200);\n    assert.equal(await response.text(), 'This data is specific to the course instance.');\n  });\n\n  step('access clientFilesAssessment when exam is not active', async () => {\n    const response = await fetch(`${context.examUrl}clientFilesAssessment/data.txt`, {\n      headers,\n    });\n    assert.equal(response.status, 200);\n    assert.equal(await response.text(), 'This data is specific to the assessment.');\n  });\n\n  step('ensure that no new variants have been created', async () => {\n    const countVariantsResult = await sqldb.queryRow(\n      sql.count_variants,\n      {\n        assessment_instance_id: helperClient.parseAssessmentInstanceId(context.examInstanceUrl),\n      },\n      z.number(),\n    );\n    assert.equal(countVariantsResult, context.numberOfVariants);\n  });\n\n  step('access the exam when active and showClosedAssessment are false', async () => {\n    headers.cookie = 'pl_test_date=2020-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.examInstanceUrl, { headers });\n    assert.equal(response.status, 403);\n\n    assert.lengthOf(response.$('[data-testid=\"assessment-closed-message\"]'), 1);\n    assert.lengthOf(response.$('div.progress'), 1); // score should be shown\n  });\n\n  step('access a workspace when active and showClosedAssessment are false', async () => {\n    const response = await helperClient.fetchCheerio(context.examWorkspaceUrl, { headers });\n    assert.equal(response.status, 403);\n\n    assert.lengthOf(response.$('[data-testid=\"assessment-closed-message\"]'), 1);\n    assert.lengthOf(response.$('div.progress'), 1); // score should be shown\n  });\n\n  step(\n    'access the exam when active, showClosedAssessment, and showClosedAssessmentScore are false',\n    async () => {\n      headers.cookie = 'pl_test_date=2030-06-01T00:00:01Z';\n\n      const response = await helperClient.fetchCheerio(context.examInstanceUrl, { headers });\n      assert.equal(response.status, 403);\n\n      assert.lengthOf(response.$('[data-testid=\"assessment-closed-message\"]'), 1);\n      assert.lengthOf(response.$('div.progress'), 0); // score should NOT be shown\n    },\n  );\n\n  step('try to access the homework when it is not active', async () => {\n    headers.cookie = 'pl_test_date=2000-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n\n    const msg = response.$('[data-testid=\"assessment-closed-message\"]');\n    assert.lengthOf(msg, 1);\n    assert.match(msg.text(), /Assessment will become available on 2020-01-01 00:00:01/);\n  });\n\n  step('access the homework when it is active', async () => {\n    headers.cookie = 'pl_test_date=2020-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    // We should have been redirected to the assessment instance\n    const hwInstanceUrl = response.url;\n    assert.include(hwInstanceUrl, '/assessment_instance/');\n    context.hwInstanceUrl = hwInstanceUrl;\n\n    // the link to the first question begins with \"HWX.1.\" where X is the homework number\n    const questionWithVariantPath = response.$(`a:contains(HW${context.hwNumber}.1.)`).attr('href');\n    const questionWithoutVariantPath = response\n      .$(`a:contains(HW${context.hwNumber}.2.)`)\n      .attr('href');\n    context.hwQuestionUrl = `${context.siteUrl}${questionWithVariantPath}`;\n    context.hwQuestionWithoutVariantUrl = `${context.siteUrl}${questionWithoutVariantPath}`;\n  });\n\n  step('access a question when homework is active', async () => {\n    headers.cookie = 'pl_test_date=2020-06-01T00:00:01Z';\n\n    // Access the question to create a variant.\n    const response = await helperClient.fetchCheerio(context.hwQuestionUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, '.question-form');\n    helperClient.extractAndSaveVariantId(context, response.$, '.question-form');\n  });\n\n  step('count number of variants generated', async () => {\n    context.numberOfVariants = await sqldb.queryRow(\n      sql.count_variants,\n      {\n        assessment_instance_id: helperClient.parseAssessmentInstanceId(context.hwInstanceUrl),\n      },\n      z.number(),\n    );\n    assert.equal(context.numberOfVariants, 1);\n  });\n\n  step('access the homework when it is no longer active', async () => {\n    headers.cookie = 'pl_test_date=2021-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwInstanceUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    const msg = response.$('p.small.mb-0');\n    assert.lengthOf(msg, 1);\n    assert.match(msg.text(), /Notes can't be added or deleted because the assessment is closed\\./);\n  });\n\n  step('access question with existing variant when homework is not active', async () => {\n    const response = await helperClient.fetchCheerio(context.hwQuestionUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    // There should be no save or grade buttons\n    assert.lengthOf(response.$('button.question-save'), 0);\n    assert.lengthOf(response.$('button.question-grade'), 0);\n  });\n\n  step('access question without existing variant when homework is not active', async () => {\n    const response = await helperClient.fetchCheerio(context.hwQuestionWithoutVariantUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n    assert.lengthOf(response.$(`div.card-body:contains(${VARIANT_FORBIDDEN_STRING})`), 1);\n  });\n\n  step('ensure that no new variants have been created', async () => {\n    const countVariantsResult = await sqldb.queryRow(\n      sql.count_variants,\n      {\n        assessment_instance_id: helperClient.parseAssessmentInstanceId(context.hwInstanceUrl),\n      },\n      z.number(),\n    );\n    assert.equal(countVariantsResult, context.numberOfVariants);\n  });\n\n  step(\n    'access the homework when active and showClosedAssessment are false, but the homework will be active later',\n    async () => {\n      headers.cookie = 'pl_test_date=2026-06-01T00:00:01Z';\n\n      const response = await helperClient.fetchCheerio(context.hwInstanceUrl, {\n        headers,\n      });\n      assert.equal(response.status, 403);\n\n      const msg = response.$('[data-testid=\"assessment-closed-message\"]');\n      assert.lengthOf(msg, 1);\n      assert.match(msg.text(), /Assessment will become available on 2030-01-01 00:00:01/);\n\n      assert.lengthOf(response.$('div.progress'), 1); // score should be shown\n    },\n  );\n\n  step(\n    'access the homework when an active and a non-active access rule are both satisfied, and both have nonzero credit',\n    async () => {\n      headers.cookie = 'pl_test_date=2030-06-01T00:00:01Z';\n\n      const response = await helperClient.fetchCheerio(context.hwInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n    },\n  );\n\n  step(\n    'access the homework when active and showClosedAssessment are false, and the homework will never be active again',\n    async () => {\n      headers.cookie = 'pl_test_date=2036-06-01T00:00:01Z';\n\n      const response = await helperClient.fetchCheerio(context.hwInstanceUrl, {\n        headers,\n      });\n      assert.equal(response.status, 403);\n\n      const msg = response.$('[data-testid=\"assessment-closed-message\"]');\n      assert.lengthOf(msg, 1);\n      assert.match(msg.text(), /Assessment is no longer available\\./);\n\n      assert.lengthOf(response.$('div.progress'), 1); // score should be shown\n    },\n  );\n\n  step('submit an answer to a question when active is false', async () => {\n    headers.cookie = 'pl_test_date=2021-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwQuestionUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'grade',\n        __csrf_token: context.__csrf_token,\n        __variant_id: context.__variant_id,\n        s: '75', // To get 75% of the question\n      }),\n      headers,\n    });\n    assert.equal(response.status, 400);\n  });\n\n  step(\n    'check that no credit is received for an answer submitted when active is false',\n    async () => {\n      const points = await sqldb.queryRow(\n        sql.read_assessment_instance_points,\n        {\n          assessment_id: context.hwId,\n        },\n        z.number(),\n      );\n      assert.equal(points, 0);\n    },\n  );\n\n  step('get CSRF token and variant ID for attaching file on question page', async () => {\n    headers.cookie = 'pl_test_date=2020-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwQuestionUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, '.attach-file-form');\n    helperClient.extractAndSaveVariantId(context, response.$, '.attach-file-form');\n  });\n\n  step('try to attach a file to a question when active is false', async () => {\n    headers.cookie = 'pl_test_date=2021-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwQuestionUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'attach_file',\n        __csrf_token: context.__csrf_token,\n        __variant_id: context.__variant_id,\n        filename: 'testfile.txt',\n        contents: 'This is the test text',\n      }),\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step('get CSRF token for attaching file on assessment instance page', async () => {\n    headers.cookie = 'pl_test_date=2020-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwInstanceUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, '.attach-file-form');\n  });\n\n  step('try to attach a file to the assessment when active is false', async () => {\n    headers.cookie = 'pl_test_date=2021-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwInstanceUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'attach_file',\n        __csrf_token: context.__csrf_token,\n        __variant_id: context.__variant_id,\n        filename: 'testfile.txt',\n        contents: 'This is the test text',\n      }),\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step('get CSRF token and variant ID for attaching text on question page', async () => {\n    headers.cookie = 'pl_test_date=2020-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwQuestionUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, '.attach-text-form');\n    helperClient.extractAndSaveVariantId(context, response.$, '.attach-text-form');\n  });\n\n  step('try to attach text to a question when active is false', async () => {\n    headers.cookie = 'pl_test_date=2021-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwQuestionUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'attach_text',\n        __csrf_token: context.__csrf_token,\n        __variant_id: context.__variant_id,\n        filename: 'testfile.txt',\n        contents: 'This is the test text',\n      }),\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step('get CSRF token for attaching text on assessment instance page', async () => {\n    headers.cookie = 'pl_test_date=2020-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwInstanceUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, '.attach-text-form');\n  });\n\n  step('try to attach text to the assessment when active is false', async () => {\n    headers.cookie = 'pl_test_date=2021-06-01T00:00:01Z';\n\n    const response = await helperClient.fetchCheerio(context.hwInstanceUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'attach_text',\n        __csrf_token: context.__csrf_token,\n        __variant_id: context.__variant_id,\n        filename: 'testfile.txt',\n        contents: 'This is the test text',\n      }),\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step('check that no files or text were attached', async () => {\n    const numberOfFiles = await sqldb.queryRow(\n      sql.get_attached_files,\n      {\n        assessment_id: context.hwId,\n      },\n      z.number(),\n    );\n\n    // Note: inserting text is really inserting a file in disguise, so we just need to check\n    // that the files table is empty.\n    assert.equal(numberOfFiles, 0);\n  });\n});\n"]}