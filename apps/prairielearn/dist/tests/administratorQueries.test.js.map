{"version":3,"file":"administratorQueries.test.js","sourceRoot":"","sources":["../../src/tests/administratorQueries.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\n\nimport { config } from '../lib/config.js';\n\nimport * as helperClient from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst siteUrl = `http://localhost:${config.serverPort}`;\nconst baseUrl = `${siteUrl}/pl`;\nconst queriesUrl = `${baseUrl}/administrator/queries`;\nconst queryUrl = `${baseUrl}/administrator/query/db_running_queries`;\nconst queryUuidsUrl = `${baseUrl}/administrator/query/generate_uuids`;\n\ndescribe('AdministratorQuery page', function () {\n  this.timeout(60000);\n\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  step('visit queries page', async () => {\n    const response = await helperClient.fetchCheerio(queriesUrl);\n    assert.isTrue(response.ok);\n\n    // we should have the \"db_running_queries.sql\" entry\n    const query = response.$('table a:contains(\"db_running_queries\")');\n    assert.lengthOf(query, 1);\n\n    // we should have the \"generate_uuids.js\" entry (which does not have a SQL file)\n    const query2 = response.$('table a:contains(\"generate_uuids\")');\n    assert.lengthOf(query2, 1);\n  });\n\n  step('visit query page for a SQL-based query', async () => {\n    const response = await helperClient.fetchCheerio(queryUrl);\n    assert.isTrue(response.ok);\n\n    // we should have results from the query\n    const results = response.$('[data-testid=\"row-count\"]');\n    assert.lengthOf(results, 1);\n  });\n\n  step('visit query page for a JS-based query', async () => {\n    const response = await helperClient.fetchCheerio(queryUuidsUrl);\n    assert.isTrue(response.ok);\n    const __csrf_token = response.$('#test_csrf_token').text();\n    assert.isNotEmpty(__csrf_token);\n\n    const postResponse = await helperClient.fetchCheerio(queryUuidsUrl, {\n      method: 'POST',\n      body: new URLSearchParams({ count: '3', __csrf_token }),\n    });\n    assert.isTrue(postResponse.ok);\n\n    // we should have results from the query\n    const results = postResponse.$('[data-testid=\"row-count\"]');\n    assert.lengthOf(results, 1);\n    assert.equal(results.text().replaceAll(/\\s+/g, ' ').trim(), '3 rows');\n    const table = postResponse.$('[data-testid=\"results-table\"]');\n    assert.lengthOf(table, 1);\n    assert.lengthOf(table.find('tbody tr'), 3);\n  });\n});\n"]}