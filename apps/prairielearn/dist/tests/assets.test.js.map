{"version":3,"file":"assets.test.js","sourceRoot":"","sources":["../../src/tests/assets.test.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACvC,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,OAAO,KAAK,MAAM,MAAM,kBAAkB,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,KAAK,YAAY,MAAM,mBAAmB,CAAC;AAElD,MAAM,QAAQ,GAAG,mBAAmB,GAAG,MAAM,CAAC,UAAU,CAAC;AACzD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;AAE9D,IAAI,kBAAkB,GAA+B,IAAI,CAAC;AAE1D,KAAK,UAAU,qBAAqB;IAClC,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxB,MAAM,YAAY,GAAwB,EAAE,CAAC;QAE7C,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEjD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC/B,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;YACvE,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC;YAC5E,YAAY,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC;QACtC,CAAC;QACD,kBAAkB,GAAG,YAAY,CAAC;IACpC,CAAC;IAED,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAED,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;IAC9B,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAE1B,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,YAAY,GAAG,MAAM,qBAAqB,EAAE,CAAC;QAEnD,sCAAsC;QACtC,MAAM,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC;QACxC,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YACpD,MAAM,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;YAC9C,MAAM,kBAAkB,GAAG,WAAW,CAAC,YAAY,EAAE,kBAAkB,IAAI,EAAE,CAAC;YAC9E,MAAM,iBAAiB,GAAG,WAAW,CAAC,YAAY,EAAE,iBAAiB,IAAI,EAAE,CAAC;YAC5E,CAAC,GAAG,kBAAkB,EAAE,GAAG,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC9D,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC;QAED,yCAAyC;QACzC,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;YACzC,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC5D,MAAM,QAAQ,GAAG,GAAG,QAAQ,GAAG,SAAS,EAAE,CAAC;YAC3C,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;gBACZ,MAAM,CAAC,IAAI,CAAC,mBAAmB,QAAQ,KAAK,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;YAC9E,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,YAAY,GAAG,MAAM,qBAAqB,EAAE,CAAC;QAEnD,iCAAiC;QACjC,MAAM,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC;QACxC,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YACpD,MAAM,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;YAC9C,MAAM,cAAc,GAAG,WAAW,CAAC,YAAY,EAAE,cAAc,IAAI,EAAE,CAAC;YACtE,MAAM,aAAa,GAAG,WAAW,CAAC,YAAY,EAAE,aAAa,IAAI,EAAE,CAAC;YACpE,CAAC,GAAG,cAAc,EAAE,GAAG,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBACtD,aAAa,CAAC,GAAG,CAAC,GAAG,WAAW,IAAI,KAAK,EAAE,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC;QAED,yCAAyC;QACzC,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;YACzC,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC5D,MAAM,QAAQ,GAAG,GAAG,QAAQ,GAAG,SAAS,EAAE,CAAC;YAC3C,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;gBACZ,MAAM,CAAC,IAAI,CAAC,mBAAmB,QAAQ,KAAK,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;YAC9E,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as fs from 'node:fs/promises';\nimport * as path from 'node:path';\n\nimport { assert } from 'chai';\nimport fetch from 'node-fetch';\n\nimport * as assets from '../lib/assets.js';\nimport { config } from '../lib/config.js';\nimport { APP_ROOT_PATH } from '../lib/paths.js';\n\nimport * as helperServer from './helperServer.js';\n\nconst SITE_URL = 'http://localhost:' + config.serverPort;\nconst ELEMENTS_PATH = path.resolve(APP_ROOT_PATH, 'elements');\n\nlet cachedElementsInfo: Record<string, any> | null = null;\n\nasync function getOrLoadElementsInfo() {\n  if (!cachedElementsInfo) {\n    const elementsInfo: Record<string, any> = {};\n\n    const elements = await fs.readdir(ELEMENTS_PATH);\n\n    for (const element of elements) {\n      const elementInfoPath = path.join(ELEMENTS_PATH, element, 'info.json');\n      const elementInfo = JSON.parse(await fs.readFile(elementInfoPath, 'utf-8'));\n      elementsInfo[element] = elementInfo;\n    }\n    cachedElementsInfo = elementsInfo;\n  }\n\n  return cachedElementsInfo;\n}\n\ndescribe('Static assets', () => {\n  before(helperServer.before());\n  after(helperServer.after);\n\n  it('serves all element node_modules assets', async () => {\n    const elementsInfo = await getOrLoadElementsInfo();\n\n    // Get all unique node_modules assets.\n    const elementAssets = new Set<string>();\n    for (const elementName of Object.keys(elementsInfo)) {\n      const elementInfo = elementsInfo[elementName];\n      const nodeModulesScripts = elementInfo.dependencies?.nodeModulesScripts ?? [];\n      const nodeModulesStyles = elementInfo.dependencies?.nodeModulesStyles ?? [];\n      [...nodeModulesScripts, ...nodeModulesStyles].forEach((asset) => {\n        elementAssets.add(asset);\n      });\n    }\n\n    // Ensure that each asset can be fetched.\n    for (const elementAsset of elementAssets) {\n      const assetPath = assets.nodeModulesAssetPath(elementAsset);\n      const assetUrl = `${SITE_URL}${assetPath}`;\n      const res = await fetch(assetUrl, { method: 'HEAD' });\n      if (!res.ok) {\n        assert.fail(`Failed to fetch ${assetUrl}: ${res.status} ${res.statusText}`);\n      }\n    }\n  });\n\n  it('serves all element assets', async () => {\n    const elementsInfo = await getOrLoadElementsInfo();\n\n    // Get all unique element assets.\n    const elementAssets = new Set<string>();\n    for (const elementName of Object.keys(elementsInfo)) {\n      const elementInfo = elementsInfo[elementName];\n      const elementScripts = elementInfo.dependencies?.elementScripts ?? [];\n      const elementStyles = elementInfo.dependencies?.elementStyles ?? [];\n      [...elementScripts, ...elementStyles].forEach((asset) => {\n        elementAssets.add(`${elementName}/${asset}`);\n      });\n    }\n\n    // Ensure that each asset can be fetched.\n    for (const elementAsset of elementAssets) {\n      const assetPath = assets.coreElementAssetPath(elementAsset);\n      const assetUrl = `${SITE_URL}${assetPath}`;\n      const res = await fetch(assetUrl, { method: 'HEAD' });\n      if (!res.ok) {\n        assert.fail(`Failed to fetch ${assetUrl}: ${res.status} ${res.statusText}`);\n      }\n    }\n  });\n});\n"]}