{"version":3,"file":"chunkAssessment.test.js","sourceRoot":"","sources":["../../src/tests/chunkAssessment.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\nimport * as tmp from 'tmp-promise';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as chunks from '../lib/chunks.js';\nimport { config } from '../lib/config.js';\n\nimport * as helperClient from './helperClient.js';\nimport * as helperQuestion from './helperQuestion.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('Generate chunks and use them for a student homework', function () {\n  this.timeout(60000);\n\n  const context: Record<string, any> = {};\n  context.siteUrl = `http://localhost:${config.serverPort}`;\n  context.baseUrl = `${context.siteUrl}/pl`;\n  context.courseInstanceBaseUrl = `${context.baseUrl}/course_instance/1`;\n  context.assessmentListUrl = `${context.courseInstanceBaseUrl}/assessments`;\n\n  let tempChunksDir: tmp.DirectoryResult;\n  const originalChunksConsumerDirectory = config.chunksConsumerDirectory;\n\n  before('set up testing server', async () => {\n    tempChunksDir = await tmp.dir({ unsafeCleanup: true });\n\n    config.chunksConsumer = true;\n    config.chunksConsumerDirectory = tempChunksDir.path;\n\n    await helperServer.before().call(this);\n    const results = await sqldb.queryOneRowAsync(sql.select_hw1, []);\n    context.assessmentId = results.rows[0].id;\n    context.assessmentUrl = `${context.courseInstanceBaseUrl}/assessment/${context.assessmentId}/`;\n  });\n\n  after('shut down testing server', async () => {\n    await helperServer.after.call(this);\n    await tempChunksDir.cleanup();\n    config.chunksConsumer = false;\n    config.chunksConsumerDirectory = originalChunksConsumerDirectory;\n  });\n\n  step('generate course chunks', async () => {\n    const course_ids = ['1'];\n    const authn_user_id = '1';\n    const job_sequence_id = await chunks.generateAllChunksForCourseList(course_ids, authn_user_id);\n    await helperServer.waitForJobSequenceSuccess(job_sequence_id);\n  });\n\n  step('start the homework', async () => {\n    const response = await helperClient.fetchCheerio(context.assessmentUrl);\n    assert.isTrue(response.ok);\n\n    // We should have been redirected to the assessment instance\n    const assessmentInstanceUrl = response.url;\n    assert.include(assessmentInstanceUrl, '/assessment_instance/');\n    context.assessmentInstanceUrl = assessmentInstanceUrl;\n\n    // save the questionUrl for later\n    const questionUrl = response.$('a:contains(\"Add two numbers\")').attr('href');\n    context.questionUrl = `${context.siteUrl}${questionUrl}`;\n  });\n\n  step('visit the \"Add two numbers\" question', async () => {\n    const response = await helperClient.fetchCheerio(context.questionUrl);\n    assert.isTrue(response.ok);\n\n    // Check there are no issues generated\n    await helperQuestion.checkNoIssuesForLastVariantAsync();\n\n    // Check the question HTML is correct\n    assert.isAtLeast(response.$(':contains(\"Consider two numbers\")').length, 1);\n  });\n});\n"]}