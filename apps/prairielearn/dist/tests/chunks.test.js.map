{"version":3,"file":"chunks.test.js","sourceRoot":"","sources":["../../src/tests/chunks.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport fs from 'fs-extra';\nimport * as tmp from 'tmp-promise';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as chunksLib from '../lib/chunks.js';\nimport { config } from '../lib/config.js';\nimport { TEST_COURSE_PATH } from '../lib/paths.js';\nimport * as courseDB from '../sync/course-db.js';\nimport { makeInfoFile } from '../sync/infofile.js';\nimport { syncDiskToSql } from '../sync/syncFromDisk.js';\n\nimport * as helperServer from './helperServer.js';\nimport { makeMockLogger } from './mockLogger.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst COURSE: courseDB.CourseData = {\n  course: makeInfoFile(),\n  questions: {\n    'simple-question': makeInfoFile(),\n    'complex/question': makeInfoFile(),\n  },\n  courseInstances: {\n    'simple-course-instance': {\n      courseInstance: makeInfoFile(),\n      assessments: {\n        'simple-assessment': makeInfoFile(),\n        'complex/assessment': makeInfoFile(),\n      },\n    },\n    'complex/course/instance': {\n      courseInstance: makeInfoFile(),\n      assessments: {\n        'simple-assessment': makeInfoFile(),\n        'complex/assessment': makeInfoFile(),\n      },\n    },\n  },\n};\n\nasync function getAllChunksForCourse(course_id) {\n  return await sqldb.queryRows(\n    sql.select_all_chunks,\n    {\n      course_id,\n    },\n    z.object({\n      id: z.string(),\n      uuid: z.string(),\n      type: z.string(),\n      course_id: z.string(),\n      course_instance_id: z.string().nullable(),\n      assessment_id: z.string().nullable(),\n      question_id: z.string().nullable(),\n    }),\n  );\n}\n\ndescribe('chunks', () => {\n  describe('identifyChunksFromChangedFiles', () => {\n    it('should identify change in element', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        ['elements/my-special-element/impl.py'],\n        COURSE,\n      );\n      assert.isOk(chunks.elements);\n    });\n\n    it('should identify change in clientFilesCourse', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        ['clientFilesCourse/path/to/file.js'],\n        COURSE,\n      );\n      assert.isOk(chunks.clientFilesCourse);\n    });\n\n    it('should identify change in serverFilesCourse', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        ['serverFilesCourse/path/to/file.js'],\n        COURSE,\n      );\n      assert.isOk(chunks.serverFilesCourse);\n    });\n\n    it('should identify simple question', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        ['questions/simple-question/tests/test.py'],\n        COURSE,\n      );\n      assert.isOk(chunks.questions.has('simple-question'));\n    });\n\n    it('should identify complex question', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        ['questions/complex/question/tests/test.py'],\n        COURSE,\n      );\n      assert.isOk(chunks.questions.has('complex/question'));\n    });\n\n    it('should identify simple assessment in simple course instance', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        [\n          'courseInstances/simple-course-instance/assessments/simple-assessment/clientFilesAssessment/file.txt',\n        ],\n        COURSE,\n      );\n      assert.isOk(\n        chunks.courseInstances['simple-course-instance'].assessments.has('simple-assessment'),\n      );\n    });\n\n    it('should identify complex assessment in simple course instance', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        [\n          'courseInstances/simple-course-instance/assessments/complex/assessment/clientFilesAssessment/file.txt',\n        ],\n        COURSE,\n      );\n      assert.isOk(\n        chunks.courseInstances['simple-course-instance'].assessments.has('complex/assessment'),\n      );\n    });\n\n    it('should identify simple assessment in complex course instance', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        [\n          'courseInstances/complex/course/instance/assessments/simple-assessment/clientFilesAssessment/file.txt',\n        ],\n        COURSE,\n      );\n      assert.isOk(\n        chunks.courseInstances['complex/course/instance'].assessments.has('simple-assessment'),\n      );\n    });\n\n    it('should identify complex assessment in simple course instance', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        [\n          'courseInstances/complex/course/instance/assessments/complex/assessment/clientFilesAssessment/file.txt',\n        ],\n        COURSE,\n      );\n      assert.isOk(\n        chunks.courseInstances['complex/course/instance'].assessments.has('complex/assessment'),\n      );\n    });\n\n    it('should identify clientFilesCourseInstance in simple course instance', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        ['courseInstances/simple-course-instance/clientFilesCourseInstance/file.txt'],\n        COURSE,\n      );\n      assert.isOk(chunks.courseInstances['simple-course-instance'].clientFilesCourseInstance);\n    });\n\n    it('should identify clientFilesCourseInstance in complex course instance', () => {\n      const chunks = chunksLib.identifyChunksFromChangedFiles(\n        ['courseInstances/complex/course/instance/clientFilesCourseInstance/file.txt'],\n        COURSE,\n      );\n      assert.isOk(chunks.courseInstances['complex/course/instance'].clientFilesCourseInstance);\n    });\n  });\n\n  describe('coursePathForChunk', () => {\n    it('works for elements chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', { type: 'elements' }),\n        '/course/elements',\n      );\n    });\n\n    it('works for elementExtensions chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', { type: 'elementExtensions' }),\n        '/course/elementExtensions',\n      );\n    });\n\n    it('works for clientFilesCourse chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', { type: 'clientFilesCourse' }),\n        '/course/clientFilesCourse',\n      );\n    });\n\n    it('works for serverFilesCourse chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', { type: 'serverFilesCourse' }),\n        '/course/serverFilesCourse',\n      );\n    });\n\n    it('works for simple clientFilesCourseInstance chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', {\n          type: 'clientFilesCourseInstance',\n          courseInstanceName: 'foo',\n        }),\n        '/course/courseInstances/foo/clientFilesCourseInstance',\n      );\n    });\n\n    it('works for complex clientFilesCourseInstance chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', {\n          type: 'clientFilesCourseInstance',\n          courseInstanceName: 'foo/bar',\n        }),\n        '/course/courseInstances/foo/bar/clientFilesCourseInstance',\n      );\n    });\n\n    it('works for simple clientFilesAssessment chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', {\n          type: 'clientFilesAssessment',\n          courseInstanceName: 'foo',\n          assessmentName: 'bar',\n        }),\n        '/course/courseInstances/foo/assessments/bar/clientFilesAssessment',\n      );\n    });\n\n    it('works for complex clientFilesAssessment chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', {\n          type: 'clientFilesAssessment',\n          courseInstanceName: 'foo/bar',\n          assessmentName: 'bar/baz',\n        }),\n        '/course/courseInstances/foo/bar/assessments/bar/baz/clientFilesAssessment',\n      );\n    });\n\n    it('works for simple question chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', {\n          type: 'question',\n          questionName: 'foo',\n        }),\n        '/course/questions/foo',\n      );\n    });\n\n    it('works for complex question chunk', () => {\n      assert.equal(\n        chunksLib.coursePathForChunk('/course/', {\n          type: 'question',\n          questionName: 'foo/bar',\n        }),\n        '/course/questions/foo/bar',\n      );\n    });\n  });\n\n  describe('ensureChunksForCourse', function () {\n    this.timeout(60000);\n\n    let tempTestCourseDir: tmp.DirectoryResult;\n    let tempChunksDir: tmp.DirectoryResult;\n    const originalChunksConsumerDirectory = config.chunksConsumerDirectory;\n    let courseId;\n    let courseInstanceId;\n    let assessmentId;\n    let questionId;\n    let nestedQuestionId;\n\n    beforeEach('set up testing server', async () => {\n      // We need to modify the test course - create a copy that we can\n      // safely manipulate.\n      tempTestCourseDir = await tmp.dir({ unsafeCleanup: true });\n      await fs.copy(TEST_COURSE_PATH, tempTestCourseDir.path, {\n        overwrite: true,\n      });\n\n      // `testCourse` doesn't include an `elementExtensions` directory.\n      // We add one here for the sake of testing.\n      await fs.ensureDir(path.join(tempTestCourseDir.path, 'elementExtensions'));\n\n      // We'll add a `serverFilesCourse` directory too.\n      await fs.ensureDir(path.join(tempTestCourseDir.path, 'serverFilesCourse'));\n\n      // We need to override the chunks directory too.\n      tempChunksDir = await tmp.dir({ unsafeCleanup: true });\n\n      config.chunksConsumerDirectory = tempChunksDir.path;\n      config.chunksConsumer = true;\n\n      await helperServer.before(tempTestCourseDir.path).call(this);\n\n      // Find the ID of this course\n      const results = await sqldb.queryOneRowAsync(sql.select_course_by_path, {\n        course_path: tempTestCourseDir.path,\n      });\n      courseId = results.rows[0].id;\n\n      // Find the ID of the course instance\n      const courseInstanceResults = await sqldb.queryOneRowAsync(sql.select_course_instance, {\n        long_name: 'Spring 2015',\n      });\n      courseInstanceId = courseInstanceResults.rows[0].id;\n\n      // Find the ID of an assessment that has clientFilesAssessment\n      const assessmentResults = await sqldb.queryOneRowAsync(sql.select_assessment, {\n        tid: 'exam1-automaticTestSuite',\n      });\n      assessmentId = assessmentResults.rows[0].id;\n\n      // Find the ID of a question.\n      const questionResults = await sqldb.queryOneRowAsync(sql.select_question, {\n        qid: 'addNumbers',\n      });\n      questionId = questionResults.rows[0].id;\n\n      // Find the ID of a nested question.\n      const nestedQuestionResults = await sqldb.queryOneRowAsync(sql.select_question, {\n        qid: 'subfolder/nestedQuestion',\n      });\n      nestedQuestionId = nestedQuestionResults.rows[0].id;\n    });\n\n    afterEach('shut down testing server', async () => {\n      try {\n        await tempTestCourseDir.cleanup();\n        await tempChunksDir.cleanup();\n      } catch (err) {\n        console.error(err);\n      }\n      await helperServer.after.call(this);\n\n      config.chunksConsumer = false;\n      config.chunksConsumerDirectory = originalChunksConsumerDirectory;\n    });\n\n    it('handles question nesting after a rename', async () => {\n      // Scenario: there's a question named `foo/bar` (that is,\n      // `foo/bar/info.json` exists). We load the chunk for that\n      // question. We then move that `info.json` file to\n      // `foo/bar/baz/info.json`. We then try to load that chunk again. In the\n      // past, the new chunk would be written to an invalid location. This test\n      // ensures that it's written correctly.\n\n      const courseDir = tempTestCourseDir.path;\n      const courseRuntimeDir = chunksLib.getRuntimeDirectoryForCourse({\n        id: courseId,\n        path: courseDir,\n      });\n\n      // Generate chunks for the test course.\n      await chunksLib.updateChunksForCourse({\n        coursePath: courseDir,\n        courseId,\n        courseData: await courseDB.loadFullCourse(courseId, courseDir),\n      });\n\n      const chunksToLoad: chunksLib.Chunk[] = [{ type: 'question', questionId }];\n\n      // Load the question's chunk.\n      await chunksLib.ensureChunksForCourseAsync(courseId, chunksToLoad);\n\n      // Move the question. We can't directly move a directory to a subdirectory\n      // of itself, so we move it to a temporary location first.\n      const oldPath = path.join(courseDir, 'questions', 'addNumbers');\n      const tempPath = path.join(courseDir, 'questions', 'addNumbersTemp');\n      const newPath = path.join(courseDir, 'questions', 'addNumbers', 'addNumbersNested');\n      await fs.move(oldPath, tempPath);\n      await fs.move(tempPath, newPath);\n\n      // Sync course to DB.\n      const { logger } = makeMockLogger();\n      await syncDiskToSql(courseId, courseDir, logger);\n\n      // Regenerate chunks.\n      await chunksLib.updateChunksForCourse({\n        coursePath: courseDir,\n        courseId,\n        courseData: await courseDB.loadFullCourse(courseId, courseDir),\n      });\n\n      // Reload chunks.\n      await chunksLib.ensureChunksForCourseAsync(courseId, chunksToLoad);\n\n      // Check that the chunk was written to the correct location.\n      assert.isOk(\n        await fs.pathExists(\n          path.join(courseRuntimeDir, 'questions', 'addNumbers', 'addNumbersNested', 'info.json'),\n        ),\n      );\n    });\n\n    it('handles question unnesting after a rename', async () => {\n      // Scenario: there's a question named `foo/bar/baz` (that is,\n      // `foo/bar/baz/info.json` exists). We load the chunk for that\n      // question. We then move that `info.json` file to `foo/bar/info.json`. We\n      // then try to load that chunk again. In the past, we'd fail to load the\n      // new chunk correctly. This test ensures that it's loaded correctly.\n      const courseDir = tempTestCourseDir.path;\n      const courseRuntimeDir = chunksLib.getRuntimeDirectoryForCourse({\n        id: courseId,\n        path: courseDir,\n      });\n\n      // Generate chunks for the test course.\n      await chunksLib.updateChunksForCourse({\n        coursePath: courseDir,\n        courseId,\n        courseData: await courseDB.loadFullCourse(courseId, courseDir),\n      });\n\n      const chunksToLoad: chunksLib.Chunk[] = [{ type: 'question', questionId: nestedQuestionId }];\n\n      // Load the question's chunk.\n      await chunksLib.ensureChunksForCourseAsync(courseId, chunksToLoad);\n\n      // Move the question. We can't directly move a directory to one of its\n      // parent directories, so we move it to a temporary location first.\n      const oldPath = path.join(courseDir, 'questions', 'subfolder', 'nestedQuestion');\n      const tempPath = path.join(courseDir, 'questions', 'subfolderTemp');\n      const newPath = path.join(courseDir, 'questions', 'subfolder');\n      await fs.move(oldPath, tempPath);\n      await fs.remove(newPath);\n      await fs.move(tempPath, newPath);\n\n      // Sync course to DB.\n      const { logger } = makeMockLogger();\n      await syncDiskToSql(courseId, courseDir, logger);\n\n      // Regenerate chunks.\n      await chunksLib.updateChunksForCourse({\n        coursePath: courseDir,\n        courseId,\n        courseData: await courseDB.loadFullCourse(courseId, courseDir),\n      });\n\n      // Reload chunks.\n      await chunksLib.ensureChunksForCourseAsync(courseId, chunksToLoad);\n\n      // Check that the chunk was written to the correct location.\n      assert.isOk(\n        await fs.pathExists(path.join(courseRuntimeDir, 'questions', 'subfolder', 'info.json')),\n      );\n    });\n\n    it('deletes chunks that are no longer needed', async () => {\n      const courseDir = tempTestCourseDir.path;\n      const courseRuntimeDir = chunksLib.getRuntimeDirectoryForCourse({\n        id: courseId,\n        path: courseDir,\n      });\n\n      const chunksToLoad: chunksLib.Chunk[] = [\n        {\n          type: 'elements',\n        },\n        {\n          type: 'elementExtensions',\n        },\n        {\n          type: 'serverFilesCourse',\n        },\n        {\n          type: 'clientFilesCourse',\n        },\n        {\n          type: 'clientFilesCourseInstance',\n          courseInstanceId,\n        },\n        {\n          type: 'clientFilesAssessment',\n          courseInstanceId,\n          assessmentId,\n        },\n        {\n          type: 'question',\n          questionId,\n        },\n      ];\n\n      // Generate chunks for the test course\n      await chunksLib.updateChunksForCourse({\n        coursePath: tempTestCourseDir.path,\n        courseId,\n        courseData: await courseDB.loadFullCourse(courseId, courseDir),\n      });\n\n      // Load and unpack chunks\n      await chunksLib.ensureChunksForCourseAsync(courseId, chunksToLoad);\n\n      // Assert that the unpacked chunks exist on disk\n      assert.isOk(await fs.pathExists(path.join(courseRuntimeDir, 'elements')));\n      assert.isOk(await fs.pathExists(path.join(courseRuntimeDir, 'elementExtensions')));\n      assert.isOk(await fs.pathExists(path.join(courseRuntimeDir, 'serverFilesCourse')));\n      assert.isOk(await fs.pathExists(path.join(courseRuntimeDir, 'clientFilesCourse')));\n      assert.isOk(\n        await fs.pathExists(\n          path.join(courseRuntimeDir, 'courseInstances', 'Sp15', 'clientFilesCourseInstance'),\n        ),\n      );\n      assert.isOk(\n        await fs.pathExists(\n          path.join(\n            courseRuntimeDir,\n            'courseInstances',\n            'Sp15',\n            'assessments',\n            'exam1-automaticTestSuite',\n            'clientFilesAssessment',\n          ),\n        ),\n      );\n      assert.isOk(\n        await fs.pathExists(\n          path.join(courseRuntimeDir, 'questions', 'addNumbers', 'question.html'),\n        ),\n      );\n\n      // Remove subset of directories from the course\n      await fs.remove(path.join(courseDir, 'elements'));\n      await fs.remove(path.join(courseDir, 'elementExtensions'));\n\n      // Sync course to DB.\n      const { logger } = makeMockLogger();\n      await syncDiskToSql(courseId, courseDir, logger);\n\n      // Regenerate chunks\n      await chunksLib.updateChunksForCourse({\n        coursePath: courseDir,\n        courseId,\n        courseData: await courseDB.loadFullCourse(courseId, courseDir),\n      });\n\n      // Reload the chunks\n      await chunksLib.ensureChunksForCourseAsync(courseId, chunksToLoad);\n\n      // Assert that the chunks have been removed from disk\n      assert.isNotOk(await fs.pathExists(path.join(courseRuntimeDir, 'elements')));\n      assert.isNotOk(await fs.pathExists(path.join(courseRuntimeDir, 'elementExtensions')));\n\n      // Assert that the chunks have been deleted from the database\n      let databaseChunks = await getAllChunksForCourse(courseId);\n      assert.isUndefined(databaseChunks.find((chunk) => chunk.type === 'elements'));\n      assert.isUndefined(databaseChunks.find((chunk) => chunk.type === 'elementExtensions'));\n\n      // Also assert that the chunks for directories that do exist are still there\n      assert.isOk(await fs.pathExists(path.join(courseRuntimeDir, 'serverFilesCourse')));\n      assert.isOk(await fs.pathExists(path.join(courseRuntimeDir, 'clientFilesCourse')));\n      assert.isOk(\n        await fs.pathExists(\n          path.join(courseRuntimeDir, 'courseInstances', 'Sp15', 'clientFilesCourseInstance'),\n        ),\n      );\n      assert.isOk(\n        await fs.pathExists(\n          path.join(\n            courseRuntimeDir,\n            'courseInstances',\n            'Sp15',\n            'assessments',\n            'exam1-automaticTestSuite',\n            'clientFilesAssessment',\n          ),\n        ),\n      );\n      assert.isOk(await fs.pathExists(path.join(courseRuntimeDir, 'questions', 'addNumbers')));\n\n      // Also assert that the database still has chunks for directories that do exist\n      assert.isOk(databaseChunks.find((chunk) => chunk.type === 'serverFilesCourse'));\n      assert.isOk(databaseChunks.find((chunk) => chunk.type === 'clientFilesCourse'));\n      assert.isOk(\n        databaseChunks.find(\n          (chunk) =>\n            chunk.type === 'clientFilesCourseInstance' &&\n            chunk.course_instance_id === courseInstanceId,\n        ),\n      );\n      assert.isOk(\n        databaseChunks.find(\n          (chunk) => chunk.type === 'clientFilesAssessment' && chunk.assessment_id === assessmentId,\n        ),\n      );\n      assert.isOk(databaseChunks.find((chunk) => chunk.type === 'question' && chunk.question_id));\n\n      // Remove remaining directories from the course\n      await fs.remove(path.join(courseDir, 'serverFilesCourse'));\n      await fs.remove(path.join(courseDir, 'clientFilesCourse'));\n      await fs.remove(path.join(courseDir, 'courseInstances', 'Sp15', 'clientFilesCourseInstance'));\n      await fs.remove(\n        path.join(\n          courseDir,\n          'courseInstances',\n          'Sp15',\n          'assessments',\n          'exam1-automaticTestSuite',\n          'clientFilesAssessment',\n        ),\n      );\n      await fs.remove(path.join(courseDir, 'questions', 'addNumbers'));\n\n      // Sync course to DB.\n      await syncDiskToSql(courseId, courseDir, logger);\n\n      // Regenerate chunks\n      await chunksLib.updateChunksForCourse({\n        coursePath: courseDir,\n        courseId,\n        courseData: await courseDB.loadFullCourse(courseId, courseDir),\n      });\n\n      // Reload the chunks\n      await chunksLib.ensureChunksForCourseAsync(courseId, chunksToLoad);\n\n      // Assert that the remaining chunks have been removed from disk\n      assert.isNotOk(await fs.pathExists(path.join(courseRuntimeDir, 'serverFilesCourse')));\n      assert.isNotOk(await fs.pathExists(path.join(courseRuntimeDir, 'clientFilesCourse')));\n      assert.isNotOk(\n        await fs.pathExists(\n          path.join(courseRuntimeDir, 'courseInstances', 'Sp15', 'clientFilesCourseInstance'),\n        ),\n      );\n      assert.isNotOk(\n        await fs.pathExists(\n          path.join(\n            courseRuntimeDir,\n            'courseInstances',\n            'Sp15',\n            'assessments',\n            'exam1-automaticTestSuite',\n            'clientFilesAssessment',\n          ),\n        ),\n      );\n      assert.isNotOk(\n        await fs.pathExists(\n          path.join(courseRuntimeDir, 'questions', 'addNumbers', 'question.html'),\n        ),\n      );\n\n      // Assert that the remaining chunks have been deleted from the database\n      databaseChunks = await getAllChunksForCourse(courseId);\n      assert.isUndefined(databaseChunks.find((chunk) => chunk.type === 'serverFilesCourse'));\n      assert.isUndefined(databaseChunks.find((chunk) => chunk.type === 'clientFilesCourse'));\n      assert.isUndefined(\n        databaseChunks.find(\n          (chunk) =>\n            chunk.type === 'clientFilesCourseInstance' &&\n            chunk.course_instance_id === courseInstanceId,\n        ),\n      );\n      assert.isUndefined(\n        databaseChunks.find(\n          (chunk) => chunk.type === 'clientFilesAssessment' && chunk.assessment_id === assessmentId,\n        ),\n      );\n      assert.isUndefined(\n        databaseChunks.find(\n          (chunk) => chunk.type === 'question' && chunk.question_id === questionId,\n        ),\n      );\n    });\n  });\n});\n"]}