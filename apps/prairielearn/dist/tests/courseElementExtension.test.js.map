{"version":3,"file":"courseElementExtension.test.js","sourceRoot":"","sources":["../../src/tests/courseElementExtension.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport { promisify } from 'util';\n\nimport { assert } from 'chai';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport { step } from 'mocha-steps';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { EXAMPLE_COURSE_PATH, TEST_COURSE_PATH } from '../lib/paths.js';\nimport * as freeform from '../question-servers/freeform.js';\n\nimport * as helperClient from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('Course element extensions', function () {\n  this.timeout(60000);\n\n  describe('Extensions can be loaded', function () {\n    const extDir = path.resolve(EXAMPLE_COURSE_PATH, 'elementExtensions');\n    const element = 'extendable-element';\n    const element_extensions = [\n      'example-extension',\n      'extension-cssjs',\n      'extension-fileio',\n      'extension-clientfiles',\n    ];\n\n    const check_ext = (loaded) => {\n      assert.isTrue(element in loaded, `did not find element ${element} in loaded extensions`);\n      assert(\n        _.isEqual(Object.keys(loaded[element]).sort(), element_extensions.sort()),\n        'could not load all extensions',\n      );\n    };\n\n    it('should correctly load extensions from example course', async () => {\n      const extensions = await freeform.loadExtensions(extDir, extDir);\n      check_ext(extensions);\n    });\n\n    it(\"shouldn't fail on empty extension directories\", async () => {\n      const dir = path.join(extDir, element, 'empty');\n\n      await promisify(fs.mkdir)(dir);\n      try {\n        const extensions = await freeform.loadExtensions(extDir, extDir);\n        check_ext(extensions);\n      } finally {\n        await promisify(fs.rmdir)(dir);\n      }\n    });\n\n    it(\"shouldn't fail on empty element directories\", async () => {\n      const dir = path.join(extDir, 'empty');\n\n      await promisify(fs.mkdir)(dir);\n      try {\n        const extensions = await freeform.loadExtensions(extDir, extDir);\n        check_ext(extensions);\n      } finally {\n        await promisify(fs.rmdir)(dir);\n      }\n    });\n\n    it(\"shouldn't fail when there are no extensions to load\", async () => {\n      const extensions = await freeform.loadExtensions(\n        path.join(TEST_COURSE_PATH, 'elementExtensions'),\n        path.join(TEST_COURSE_PATH, 'elementExtensions'),\n      );\n      assert.isEmpty(\n        extensions,\n        'non-zero number of extensions were loaded from a course without extensions',\n      );\n    });\n  });\n\n  describe('Extensions can insert client-side assets into the page', function () {\n    before('set up testing server', helperServer.before(EXAMPLE_COURSE_PATH));\n    after('shut down testing server', helperServer.after);\n\n    const locals: Record<string, any> = {};\n    locals.siteUrl = 'http://localhost:' + config.serverPort;\n    locals.baseUrl = locals.siteUrl + '/pl';\n    locals.courseInstanceBaseUrl = locals.baseUrl + '/course_instance/1/instructor';\n    locals.questionBaseUrl = locals.courseInstanceBaseUrl + '/question';\n    locals.questionPreviewTabUrl = '/preview';\n    locals.questionsUrl = locals.courseInstanceBaseUrl + '/questions';\n    locals.isStudentPage = false;\n    const testQid = 'demo/custom/extension';\n\n    const incJs = 'extendable-element/extension-cssjs/extension-cssjs.js';\n    const incCss = 'extendable-element/extension-cssjs/extension-cssjs.css';\n    const incDynamicJs = 'd3/dist/d3.min.js';\n    const incDynamicJsKey = 'd3';\n    const incImg =\n      'extendable-element/extension-clientfiles/clientFilesExtension/cat-2536662_640.jpg';\n\n    step('find the example question in the database', async () => {\n      const results = await sqldb.queryZeroOrOneRowAsync(sql.select_question_by_qid, {\n        qid: testQid,\n      });\n      assert(results.rowCount === 1, `could not find question ${testQid}`);\n\n      locals.question = results.rows[0];\n    });\n    step('check the question page for extension css and js files', async () => {\n      const questionUrl =\n        locals.questionBaseUrl + '/' + locals.question.id + (locals.questionPreviewTabUrl || '');\n      const response = await helperClient.fetchCheerio(questionUrl);\n      assert.isTrue(response.ok, 'could not fetch question page');\n\n      const page$ = response.$;\n      assert.lengthOf(\n        page$(`script[src$=\"${incJs}\"]`),\n        1,\n        'page did not load extension javascript',\n      );\n      assert.lengthOf(\n        page$(`link[rel=\"stylesheet\"][href$=\"${incCss}\"]`),\n        1,\n        'page did not load extension css',\n      );\n\n      const importMap = page$('script[type=\"importmap\"]').html();\n      const importMapData = JSON.parse(importMap ?? '');\n      assert.property(\n        importMapData.imports,\n        incDynamicJsKey,\n        'importmap did not include dynamic extension js',\n      );\n      assert.equal(\n        importMapData.imports[incDynamicJsKey].slice(-incDynamicJs.length),\n        incDynamicJs,\n      );\n    });\n    step('check the question page for a client-side image', async () => {\n      const questionUrl =\n        locals.questionBaseUrl + '/' + locals.question.id + (locals.questionPreviewTabUrl || '');\n      const response = await helperClient.fetchCheerio(questionUrl);\n      assert.isTrue(response.ok, 'could not fetch question page');\n\n      const image = Array.from(response.$('img')).find((img) => img.attribs.src.includes(incImg));\n      assert(image != null, 'could not find image on page');\n\n      const image_response = await helperClient.fetchCheerio(locals.siteUrl + image.attribs.src);\n      assert.isTrue(image_response.ok, 'could not fetch image');\n    });\n  });\n});\n"]}