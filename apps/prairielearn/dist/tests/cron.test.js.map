{"version":3,"file":"cron.test.js","sourceRoot":"","sources":["../../src/tests/cron.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,CAAC,MAAM,QAAQ,CAAC;AAEvB,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,KAAK,IAAI,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,KAAK,YAAY,MAAM,mBAAmB,CAAC;AAElD,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,QAAQ,CAAC,MAAM,EAAE;IACf,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEpB,MAAM,CAAC,uBAAuB,EAAE,KAAK;QACnC,mEAAmE;QACnE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACpD,MAAM,eAAe,GAAG,GAAG,GAAG,QAAQ,CAAC;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAClC,MAAM,YAAY,GAAG,EAAE,GAAG,IAAI,CAAC;QAC/B,MAAM,WAAW,GAAG,CAAC,YAAY,GAAG,eAAe,CAAC,GAAG,KAAK,CAAC;QAC7D,MAAM,CAAC,YAAY,GAAG,WAAW,GAAG,IAAI,CAAC;QAEzC,0CAA0C;QAC1C,MAAM,CAAC,2BAA2B,GAAG,CAAC,CAAC;QAEvC,MAAM,YAAY,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IACH,KAAK,CAAC,0BAA0B,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;IAEtD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,4BAA4B,EAAE,CAAC,QAAQ,EAAE,EAAE;YAC5C,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;YAChE,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACnD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;YAC7E,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\nimport _ from 'lodash';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as cron from '../cron/index.js';\nimport { config } from '../lib/config.js';\n\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('Cron', function () {\n  this.timeout(60000);\n\n  before('set up testing server', async function () {\n    // set config.cronDailyMS so that daily cron jobs will execute soon\n    const now = Date.now();\n    const midnight = new Date(now).setHours(0, 0, 0, 0);\n    const sinceMidnightMS = now - midnight;\n    const dayMS = 24 * 60 * 60 * 1000;\n    const timeToNextMS = 15 * 1000;\n    const cronDailyMS = (timeToNextMS + sinceMidnightMS) % dayMS;\n    config.cronDailySec = cronDailyMS / 1000;\n\n    // set all other cron jobs to execute soon\n    config.cronOverrideAllIntervalsSec = 3;\n\n    await helperServer.before().call(this);\n  });\n  after('shut down testing server', helperServer.after);\n\n  describe('1. cron jobs', () => {\n    it('should wait for 20 seconds', (callback) => {\n      setTimeout(callback, 20000);\n    });\n\n    it('should all have started', async () => {\n      const result = await sqldb.queryAsync(sql.select_cron_jobs, []);\n      const runJobs = result.rows.map((row) => row.name);\n      const cronJobs = cron.jobs.map((row) => row.name);\n      assert.lengthOf(_.difference(runJobs, cronJobs), 0);\n      assert.lengthOf(_.difference(cronJobs, runJobs), 0);\n    });\n\n    it('should all have successfully completed', async () => {\n      const result = await sqldb.queryAsync(sql.select_unsuccessful_cron_jobs, []);\n      assert.lengthOf(result.rows, 0);\n    });\n  });\n});\n"]}