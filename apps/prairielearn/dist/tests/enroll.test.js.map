{"version":3,"file":"enroll.test.js","sourceRoot":"","sources":["../../src/tests/enroll.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\n\nimport { queryAsync } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport * as helperServer from './helperServer.js';\nimport { enrollUser, unenrollUser } from './utils/enrollments.js';\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\n\nconst USER_1 = {\n  name: 'Student 1',\n  uid: 'student1@example.com',\n  uin: '1',\n  email: 'student1@example.com',\n};\n\nconst USER_2 = {\n  name: 'Student 2',\n  uid: 'student2@example.com',\n  uin: '2',\n  email: 'student2@example.com',\n};\n\nconst USER_3 = {\n  name: 'Student 3',\n  uid: 'student3@example.com',\n  uin: '3',\n  email: 'student3@example.com',\n};\n\ndescribe('Enroll page (enterprise)', function () {\n  before(helperServer.before());\n  after(helperServer.after);\n\n  const originalIsEnterprise = config.isEnterprise;\n  before(async () => (config.isEnterprise = true));\n  after(async () => (config.isEnterprise = originalIsEnterprise));\n\n  step('enroll a single student', async () => {\n    const res = await enrollUser('1', USER_1);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll');\n  });\n\n  step('enrolls the same student again', async () => {\n    const res = await enrollUser('1', USER_1);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll');\n  });\n\n  step('unenroll a single student', async () => {\n    const res = await unenrollUser('1', USER_1);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll');\n  });\n\n  step('unenroll the same student again', async () => {\n    const res = await unenrollUser('1', USER_1);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll');\n  });\n\n  step('apply a course instance enrollment limit', async () => {\n    await queryAsync('UPDATE course_instances SET enrollment_limit = 1 WHERE id = 1', {});\n  });\n\n  step('enroll one student', async () => {\n    const res = await enrollUser('1', USER_1);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll');\n  });\n\n  step('fail to enroll a second student', async () => {\n    const res = await enrollUser('1', USER_2);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll/limit_exceeded');\n  });\n\n  step('apply an institution-level course instance enrollment limit', async () => {\n    await queryAsync('UPDATE course_instances SET enrollment_limit = NULL WHERE id = 1', {});\n    await queryAsync(\n      'UPDATE institutions SET course_instance_enrollment_limit = 1 WHERE id = 1',\n      {},\n    );\n  });\n\n  step('fail to enroll a second student', async () => {\n    const res = await enrollUser('1', USER_2);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll/limit_exceeded');\n  });\n\n  step('set a higher course instance enrollment limit', async () => {\n    await queryAsync('UPDATE course_instances SET enrollment_limit = 2 WHERE id = 1', {});\n  });\n\n  step('enroll a second student', async () => {\n    const res = await enrollUser('1', USER_2);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll');\n  });\n\n  step('fail to enroll a third student', async () => {\n    const res = await enrollUser('1', USER_3);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll/limit_exceeded');\n  });\n\n  step('set a yearly enrollment limit', async () => {\n    await queryAsync('UPDATE course_instances SET enrollment_limit = NULL WHERE id = 1', {});\n    await queryAsync(\n      'UPDATE institutions SET course_instance_enrollment_limit = 100000, yearly_enrollment_limit = 2 WHERE id = 1',\n      {},\n    );\n  });\n\n  step('fail to enroll a third student', async () => {\n    const res = await enrollUser('1', USER_3);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll/limit_exceeded');\n  });\n});\n\n// Enrollment limits should not apply for non-enterprise instances (the default).\ndescribe('Enroll page (non-enterprise)', () => {\n  before(helperServer.before());\n  after(helperServer.after);\n\n  step('apply a course instance enrollment limit', async () => {\n    await queryAsync('UPDATE course_instances SET enrollment_limit = 1 WHERE id = 1', {});\n  });\n\n  step('enroll one student', async () => {\n    const res = await enrollUser('1', USER_1);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll');\n  });\n\n  step('enroll a second student', async () => {\n    const res = await enrollUser('1', USER_2);\n    assert.isOk(res.ok);\n    assert.equal(res.url, baseUrl + '/enroll');\n  });\n\n  // We want to block access in Exam mode since a student could theoretically\n  // use the name of a course on the enrollment page to infiltrate information\n  // into an exam.\n  step('ensure that access is blocked in Exam mode', async () => {\n    const res = await fetch(`${baseUrl}/enroll`, {\n      headers: {\n        Cookie: 'pl_test_mode=Exam',\n      },\n    });\n    assert.equal(res.status, 403);\n  });\n});\n"]}