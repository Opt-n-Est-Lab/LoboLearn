{"version":3,"file":"features.test.js","sourceRoot":"","sources":["../../src/tests/features.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport { queryAsync } from '@prairielearn/postgres';\n\nimport { FeatureManager } from '../lib/features/manager.js';\n\nimport * as helperCourse from './helperCourse.js';\nimport * as helperDb from './helperDb.js';\n\ndescribe('features', () => {\n  before(async function () {\n    await helperDb.before.call(this);\n    await helperCourse.syncCourse();\n    await queryAsync('INSERT INTO users (name, uid) VALUES ($name, $uid);', {\n      name: 'Test User',\n      uid: 'test@example.com',\n    });\n  });\n\n  beforeEach(async () => {\n    await queryAsync('DELETE FROM feature_grants', {});\n  });\n\n  after(async function () {\n    await helperDb.after.call(this);\n  });\n\n  it('enables and disables a global feature flag', async () => {\n    const features = new FeatureManager(['test:example-feature-flag']);\n\n    await features.enable('test:example-feature-flag');\n    assert.isTrue(await features.enabled('test:example-feature-flag'));\n    assert.isTrue(await features.enabled('test:example-feature-flag', { institution_id: '1' }));\n    assert.isTrue(await features.enabled('test:example-feature-flag', { user_id: '1' }));\n\n    await features.disable('test:example-feature-flag');\n    assert.isFalse(await features.enabled('test:example-feature-flag'));\n  });\n\n  it('enables and disables a feature flag for an institution', async () => {\n    const features = new FeatureManager(['test:example-feature-flag']);\n    const context = { institution_id: '1' };\n\n    await features.enable('test:example-feature-flag', context);\n    assert.isTrue(await features.enabled('test:example-feature-flag', context));\n    assert.isFalse(await features.enabled('test:example-feature-flag'));\n\n    await features.disable('test:example-feature-flag', context);\n    assert.isFalse(await features.enabled('test:example-feature-flag', context));\n  });\n\n  it('enables and disables a feature flag for a course', async () => {\n    const features = new FeatureManager(['test:example-feature-flag']);\n    const context = { institution_id: '1', course_id: '1' };\n\n    await features.enable('test:example-feature-flag', context);\n    assert.isTrue(await features.enabled('test:example-feature-flag', context));\n    assert.isFalse(await features.enabled('test:example-feature-flag'));\n\n    await features.disable('test:example-feature-flag', context);\n    assert.isFalse(await features.enabled('test:example-feature-flag', context));\n  });\n\n  it('enables and disables a feature flag for a course instance', async () => {\n    const features = new FeatureManager(['test:example-feature-flag']);\n    const context = { institution_id: '1', course_id: '1', course_instance_id: '1' };\n\n    await features.enable('test:example-feature-flag', context);\n    assert.isTrue(await features.enabled('test:example-feature-flag', context));\n    assert.isFalse(await features.enabled('test:example-feature-flag'));\n\n    await features.disable('test:example-feature-flag', context);\n    assert.isFalse(await features.enabled('test:example-feature-flag', context));\n  });\n\n  it('enables and disables a feature flag for a user', async () => {\n    const features = new FeatureManager(['test:example-feature-flag']);\n    const context = { user_id: '1' };\n\n    await features.enable('test:example-feature-flag', context);\n    assert.isTrue(await features.enabled('test:example-feature-flag', context));\n\n    await features.disable('test:example-feature-flag', context);\n    assert.isFalse(await features.enabled('test:example-feature-flag', context));\n  });\n\n  it('enables and disables a feature flag for a user in a course instance', async () => {\n    const features = new FeatureManager(['test:example-feature-flag']);\n    const context = { institution_id: '1', course_id: '1', course_instance_id: '1', user_id: '1' };\n\n    await features.enable('test:example-feature-flag', context);\n    assert.isTrue(await features.enabled('test:example-feature-flag', context));\n    assert.isFalse(await features.enabled('test:example-feature-flag', { user_id: '1' }));\n\n    await features.disable('test:example-feature-flag', context);\n    assert.isFalse(await features.enabled('test:example-feature-flag', context));\n    assert.isFalse(await features.enabled('test:example-feature-flag', { user_id: '1' }));\n  });\n\n  it('disables a feature for a specific context', async () => {\n    const features = new FeatureManager(['test:example-feature-flag']);\n\n    await features.enable('test:example-feature-flag', { institution_id: '1' });\n    await features.disable('test:example-feature-flag', { institution_id: '1', course_id: '1' });\n\n    assert.isTrue(await features.enabled('test:example-feature-flag', { institution_id: '1' }));\n    assert.isFalse(\n      await features.enabled('test:example-feature-flag', {\n        institution_id: '1',\n        course_id: '1',\n      }),\n    );\n    assert.isFalse(\n      await features.enabled('test:example-feature-flag', {\n        institution_id: '1',\n        course_id: '1',\n        course_instance_id: '1',\n      }),\n    );\n\n    await features.enable('test:example-feature-flag', {\n      institution_id: '1',\n      course_id: '1',\n      course_instance_id: '1',\n    });\n\n    assert.isTrue(\n      await features.enabled('test:example-feature-flag', {\n        institution_id: '1',\n        course_id: '1',\n        course_instance_id: '1',\n      }),\n    );\n  });\n\n  it('enables a feature flag via course options', async () => {\n    const features = new FeatureManager(['test:example-feature-flag']);\n    const context = { institution_id: '1', course_id: '1' };\n\n    await queryAsync('UPDATE pl_courses SET options = $options WHERE id = 1', {\n      options: {\n        devModeFeatures: { 'test:example-feature-flag': true },\n      },\n    });\n    assert.isTrue(await features.enabled('test:example-feature-flag', context));\n\n    await queryAsync('UPDATE pl_courses SET options = $options WHERE id = 1', {\n      options: {},\n    });\n    assert.isFalse(await features.enabled('test:example-feature-flag', context));\n  });\n\n  it('validates and typechecks feature flags', async () => {\n    const features = new FeatureManager(['valid']);\n\n    await assert.isFulfilled(features.enable('valid'));\n\n    // @ts-expect-error -- Invalid feature flag name.\n    await assert.isRejected(features.enable('invalid'));\n  });\n});\n"]}