{"version":3,"file":"gradingMethods.test.js","sourceRoot":"","sources":["../../src/tests/gradingMethods.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,KAAK,MAAM,YAAY,CAAC;AAC/B,OAAO,EAAE,EAAE,EAAE,MAAM,kBAAkB,CAAC;AAEtC,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,EAAa,uBAAuB,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC7F,OAAO,KAAK,YAAY,MAAM,mBAAmB,CAAC;AAElD,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,MAAM,OAAO,GAAG,mBAAmB,GAAG,MAAM,CAAC,UAAU,CAAC;AACxD,MAAM,OAAO,GAAG,OAAO,GAAG,KAAK,CAAC;AAChC,MAAM,WAAW,GAAG;IAClB,OAAO,EAAE,MAAM,CAAC,OAAO;IACvB,QAAQ,EAAE,MAAM,CAAC,QAAQ;IACzB,OAAO,EAAE,MAAM,CAAC,OAAO;CACxB,CAAC;AAEF,MAAM,YAAY,GAAG;IACnB,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,UAAU,EAAE;IACxE,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,UAAU,EAAE;IACxE,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,UAAU,EAAE;IACxE,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,UAAU,EAAE;CACzE,CAAC;AAEF,KAAK,UAAU,qBAAqB,CAAC,cAAc;IACjD,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,cAAc,CAAC,qBAAqB,CAAC,CAAC,IAAI,EAAE,CAAC;IACjF,MAAM,MAAM,GAAG,EAAE,CAAC,oBAAoB,MAAM,CAAC,UAAU,mBAAmB,CAAC,CAAC;IAE5E,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjD,SAAS,kBAAkB,CAAC,GAAQ;YAClC,KAAK,MAAM,UAAU,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;gBACzC,IAAI,UAAU,CAAC,kBAAkB,KAAK,QAAQ,EAAE,CAAC;oBAC/C,OAAO,EAAE,CAAC;oBACV,OAAO;gBACT,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CACT,MAAM,EACN,EAAE,UAAU,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,aAAa,EAAE,YAAY,CAAC,QAAQ,EAAE,EAAE,EAC5E,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,CAAC,GAAG;gBAAE,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;YACnE,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CACF,CAAC;QAEF,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;QACd,qEAAqE;QACrE,4CAA4C;QAC5C,MAAM,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;GAGG;AACH,MAAM,gBAAgB,GAAG,KAAK,EAAE,IAAU,EAAE,EAAE;IAC5C,OAAO,CAAC,IAAI,CAAC,CAAC;IACd,MAAM,wBAAwB,GAAG,OAAO,GAAG,oBAAoB,CAAC;IAChE,MAAM,kBAAkB,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAChF,MAAM,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC7D,MAAM,4BAA4B,GAChC,OAAO;QACP,mBAAmB,CACjB,uEAAuE,CACxE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjB,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,4BAA4B,CAAC,CAAC;IACtD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAC3B,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;AACpB,CAAC,CAAC;AAEF;;GAEG;AACH,SAAS,yBAAyB,CAAC,CAAqB;IACtD,OAAO,CAAC,CAAC,0CAA0C,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC7E,CAAC;AAED,QAAQ,CAAC,mBAAmB,EAAE;IAC5B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEpB,IAAI,QAAQ,CAAC;IACb,IAAI,KAAK,CAAC;IACV,IAAI,QAAQ,CAAC;IACb,IAAI,IAAI,CAAC;IACT,IAAI,aAAa,CAAC;IAClB,IAAI,cAAc,CAAC;IAEnB,MAAM,CAAC,uBAAuB,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;IACvD,KAAK,CAAC,0BAA0B,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;IAEtD,KAAK,CAAC,oBAAoB,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAExD,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;YAC1B,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBAC9B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;oBAC3C,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO,GAAG,QAAQ,CAAC,oDAAoD,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAExF,yEAAyE;oBACzE,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC5D,qBAAqB;oBACrB,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;oBAC5C,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAExF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBACzF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;oBAC/C,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;oBACtE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;gBAC7B,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;oBACpE,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO,GAAG,QAAQ,CAAC,oDAAoD,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAExF,yEAAyE;oBACzE,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC;oBACnB,qBAAqB;oBACrB,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;oBACtC,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAExF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;oBACxF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,mBAAmB,CAAC,CAAC;gBAC/E,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;YACxB,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBAC9B,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;oBACrE,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CAAC,+DAA+D,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACzF,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC9D,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;oBACrF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE;wBAC/C,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;qBACzE,CAAC,CAAC;oBACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CACV,yBAAyB,CAAC,cAAc,CAAC,EACzC,qCAAqC,CACtC,CAAC;gBACJ,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;gBAC7B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;oBAC3C,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CAAC,+DAA+D,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3F,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;oBACpF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE;wBAC9C,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;qBACzE,CAAC,CAAC;oBACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CACV,yBAAyB,CAAC,cAAc,CAAC,EACzC,qCAAqC,CACtC,CAAC;gBACJ,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;YAC1B,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBAC9B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;oBAC3C,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CAAC,yDAAyD,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACnF,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC9D,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;oBAC5C,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE;wBAC/C,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;qBAC5E,CAAC,CAAC;oBACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;oBACrE,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAE7C,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;oBACtC,MAAM,qBAAqB,CAAC,cAAc,CAAC,CAAC;oBAE5C,8DAA8D;oBAC9D,MAAM,cAAc,GAAG,cAAc,CAAC,qBAAqB,CAAC,CAAC,KAAK,EAAE,CAAC;oBACrE,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAAE,OAAO,CAAC,CAAC;oBAC1F,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;oBACjE,MAAM,mBAAmB,GAAG,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;wBACrE,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBAClB,OAAO,GAAG,CAAC,IAAI,EAAS,CAAC;oBAC3B,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;oBAC/C,MAAM,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;oBAC3E,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACzE,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,EAAE,MAAM,CAAC,CAAC;oBAClE,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;oBACpE,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtE,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;oBAC/C,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;oBAC9E,8EAA8E;oBAC9E,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;gBAC7B,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;oBACrE,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CAAC,yDAAyD,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEnF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE;wBAC9C,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;qBAC5E,CAAC,CAAC;oBACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAE7C,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,mBAAmB,CAAC,CAAC;gBAC/E,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,0CAA0C,EAAE,GAAG,EAAE;gBACxD,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;oBAC3C,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CAAC,6DAA6D,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACvF,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC9D,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;oBAC5C,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE;wBAC/C,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;qBACtF,CAAC,CAAC;oBACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;oBAClD,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAE7C,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;oBACtC,MAAM,qBAAqB,CAAC,cAAc,CAAC,CAAC;oBAE5C,8DAA8D;oBAC9D,MAAM,cAAc,GAAG,cAAc,CAAC,qBAAqB,CAAC,CAAC,KAAK,EAAE,CAAC;oBACrE,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAAE,OAAO,CAAC,CAAC;oBAC1F,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;oBACjE,MAAM,mBAAmB,GAAG,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;wBACrE,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBAClB,OAAO,GAAG,CAAC,IAAI,EAAS,CAAC;oBAC3B,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;oBAC/C,MAAM,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;oBAC3E,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACzE,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,EAAE,MAAM,CAAC,CAAC;oBAClE,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;oBACpE,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtE,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;oBAC/C,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;oBAC9E,8EAA8E;oBAC9E,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,sDAAsD,EAAE,GAAG,EAAE;YACpE,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBAC9B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;oBAC3C,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CAAC,qEAAqE,CAAC,CAAC,IAAI,CAClF,MAAM,CACP,CAAC;oBAEJ,yEAAyE;oBACzE,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC5D,qBAAqB;oBACrB,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;oBAC5C,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAExF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBACzF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;oBAC/C,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;oBACtE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;gBAC7B,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;oBACpE,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CAAC,qEAAqE,CAAC,CAAC,IAAI,CAClF,MAAM,CACP,CAAC;oBAEJ,yEAAyE;oBACzE,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC;oBACnB,qBAAqB;oBACrB,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;oBACtC,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAExF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;oBACxF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,mBAAmB,CAAC,CAAC;gBAC/E,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,wDAAwD,EAAE,GAAG,EAAE;YACtE,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBAC9B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;oBAC3C,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CACN,yEAAyE,CAC1E,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEjB,yEAAyE;oBACzE,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;oBAE5D,qBAAqB;oBACrB,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;oBACrF,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBACzF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CACV,yBAAyB,CAAC,cAAc,CAAC,EACzC,qCAAqC,CACtC,CAAC;gBACJ,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;gBAC7B,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;oBACrE,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK;wBACH,OAAO;4BACP,QAAQ,CACN,yEAAyE,CAC1E,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEjB,yEAAyE;oBACzE,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC;oBACnB,qBAAqB;oBACrB,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;oBAC1D,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;oBACxF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CACV,yBAAyB,CAAC,cAAc,CAAC,EACzC,qCAAqC,CACtC,CAAC;gBACJ,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACvD,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBAC9B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;oBAC3C,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK,GAAG,OAAO,GAAG,QAAQ,CAAC,+BAA+B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEzE,yEAAyE;oBACzE,aAAa,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC5D,qBAAqB;oBACrB,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;oBAC5C,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAExF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBACzF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;oBAC/C,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;oBACtE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;gBAC7B,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;oBACpE,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACjC,KAAK,GAAG,OAAO,GAAG,QAAQ,CAAC,+BAA+B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEzE,yEAAyE;oBACzE,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC;oBACnB,qBAAqB;oBACrB,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;oBACtC,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAExF,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;oBACxF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAEnC,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACtC,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzF,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;oBAChD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,mBAAmB,CAAC,CAAC;gBAC/E,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;oBACxE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetch from 'node-fetch';\nimport { io } from 'socket.io-client';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport { type User, parseInstanceQuestionId, saveOrGrade, setUser } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\nconst defaultUser = {\n  authUid: config.authUid,\n  authName: config.authName,\n  authUin: config.authUin,\n};\n\nconst mockStudents = [\n  { authUid: 'student1', authName: 'Student User 1', authUin: '00000001' },\n  { authUid: 'student2', authName: 'Student User 2', authUin: '00000002' },\n  { authUid: 'student3', authName: 'Student User 3', authUin: '00000003' },\n  { authUid: 'student4', authName: 'Student User 4', authUin: '00000004' },\n];\n\nasync function waitForExternalGrader($questionsPage): Promise<void> {\n  const { variantId, variantToken } = $questionsPage('.question-container').data();\n  const socket = io(`http://localhost:${config.serverPort}/external-grading`);\n\n  return new Promise<void>((resolve, reject) => {\n    socket.on('connect_error', (err) => reject(err));\n\n    function handleStatusChange(msg: any) {\n      for (const submission of msg.submissions) {\n        if (submission.grading_job_status === 'graded') {\n          resolve();\n          return;\n        }\n      }\n    }\n\n    socket.emit(\n      'init',\n      { variant_id: variantId.toString(), variant_token: variantToken.toString() },\n      (msg: any) => {\n        if (!msg) return reject(new Error('Socket initialization failed'));\n        handleStatusChange(msg);\n      },\n    );\n\n    socket.on('change:status', (msg) => handleStatusChange(msg));\n  }).finally(() => {\n    // Whether or not we actually got a valid result, we should close the\n    // socket to allow the test process to exit.\n    socket.close();\n  });\n}\n\n/**\n * @param user - user to load page by\n * @returns string Returns \"Homework for Internal, External, Manual grading methods\" page text\n */\nconst loadHomeworkPage = async (user: User) => {\n  setUser(user);\n  const studentCourseInstanceUrl = baseUrl + '/course_instance/1';\n  const courseInstanceBody = await (await fetch(studentCourseInstanceUrl)).text();\n  const $courseInstancePage = cheerio.load(courseInstanceBody);\n  const hm9InternalExternalManualUrl =\n    siteUrl +\n    $courseInstancePage(\n      'a:contains(\"Homework for Internal, External, Manual grading methods\")',\n    ).attr('href');\n  const res = await fetch(hm9InternalExternalManualUrl);\n  assert.equal(res.ok, true);\n  return res.text();\n};\n\n/**\n * Gets the score text for the first submission panel on the page.\n */\nfunction getLatestSubmissionStatus($: cheerio.CheerioAPI): string {\n  return $('[data-testid=\"submission-status\"] .badge').first().text().trim();\n}\n\ndescribe('Grading method(s)', function () {\n  this.timeout(80000);\n\n  let $hm1Body;\n  let iqUrl;\n  let gradeRes;\n  let iqId;\n  let questionsPage;\n  let $questionsPage;\n\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  after('reset default user', () => setUser(defaultUser));\n\n  describe('`gradingMethod` configuration', () => {\n    describe('\"Internal\"', () => {\n      describe('\"grade\" action', () => {\n        it('should load page as student', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl + $hm1Body('a:contains(\"Internal Grading: Adding two numbers\")').attr('href');\n\n          // open page to produce variant because we want to get the correct answer\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('button[value=\"grade\"]'), 1);\n          // get variant params\n          iqId = parseInstanceQuestionId(iqUrl);\n        });\n        it('should submit \"grade\" action', async () => {\n          const variant = (await sqldb.queryOneRowAsync(sql.get_variant_by_iq, { iqId })).rows[0];\n\n          gradeRes = await saveOrGrade(iqUrl, { c: variant.params.a + variant.params.b }, 'grade');\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should result in 1 grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 1);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', () => {\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), '100%');\n        });\n        it('should result in 1 \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 1);\n        });\n      });\n      describe('\"save\" action', () => {\n        it('should load page as student and submit \"save\" action', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[1]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl + $hm1Body('a:contains(\"Internal Grading: Adding two numbers\")').attr('href');\n\n          // open page to produce variant because we want to get the correct answer\n          await fetch(iqUrl);\n          // get variant params\n          iqId = parseInstanceQuestionId(iqUrl);\n          const variant = (await sqldb.queryOneRowAsync(sql.get_variant_by_iq, { iqId })).rows[0];\n\n          gradeRes = await saveOrGrade(iqUrl, { c: variant.params.a + variant.params.b }, 'save');\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should NOT result in any grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 0);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', () => {\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), 'saved, not graded');\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n    });\n\n    describe('\"Manual\"', () => {\n      describe('\"grade\" action', () => {\n        it('should load page as student to \"Manual\" type question', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body('a:contains(\"Manual Grading: Fibonacci function, file upload\")').attr('href');\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('button[value=\"grade\"]'), 0);\n        });\n        it('should be possible to submit a grade action to \"Manual\" type question', async () => {\n          gradeRes = await saveOrGrade(iqUrl, {}, 'grade', [\n            { name: 'fib.py', contents: Buffer.from('solution').toString('base64') },\n          ]);\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should NOT result in any grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 0);\n        });\n        it('should display submission status', async () => {\n          assert.equal(\n            getLatestSubmissionStatus($questionsPage),\n            'manual grading: waiting for grading',\n          );\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n\n      describe('\"save\" action', () => {\n        it('should load page as student', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body('a:contains(\"Manual Grading: Fibonacci function, file upload\")').attr('href');\n        });\n        it('should be possible to submit a save action to \"Manual\" type question', async () => {\n          gradeRes = await saveOrGrade(iqUrl, {}, 'save', [\n            { name: 'fib.py', contents: Buffer.from('solution').toString('base64') },\n          ]);\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should NOT result in any grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 0);\n        });\n        it('should display submission status', async () => {\n          assert.equal(\n            getLatestSubmissionStatus($questionsPage),\n            'manual grading: waiting for grading',\n          );\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n    });\n\n    describe('\"External\"', () => {\n      describe('\"grade\" action', () => {\n        it('should load page as student', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body('a:contains(\"External Grading: Alpine Linux smoke test\")').attr('href');\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('button[value=\"grade\"]'), 1);\n        });\n        it('should submit \"grade\" action', async () => {\n          gradeRes = await saveOrGrade(iqUrl, {}, 'grade', [\n            { name: 'answer.txt', contents: Buffer.from('correct').toString('base64') },\n          ]);\n          assert.equal(gradeRes.status, 200);\n        });\n        it('should wait for results and render the updated panels', async () => {\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n\n          iqId = parseInstanceQuestionId(iqUrl);\n          await waitForExternalGrader($questionsPage);\n\n          // Now that the grading job is done, we can check the results.\n          const submissionBody = $questionsPage('.js-submission-body').first();\n          const dynamicRenderUrl = new URL(submissionBody.attr('data-dynamic-render-url'), siteUrl);\n          dynamicRenderUrl.searchParams.set('render_score_panels', 'true');\n          const dynamicRenderPanels = await fetch(dynamicRenderUrl).then((res) => {\n            assert.ok(res.ok);\n            return res.json() as any;\n          });\n\n          assert.ok(dynamicRenderPanels.submissionPanel);\n          const $submissionPanel = cheerio.load(dynamicRenderPanels.submissionPanel);\n          assert.lengthOf($submissionPanel('[data-testid=\"submission-block\"]'), 1);\n          assert.equal(getLatestSubmissionStatus($submissionPanel), '100%');\n          assert.lengthOf($submissionPanel('.pl-external-grader-results'), 1);\n          assert.lengthOf($submissionPanel('.grading-block:not(.d-none)'), 0);\n        });\n\n        it('should result in 1 grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 1);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', async () => {\n          // reload QuestionsPage to also check behaviour when results are ready on load\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), '100%');\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n      describe('\"save\" action', () => {\n        it('should load page as student and submit \"grade\" action', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[1]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body('a:contains(\"External Grading: Alpine Linux smoke test\")').attr('href');\n\n          gradeRes = await saveOrGrade(iqUrl, {}, 'save', [\n            { name: 'answer.txt', contents: Buffer.from('correct').toString('base64') },\n          ]);\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n\n          iqId = parseInstanceQuestionId(iqUrl);\n        });\n        it('should NOT result in any grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 0);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', () => {\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), 'saved, not graded');\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n      describe('\"grade\" action with entrypoint arguments', () => {\n        it('should load page as student', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body('a:contains(\"External Grading: Alpine Linux with arguments\")').attr('href');\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('button[value=\"grade\"]'), 1);\n        });\n        it('should submit \"grade\" action', async () => {\n          gradeRes = await saveOrGrade(iqUrl, {}, 'grade', [\n            { name: 'answer.txt', contents: Buffer.from('answer with space').toString('base64') },\n          ]);\n          assert.equal(gradeRes.status, 200);\n        });\n        it('should retrieve results via socket', async () => {\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n\n          iqId = parseInstanceQuestionId(iqUrl);\n          await waitForExternalGrader($questionsPage);\n\n          // Now that the grading job is done, we can check the results.\n          const submissionBody = $questionsPage('.js-submission-body').first();\n          const dynamicRenderUrl = new URL(submissionBody.attr('data-dynamic-render-url'), siteUrl);\n          dynamicRenderUrl.searchParams.set('render_score_panels', 'true');\n          const dynamicRenderPanels = await fetch(dynamicRenderUrl).then((res) => {\n            assert.ok(res.ok);\n            return res.json() as any;\n          });\n\n          assert.ok(dynamicRenderPanels.submissionPanel);\n          const $submissionPanel = cheerio.load(dynamicRenderPanels.submissionPanel);\n          assert.lengthOf($submissionPanel('[data-testid=\"submission-block\"]'), 1);\n          assert.equal(getLatestSubmissionStatus($submissionPanel), '100%');\n          assert.lengthOf($submissionPanel('.pl-external-grader-results'), 1);\n          assert.lengthOf($submissionPanel('.grading-block:not(.d-none)'), 0);\n        });\n\n        it('should result in 1 grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 1);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', async () => {\n          // reload QuestionsPage to also check behaviour when results are ready on load\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), '100%');\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n    });\n\n    describe('\"Manual\" with auto points only (treat as \"Internal\")', () => {\n      describe('\"grade\" action', () => {\n        it('should load page as student', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body('a:contains(\"Manual Grading: Adding two numbers (with auto points)\")').attr(\n              'href',\n            );\n\n          // open page to produce variant because we want to get the correct answer\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('button[value=\"grade\"]'), 1);\n          // get variant params\n          iqId = parseInstanceQuestionId(iqUrl);\n        });\n        it('should submit \"grade\" action', async () => {\n          const variant = (await sqldb.queryOneRowAsync(sql.get_variant_by_iq, { iqId })).rows[0];\n\n          gradeRes = await saveOrGrade(iqUrl, { c: variant.params.a + variant.params.b }, 'grade');\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should result in 1 grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 1);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', () => {\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), '100%');\n        });\n        it('should result in 1 \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 1);\n        });\n      });\n      describe('\"save\" action', () => {\n        it('should load page as student and submit \"save\" action', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[1]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body('a:contains(\"Manual Grading: Adding two numbers (with auto points)\")').attr(\n              'href',\n            );\n\n          // open page to produce variant because we want to get the correct answer\n          await fetch(iqUrl);\n          // get variant params\n          iqId = parseInstanceQuestionId(iqUrl);\n          const variant = (await sqldb.queryOneRowAsync(sql.get_variant_by_iq, { iqId })).rows[0];\n\n          gradeRes = await saveOrGrade(iqUrl, { c: variant.params.a + variant.params.b }, 'save');\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should NOT result in any grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 0);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', () => {\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), 'saved, not graded');\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n    });\n\n    describe('\"Internal\" with manual points only (treat as \"Manual\")', () => {\n      describe('\"grade\" action', () => {\n        it('should load page as student', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body(\n              'a:contains(\"Internal Grading: Adding two numbers (with manual points)\")',\n            ).attr('href');\n\n          // open page to produce variant because we want to get the correct answer\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('button[value=\"grade\"]'), 0);\n\n          // get variant params\n          iqId = parseInstanceQuestionId(iqUrl);\n        });\n        it('should be possible to submit a grade action to \"Manual\" type question', async () => {\n          const variant = (await sqldb.queryOneRowAsync(sql.get_variant_by_iq, { iqId })).rows[0];\n          gradeRes = await saveOrGrade(iqUrl, { c: variant.params.a + variant.params.b }, 'grade');\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should NOT result in any grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 0);\n        });\n        it('should display submission status', async () => {\n          assert.equal(\n            getLatestSubmissionStatus($questionsPage),\n            'manual grading: waiting for grading',\n          );\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n\n      describe('\"save\" action', () => {\n        it('should load page as student to \"Manual\" type question', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl =\n            siteUrl +\n            $hm1Body(\n              'a:contains(\"Internal Grading: Adding two numbers (with manual points)\")',\n            ).attr('href');\n\n          // open page to produce variant because we want to get the correct answer\n          await fetch(iqUrl);\n          // get variant params\n          iqId = parseInstanceQuestionId(iqUrl);\n        });\n        it('should be possible to submit a save action', async () => {\n          const variant = (await sqldb.queryOneRowAsync(sql.get_variant_by_iq, { iqId })).rows[0];\n          gradeRes = await saveOrGrade(iqUrl, { c: variant.params.a + variant.params.b }, 'save');\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should NOT result in any grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 0);\n        });\n        it('should display submission status', async () => {\n          assert.equal(\n            getLatestSubmissionStatus($questionsPage),\n            'manual grading: waiting for grading',\n          );\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n    });\n\n    describe('Zero total points (treat as \"Internal\")', () => {\n      describe('\"grade\" action', () => {\n        it('should load page as student', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[0]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl = siteUrl + $hm1Body('a:contains(\"Add two numbers\")').attr('href');\n\n          // open page to produce variant because we want to get the correct answer\n          questionsPage = await (await fetch(iqUrl)).text();\n          $questionsPage = cheerio.load(questionsPage);\n          assert.lengthOf($questionsPage('button[value=\"grade\"]'), 1);\n          // get variant params\n          iqId = parseInstanceQuestionId(iqUrl);\n        });\n        it('should submit \"grade\" action', async () => {\n          const variant = (await sqldb.queryOneRowAsync(sql.get_variant_by_iq, { iqId })).rows[0];\n\n          gradeRes = await saveOrGrade(iqUrl, { c: variant.params.a + variant.params.b }, 'grade');\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should result in 1 grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 1);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', () => {\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), '100%');\n        });\n        it('should result in 1 \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 1);\n        });\n      });\n      describe('\"save\" action', () => {\n        it('should load page as student and submit \"save\" action', async () => {\n          const hm1Body = await loadHomeworkPage(mockStudents[1]);\n          $hm1Body = cheerio.load(hm1Body);\n          iqUrl = siteUrl + $hm1Body('a:contains(\"Add two numbers\")').attr('href');\n\n          // open page to produce variant because we want to get the correct answer\n          await fetch(iqUrl);\n          // get variant params\n          iqId = parseInstanceQuestionId(iqUrl);\n          const variant = (await sqldb.queryOneRowAsync(sql.get_variant_by_iq, { iqId })).rows[0];\n\n          gradeRes = await saveOrGrade(iqUrl, { c: variant.params.a + variant.params.b }, 'save');\n          assert.equal(gradeRes.status, 200);\n\n          questionsPage = await gradeRes.text();\n          $questionsPage = cheerio.load(questionsPage);\n        });\n        it('should NOT result in any grading jobs', async () => {\n          const grading_jobs = (await sqldb.queryAsync(sql.get_grading_jobs_by_iq, { iqId })).rows;\n          assert.lengthOf(grading_jobs, 0);\n        });\n        it('should result in 1 \"submission-block\" component being rendered', () => {\n          assert.lengthOf($questionsPage('[data-testid=\"submission-block\"]'), 1);\n        });\n        it('should display submission status', async () => {\n          assert.equal(getLatestSubmissionStatus($questionsPage), 'saved, not graded');\n        });\n        it('should NOT result in \"grading-block\" component being displayed', () => {\n          assert.lengthOf($questionsPage('.grading-block:not(.d-none)'), 0);\n        });\n      });\n    });\n  });\n});\n"]}