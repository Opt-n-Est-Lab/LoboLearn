{"version":3,"file":"groupExam.test.js","sourceRoot":"","sources":["../../src/tests/groupExam.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetchCookie from 'fetch-cookie';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\n\nimport { loadSqlEquiv, queryAsync, queryOneRowAsync } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { TEST_COURSE_PATH } from '../lib/paths.js';\nimport { generateAndEnrollUsers } from '../models/enrollment.js';\n\nimport { assertAlert } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\nimport { switchUserAndLoadAssessment } from './utils/group.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\nconst courseInstanceUrl = baseUrl + '/course_instance/1';\n\nconst storedConfig: any = {};\n\nconst GROUP_EXAM_1_TID = 'exam14-groupWork';\nconst GROUP_EXAM_2_TID = 'exam16-groupWorkRoles';\nconst GROUP_NAME = 'groupBB';\nconst GROUP_NAME_ALTERNATIVE = 'groupCC';\n\nasync function generateThreeStudentUsers() {\n  const rows = await generateAndEnrollUsers({ count: 3, course_instance_id: '1' });\n  assert.lengthOf(rows, 3);\n  return rows;\n}\n\n/**\n * Creates a new group in the given assessment as the user with the given CSRF token\n */\nasync function createGroup(\n  groupName: string,\n  csrfToken: string,\n  assessmentUrl: string,\n): Promise<cheerio.CheerioAPI> {\n  const res = await fetchCookie(fetch)(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'create_group',\n      __csrf_token: csrfToken,\n      groupName,\n    }),\n  });\n  assert.isOk(res.ok);\n  const $ = cheerio.load(await res.text());\n  return $;\n}\n\n/**\n * Joins a group in an assessment using the provided join code as the user with the given CSRF token\n */\nasync function joinGroup(\n  assessmentUrl: string,\n  joinCode: string,\n  csrfToken: string,\n): Promise<cheerio.CheerioAPI> {\n  const res = await fetchCookie(fetch)(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'join_group',\n      __csrf_token: csrfToken,\n      join_code: joinCode,\n    }),\n  });\n  assert.isOk(res.ok);\n  const $ = cheerio.load(await res.text());\n  return $;\n}\n\ndescribe('Group based exam assessments', function () {\n  this.timeout(20000);\n\n  before('set up testing server', helperServer.before(TEST_COURSE_PATH));\n  before('set authenticated user', function (callback) {\n    storedConfig.authUid = config.authUid;\n    storedConfig.authName = config.authName;\n    storedConfig.authUin = config.authUin;\n    callback(null);\n  });\n\n  after('shut down testing server', helperServer.after);\n  after('unset authenticated user', function (callback) {\n    Object.assign(config, storedConfig);\n    callback(null);\n  });\n\n  describe('instructor access for exam assessment', function () {\n    step(\"should load the group tab for the first assessment's instructor URL\", async function () {\n      // Get exam assessment URL using ids from database\n      const result = await queryOneRowAsync(sql.select_group_exam_by_tid, {\n        assessment_tid: GROUP_EXAM_1_TID,\n      });\n      assert.lengthOf(result.rows, 1);\n      const assessmentId = result.rows[0].id;\n      assert.isDefined(assessmentId);\n      const instructorAssessmentsUrlGroupTab =\n        courseInstanceUrl + '/instructor/assessment/' + assessmentId + '/groups';\n\n      // Page should load successfully\n      const res = await fetch(instructorAssessmentsUrlGroupTab);\n      assert.isOk(res.ok);\n    });\n\n    step(\"should load the group tab for the second assessment's instructor URL\", async function () {\n      // Get exam assessment URLs using ids from database\n      const result = await queryOneRowAsync(sql.select_group_exam_by_tid, {\n        assessment_tid: GROUP_EXAM_2_TID,\n      });\n      assert.lengthOf(result.rows, 1);\n      const assessmentId = result.rows[0].id;\n      assert.isDefined(assessmentId);\n      const instructorAssessmentsUrlGroupTab =\n        courseInstanceUrl + '/instructor/assessment/' + assessmentId + '/groups';\n\n      // Page should load successfully\n      const res = await fetch(instructorAssessmentsUrlGroupTab);\n      assert.isOk(res.ok);\n    });\n  });\n\n  describe('group config correctness', function () {\n    step('first assessment group config in database is correct', async function () {\n      const result = await queryOneRowAsync(sql.select_group_exam_by_tid, {\n        assessment_tid: GROUP_EXAM_1_TID,\n      });\n      assert.lengthOf(result.rows, 1);\n      const assessmentId = result.rows[0].id;\n      assert.isDefined(assessmentId);\n\n      const groupConfigResult = await queryOneRowAsync(sql.select_group_config, {\n        assessment_id: assessmentId,\n      });\n      const min = groupConfigResult.rows[0]['minimum'];\n      const max = groupConfigResult.rows[0]['maximum'];\n      assert.equal(min, 2);\n      assert.equal(max, 2);\n    });\n\n    step('second assessment group config in database is correct', async function () {\n      const result = await queryOneRowAsync(sql.select_group_exam_by_tid, {\n        assessment_tid: GROUP_EXAM_2_TID,\n      });\n      assert.lengthOf(result.rows, 1);\n      const assessmentId = result.rows[0].id;\n      assert.isDefined(assessmentId);\n\n      const groupConfigResult = await queryOneRowAsync(sql.select_group_config, {\n        assessment_id: assessmentId,\n      });\n      const min = groupConfigResult.rows[0]['minimum'];\n      const max = groupConfigResult.rows[0]['maximum'];\n      assert.equal(min, 2);\n      assert.equal(max, 4);\n    });\n  });\n\n  describe('exam group creation, joining, and starting', function () {\n    it('allows group creation, joining, and starting', async function () {\n      // Get exam assessment URL using id from database\n      const result = await queryOneRowAsync(sql.select_group_exam_by_tid, {\n        assessment_tid: GROUP_EXAM_1_TID,\n      });\n      assert.lengthOf(result.rows, 1);\n      const assessmentId = result.rows[0].id;\n      assert.isDefined(assessmentId);\n      const assessmentUrl = courseInstanceUrl + '/assessment/' + assessmentId;\n\n      // Generate students\n      const studentUsers = await generateThreeStudentUsers();\n\n      // Load exam assessment page as first student\n      const { csrfToken: firstUserCsrfToken } = await switchUserAndLoadAssessment(\n        studentUsers[0],\n        assessmentUrl,\n        'create-form',\n      );\n\n      // As first user, create group, load the page, and check group information\n      let $ = await createGroup(GROUP_NAME, firstUserCsrfToken, assessmentUrl);\n      assert.equal(\n        $('#group-name').text(),\n        GROUP_NAME,\n        'The group info should contain the correct group name',\n      );\n\n      let joinCode = $('#join-code').text();\n      assert.lengthOf(\n        joinCode,\n        $('#group-name').text().length + 1 + 4,\n        'Page must contain the 4-character join code',\n      );\n      assert.isTrue($('#start-assessment').is(':disabled'), 'Start button must be disabled');\n      assert.lengthOf(\n        $('.text-center:contains(1 more)'),\n        1,\n        'Page must show the group to be missing 1 more member',\n      );\n\n      // Join group as second user and check group info\n      const { csrfToken: secondUserCsrfToken } = await switchUserAndLoadAssessment(\n        studentUsers[1],\n        assessmentUrl,\n        'joingroup-form',\n      );\n      $ = await joinGroup(assessmentUrl, joinCode, secondUserCsrfToken);\n      assert.equal(\n        $('#group-name').text(),\n        GROUP_NAME,\n        'The group info should contain the correct group name',\n      );\n\n      joinCode = $('#join-code').text();\n      assert.lengthOf(\n        joinCode,\n        $('#group-name').text().length + 1 + 4,\n        'Page must contain the 4-character join code',\n      );\n      assert.isTrue($('#start-assessment').is(':disabled'), 'Start button must be disabled');\n      assert.lengthOf(\n        $('.text-center:contains(1 more)'),\n        0,\n        'Page should not show a warning for more members',\n      );\n\n      // Switch to third user and attempt to join group\n      const { csrfToken: thirdUserCsrfToken } = await switchUserAndLoadAssessment(\n        studentUsers[2],\n        assessmentUrl,\n        'joingroup-form',\n      );\n      $ = await joinGroup(assessmentUrl, joinCode, thirdUserCsrfToken);\n      assertAlert($, 'Group is already full');\n\n      // Switch to second user and start assessment\n      const { $: $secondUser } = await switchUserAndLoadAssessment(\n        studentUsers[1],\n        assessmentUrl,\n        'confirm-form',\n      );\n      $ = $secondUser;\n      assert.isNotTrue($('#certify-pledge').prop('checked'), 'Honor code must be unchecked');\n      assert.isTrue($('#start-assessment').is(':disabled'), 'Start button must be disabled');\n\n      // Manually check the class honor code before starting the assessment\n      $('#certify-pledge').attr('checked', '');\n      assert.isTrue($('#certify-pledge').prop('checked'), 'Honor code should be checked');\n\n      // Should have a non-disabled \"start assessment\" button\n      $('#start-assessment').removeAttr('disabled');\n      assert.isNotTrue($('#start-assessment').is(':disabled'));\n\n      // Should have no assessment instances in database\n      let assessmentInstancesResult = await queryAsync(sql.select_all_assessment_instance, []);\n      assert.lengthOf(assessmentInstancesResult.rows, 0);\n\n      // Start assessment\n      const response = await fetch(assessmentUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'new_instance',\n          __csrf_token: secondUserCsrfToken,\n        }),\n        follow: 1,\n      });\n      assert.isOk(response.ok);\n      $ = cheerio.load(await response.text());\n\n      // Check there is now one assessment instance in database\n      assessmentInstancesResult = await queryAsync(sql.select_all_assessment_instance, []);\n      assert.lengthOf(assessmentInstancesResult.rows, 1);\n      assert.equal(assessmentInstancesResult.rows[0].group_id, 1);\n      const assessmentInstanceId = assessmentInstancesResult.rows[0].id;\n      const assessmentInstanceURL =\n        courseInstanceUrl + '/assessment_instance/' + assessmentInstanceId;\n\n      // Ensure all group members can access the assessment instance correctly\n      await switchUserAndLoadAssessment(studentUsers[0], assessmentUrl, null, '#leaveGroupModal');\n      const firstMemberResponse = await fetch(assessmentInstanceURL);\n      assert.isOk(firstMemberResponse.ok);\n\n      await switchUserAndLoadAssessment(studentUsers[1], assessmentUrl, null, '#leaveGroupModal');\n      const secondMemberResponse = await fetch(assessmentInstanceURL);\n      assert.isOk(secondMemberResponse.ok);\n    });\n  });\n});\n\ndescribe('cross group exam access', function () {\n  this.timeout(20000);\n  before('set up testing server', helperServer.before(TEST_COURSE_PATH));\n  before('set authenticated user', function (callback) {\n    storedConfig.authUid = config.authUid;\n    storedConfig.authName = config.authName;\n    storedConfig.authUin = config.authUin;\n    callback(null);\n  });\n\n  after('shut down testing server', helperServer.after);\n  after('unset authenticated user', function (callback) {\n    Object.assign(config, storedConfig);\n    callback(null);\n  });\n\n  it(\"prevents unauthorized users from accessing other groups' assessment instances\", async function () {\n    // Get exam assessment URL using id from database\n    const result = await queryOneRowAsync(sql.select_group_exam_by_tid, {\n      assessment_tid: GROUP_EXAM_1_TID,\n    });\n    assert.lengthOf(result.rows, 1);\n    const assessmentId = result.rows[0].id;\n    assert.isDefined(assessmentId);\n    const assessmentUrl = courseInstanceUrl + '/assessment/' + assessmentId;\n\n    // Generate students\n    const studentUsers = await generateThreeStudentUsers();\n\n    // Load exam assessment page as first student\n    const { csrfToken: firstUserCsrfToken } = await switchUserAndLoadAssessment(\n      studentUsers[0],\n      assessmentUrl,\n      'create-form',\n    );\n\n    // As first user, create group, load the page, and check group information\n    let $ = await createGroup(GROUP_NAME, firstUserCsrfToken, assessmentUrl);\n    const joinCode = $('#join-code').text();\n\n    // Join group as second user\n    const { csrfToken: secondUserCsrfToken } = await switchUserAndLoadAssessment(\n      studentUsers[1],\n      assessmentUrl,\n      'joingroup-form',\n    );\n    $ = await joinGroup(assessmentUrl, joinCode, secondUserCsrfToken);\n\n    // Start assessment\n    const response = await fetch(assessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'new_instance',\n        __csrf_token: secondUserCsrfToken,\n      }),\n      follow: 1,\n    });\n    assert.isOk(response.ok);\n    $ = cheerio.load(await response.text());\n\n    // Check there is now one assessment instance in database\n    const assessmentInstancesResult = await queryAsync(sql.select_all_assessment_instance, []);\n    assert.lengthOf(assessmentInstancesResult.rows, 1);\n    assert.equal(assessmentInstancesResult.rows[0].group_id, 1);\n    const assessmentInstanceId = assessmentInstancesResult.rows[0].id;\n    const assessmentInstanceURL =\n      courseInstanceUrl + '/assessment_instance/' + assessmentInstanceId;\n\n    // Second user should be able to access assessment instance\n    const { csrfToken: secondUserInstanceCsrfToken } = await switchUserAndLoadAssessment(\n      studentUsers[1],\n      assessmentUrl, // redirects to instance URL\n      null,\n      '#leaveGroupModal',\n    );\n\n    // Leave exam group as second user\n    const leaveResponse = await fetch(assessmentInstanceURL, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'leave_group',\n        __csrf_token: secondUserInstanceCsrfToken,\n      }),\n    });\n    assert.isOk(leaveResponse.ok);\n    $ = cheerio.load(await leaveResponse.text());\n\n    // Attempt to access exam assessment instance as a non-grouped user should be unsuccessful\n    const accessResponse = await fetch(assessmentInstanceURL);\n    assert.equal(accessResponse.status, 403, 'status should be forbidden');\n\n    // As second user, create an entirely new group\n    await createGroup(GROUP_NAME_ALTERNATIVE, secondUserCsrfToken, assessmentUrl);\n\n    // Attempt to access previous exam assessment instance while in a new group should be unsuccessful\n    const secondAccessResponse = await fetch(assessmentInstanceURL);\n    assert.equal(secondAccessResponse.status, 403, 'status should be forbidden');\n  });\n});\n\ndescribe('cross exam assessment access', function () {\n  this.timeout(20000);\n  before('set up testing server', helperServer.before(TEST_COURSE_PATH));\n  before('set authenticated user', function (callback) {\n    storedConfig.authUid = config.authUid;\n    storedConfig.authName = config.authName;\n    storedConfig.authUin = config.authUin;\n    callback(null);\n  });\n\n  after('shut down testing server', helperServer.after);\n  after('unset authenticated user', function (callback) {\n    Object.assign(config, storedConfig);\n    callback(null);\n  });\n\n  it(\"prevents unauthorized users from accessing other groups' assessment instances\", async function () {\n    // Get exam assessment URL using ids from database\n    const firstAssessmentResult = await queryOneRowAsync(sql.select_group_exam_by_tid, {\n      assessment_tid: GROUP_EXAM_1_TID,\n    });\n    assert.lengthOf(firstAssessmentResult.rows, 1);\n    const firstAssessmentId = firstAssessmentResult.rows[0].id;\n    assert.isDefined(firstAssessmentId);\n    const firstAssessmentUrl = courseInstanceUrl + '/assessment/' + firstAssessmentId;\n\n    const secondAssessmentResult = await queryOneRowAsync(sql.select_group_exam_by_tid, {\n      assessment_tid: GROUP_EXAM_2_TID,\n    });\n    assert.lengthOf(secondAssessmentResult.rows, 1);\n    const secondAssessmentId = secondAssessmentResult.rows[0].id;\n    assert.isDefined(secondAssessmentId);\n    const secondAssessmentUrl = courseInstanceUrl + '/assessment/' + secondAssessmentId;\n\n    // Generate students\n    const studentUsers = await generateThreeStudentUsers();\n\n    // Load exam assessment page as first student\n    const { csrfToken: firstUserCsrfToken } = await switchUserAndLoadAssessment(\n      studentUsers[0],\n      firstAssessmentUrl,\n      'create-form',\n    );\n\n    // As first user, create group, load the page, and check group information\n    let $ = await createGroup(GROUP_NAME, firstUserCsrfToken, firstAssessmentUrl);\n    const firstAssessmentJoinCode = $('#join-code').text();\n\n    // Join group as second user\n    const { csrfToken: secondUserCsrfToken } = await switchUserAndLoadAssessment(\n      studentUsers[1],\n      firstAssessmentUrl,\n      'joingroup-form',\n    );\n    $ = await joinGroup(firstAssessmentUrl, firstAssessmentJoinCode, secondUserCsrfToken);\n\n    // Join the second exam assessment as a third user\n    const { csrfToken: thirdUserCsrfToken } = await switchUserAndLoadAssessment(\n      studentUsers[2],\n      secondAssessmentUrl,\n      'joingroup-form',\n    );\n\n    // Attempt to join a first assessment group from the second assessment\n    const crossAssessmentJoinResponse = await fetchCookie(fetch)(secondAssessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'join_group',\n        __csrf_token: thirdUserCsrfToken,\n        join_code: firstAssessmentJoinCode,\n      }),\n    });\n    assert.isOk(crossAssessmentJoinResponse.ok);\n    $ = cheerio.load(await crossAssessmentJoinResponse.text());\n\n    // Error message should show\n    assertAlert($, 'Group does not exist');\n  });\n});\n"]}