{"version":3,"file":"groupExamRolePermissions.test.js","sourceRoot":"","sources":["../../src/tests/groupExamRolePermissions.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetch from 'node-fetch';\n\nimport {\n  loadSqlEquiv,\n  queryAsync,\n  queryOneRowAsync,\n  queryValidatedOneRow,\n  queryValidatedRows,\n} from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport type { User } from '../lib/db-types.js';\nimport { GroupRoleSchema, QuestionSchema } from '../lib/db-types.js';\nimport { TEST_COURSE_PATH } from '../lib/paths.js';\nimport { generateAndEnrollUsers } from '../models/enrollment.js';\n\nimport { assertAlert } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\nimport { switchUserAndLoadAssessment } from './utils/group.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\nconst courseInstanceUrl = baseUrl + '/course_instance/1';\n\nconst storedConfig: any = {};\n\nconst GROUP_WORK_EXAM_TID = 'exam16-groupWorkRoles';\nconst QUESTION_ID_1 = 'demo/demoNewton-page1';\nconst QUESTION_ID_2 = 'demo/demoNewton-page2';\nconst QUESTION_ID_3 = 'addNumbers';\nconst GROUP_NAME = 'groupBB';\n\nconst QuestionIdSchema = QuestionSchema.pick({\n  id: true,\n});\n\nasync function generateThreeStudentUsers() {\n  const rows = await generateAndEnrollUsers({ count: 3, course_instance_id: '1' });\n  assert.lengthOf(rows, 3);\n  return rows;\n}\n\n/**\n * Creates a new group in the given assessment as the user with the given CSRF token\n */\nasync function createGroup(\n  groupName: string,\n  csrfToken: string,\n  assessmentUrl: string,\n): Promise<cheerio.CheerioAPI> {\n  const res = await fetch(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'create_group',\n      __csrf_token: csrfToken,\n      groupName,\n    }),\n  });\n  assert.isOk(res.ok);\n  const $ = cheerio.load(await res.text());\n  return $;\n}\n\n/**\n * Joins a group in an assessment using the provided join code as the user with the given CSRF token\n */\nasync function joinGroup(\n  assessmentUrl: string,\n  joinCode: string,\n  csrfToken: string,\n): Promise<cheerio.CheerioAPI> {\n  const res = await fetch(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'join_group',\n      __csrf_token: csrfToken,\n      join_code: joinCode,\n    }),\n  });\n  assert.isOk(res.ok);\n  const $ = cheerio.load(await res.text());\n  return $;\n}\n\n/**\n * Sends and verifies a group roles update request using current user.\n * Updates element list to check that group role select table is changed correctly.\n */\nasync function updateGroupRoles(\n  roleUpdates: any[],\n  groupRoles: any[],\n  studentUsers: User[],\n  csrfToken: string,\n  assessmentUrl: string,\n  $: cheerio.CheerioAPI,\n): Promise<cheerio.CheerioAPI> {\n  // Uncheck all of the inputs\n  const roleIds = groupRoles.map((role) => role.id);\n  const userIds = studentUsers.map((user) => user.user_id);\n  for (const roleId of roleIds) {\n    for (const userId of userIds) {\n      const elementId = `#user_role_${roleId}-${userId}`;\n      $('#role-select-form').find(elementId).removeAttr('checked');\n    }\n  }\n\n  let checkedBoxes = $('#role-select-form').find('tr').find('input:checked');\n  assert.lengthOf(checkedBoxes, 0, 'all checkboxes in role select form must be unchecked');\n\n  // Mark the checkboxes as checked\n  roleUpdates.forEach(({ roleId, groupUserId }) => {\n    $(`#user_role_${roleId}-${groupUserId}`).attr('checked', '');\n  });\n  checkedBoxes = $('#role-select-form').find('tr').find('input:checked');\n  assert.lengthOf(\n    checkedBoxes,\n    roleUpdates.length,\n    'all checkboxes in role select form must be checked',\n  );\n\n  // Grab IDs of checkboxes to construct update request\n  const checkedElementIds = {};\n  for (let i = 0; i < checkedBoxes.length; i++) {\n    checkedElementIds[checkedBoxes[i.toString()].attribs.id] = 'on';\n  }\n  const res = await fetch(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'update_group_roles',\n      __csrf_token: csrfToken,\n      ...checkedElementIds,\n    }),\n  });\n  assert.isOk(res.ok, 'updating group roles should be successful');\n  return cheerio.load(await res.text());\n}\n\nasync function getQuestionUrl(\n  courseInstanceUrl: string,\n  assessmentInstanceId: string,\n  questionId: string,\n): Promise<string> {\n  const result = await queryValidatedOneRow(\n    sql.select_instance_questions,\n    {\n      assessment_instance_id: assessmentInstanceId,\n      question_id: questionId,\n    },\n    QuestionIdSchema,\n  );\n  assert.isDefined(result.id);\n  return courseInstanceUrl + '/instance_question/' + result.id;\n}\n\n/**\n * Validates and prepares a role-based group assessment with three users in a\n * valid user configuration, then returns data for use in tests.\n */\nasync function prepareGroup() {\n  // Get exam assessment URL using ids from database\n  const assessmentResult = await queryOneRowAsync(sql.select_assessment, {\n    assessment_tid: GROUP_WORK_EXAM_TID,\n  });\n  assert.lengthOf(assessmentResult.rows, 1);\n  const assessmentId = assessmentResult.rows[0].id;\n  assert.isDefined(assessmentId);\n  const assessmentUrl = courseInstanceUrl + '/assessment/' + assessmentId;\n\n  // Generate three users\n  const studentUsers = await generateThreeStudentUsers();\n\n  // Get group roles\n  const groupRoles = await queryValidatedRows(\n    sql.select_assessment_group_roles,\n    {\n      assessment_id: assessmentId,\n    },\n    GroupRoleSchema.pick({\n      id: true,\n      role_name: true,\n      minimum: true,\n      maximum: true,\n    }),\n  );\n  assert.lengthOf(groupRoles, 4);\n\n  const manager = groupRoles.find((row) => row.role_name === 'Manager');\n  assert.isDefined(manager);\n  const recorder = groupRoles.find((row) => row.role_name === 'Recorder');\n  assert.isDefined(recorder);\n  const reflector = groupRoles.find((row) => row.role_name === 'Reflector');\n  assert.isDefined(reflector);\n  const contributor = groupRoles.find((row) => row.role_name === 'Contributor');\n  assert.isDefined(contributor);\n\n  // As first user, create group, load the page, and check group information\n  const { csrfToken: firstUserCsrfToken } = await switchUserAndLoadAssessment(\n    studentUsers[0],\n    assessmentUrl,\n    'create-form',\n  );\n  let $ = await createGroup(GROUP_NAME, firstUserCsrfToken, assessmentUrl);\n  const joinCode = $('#join-code').text();\n\n  // Join group as second user\n  const { csrfToken: secondUserCsrfToken } = await switchUserAndLoadAssessment(\n    studentUsers[1],\n    assessmentUrl,\n    'joingroup-form',\n  );\n  await joinGroup(assessmentUrl, joinCode, secondUserCsrfToken);\n\n  // Join group as third user\n  const { csrfToken: thirdUserCsrfToken } = await switchUserAndLoadAssessment(\n    studentUsers[2],\n    assessmentUrl,\n    'joingroup-form',\n  );\n  await joinGroup(assessmentUrl, joinCode, thirdUserCsrfToken);\n\n  // Switch to first user and assign group roles\n  const { $: $preJoinFirstUserPage } = await switchUserAndLoadAssessment(\n    studentUsers[0],\n    assessmentUrl,\n    null,\n    '#leaveGroupModal',\n  );\n  const validRoleConfig = [\n    { roleId: manager?.id, groupUserId: studentUsers[0].user_id },\n    { roleId: recorder?.id, groupUserId: studentUsers[1].user_id },\n    { roleId: reflector?.id, groupUserId: studentUsers[2].user_id },\n  ];\n  $ = await updateGroupRoles(\n    validRoleConfig,\n    groupRoles,\n    studentUsers,\n    firstUserCsrfToken,\n    assessmentUrl,\n    $preJoinFirstUserPage,\n  );\n\n  // Start the assessment\n  const response = await fetch(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'new_instance',\n      __csrf_token: firstUserCsrfToken,\n    }),\n    follow: 1,\n  });\n  assert.isOk(response.ok);\n  $ = cheerio.load(await response.text());\n\n  // Check there is now one assessment instance in database\n  const assessmentInstancesResult = await queryAsync(sql.select_all_assessment_instance, []);\n  assert.lengthOf(assessmentInstancesResult.rows, 1);\n  assert.equal(assessmentInstancesResult.rows[0].group_id, 1);\n  const assessmentInstanceId = assessmentInstancesResult.rows[0].id;\n\n  return {\n    assessmentInstanceUrl: courseInstanceUrl + '/assessment_instance/' + assessmentInstanceId,\n    questionOneUrl: await getQuestionUrl(courseInstanceUrl, assessmentInstanceId, QUESTION_ID_1),\n    questionTwoUrl: await getQuestionUrl(courseInstanceUrl, assessmentInstanceId, QUESTION_ID_2),\n    questionThreeUrl: await getQuestionUrl(courseInstanceUrl, assessmentInstanceId, QUESTION_ID_3),\n    groupRoles,\n    manager,\n    recorder,\n    reflector,\n    contributor,\n    studentUsers,\n    validRoleConfig,\n  };\n}\n\ndescribe('Assessment instance with group roles & permissions - Exam', function () {\n  describe('valid group role configuration tests', function () {\n    this.timeout(20000);\n\n    before('set up testing server', helperServer.before(TEST_COURSE_PATH));\n    before('set authenticated user', function (callback) {\n      storedConfig.authUid = config.authUid;\n      storedConfig.authName = config.authName;\n      storedConfig.authUin = config.authUin;\n      callback(null);\n    });\n\n    after('shut down testing server', helperServer.after);\n    after('unset authenticated user', function (callback) {\n      Object.assign(config, storedConfig);\n      callback(null);\n    });\n\n    it('enforces correct permissions during valid group role configuration', async function () {\n      const {\n        assessmentInstanceUrl,\n        questionOneUrl,\n        questionTwoUrl,\n        questionThreeUrl,\n        studentUsers,\n      } = await prepareGroup();\n      const { $: $assessmentInstanceFirstUserPage } = await switchUserAndLoadAssessment(\n        studentUsers[0],\n        assessmentInstanceUrl,\n        null,\n        '#leaveGroupModal',\n      );\n      let $ = $assessmentInstanceFirstUserPage;\n\n      // The second and third questions should not be viewable\n      const lockedRows = $('tr [data-test-id=\"locked-instance-question-row\"]');\n      assert.lengthOf(lockedRows, 2);\n\n      lockedRows.each((_, element) => {\n        const popoverText = $(element).attr('data-bs-content');\n        assert.strictEqual(\n          popoverText,\n          'Your current group role (Manager) restricts access to this question.',\n        );\n      });\n\n      // The first question should be fully viewable with no errors'\n      const questionOneFirstUserAccessResponse = await fetch(questionOneUrl);\n      assert.isOk(questionOneFirstUserAccessResponse.ok);\n\n      // The second and third questions should be inaccessible\n      const questionTwoFirstUserAccessResponse = await fetch(questionTwoUrl);\n      assert.isNotOk(questionTwoFirstUserAccessResponse.ok);\n\n      const questionThreeFirstUserAccessResponse = await fetch(questionThreeUrl);\n      assert.isNotOk(questionThreeFirstUserAccessResponse.ok);\n\n      // Switch to third user and load first question\n      const { $: $questionOneThirdUserPage } = await switchUserAndLoadAssessment(\n        studentUsers[2],\n        questionOneUrl,\n        'attach-file-form',\n      );\n      $ = $questionOneThirdUserPage;\n\n      // The \"next question\" button is disabled for unviewable questions\n      const nextQuestionLink = $('#question-nav-next');\n      assert.isUndefined(nextQuestionLink.attr('href'));\n\n      const res = await fetch(questionThreeUrl);\n      assert.isOk(res.ok);\n      $ = cheerio.load(await res.text());\n\n      // The \"previous question\" button is disabled for unviewable questions\n      const prevQuestionLink = $('#question-nav-prev');\n      assert.isUndefined(prevQuestionLink.attr('href'));\n\n      // Save and grade button is not disabled with correct permission\n      const { $: $questionOneSecondUserPage } = await switchUserAndLoadAssessment(\n        studentUsers[1],\n        questionOneUrl,\n        'attach-file-form',\n      );\n      $ = $questionOneSecondUserPage;\n\n      const secondUserSubmitButton = $('.question-grade');\n      assert.isFalse(secondUserSubmitButton.is(':disabled'));\n\n      // Save button is not disabled with correct permission\n      const secondUserSaveButton = $('.question-save');\n      assert.isFalse(secondUserSaveButton.is(':disabled'));\n\n      // Switch to first user\n      const { $: $questionOneFirstUserPage, csrfToken: questionOneFirstUserCsrfToken } =\n        await switchUserAndLoadAssessment(studentUsers[0], questionOneUrl, 'attach-file-form');\n      $ = $questionOneFirstUserPage;\n\n      // Save and grade button should be disabled without correct permission\n      const firstUserSubmitButton = $('.question-grade');\n      assert.isTrue(firstUserSubmitButton.is(':disabled'));\n      const popover = $('.btn[aria-label=\"Submission blocked\"]');\n      assert.lengthOf(popover, 1);\n      const popoverContent = popover.attr('data-bs-content');\n      assert.strictEqual(\n        popoverContent,\n        'Your group role (Manager) is not allowed to submit this question.',\n      );\n\n      // Save button should be disabled without correct permission\n      const firstUserSaveButton = $('.question-save');\n      assert.isTrue(firstUserSaveButton.is(':disabled'));\n\n      // Get question variant\n      const questionForm = $('.question-form input[name=\"__variant_id\"]');\n      assert.lengthOf(questionForm, 1);\n      assert.nestedProperty(questionForm[0], 'attribs.value');\n      const variantId = questionForm.first().attr('value');\n      assert.isDefined(variantId);\n\n      // Send request to save & grade question\n      const questionSubmissionWithNoPermissionResponse = await fetch(questionOneUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token: questionOneFirstUserCsrfToken,\n          __variant_id: variantId as string,\n        }),\n      });\n      assert.equal(\n        questionSubmissionWithNoPermissionResponse.status,\n        403,\n        'status should be forbidden',\n      );\n\n      // Submitting with valid permissions does not yield any errors'\n      const { csrfToken: questionOneSecondtUserCsrfToken } = await switchUserAndLoadAssessment(\n        studentUsers[1],\n        questionOneUrl,\n        'attach-file-form',\n      );\n      const questionSubmissionWithPermissionResponse = await fetch(questionOneUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token: questionOneSecondtUserCsrfToken,\n          __variant_id: variantId as string,\n        }),\n      });\n      assert.isOk(questionSubmissionWithPermissionResponse.ok);\n    });\n  });\n\n  describe('invalid role configuration tests', function () {\n    this.timeout(20000);\n\n    before('set up testing server', helperServer.before(TEST_COURSE_PATH));\n    before('set authenticated user', function (callback) {\n      storedConfig.authUid = config.authUid;\n      storedConfig.authName = config.authName;\n      storedConfig.authUin = config.authUin;\n      callback(null);\n    });\n\n    after('shut down testing server', helperServer.after);\n    after('unset authenticated user', function (callback) {\n      Object.assign(config, storedConfig);\n      callback(null);\n    });\n\n    it('shows correct errors during invalid group role configuration', async function () {\n      const {\n        assessmentInstanceUrl,\n        questionOneUrl,\n        validRoleConfig,\n        studentUsers,\n        manager,\n        recorder,\n        reflector,\n        groupRoles,\n      } = await prepareGroup();\n\n      // Assign an invalid configuration\n      const { $: $assessmentInstanceFirstUserPage, csrfToken } = await switchUserAndLoadAssessment(\n        studentUsers[0],\n        assessmentInstanceUrl,\n        null,\n        '#leaveGroupModal',\n      );\n      const invalidRoleConfig = [\n        { roleId: manager?.id, groupUserId: studentUsers[0].user_id },\n        { roleId: recorder?.id, groupUserId: studentUsers[0].user_id },\n        { roleId: recorder?.id, groupUserId: studentUsers[1].user_id },\n        { roleId: reflector?.id, groupUserId: studentUsers[2].user_id },\n      ];\n      let $ = await updateGroupRoles(\n        invalidRoleConfig,\n        groupRoles,\n        studentUsers,\n        csrfToken,\n        assessmentInstanceUrl,\n        $assessmentInstanceFirstUserPage,\n      );\n\n      // Assert the correct errors show up on screen\n      let errorNotification = $('[data-testid=\"group-role-config-problems\"]:contains(2)');\n      assert.lengthOf(errorNotification, 1, 'role config should have 2 errors');\n      assertAlert($, 'role configuration is currently invalid');\n      assertAlert($, 'too many roles');\n      assertAlert($, '1 less student needs to be assigned to the role \"Recorder\"');\n\n      // Enter question one\n      const res = await fetch(questionOneUrl);\n      assert.isNotOk(res.ok);\n\n      // Switch back to second user and load assessment instance\n      const { $: assessmentInstanceSecondUserPage } = await switchUserAndLoadAssessment(\n        studentUsers[1],\n        assessmentInstanceUrl,\n        null,\n        '#leaveGroupModal',\n      );\n      $ = assessmentInstanceSecondUserPage;\n\n      // Assert that the same errors still show\n      errorNotification = $('[data-testid=\"group-role-config-problems\"]:contains(2)');\n      assert.lengthOf(errorNotification, 1, 'role config should have 2 errors');\n      assertAlert($, 'role configuration is currently invalid');\n      assertAlert($, 'too many roles');\n      assertAlert($, '1 less student needs to be assigned to the role \"Recorder\"');\n\n      // Switch back to first user and assign a valid role config\n      const { $: $assessmentInstanceFirstUserPage2, csrfToken: firstUserCsrfToken2 } =\n        await switchUserAndLoadAssessment(\n          studentUsers[0],\n          assessmentInstanceUrl,\n          null,\n          '#leaveGroupModal',\n        );\n      $ = await updateGroupRoles(\n        validRoleConfig,\n        groupRoles,\n        studentUsers,\n        firstUserCsrfToken2,\n        assessmentInstanceUrl,\n        $assessmentInstanceFirstUserPage2,\n      );\n\n      // Check that the errors no longer show\n      errorNotification = $('[data-testid=\"group-role-config-problems\"]');\n      assert.lengthOf(errorNotification, 0, 'no error notification should appear');\n      assertAlert($, 'role configuration is currently invalid', 0);\n      assertAlert($, 'too many roles', 0);\n      assertAlert($, '1 less student needs to be assigned to the role \"Recorder\"', 0);\n    });\n  });\n});\n"]}