{"version":3,"file":"groupGenerateAndDelete.test.js","sourceRoot":"","sources":["../../src/tests/groupGenerateAndDelete.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as groupUpdate from '../lib/group-update.js';\nimport { deleteAllGroups } from '../lib/groups.js';\nimport { TEST_COURSE_PATH } from '../lib/paths.js';\nimport { generateAndEnrollUsers } from '../models/enrollment.js';\n\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst locals: Record<string, any> = {};\n\ndescribe('test random groups and delete groups', function () {\n  this.timeout(20000);\n  before('set up testing server', helperServer.before(TEST_COURSE_PATH));\n  after('shut down testing server', helperServer.after);\n\n  step('get group-based homework assessment', async () => {\n    const result = await sqldb.queryAsync(sql.select_group_work_assessment, []);\n    assert.notEqual(result.rows.length, 0);\n    assert.notEqual(result.rows[0].id, undefined);\n    locals.assessment_id = result.rows[0].id;\n  });\n\n  step('create 500 users', async () => {\n    const result = await generateAndEnrollUsers({ count: 500, course_instance_id: '1' });\n    assert.equal(result.length, 500);\n  });\n\n  step('randomly assign groups', async () => {\n    const user_id = '1';\n    const authn_user_id = '1';\n    const max_group_size = 10;\n    const min_group_size = 10;\n    const job_sequence_id = await groupUpdate.randomGroups(\n      locals.assessment_id,\n      user_id,\n      authn_user_id,\n      max_group_size,\n      min_group_size,\n    );\n    await helperServer.waitForJobSequenceSuccess(job_sequence_id);\n  });\n\n  step('check groups and users', async () => {\n    const groupUserCounts = await sqldb.queryAsync(\n      'SELECT count(group_id) FROM group_users GROUP BY group_id',\n      [],\n    );\n    assert.equal(groupUserCounts.rows.length, 50);\n\n    const groupUsers = await sqldb.queryAsync('SELECT DISTINCT(user_id) FROM group_users', []);\n    assert.equal(groupUsers.rows.length, 500);\n  });\n\n  step('delete groups', async () => {\n    await deleteAllGroups(locals.assessment_id, '1');\n\n    const groups = await sqldb.queryAsync(\n      'SELECT deleted_at FROM groups WHERE deleted_at IS NULL',\n      [],\n    );\n    assert.equal(groups.rows.length, 0);\n\n    const groupUsers = await sqldb.queryAsync('SELECT * FROM group_users', {});\n    assert.equal(groupUsers.rows.length, 0);\n  });\n});\n"]}