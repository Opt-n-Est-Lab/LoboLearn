{"version":3,"file":"groupRole.test.js","sourceRoot":"","sources":["../../src/tests/groupRole.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fs from 'fs-extra';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\nimport * as tmp from 'tmp-promise';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { getGroupRoleReassignmentsAfterLeave } from '../lib/groups.js';\nimport { TEST_COURSE_PATH } from '../lib/paths.js';\nimport { generateAndEnrollUsers } from '../models/enrollment.js';\nimport { type GroupRoleJsonInput } from '../schemas/index.js';\n\nimport { assertAlert } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\nimport { syncCourseData } from './sync/util.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nlet elemList;\nconst locals: Record<string, any> = {};\nlocals.siteUrl = 'http://localhost:' + config.serverPort;\nlocals.baseUrl = locals.siteUrl + '/pl';\nlocals.courseInstanceUrl = locals.baseUrl + '/course_instance/1';\nlocals.assessmentsUrl = locals.courseInstanceUrl + '/assessments';\nlocals.courseDir = TEST_COURSE_PATH;\n\nconst storedConfig: Record<string, any> = {};\n\n/**\n * Switches `config` to new user, loads assessment page, and changes local CSRF token\n */\nasync function switchUserAndLoadAssessment(\n  studentUser: { uid: string; name: string },\n  assessmentUrl: string,\n  authUin: string,\n  numCsrfTokens: number,\n) {\n  // Load config\n  config.authUid = studentUser.uid;\n  config.authName = studentUser.name;\n  config.authUin = authUin;\n\n  // Load assessment\n  const res = await fetch(assessmentUrl);\n  assert.isOk(res.ok);\n  locals.$ = cheerio.load(await res.text());\n\n  // Check for CSRF tokens\n  elemList = locals.$('form input[name=\"__csrf_token\"]');\n  assert.lengthOf(elemList, numCsrfTokens);\n  assert.nestedProperty(elemList[0], 'attribs.value');\n  locals.__csrf_token = elemList[0].attribs.value;\n  assert.isString(locals.__csrf_token);\n}\n\n/**\n * Joins group as current user with CSRF token and loads page with cheerio.\n */\nasync function joinGroup(assessmentUrl: string, joinCode: string) {\n  const res = await fetch(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'join_group',\n      __csrf_token: locals.__csrf_token,\n      join_code: joinCode,\n    }),\n  });\n  assert.isOk(res.ok);\n  locals.$ = cheerio.load(await res.text());\n}\n\n/**\n * Leaves group as current user\n */\nasync function leaveGroup(assessmentUrl: string) {\n  const res = await fetch(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'leave_group',\n      __csrf_token: locals.__csrf_token,\n    }),\n  });\n  assert.isOk(res.ok);\n}\n\nasync function verifyRoleAssignmentsInDatabase(\n  roleAssignments: { roleId: number; groupUserId: number }[],\n  assessmentId: string,\n) {\n  const expected = roleAssignments\n    .map(({ roleId, groupUserId }) => ({\n      user_id: groupUserId,\n      group_role_id: roleId,\n    }))\n    .sort((a, b) => a.user_id - b.user_id || a.group_role_id - b.group_role_id);\n  const result = await sqldb.queryAsync(sql.select_group_user_roles, {\n    assessment_id: assessmentId,\n  });\n  assert.sameDeepMembers(result.rows, expected);\n}\n\n/**\n * Asserts that role table contains checked roles corresponding to role assignments.\n * The role table must be visible through cheerio.\n */\nfunction verifyRoleAssignmentsInRoleTable(\n  roleAssignments: { roleId: string; groupUserId: string }[],\n) {\n  elemList = locals.$('#role-select-form').find('tr').find('input:checked');\n  assert.lengthOf(elemList, roleAssignments.length);\n\n  locals.roleUpdates.forEach(({ roleId, groupUserId }) => {\n    const elementId = `#user_role_${roleId}-${groupUserId}`;\n    elemList = locals.$('#role-select-form').find(elementId);\n    assert.lengthOf(elemList, 1);\n    assert.isDefined(elemList['0'].attribs.checked);\n  });\n}\n\n/**\n * Sends and verifies a group roles update request using current user.\n * Updates element list to check that group role select table is changed correctly.\n */\nasync function updateGroupRoles(\n  roleUpdates: { roleId: string; groupUserId: string }[],\n  groupRoles: { id: string }[],\n  studentUsers: { user_id: string }[],\n  assessmentUrl: string,\n) {\n  // Uncheck all of the inputs\n  const roleIds = groupRoles.map((role) => role.id);\n  const userIds = studentUsers.map((user) => user.user_id);\n  for (const roleId of roleIds) {\n    for (const userId of userIds) {\n      const elementId = `#user_role_${roleId}-${userId}`;\n      locals.$('#role-select-form').find(elementId).attr('checked', null);\n    }\n  }\n\n  // Ensure all checkboxes are unchecked\n  elemList = locals.$('#role-select-form').find('tr').find('input:checked');\n  assert.lengthOf(elemList, 0);\n\n  // Mark the checkboxes as checked\n  roleUpdates.forEach(({ roleId, groupUserId }) => {\n    locals.$(`#user_role_${roleId}-${groupUserId}`).attr('checked', '');\n  });\n  elemList = locals.$('#role-select-form').find('tr').find('input:checked');\n  assert.lengthOf(elemList, roleUpdates.length);\n\n  // Grab IDs of checkboxes to construct update request\n  const checkedElementIds = {};\n  for (let i = 0; i < elemList.length; i++) {\n    checkedElementIds[elemList[i.toString()].attribs.id] = 'on';\n  }\n  const res = await fetch(assessmentUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'update_group_roles',\n      __csrf_token: locals.__csrf_token,\n      ...checkedElementIds,\n    }),\n  });\n  assert.isOk(res.ok);\n}\n\ndescribe('Test group based assessments with custom group roles from student side', function () {\n  this.timeout(20000);\n  before('set authenticated user', function () {\n    storedConfig.authUid = config.authUid;\n    storedConfig.authName = config.authName;\n    storedConfig.authUin = config.authUin;\n  });\n  before('set up testing server', helperServer.before(locals.courseDir));\n  after('shut down testing server', helperServer.after);\n  after('unset authenticated user', function () {\n    Object.assign(config, storedConfig);\n  });\n\n  step('contains a group-based homework assessment with roles', async function () {\n    const result = await sqldb.queryAsync(sql.select_group_work_assessment_with_roles, []);\n    assert.lengthOf(result.rows, 1);\n    assert.notEqual(result.rows[0].id, undefined);\n    locals.assessment_id = result.rows[0].id;\n    locals.assessmentUrl = locals.courseInstanceUrl + '/assessment/' + locals.assessment_id;\n  });\n\n  step('contains a group-based homework assessment without roles', async function () {\n    const result = await sqldb.queryAsync(sql.select_group_work_assessment_without_roles, []);\n    assert.lengthOf(result.rows, 1);\n    assert.notEqual(result.rows[0].id, undefined);\n    assert.equal(result.rows[0].has_roles, false);\n    locals.assessment_id_without_roles = result.rows[0].id;\n    locals.assessmentUrlWithoutRoles =\n      locals.courseInstanceUrl + '/assessment/' + locals.assessment_id_without_roles;\n  });\n\n  step('contains the 4 group roles for the assessment', async function () {\n    const params = {\n      assessment_id: locals.assessment_id,\n    };\n    const result = await sqldb.queryAsync(sql.select_assessment_group_roles, params);\n    assert.lengthOf(result.rows, 4);\n    locals.groupRoles = result.rows;\n\n    // Store roles by name for later tests\n    const manager = result.rows.find((row) => row.role_name === 'Manager');\n    assert.isDefined(manager);\n\n    const recorder = result.rows.find((row) => row.role_name === 'Recorder');\n    assert.isDefined(recorder);\n\n    const reflector = result.rows.find((row) => row.role_name === 'Reflector');\n    assert.isDefined(reflector);\n\n    const contributor = result.rows.find((row) => row.role_name === 'Contributor');\n    assert.isDefined(contributor);\n\n    locals.manager = manager;\n    locals.recorder = recorder;\n    locals.reflector = reflector;\n    locals.contributor = contributor;\n  });\n\n  step('can insert/get 5 users into/from the DB', async function () {\n    locals.studentUsers = await generateAndEnrollUsers({ count: 5, course_instance_id: '1' });\n    assert.lengthOf(locals.studentUsers, 5);\n  });\n\n  step('can create a group as first user', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[0], locals.assessmentUrl, '00000001', 2);\n    locals.group_name = 'groupBB';\n    const res = await fetch(locals.assessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'create_group',\n        __csrf_token: locals.__csrf_token,\n        groupName: locals.group_name,\n      }),\n    });\n    assert.isOk(res.ok);\n    locals.$ = cheerio.load(await res.text());\n  });\n\n  step('group creator should have manager role in database', async function () {\n    // Updating local variables to persist role updates across tests\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n    ];\n\n    // Check role config\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n  });\n\n  step('contains the 4-character join code', function () {\n    elemList = locals.$('#join-code');\n    locals.joinCode = elemList.text();\n    assert.lengthOf(locals.joinCode, locals.$('#group-name').text().length + 1 + 4);\n  });\n\n  step('group role table is visible and has one user in it', function () {\n    elemList = locals.$('#role-select-form').find('tr');\n    assert.lengthOf(elemList, 2);\n  });\n\n  step('contains four textboxes per table row', function () {\n    elemList = locals.$('#role-select-form').find('tr').eq(1).find('input');\n    assert.lengthOf(elemList, 4);\n  });\n\n  step('should have only manager role checked in the role table', function () {\n    elemList = locals.$('#role-select-form').find('tr').eq(1).find('input:checked');\n    assert.lengthOf(elemList, 1);\n\n    elemList = elemList.parent('label');\n    assert.equal(elemList.text().trim(), locals.manager.role_name);\n  });\n\n  step('should not be able to start assessment', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isTrue(elemList.is(':disabled'));\n  });\n\n  step('displays error for too few recorders/reflectors', function () {\n    assertAlert(locals.$, '1 more student needs to be assigned to the role \"Recorder\"');\n    assertAlert(locals.$, '1 more student needs to be assigned to the role \"Reflector\"');\n  });\n\n  step('cannot select the contributor role', function () {\n    elemList = locals.$('#role-select-form').find('tr').eq(1).find('input:disabled');\n    assert.lengthOf(elemList, 1);\n    elemList = elemList.parent('label');\n    assert.equal(elemList.text().trim(), locals.contributor.role_name);\n  });\n\n  step('should be missing 1 more group members to start', function () {\n    elemList = locals.$('.text-center:contains(1 more)');\n    assert.lengthOf(elemList, 1);\n  });\n\n  step('should have no role assignments in the database after assigner leaves', async function () {\n    await leaveGroup(locals.assessmentUrl);\n\n    const res = await fetch(locals.assessmentUrl);\n    assert.isOk(res.ok);\n    const result = await sqldb.queryAsync(sql.select_group_user_roles, {\n      assessment_id: locals.assessment_id,\n    });\n\n    // Since there are no users currently in the group, there must be no role assignments\n    assert.lengthOf(result.rows, 0);\n  });\n\n  step('assigns first user to manager role after re-joining', async function () {\n    await joinGroup(locals.assessmentUrl, locals.joinCode);\n\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n  });\n\n  step('group role table is visible and has one user in it', function () {\n    elemList = locals.$('#role-select-form').find('tr');\n    assert.lengthOf(elemList, 2);\n  });\n\n  step('second user should join group as recorder', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[1], locals.assessmentUrl, '00000002', 2);\n    await joinGroup(locals.assessmentUrl, locals.joinCode);\n\n    const expectedRoleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(expectedRoleUpdates, locals.assessment_id);\n  });\n\n  step('should not be able to start assessment', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isTrue(elemList.is(':disabled'));\n  });\n\n  step('does not enable the group role table for non-assigner', function () {\n    elemList = locals.$('#role-select-form').find('input:not([disabled])');\n    assert.lengthOf(elemList, 0);\n  });\n\n  step('displays error for too few reflectors', function () {\n    assertAlert(locals.$, '1 more student needs to be assigned to the role \"Reflector\"');\n  });\n\n  step('first user sees group role select table with two rows', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[0], locals.assessmentUrl, '00000001', 3);\n\n    elemList = locals.$('#role-select-form').find('tr');\n    // Header row and two user rows\n    assert.lengthOf(elemList, 3);\n  });\n\n  step('first user should be able to remove role assignments from second user', async function () {\n    // Remove role assignments from second user\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n    ];\n    await updateGroupRoles(\n      locals.roleUpdates,\n      locals.groupRoles,\n      locals.studentUsers,\n      locals.assessmentUrl,\n    );\n  });\n\n  step('second user should have no roles after update', async function () {\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n\n    // Reload assessment and verify in UI\n    const res = await fetch(locals.assessmentUrl);\n    assert.isOk(res.ok);\n    locals.$ = cheerio.load(await res.text());\n    verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n  });\n\n  step('should have error displayed for requiring all users have a role', function () {\n    assertAlert(locals.$, 'At least one user does not have a role. All users must have a role.');\n  });\n\n  step('should not be able to start assessment', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isTrue(elemList.is(':disabled'));\n  });\n\n  step('can switch to second user and load assessment without error', async function () {\n    // By loading assessment as second user, we verify that an assessment can be loaded\n    // by a user with no role assignments\n    await switchUserAndLoadAssessment(locals.studentUsers[1], locals.assessmentUrl, '00000002', 2);\n  });\n\n  step('second user cannot update roles as non-assigner', async function () {\n    const roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n    ];\n\n    const checkedElementIds = {};\n    for (const { roleId, groupUserId } of roleUpdates) {\n      checkedElementIds[`user_role_${groupUserId}-${roleId}`] = 'on';\n    }\n    const res = await fetch(locals.assessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'update_group_roles',\n        __csrf_token: locals.__csrf_token,\n        ...checkedElementIds,\n      }),\n    });\n\n    // Second user cannot update group roles\n    assert.isNotOk(res.ok);\n    assert.equal(res.status, 403);\n  });\n\n  step('first user can edit role table to make both users manager', async function () {\n    // Switch to first user\n    await switchUserAndLoadAssessment(locals.studentUsers[0], locals.assessmentUrl, '00000001', 3);\n\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[1].user_id },\n    ];\n    await updateGroupRoles(\n      locals.roleUpdates,\n      locals.groupRoles,\n      locals.studentUsers,\n      locals.assessmentUrl,\n    );\n  });\n\n  step(\n    'second user can load assessment as manager and see group role select table',\n    async function () {\n      await switchUserAndLoadAssessment(\n        locals.studentUsers[1],\n        locals.assessmentUrl,\n        '00000002',\n        3,\n      );\n\n      elemList = locals.$('#role-select-form').find('tr');\n      // Header row and two user rows\n      assert.lengthOf(elemList, 3);\n    },\n  );\n\n  step('displays errors for incorrect number of role assignments', function () {\n    assertAlert(locals.$, 'less student needs to be assigned');\n    assertAlert(locals.$, 'more student needs to be assigned', 2);\n  });\n\n  step('should not be able to start assessment', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isTrue(elemList.is(':disabled'));\n  });\n\n  step('second user can leave group as manager and rejoin without error', async function () {\n    await leaveGroup(locals.assessmentUrl);\n\n    const res = await fetch(locals.assessmentUrl);\n    assert.isOk(res.ok);\n\n    await joinGroup(locals.assessmentUrl, locals.joinCode);\n  });\n\n  step(\n    'database contains correct role configuration after second user leaves and rejoins',\n    async function () {\n      const expectedRoleUpdates = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      ];\n      await verifyRoleAssignmentsInDatabase(expectedRoleUpdates, locals.assessment_id);\n    },\n  );\n\n  step('third user can load assessment and join group', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[2], locals.assessmentUrl, '00000003', 2);\n    await joinGroup(locals.assessmentUrl, locals.joinCode);\n  });\n\n  step('assigns third user with required role upon join', async function () {\n    const expectedRoleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(expectedRoleUpdates, locals.assessment_id);\n  });\n\n  step('third user can start assessment as minimum roles are complete', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isFalse(elemList.is(':disabled'));\n  });\n\n  step('does not enable the group role table as non-assigner', function () {\n    elemList = locals.$('#role-select-form').find('input:not([disabled])');\n    assert.lengthOf(elemList, 0);\n  });\n\n  step('displays no role assignment error', function () {\n    assertAlert(locals.$, 'needs to be assigned', 0);\n  });\n\n  step('first user can edit role table to make two users recorder', async function () {\n    // Switch to first user\n    await switchUserAndLoadAssessment(locals.studentUsers[0], locals.assessmentUrl, '00000001', 3);\n\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[2].user_id },\n    ];\n    await updateGroupRoles(\n      locals.roleUpdates,\n      locals.groupRoles,\n      locals.studentUsers,\n      locals.assessmentUrl,\n    );\n  });\n\n  step('displays error for too few reflectors and too many recorders', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[2], locals.assessmentUrl, '00000003', 2);\n    assertAlert(locals.$, '1 more student needs to be assigned to the role \"Reflector\"');\n    assertAlert(locals.$, '1 less student needs to be assigned to the role \"Recorder\"');\n  });\n\n  step('cannot start assessment as minimum roles are incomplete', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isTrue(elemList.is(':disabled'));\n  });\n\n  step('fourth user can load assessment and join group', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[3], locals.assessmentUrl, '00000004', 2);\n    await joinGroup(locals.assessmentUrl, locals.joinCode);\n  });\n\n  step('should not enable the group role table', function () {\n    elemList = locals.$('#role-select-form').find('input:not([disabled])');\n    assert.lengthOf(elemList, 0);\n  });\n\n  step('assigns fourth user with required role upon join', async function () {\n    // Fourth user should receive required role because there is one role still to be assigned its minimum\n    const expectedRoleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[2].user_id },\n      { roleId: locals.reflector.id, groupUserId: locals.studentUsers[3].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(expectedRoleUpdates, locals.assessment_id);\n  });\n\n  step('first user should see group role table with four users', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[0], locals.assessmentUrl, '00000001', 3);\n\n    elemList = locals.$('#role-select-form').find('tr');\n    // Header row and four user rows\n    assert.lengthOf(elemList, 5);\n  });\n\n  step(\n    'first user can edit role table to correct role configuration and remove manager role',\n    async function () {\n      // Remove manager role to test whether it is correctly reassigned upon date\n      locals.roleUpdates = [\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[3].user_id },\n      ];\n\n      locals.assignerRoleUpdate = {\n        roleId: locals.manager.id,\n        groupUserId: locals.studentUsers[0].user_id,\n      };\n\n      await updateGroupRoles(\n        locals.roleUpdates,\n        locals.groupRoles,\n        locals.studentUsers,\n        locals.assessmentUrl,\n      );\n    },\n  );\n\n  step('database contains correct role configuration after reassigning roles', async function () {\n    // We expect the db to have all role updates, including the assigner role\n    locals.roleUpdates = [...locals.roleUpdates, locals.assignerRoleUpdate];\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n  });\n\n  step('should have all four roles checked once in the table', async function () {\n    // Reload assessment\n    const res = await fetch(locals.assessmentUrl);\n    assert.isOk(res.ok);\n    locals.$ = cheerio.load(await res.text());\n\n    verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n  });\n\n  step('displays no errors when role config is correct', function () {\n    assertAlert(locals.$, 'needs to be assigned', 0);\n  });\n\n  step('should be able to start assessment when role config is correct', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isFalse(elemList.is(':disabled'));\n  });\n\n  step('should be able to select the contributor role', function () {\n    elemList = locals.$('#role-select-form').find('tr').eq(1).find('input:disabled');\n    assert.lengthOf(elemList, 0);\n  });\n\n  step('first user can assign too many recorders', async function () {\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[2].user_id },\n      { roleId: locals.reflector.id, groupUserId: locals.studentUsers[3].user_id },\n    ];\n    await updateGroupRoles(\n      locals.roleUpdates,\n      locals.groupRoles,\n      locals.studentUsers,\n      locals.assessmentUrl,\n    );\n  });\n\n  step(\n    'should have correct role configuration in the database after assigning two recorders',\n    async function () {\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n    },\n  );\n\n  step('should have correct roles checked in the table', async function () {\n    // Reload assessment\n    const res = await fetch(locals.assessmentUrl);\n    assert.isOk(res.ok);\n    locals.$ = cheerio.load(await res.text());\n\n    verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n  });\n\n  step('displays error for too many recorders', function () {\n    assertAlert(locals.$, '1 less student needs to be assigned to the role \"Recorder\"');\n  });\n\n  step('first user can update roles to have two contributors', async function () {\n    locals.roleUpdates = [\n      // First user has both manager and contributor\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.contributor.id, groupUserId: locals.studentUsers[0].user_id },\n\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n      { roleId: locals.contributor.id, groupUserId: locals.studentUsers[3].user_id },\n    ];\n    await updateGroupRoles(\n      locals.roleUpdates,\n      locals.groupRoles,\n      locals.studentUsers,\n      locals.assessmentUrl,\n    );\n  });\n\n  step('should have correct role configuration in the database', async function () {\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n  });\n\n  step('should have correct roles checked in the table', async function () {\n    // Reload assessment\n    const res = await fetch(locals.assessmentUrl);\n    assert.isOk(res.ok);\n    locals.$ = cheerio.load(await res.text());\n\n    verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n  });\n\n  step('displays error for a student having too many roles', function () {\n    assertAlert(locals.$, 'too many roles');\n  });\n\n  step('should not be able to start assessment with unbalanced role config', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isTrue(elemList.is(':disabled'));\n  });\n\n  step('fourth user can leave group', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[3], locals.assessmentUrl, '00000004', 2);\n    await leaveGroup(locals.assessmentUrl);\n  });\n\n  step(\n    'should remove non-required roles when group size does not exceed minimum required role assignments',\n    async function () {\n      // First user has no contributor role now that group size = # of required roles\n      locals.roleUpdates = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n      ];\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n    },\n  );\n\n  step('first user should see correct roles checked in the table', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[0], locals.assessmentUrl, '00000001', 3);\n    verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n  });\n\n  step('should assign fourth user as non-required role after rejoining', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[3], locals.assessmentUrl, '00000004', 2);\n    await joinGroup(locals.assessmentUrl, locals.joinCode);\n\n    // Fourth user receives contributor\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n      { roleId: locals.contributor.id, groupUserId: locals.studentUsers[3].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n  });\n\n  step('first user should see correct roles checked in the table', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[0], locals.assessmentUrl, '00000001', 3);\n    verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n  });\n\n  step(\n    'should assign fifth user as non-required role when group size exceeds minimum required role assignments',\n    async function () {\n      // Switch to fifth user and join group\n      await switchUserAndLoadAssessment(\n        locals.studentUsers[4],\n        locals.assessmentUrl,\n        '00000005',\n        2,\n      );\n      await joinGroup(locals.assessmentUrl, locals.joinCode);\n\n      // Fifth user should have contributor role\n      locals.roleUpdates = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[3].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[4].user_id },\n      ];\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n    },\n  );\n\n  step('first user should see five roles checked in the table', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[0], locals.assessmentUrl, '00000001', 3);\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n  });\n\n  step(\n    'first user can swap recorder and contributor roles between second and fifth user',\n    async function () {\n      locals.roleUpdates = [\n        // Second user has contributor, fifth user has recorder\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[3].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[4].user_id },\n      ];\n\n      // Perform update and verify in database\n      await updateGroupRoles(\n        locals.roleUpdates,\n        locals.groupRoles,\n        locals.studentUsers,\n        locals.assessmentUrl,\n      );\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n\n      // Reload assessment and verify in group role table\n      const res = await fetch(locals.assessmentUrl);\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    },\n  );\n\n  step(\n    'should replace non-required role with required role of leaving user when group is big enough',\n    async function () {\n      // Switch to fifth user and leave\n      await switchUserAndLoadAssessment(\n        locals.studentUsers[4],\n        locals.assessmentUrl,\n        '00000005',\n        2,\n      );\n      await leaveGroup(locals.assessmentUrl);\n\n      // Scenario 1: Recorder role is transferred from the leaving fifth user to the second user\n      const roleUpdates1 = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[3].user_id },\n      ];\n      // Scenario 2: Recorder role is transferred from the leaving fifth user to the fourth user\n      const roleUpdates2 = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[3].user_id },\n      ];\n\n      // Assert that the recorder role is given to either the second or fourth user because\n      // they previously had non-required roles\n      const params = {\n        assessment_id: locals.assessment_id,\n      };\n      const result = await sqldb.queryAsync(sql.select_group_user_roles, params);\n      assert.lengthOf(result.rows, 4);\n\n      const secondUserRoles = result.rows.filter(\n        (row) => row.user_id === locals.studentUsers[1].user_id,\n      );\n      assert.isTrue(secondUserRoles.length === 1);\n\n      const secondUserRole = secondUserRoles[0];\n      assert.isTrue(\n        secondUserRole.group_role_id === locals.recorder.id ||\n          secondUserRole.group_role_id === locals.contributor.id,\n      );\n\n      const roleUpdates = secondUserRole.id === locals.recorder.id ? roleUpdates1 : roleUpdates2;\n      const expected = roleUpdates.map(({ roleId, groupUserId }) => ({\n        user_id: groupUserId,\n        group_role_id: roleId,\n      }));\n\n      assert.sameDeepMembers(expected, result.rows);\n      locals.roleUpdates = roleUpdates;\n    },\n  );\n\n  step(\n    'correct roles are checked in group role table after required roles are transferred',\n    async function () {\n      // Switch to assigner\n      await switchUserAndLoadAssessment(\n        locals.studentUsers[0],\n        locals.assessmentUrl,\n        '00000001',\n        3,\n      );\n\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    },\n  );\n\n  step(\n    'first user can swap reflector and contributor roles between third and fourth user',\n    async function () {\n      locals.roleUpdates = [\n        // Third user has contributor, fourth user has reflector\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[3].user_id },\n      ];\n\n      // Perform update and verify in database\n      await updateGroupRoles(\n        locals.roleUpdates,\n        locals.groupRoles,\n        locals.studentUsers,\n        locals.assessmentUrl,\n      );\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n\n      // Reload assessment and verify update in role table\n      const res = await fetch(locals.assessmentUrl);\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    },\n  );\n\n  step('should be able to switch to fourth user and leave group', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[3], locals.assessmentUrl, '00000004', 2);\n    await leaveGroup(locals.assessmentUrl);\n  });\n\n  step(\n    'should replace non-required role with required role of leaving user when group meets minimum required role assignments',\n    async function () {\n      // Fourth user's contributor role should replace third user's contributor role\n      locals.roleUpdates = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n      ];\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n\n      // Switch to first user and verify roles updated correctly in UI\n      await switchUserAndLoadAssessment(\n        locals.studentUsers[0],\n        locals.assessmentUrl,\n        '00000001',\n        3,\n      );\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    },\n  );\n\n  step('should be able to switch to fourth user and leave group', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[2], locals.assessmentUrl, '00000003', 2);\n    await leaveGroup(locals.assessmentUrl);\n  });\n\n  step(\n    'required roles of leaving user are transferred when group size falls below minimum required role assignments',\n    async function () {\n      // Reflector role should be transferred after third user leaves. The role can either\n      // fall to the first user or second user. We'll test for either case happening\n\n      // Scenario 1: Reflector is given to the first user\n      const roleUpdates1 = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      ];\n      // Scenario 2: Reflector is given to the second user\n      const roleUpdates2 = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      ];\n\n      // Assert that the reflector role is given to either first or second user\n      const result = await sqldb.queryAsync(sql.select_group_user_roles, {\n        assessment_id: locals.assessment_id,\n      });\n      assert.lengthOf(result.rows, 3);\n\n      // Get all roles for first user\n      const firstUserRoleUpdates = result.rows.filter(\n        (row) => row.user_id === locals.studentUsers[0].user_id,\n      );\n      assert.isTrue(firstUserRoleUpdates.length === 1 || firstUserRoleUpdates.length === 2);\n\n      const roleUpdates = firstUserRoleUpdates.length === 2 ? roleUpdates1 : roleUpdates2;\n      const expected = roleUpdates.map(({ roleId, groupUserId }) => ({\n        user_id: groupUserId,\n        group_role_id: roleId,\n      }));\n\n      assert.sameDeepMembers(expected, result.rows);\n      locals.roleUpdates = roleUpdates;\n    },\n  );\n\n  step(\n    'group role table should have correct roles checked after roles transfer upon leave',\n    async function () {\n      await switchUserAndLoadAssessment(\n        locals.studentUsers[0],\n        locals.assessmentUrl,\n        '00000001',\n        3,\n      );\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    },\n  );\n\n  step('all required roles of a leaving user should be transferred if possible', async function () {\n    // Leave group as first user\n    await leaveGroup(locals.assessmentUrl);\n\n    // Switch to second user\n    await switchUserAndLoadAssessment(locals.studentUsers[1], locals.assessmentUrl, '00000002', 3);\n\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.reflector.id, groupUserId: locals.studentUsers[1].user_id },\n    ];\n\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, locals.assessment_id);\n  });\n\n  step('group role table is visible and has one user with three roles', function () {\n    elemList = locals.$('#role-select-form').find('tr');\n    assert.lengthOf(elemList, 2);\n\n    verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n  });\n\n  step('first user can load assessment without roles', async function () {\n    await switchUserAndLoadAssessment(\n      locals.studentUsers[0],\n      locals.assessmentUrlWithoutRoles,\n      '00000001',\n      2,\n    );\n  });\n\n  step('first user can create a group in assessment without roles', async function () {\n    locals.group_name = 'groupAA';\n    const res = await fetch(locals.assessmentUrlWithoutRoles, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'create_group',\n        __csrf_token: locals.__csrf_token,\n        groupName: locals.group_name,\n      }),\n    });\n    assert.isOk(res.ok);\n    locals.$ = cheerio.load(await res.text());\n  });\n\n  step('group role table is not visible in assessment without roles', function () {\n    elemList = locals.$('#role-select-form');\n    assert.lengthOf(elemList, 0);\n  });\n});\n\nconst changeGroupRolesConfig = async (courseDir: string, groupRoles: GroupRoleJsonInput[]) => {\n  const infoAssessmentPath = path.join(\n    courseDir,\n    'courseInstances',\n    'Sp15',\n    'assessments',\n    'hw5-templateGroupWork',\n    'infoAssessment.json',\n  );\n  const infoAssessment = await fs.readJSON(infoAssessmentPath);\n  infoAssessment.groupRoles = groupRoles;\n\n  await fs.writeJSON(infoAssessmentPath, infoAssessment);\n  await syncCourseData(courseDir);\n};\n\ndescribe('Test group role reassignments with role of minimum > 1', function () {\n  let tempTestCourseDir: tmp.DirectoryResult;\n  let assessmentId: string;\n  let assessmentUrl;\n\n  before('set authenticated user', function () {\n    storedConfig.authUid = config.authUid;\n    storedConfig.authName = config.authName;\n    storedConfig.authUin = config.authUin;\n  });\n\n  before('set up testing server', async function () {\n    // Create a copy of the course that we can safely manipulate.\n    tempTestCourseDir = await tmp.dir({ unsafeCleanup: true });\n    await fs.copy(TEST_COURSE_PATH, tempTestCourseDir.path, {\n      overwrite: true,\n    });\n\n    await helperServer.before(tempTestCourseDir.path).call(this);\n\n    // Find the ID of an assessment that has group roles\n    const assessmentResults = await sqldb.queryOneRowAsync(sql.select_assessment, {\n      tid: 'hw5-templateGroupWork',\n    });\n    assessmentId = assessmentResults.rows[0].id;\n    assessmentUrl = locals.courseInstanceUrl + '/assessment/' + assessmentId;\n  });\n\n  after('shut down testing server', async function () {\n    try {\n      await tempTestCourseDir.cleanup();\n    } catch (err) {\n      console.error(err);\n    }\n    await helperServer.after.call(this);\n  });\n\n  after('unset authenticated user', function () {\n    Object.assign(config, storedConfig);\n  });\n\n  step('change group config to include a role with minimum of two', async function () {\n    const groupRoles = [\n      { name: 'Manager', minimum: 1, maximum: 1, canAssignRoles: true },\n      { name: 'Recorder', minimum: 2, maximum: 2 },\n      { name: 'Reflector', minimum: 1, maximum: 1 },\n      { name: 'Contributor' },\n    ];\n    await changeGroupRolesConfig(tempTestCourseDir.path, groupRoles);\n    const groupRolesResult = await sqldb.queryAsync(sql.select_assessment_group_roles, {\n      assessment_id: assessmentId,\n    });\n    assert.lengthOf(groupRolesResult.rows, 4);\n    locals.groupRoles = groupRolesResult.rows;\n\n    const manager = groupRolesResult.rows.find((row) => row.role_name === 'Manager');\n    assert.isDefined(manager);\n    locals.manager = manager;\n\n    const recorder = groupRolesResult.rows.find((row) => row.role_name === 'Recorder');\n    assert.isDefined(recorder);\n    assert.equal(2, recorder.minimum);\n    assert.equal(2, recorder.maximum);\n    locals.recorder = recorder;\n\n    const reflector = groupRolesResult.rows.find((row) => row.role_name === 'Reflector');\n    assert.isDefined(reflector);\n    locals.reflector = reflector;\n\n    const contributor = groupRolesResult.rows.find((row) => row.role_name === 'Contributor');\n    assert.isDefined(contributor);\n    locals.contributor = contributor;\n\n    // Insert/get 5 users into/from the DB\n    locals.studentUsers = await generateAndEnrollUsers({ count: 5, course_instance_id: '1' });\n    assert.lengthOf(locals.studentUsers, 5);\n\n    // Switch current user to the group creator and load assessment\n    await switchUserAndLoadAssessment(locals.studentUsers[0], assessmentUrl, '00000001', 2);\n  });\n\n  step('create group as first user', async function () {\n    locals.group_name = 'groupBB';\n    const joinRes = await fetch(assessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'create_group',\n        __csrf_token: locals.__csrf_token,\n        groupName: locals.group_name,\n      }),\n    });\n    assert.isOk(joinRes.ok);\n    locals.$ = cheerio.load(await joinRes.text());\n\n    // Grab join code\n    elemList = locals.$('#join-code');\n    locals.joinCode = elemList.text();\n    assert.lengthOf(locals.joinCode, locals.$('#group-name').text().length + 1 + 4);\n  });\n\n  step('check role configuration', async function () {\n    locals.roleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(locals.roleUpdates, assessmentId);\n  });\n\n  step('second user should be able to join group', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[1], assessmentUrl, '00000002', 2);\n    await joinGroup(assessmentUrl, locals.joinCode);\n  });\n\n  step('should not be able to start assessment', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isTrue(elemList.is(':disabled'));\n  });\n\n  step('should have correct role configuration in the database for two users', async function () {\n    const expectedRoleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(expectedRoleUpdates, assessmentId);\n  });\n\n  step('should not enable the group role table for non-assigner', function () {\n    elemList = locals.$('#role-select-form').find('input:not([disabled])');\n    assert.lengthOf(elemList, 0);\n  });\n\n  step('should display correct errors for too few role assignments', function () {\n    assertAlert(locals.$, '1 more student needs to be assigned to the role \"Reflector\"');\n    assertAlert(locals.$, '1 more student needs to be assigned to the role \"Recorder\"');\n  });\n\n  step('third user should be able to join group', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[2], assessmentUrl, '00000003', 2);\n    await joinGroup(assessmentUrl, locals.joinCode);\n  });\n\n  step('database assigns third user with required role', async function () {\n    const expectedRoleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(expectedRoleUpdates, assessmentId);\n  });\n\n  step('should not be able to start assessment as non-assigner', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isTrue(elemList.is(':disabled'));\n  });\n\n  step('should not enable the group role table for non-assigner', function () {\n    elemList = locals.$('#role-select-form').find('input:not([disabled])');\n    assert.lengthOf(elemList, 0);\n  });\n\n  step('displays error for too few recorders', function () {\n    assertAlert(locals.$, '1 more student needs to be assigned to the role \"Recorder\"');\n  });\n\n  step('displays no errors for reflector', function () {\n    assertAlert(locals.$, 'Reflector', 0);\n  });\n\n  step('first user can see group role table with four users', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[0], assessmentUrl, '00000001', 3);\n\n    elemList = locals.$('#role-select-form').find('tr');\n    // Header row and three user rows\n    assert.lengthOf(elemList, 4);\n  });\n\n  step('first user should not be able to select the contributor role', function () {\n    elemList = locals.$('#role-select-form').find('tr').eq(1).find('input:disabled');\n    assert.lengthOf(elemList, 1);\n    elemList = elemList.parent('label');\n    assert.equal(elemList.text().trim(), locals.contributor.role_name);\n  });\n\n  step('fourth user should be able to join group', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[3], assessmentUrl, '00000004', 2);\n    await joinGroup(assessmentUrl, locals.joinCode);\n  });\n\n  step('assigns fourth user with required role upon join', async function () {\n    const expectedRoleUpdates = [\n      { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n      { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n      { roleId: locals.recorder.id, groupUserId: locals.studentUsers[3].user_id },\n    ];\n    await verifyRoleAssignmentsInDatabase(expectedRoleUpdates, assessmentId);\n  });\n\n  step('should be able to start assessment', function () {\n    elemList = locals.$('#start-assessment');\n    assert.isFalse(elemList.is(':disabled'));\n  });\n\n  step('displays no role assignment errors', function () {\n    assertAlert(locals.$, 'needs to be assigned', 0);\n  });\n\n  step('should not enable the group role table for non-assigner', function () {\n    elemList = locals.$('#role-select-form').find('input:not([disabled])');\n    assert.lengthOf(elemList, 0);\n  });\n\n  step('first user can see group role table with four users', async function () {\n    await switchUserAndLoadAssessment(locals.studentUsers[0], assessmentUrl, '00000001', 3);\n\n    elemList = locals.$('#role-select-form').find('tr');\n    // Header row and four user rows\n    assert.lengthOf(elemList, 5);\n  });\n\n  step('first user should not be able to select the contributor role', function () {\n    elemList = locals.$('#role-select-form').find('tr').eq(1).find('input:disabled');\n    assert.lengthOf(elemList, 1);\n    elemList = elemList.parent('label');\n    assert.equal(elemList.text().trim(), locals.contributor.role_name);\n  });\n\n  describe('test correct role config where group size matches minimum required role count', function () {\n    step(\n      'first user can update roles with correct role configuration without manager',\n      async function () {\n        // First user keeps manager unchecked, since we expect the role to be automatically assigned\n        locals.roleUpdates = [\n          { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n          { roleId: locals.recorder.id, groupUserId: locals.studentUsers[2].user_id },\n          { roleId: locals.reflector.id, groupUserId: locals.studentUsers[3].user_id },\n        ];\n\n        locals.assignerRoleUpdate = {\n          roleId: locals.manager.id,\n          groupUserId: locals.studentUsers[0].user_id,\n        };\n\n        await updateGroupRoles(\n          locals.roleUpdates,\n          locals.groupRoles,\n          locals.studentUsers,\n          assessmentUrl,\n        );\n      },\n    );\n\n    step(\n      'contains correct role configuration with manager role after reassigning',\n      async function () {\n        // We expect the db to have all role updates, including the assigner role\n        locals.roleUpdates = [...locals.roleUpdates, locals.assignerRoleUpdate];\n        await verifyRoleAssignmentsInDatabase(locals.roleUpdates, assessmentId);\n\n        // Reload assessment page\n        const res = await fetch(assessmentUrl);\n        assert.isOk(res.ok);\n        locals.$ = cheerio.load(await res.text());\n\n        // Group role table should also have all role updates plus assigner role\n        verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n      },\n    );\n\n    step('should have no errors displayed', function () {\n      assertAlert(locals.$, 'to be assigned', 0);\n      assertAlert(locals.$, 'At least one user does not have a role', 0);\n    });\n\n    step('first user should not be able to select the contributor role', function () {\n      elemList = locals.$('#role-select-form').find('tr').eq(1).find('input:disabled');\n      assert.lengthOf(elemList, 1);\n      elemList = elemList.parent('label');\n      assert.equal(elemList.text().trim(), locals.contributor.role_name);\n    });\n\n    step('should be able to start assessment', function () {\n      elemList = locals.$('#start-assessment');\n      assert.isFalse(elemList.is(':disabled'));\n    });\n  });\n\n  describe('test correct role config where group size exceeds minimum required role count', function () {\n    step('assigns fifth user with non-required role after join', async function () {\n      // Switch to fifth user and join group\n      await switchUserAndLoadAssessment(locals.studentUsers[4], assessmentUrl, '00000005', 2);\n      await joinGroup(assessmentUrl, locals.joinCode);\n\n      // Fifth user should have contributor role\n      locals.roleUpdates = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[3].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[4].user_id },\n      ];\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, assessmentId);\n    });\n\n    step('switch back to first user and load group role table', async function () {\n      await switchUserAndLoadAssessment(locals.studentUsers[0], assessmentUrl, '00000001', 3);\n    });\n\n    step('group role table is visible and has five users with correct roles', function () {\n      elemList = locals.$('#role-select-form').find('tr');\n      // Header row and five user rows\n      assert.lengthOf(elemList, 6);\n\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    });\n\n    step('should have no errors displayed', function () {\n      assertAlert(locals.$, 'to be assigned', 0);\n      assertAlert(\n        locals.$,\n        'At least one user does not have a role. All users must have a role.',\n        0,\n      );\n    });\n\n    step('first user should be able to select the contributor role', function () {\n      elemList = locals.$('#role-select-form').find('tr').eq(1).find('input:disabled');\n      assert.lengthOf(elemList, 0);\n    });\n\n    step('should be able to start assessment', function () {\n      elemList = locals.$('#start-assessment');\n      assert.isFalse(elemList.is(':disabled'));\n    });\n  });\n\n  describe('test incorrect role config where group size exceeds minimum required role count', function () {\n    step('first user should be able to add extra contributor', async function () {\n      // Third user receives contributor\n      locals.roleUpdates = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[3].user_id },\n        { roleId: locals.contributor.id, groupUserId: locals.studentUsers[4].user_id },\n      ];\n      await updateGroupRoles(\n        locals.roleUpdates,\n        locals.groupRoles,\n        locals.studentUsers,\n        assessmentUrl,\n      );\n\n      // Verify update in database\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, assessmentId);\n\n      // Reload and verify update in UI\n      const res = await fetch(assessmentUrl);\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    });\n\n    step('should have correct errors displayed', function () {\n      assertAlert(locals.$, 'student has too many roles');\n    });\n\n    step('should not be able to start assessment', function () {\n      elemList = locals.$('#start-assessment');\n      assert.isTrue(elemList.is(':disabled'));\n    });\n\n    step('should be able to leave as fifth user', async function () {\n      // Switch to fifth user\n      await switchUserAndLoadAssessment(locals.studentUsers[4], assessmentUrl, '00000005', 2);\n\n      // Leave as fifth user\n      await leaveGroup(assessmentUrl);\n    });\n  });\n\n  describe('test incorrect role config where user has no roles', function () {\n    step('first user can remove a recorder assignment', async function () {\n      // Switch to first user and load assessment\n      await switchUserAndLoadAssessment(locals.studentUsers[0], assessmentUrl, '00000001', 3);\n\n      // Remove recorder assignment from second user\n      locals.roleUpdates = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[2].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[3].user_id },\n      ];\n\n      await updateGroupRoles(\n        locals.roleUpdates,\n        locals.groupRoles,\n        locals.studentUsers,\n        assessmentUrl,\n      );\n\n      // Verify update in database\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, assessmentId);\n\n      // Reload assessment and verify updates in group role table\n      const res = await fetch(assessmentUrl);\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    });\n\n    step('should have correct errors displayed', function () {\n      assertAlert(\n        locals.$,\n        '1 more student needs to be assigned to the role \"Recorder\" (1 assigned, 2 expected)',\n      );\n      assertAlert(locals.$, 'At least one user does not have a role. All users must have a role.');\n    });\n\n    step('should not be able to start assessment', function () {\n      elemList = locals.$('#start-assessment');\n      assert.isTrue(elemList.is(':disabled'));\n    });\n  });\n\n  describe('test incorrect role config where roles are unbalanced', function () {\n    step('first user can add too many roles to assigner', async function () {\n      // Give first user both manager and recorder\n      // Leave fourth user without a role\n      locals.roleUpdates = [\n        { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[0].user_id },\n        { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n        { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n      ];\n\n      // Verify update in database\n      await updateGroupRoles(\n        locals.roleUpdates,\n        locals.groupRoles,\n        locals.studentUsers,\n        assessmentUrl,\n      );\n\n      // Verify in database\n      await verifyRoleAssignmentsInDatabase(locals.roleUpdates, assessmentId);\n\n      // Reload assessment page and verify update in UI\n      const res = await fetch(assessmentUrl);\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n      verifyRoleAssignmentsInRoleTable(locals.roleUpdates);\n    });\n\n    step('should have correct errors displayed', function () {\n      assertAlert(locals.$, 'to be assigned to the role \"Recorder\"', 0);\n      assertAlert(locals.$, 'At least one user does not have a role. All users must have a role.');\n      assertAlert(locals.$, 'student has too many roles');\n    });\n\n    step('should not be able to start assessment', function () {\n      elemList = locals.$('#start-assessment');\n      assert.isTrue(elemList.is(':disabled'));\n    });\n  });\n\n  describe('test correct role config where group size falls below minimum required role count', function () {\n    step('should be able to leave as fourth user', async function () {\n      await switchUserAndLoadAssessment(locals.studentUsers[3], assessmentUrl, '00000004', 2);\n\n      // Leave as fourth user\n      await leaveGroup(assessmentUrl);\n    });\n\n    step(\n      'should have correct role configuration in the database after fourth user leaves',\n      async function () {\n        locals.roleUpdates = [\n          { roleId: locals.manager.id, groupUserId: locals.studentUsers[0].user_id },\n          { roleId: locals.recorder.id, groupUserId: locals.studentUsers[0].user_id },\n          { roleId: locals.recorder.id, groupUserId: locals.studentUsers[1].user_id },\n          { roleId: locals.reflector.id, groupUserId: locals.studentUsers[2].user_id },\n        ];\n        await verifyRoleAssignmentsInDatabase(locals.roleUpdates, assessmentId);\n      },\n    );\n\n    step('first user sees group role table with three users', async function () {\n      await switchUserAndLoadAssessment(locals.studentUsers[0], assessmentUrl, '00000001', 3);\n      elemList = locals.$('#role-select-form').find('tr');\n      // Header row and two user rows\n      assert.lengthOf(elemList, 4);\n    });\n\n    step('first user should not be able to select the contributor role', function () {\n      elemList = locals.$('#role-select-form').find('tr').eq(1).find('input:disabled');\n      assert.lengthOf(elemList, 1);\n      elemList = elemList.parent('label');\n      assert.equal(elemList.text().trim(), locals.contributor.role_name);\n    });\n\n    step('should be able to leave as first user', async function () {\n      await leaveGroup(assessmentUrl);\n    });\n\n    step(\n      'should have correct role configuration in the database after first user leaves',\n      async function () {\n        const params = {\n          assessment_id: assessmentId,\n        };\n        const result = await sqldb.queryAsync(sql.select_group_user_roles, params);\n\n        // Ensure that there are two recorder assignments, one manager, and one reflector, and no contributors\n        assert.lengthOf(\n          result.rows.filter(({ group_role_id }) => group_role_id === locals.manager.id),\n          1,\n        );\n        assert.lengthOf(\n          result.rows.filter(({ group_role_id }) => group_role_id === locals.recorder.id),\n          2,\n        );\n        assert.lengthOf(\n          result.rows.filter(({ group_role_id }) => group_role_id === locals.reflector.id),\n          1,\n        );\n        assert.lengthOf(\n          result.rows.filter(({ group_role_id }) => group_role_id === locals.contributor.id),\n          0,\n        );\n      },\n    );\n  });\n});\n\ndescribe('Test group role reassignment logic when user leaves', function () {\n  this.timeout(20000);\n  before('set authenticated user', function () {\n    storedConfig.authUid = config.authUid;\n    storedConfig.authName = config.authName;\n    storedConfig.authUin = config.authUin;\n  });\n  before('set up testing server', helperServer.before(locals.courseDir));\n  after('shut down testing server', helperServer.after);\n  after('unset authenticated user', function () {\n    Object.assign(config, storedConfig);\n  });\n\n  step('should contain a group-based homework assessment with roles', async function () {\n    const result = await sqldb.queryAsync(sql.select_group_work_assessment_with_roles, []);\n    assert.lengthOf(result.rows, 1);\n    assert.notEqual(result.rows[0].id, undefined);\n    locals.assessment_id = result.rows[0].id;\n    locals.assessmentUrl = locals.courseInstanceUrl + '/assessment/' + locals.assessment_id;\n  });\n\n  step('should contain the 4 group roles for the assessment', async function () {\n    const params = {\n      assessment_id: locals.assessment_id,\n    };\n    const result = await sqldb.queryAsync(sql.select_assessment_group_roles, params);\n    assert.lengthOf(result.rows, 4);\n    locals.groupRoles = result.rows;\n\n    // Store roles by name for later tests\n    const manager = result.rows.find((row) => row.role_name === 'Manager');\n    assert.isDefined(manager);\n\n    const recorder = result.rows.find((row) => row.role_name === 'Recorder');\n    assert.isDefined(recorder);\n\n    const reflector = result.rows.find((row) => row.role_name === 'Reflector');\n    assert.isDefined(reflector);\n\n    const contributor = result.rows.find((row) => row.role_name === 'Contributor');\n    assert.isDefined(contributor);\n\n    locals.manager = manager;\n    locals.recorder = recorder;\n    locals.reflector = reflector;\n    locals.contributor = contributor;\n  });\n\n  step('should insert/get 5 users into/from the DB', async function () {\n    locals.studentUsers = await generateAndEnrollUsers({ count: 5, course_instance_id: '1' });\n    assert.lengthOf(locals.studentUsers, 5);\n  });\n\n  step('should setup group info', async function () {\n    locals.groupId = '1';\n    locals.groupName = '1';\n    locals.groupMembers = locals.studentUsers.map((user) => ({\n      ...user,\n      group_name: locals.groupName,\n    }));\n    locals.rolesInfo = {\n      roleAssignments: {},\n      groupRoles: locals.groupRoles,\n      validationErrors: [],\n      disabledRoles: [],\n      rolesAreBalanced: true,\n      usersWithoutRoles: [],\n    };\n    locals.groupInfo = {\n      groupMembers: locals.groupMembers,\n      groupSize: locals.groupMembers.length,\n      groupName: locals.groupName,\n      joinCode: locals.joinCode,\n      start: false,\n      rolesInfo: locals.rolesInfo,\n    };\n  });\n\n  step(\n    'should transfer required roles to another user when there are no non-required roles to replace',\n    function () {\n      // Setup group of 2 users with one user as manager and the other user as recorder\n      locals.groupInfo.groupMembers = locals.groupMembers.slice(0, 2);\n      locals.groupInfo.groupSize = 2;\n      const roleAssignments = [\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.manager.id,\n        },\n        {\n          user_id: locals.studentUsers[1].user_id,\n          group_role_id: locals.recorder.id,\n        },\n      ];\n      locals.groupInfo.rolesInfo.groupRoles = locals.groupRoles.map((role) => ({\n        ...role,\n        count: roleAssignments.filter((roleAssignment) => roleAssignment.group_role_id === role.id)\n          .length,\n      }));\n      locals.rolesInfo.roleAssignments = roleAssignments;\n\n      // Get role reassignments if second user leaves\n      const result = getGroupRoleReassignmentsAfterLeave(\n        locals.groupInfo,\n        locals.studentUsers[1].user_id,\n      );\n      // Recorder role should be transferred to first user\n      const expected = [\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.manager.id,\n        },\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.recorder.id,\n        },\n      ];\n      assert.sameDeepMembers(result, expected);\n    },\n  );\n\n  step(\n    \"should replace another user's non-required role with leaving user's required role\",\n    function () {\n      // Setup group of 2 users with one user as manager and the other user as recorder\n      locals.groupInfo.groupMembers = locals.groupMembers.slice(0, 2);\n      locals.groupInfo.groupSize = 2;\n      const roleAssignments = [\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.manager.id,\n        },\n        {\n          user_id: locals.studentUsers[1].user_id,\n          group_role_id: locals.contributor.id,\n        },\n      ];\n      locals.groupInfo.rolesInfo.groupRoles = locals.groupRoles.map((role) => ({\n        ...role,\n        count: roleAssignments.filter((roleAssignment) => roleAssignment.group_role_id === role.id)\n          .length,\n      }));\n      locals.rolesInfo.roleAssignments = roleAssignments;\n\n      // Get role reassignments if first user leaves\n      const result = getGroupRoleReassignmentsAfterLeave(\n        locals.groupInfo,\n        locals.studentUsers[0].user_id,\n      );\n      // Manager role should replace first user's contributor role\n      const expected = [\n        {\n          user_id: locals.studentUsers[1].user_id,\n          group_role_id: locals.manager.id,\n        },\n      ];\n      assert.sameDeepMembers(result, expected);\n    },\n  );\n\n  step(\n    \"should replace other users' non-required roles with leaving user's required roles\",\n    function () {\n      // Setup group of 3 users with first user as manager AND reflector, and the other users as contributors\n      locals.groupInfo.groupMembers = locals.groupMembers.slice(0, 3);\n      locals.groupInfo.groupSize = 3;\n      const roleAssignments = [\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.manager.id,\n        },\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.reflector.id,\n        },\n        {\n          user_id: locals.studentUsers[1].user_id,\n          group_role_id: locals.contributor.id,\n        },\n        {\n          user_id: locals.studentUsers[2].user_id,\n          group_role_id: locals.contributor.id,\n        },\n      ];\n      locals.groupInfo.rolesInfo.groupRoles = locals.groupRoles.map((role) => ({\n        ...role,\n        count: roleAssignments.filter((roleAssignment) => roleAssignment.group_role_id === role.id)\n          .length,\n      }));\n      locals.rolesInfo.roleAssignments = roleAssignments;\n\n      // Get role reassignments if first user leaves\n      const result = getGroupRoleReassignmentsAfterLeave(\n        locals.groupInfo,\n        locals.studentUsers[0].user_id,\n      );\n      // Case 1: Manager role should replace second user's contributor role, and\n      // reflector role should replace third user's contributor role\n      const expected1 = [\n        {\n          user_id: locals.studentUsers[1].user_id,\n          group_role_id: locals.manager.id,\n        },\n        {\n          user_id: locals.studentUsers[2].user_id,\n          group_role_id: locals.reflector.id,\n        },\n      ];\n      const expected2 = [\n        {\n          user_id: locals.studentUsers[2].user_id,\n          group_role_id: locals.manager.id,\n        },\n        {\n          user_id: locals.studentUsers[1].user_id,\n          group_role_id: locals.reflector.id,\n        },\n      ];\n\n      assert.lengthOf(result, 2);\n      // If second user receives manager, we expect case 1; otherwise, we expect case 2\n      const secondUserRoleAssignment = result.find(\n        ({ user_id }) => user_id === locals.studentUsers[1].user_id,\n      );\n      assert.isDefined(secondUserRoleAssignment);\n      const expected =\n        secondUserRoleAssignment?.group_role_id === locals.manager.id ? expected1 : expected2;\n      assert.sameDeepMembers(result, expected);\n    },\n  );\n\n  step(\n    \"should replace other users' non-required roles with leaving user's required roles, then transfer after non-required roles run out\",\n    function () {\n      // Setup group of 3 users with one user as manager, recorder, and reflector, and the other users as contributor\n      locals.groupInfo.groupMembers = locals.groupMembers.slice(0, 3);\n      locals.groupInfo.groupSize = 3;\n      const roleAssignments = [\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.manager.id,\n        },\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.recorder.id,\n        },\n        {\n          user_id: locals.studentUsers[0].user_id,\n          group_role_id: locals.reflector.id,\n        },\n        {\n          user_id: locals.studentUsers[1].user_id,\n          group_role_id: locals.contributor.id,\n        },\n        {\n          user_id: locals.studentUsers[2].user_id,\n          group_role_id: locals.contributor.id,\n        },\n      ];\n      locals.groupInfo.rolesInfo.groupRoles = locals.groupRoles.map((role) => ({\n        ...role,\n        count: roleAssignments.filter((roleAssignment) => roleAssignment.group_role_id === role.id)\n          .length,\n      }));\n      locals.rolesInfo.roleAssignments = roleAssignments;\n\n      // Get role reassignments if first user leaves\n      const result = getGroupRoleReassignmentsAfterLeave(\n        locals.groupInfo,\n        locals.studentUsers[0].user_id,\n      );\n\n      // Ensure that there is a single role assignment for manager, recorder, and reflector each\n      assert.lengthOf(\n        result.filter(({ group_role_id }) => group_role_id === locals.manager.id),\n        1,\n      );\n      assert.lengthOf(\n        result.filter(({ group_role_id }) => group_role_id === locals.recorder.id),\n        1,\n      );\n      assert.lengthOf(\n        result.filter(({ group_role_id }) => group_role_id === locals.reflector.id),\n        1,\n      );\n\n      // Ensure that there are no contributors\n      assert.lengthOf(\n        result.filter(({ group_role_id }) => group_role_id === locals.contributor.id),\n        0,\n      );\n    },\n  );\n\n  step('should not transfer non-required roles to another user', function () {\n    // Setup group of 2 users with one user as manager and the other user as contributor\n    locals.groupInfo.groupMembers = locals.groupMembers.slice(0, 2);\n    locals.groupInfo.groupSize = 2;\n    const roleAssignments = [\n      {\n        user_id: locals.studentUsers[0].user_id,\n        group_role_id: locals.manager.id,\n      },\n      {\n        user_id: locals.studentUsers[1].user_id,\n        group_role_id: locals.contributor.id,\n      },\n    ];\n    locals.groupInfo.rolesInfo.groupRoles = locals.groupRoles.map((role) => ({\n      ...role,\n      count: roleAssignments.filter((roleAssignment) => roleAssignment.group_role_id === role.id)\n        .length,\n    }));\n    locals.rolesInfo.roleAssignments = roleAssignments;\n\n    // Get role reassignments if second user leaves\n    const result = getGroupRoleReassignmentsAfterLeave(\n      locals.groupInfo,\n      locals.studentUsers[1].user_id,\n    );\n    // Recorder role should be transferred to first user\n    const expected = [\n      {\n        user_id: locals.studentUsers[0].user_id,\n        group_role_id: locals.manager.id,\n      },\n    ];\n    assert.sameDeepMembers(result, expected);\n  });\n\n  step('should do nothing when leaving user has no roles', function () {\n    // Setup group of 2 users with one user as manager and the other user without roles\n    locals.groupInfo.groupMembers = locals.groupMembers.slice(0, 2);\n    locals.groupInfo.groupSize = 2;\n    const roleAssignments = [\n      {\n        user_id: locals.studentUsers[0].user_id,\n        group_role_id: locals.manager.id,\n      },\n    ];\n    locals.groupInfo.rolesInfo.groupRoles = locals.groupRoles.map((role) => ({\n      ...role,\n      count: roleAssignments.filter((roleAssignment) => roleAssignment.group_role_id === role.id)\n        .length,\n    }));\n    locals.rolesInfo.roleAssignments = roleAssignments;\n\n    // Get role reassignments if second user leaves\n    const result = getGroupRoleReassignmentsAfterLeave(\n      locals.groupInfo,\n      locals.studentUsers[1].user_id,\n    );\n    // Recorder role should be transferred to first user\n    const expected = [\n      {\n        user_id: locals.studentUsers[0].user_id,\n        group_role_id: locals.manager.id,\n      },\n    ];\n    assert.sameDeepMembers(result, expected);\n  });\n});\n"]}