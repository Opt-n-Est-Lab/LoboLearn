{"version":3,"file":"helperClient.js","sourceRoot":"","sources":["../../src/tests/helperClient.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,KAAK,EAAE,EAAmC,MAAM,YAAY,CAAC;AAEpE,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAM1C;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,GAAiB,EACjB,UAAuB,EAAE;IAEzB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC3C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAEnC,MAAM,eAAe,GAAG,QAA2B,CAAC;IACpD,eAAe,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,eAAe,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACnD,OAAO,eAAe,CAAC;AACzB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAAC,CAAqB;IAChD,MAAM,aAAa,GAAG,CAAC,CAAC,sBAAsB,CAAC,CAAC;IAChD,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IAClC,MAAM,SAAS,GAAG,aAAa,CAAC,IAAI,EAAE,CAAC;IACvC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC3B,OAAO,SAAmB,CAAC;AAC7B,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,uBAAuB,CACrC,OAA4B,EAC5B,CAAqB,EACrB,cAAc,GAAG,EAAE;IAEnB,MAAM,cAAc,GAAG,CAAC,CAAC,GAAG,cAAc,6BAA6B,CAAC,CAAC;IACzE,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IACnC,MAAM,SAAS,GAAG,cAAc,CAAC,GAAG,EAAE,CAAC;IACvC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC3B,OAAO,CAAC,YAAY,GAAG,SAAS,CAAC;IACjC,OAAO,SAAmB,CAAC;AAC7B,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,sCAAsC,CACpD,OAA4B,EAC5B,CAAqB,EACrB,cAAsB;IAEtB,MAAM,MAAM,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC;IACjC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC3B,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC/C,MAAM,CAAC,OAAO,CAAC,CAAC;IAChB,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,MAAM,cAAc,GAAG,MAAM,CAAC,4BAA4B,CAAC,CAAC;IAC5D,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IACnC,MAAM,SAAS,GAAG,cAAc,CAAC,GAAG,EAAE,CAAC;IACvC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC3B,OAAO,CAAC,YAAY,GAAG,SAAS,CAAC;IACjC,OAAO,SAAmB,CAAC;AAC7B,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,uBAAuB,CACrC,OAA4B,EAC5B,CAAqB,EACrB,cAAc,GAAG,EAAE;IAEnB,MAAM,cAAc,GAAG,CAAC,CAAC,GAAG,cAAc,6BAA6B,CAAC,CAAC;IACzE,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IACnC,MAAM,SAAS,GAAG,cAAc,CAAC,GAAG,EAAE,CAAC;IACvC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC3B,OAAO,CAAC,YAAY,GAAG,SAAS,CAAC;IACjC,OAAO,SAAmB,CAAC;AAC7B,CAAC;AAQD;;GAEG;AACH,MAAM,UAAU,OAAO,CAAC,IAAU;IAChC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAC9B,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAChC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAChC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,uBAAuB,CAAC,GAAW;IACjD,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IACpD,MAAM,CAAC,KAAK,CAAC,CAAC;IACd,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACtB,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,yBAAyB,CAAC,GAAW;IACnD,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IACtD,MAAM,CAAC,KAAK,CAAC,CAAC;IACd,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACtB,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,mBAA2B,EAC3B,OAA+B,EAC/B,MAAwB,EACxB,WAAwD,IAAI;IAE5D,MAAM,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAC5F,MAAM,KAAK,GAAG,qBAAqB,CAAC,mCAAmC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC/E,MAAM,SAAS,GAAG,qBAAqB,CAAC,mCAAmC,CAAC,CAAC,GAAG,EAAE,CAAC;IACnF,MAAM,mBAAmB,GAAG,qBAAqB,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5F,MAAM,mBAAmB,GAAG,qBAAqB,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAE5F,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC;IAClC,MAAM,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC;IAEtC,2GAA2G;IAC3G,IAAI,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC9C,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,SAAS,CAAC;QAChC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED,8EAA8E;IAC9E,4EAA4E;IAC5E,MAAM,WAAW,GAA2B,EAAE,CAAC;IAC/C,IAAI,QAAQ,EAAE,CAAC;QACb,IAAI,mBAAmB,EAAE,CAAC;YACxB,WAAW,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC9D,CAAC;aAAM,IAAI,mBAAmB,EAAE,CAAC;YAC/B,WAAW,CAAC,mBAAmB,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC1D,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC,mBAAmB,EAAE;QAChC,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,EAAE,cAAc,EAAE,mCAAmC,EAAE;QAChE,IAAI,EAAE,IAAI,eAAe,CAAC;YACxB,YAAY,EAAE,SAAS;YACvB,QAAQ,EAAE,MAAM;YAChB,YAAY,EAAE,KAAK;YACnB,GAAG,WAAW;YACd,GAAG,OAAO;SACX,CAAC,CAAC,QAAQ,EAAE;KACd,CAAC,CAAC;AACL,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,CAAqB,EAAE,IAAY,EAAE,cAAc,GAAG,CAAC;IACjF,MAAM,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAC5C,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAC7D,CAAC;IACF,IAAI,MAAM,CAAC,MAAM,KAAK,cAAc,EAAE,CAAC;QACrC,OAAO,CAAC,KAAK,CAAC,YAAY,cAAc,GAAG,EAAE,IAAI,CAAC,CAAC;QACnD,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetch, { type RequestInit, type Response } from 'node-fetch';\n\nimport { config } from '../lib/config.js';\n\ninterface CheerioResponse extends Response {\n  $: cheerio.CheerioAPI;\n}\n\n/**\n * A wrapper around node-fetch that provides a few features:\n *\n * - Automatic parsing with cheerio\n * - A `form` option akin to that from the `request` library\n *\n * If desired, you can set cookies via the `cookie` header:\n * ```\n * options.headers = {cookie: 'pl2_access_as_administrator=active'};\n * ```\n */\nexport async function fetchCheerio(\n  url: string | URL,\n  options: RequestInit = {},\n): Promise<CheerioResponse> {\n  const response = await fetch(url, options);\n  const text = await response.text();\n\n  const cheerioResponse = response as CheerioResponse;\n  cheerioResponse.$ = cheerio.load(text);\n  cheerioResponse.text = () => Promise.resolve(text);\n  return cheerioResponse;\n}\n\n/**\n * Gets the test CSRF token from the page.\n */\nexport function getCSRFToken($: cheerio.CheerioAPI): string {\n  const csrfTokenSpan = $('span#test_csrf_token');\n  assert.lengthOf(csrfTokenSpan, 1);\n  const csrfToken = csrfTokenSpan.text();\n  assert.isString(csrfToken);\n  return csrfToken as string;\n}\n\n/**\n * Utility function that extracts a CSRF token from a `__csrf_token` input\n * that is a descendent of the `parentSelector`, if one is specified.\n * The token will also be persisted to `context.__csrf_token`.\n */\nexport function extractAndSaveCSRFToken(\n  context: Record<string, any>,\n  $: cheerio.CheerioAPI,\n  parentSelector = '',\n): string {\n  const csrfTokenInput = $(`${parentSelector} input[name=\"__csrf_token\"]`);\n  assert.lengthOf(csrfTokenInput, 1);\n  const csrfToken = csrfTokenInput.val();\n  assert.isString(csrfToken);\n  context.__csrf_token = csrfToken;\n  return csrfToken as string;\n}\n\n/**\n * Utility function that extracts a CSRF token from a `__csrf_token` input\n * that is inside the `data-bs-content` attribute of the parentSelector.\n * The token will also be persisted to `context.__csrf_token`.\n */\nexport function extractAndSaveCSRFTokenFromDataContent(\n  context: Record<string, any>,\n  $: cheerio.CheerioAPI,\n  parentSelector: string,\n): string {\n  const parent = $(parentSelector);\n  assert.lengthOf(parent, 1);\n  const content = parent.attr('data-bs-content');\n  assert(content);\n  const inner$ = cheerio.load(content);\n  const csrfTokenInput = inner$('input[name=\"__csrf_token\"]');\n  assert.lengthOf(csrfTokenInput, 1);\n  const csrfToken = csrfTokenInput.val();\n  assert.isString(csrfToken);\n  context.__csrf_token = csrfToken;\n  return csrfToken as string;\n}\n\n/**\n * Utility function that extracts a variant ID from a `__variant_id` input\n * that is a descendent of the `parentSelector`, if one is specified.\n * The token will also be persisted to `context.__variant_id`.\n */\nexport function extractAndSaveVariantId(\n  context: Record<string, any>,\n  $: cheerio.CheerioAPI,\n  parentSelector = '',\n): string {\n  const variantIdInput = $(`${parentSelector} input[name=\"__variant_id\"]`);\n  assert.lengthOf(variantIdInput, 1);\n  const variantId = variantIdInput.val();\n  assert.isString(variantId);\n  context.__variant_id = variantId;\n  return variantId as string;\n}\n\nexport interface User {\n  authUid: string | null;\n  authName: string | null;\n  authUin: string | null;\n}\n\n/**\n * Set the current user in the config.\n */\nexport function setUser(user: User): void {\n  config.authUid = user.authUid;\n  config.authName = user.authName;\n  config.authUin = user.authUin;\n}\n\n/**\n * Get instance question id from URL params.\n */\nexport function parseInstanceQuestionId(url: string): number {\n  const match = url.match(/instance_question\\/(\\d+)/);\n  assert(match);\n  const iqId = parseInt(match[1]);\n  assert.isNumber(iqId);\n  return iqId;\n}\n\n/**\n * Get assessment instance id from URL params.\n */\nexport function parseAssessmentInstanceId(url: string): number {\n  const match = url.match(/assessment_instance\\/(\\d+)/);\n  assert(match);\n  const iqId = parseInt(match[1]);\n  assert.isNumber(iqId);\n  return iqId;\n}\n\n/**\n * Acts as 'save' or 'save and grade' button click on student instance question page.\n *\n * @param instanceQuestionUrl The instance question url the student is answering the question on.\n * @param payload JSON data structure type formed on the basis of the question\n * @param action The action to take\n * @param fileData File data to submit to the question\n */\nexport async function saveOrGrade(\n  instanceQuestionUrl: string,\n  payload: Record<string, string>,\n  action: 'save' | 'grade',\n  fileData: { name: string; contents: string }[] | null = null,\n): Promise<Response> {\n  const $instanceQuestionPage = cheerio.load(await (await fetch(instanceQuestionUrl)).text());\n  const token = $instanceQuestionPage('form > input[name=\"__csrf_token\"]').val();\n  const variantId = $instanceQuestionPage('form > input[name=\"__variant_id\"]').val();\n  const fileUploadInputName = $instanceQuestionPage('input[name^=_file_upload]').attr('name');\n  const fileEditorInputName = $instanceQuestionPage('input[name^=_file_editor]').attr('name');\n\n  assert(typeof token === 'string');\n  assert(typeof variantId === 'string');\n\n  // handles case where __variant_id should exist inside postData on only some instance questions submissions\n  if (payload && payload.postData) {\n    const postData = JSON.parse(payload.postData);\n    postData.variant.id = variantId;\n    payload.postData = JSON.stringify(postData);\n  }\n\n  // Hacky: if this question is using `pl-file-editor` and not `pl-file-upload`,\n  // assume a single file and massage `fileData` to match the expected format.\n  const fileDataRaw: Record<string, string> = {};\n  if (fileData) {\n    if (fileUploadInputName) {\n      fileDataRaw[fileUploadInputName] = JSON.stringify(fileData);\n    } else if (fileEditorInputName) {\n      fileDataRaw[fileEditorInputName] = fileData[0].contents;\n    }\n  }\n\n  return fetch(instanceQuestionUrl, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n    body: new URLSearchParams({\n      __variant_id: variantId,\n      __action: action,\n      __csrf_token: token,\n      ...fileDataRaw,\n      ...payload,\n    }).toString(),\n  });\n}\n\n/**\n * Asserts that an alert exists with a given text. Normalizes the text of the\n * alert before comparing with the expected value.\n */\nexport function assertAlert($: cheerio.CheerioAPI, text: string, expectedLength = 1) {\n  const alerts = $('.alert').filter((_, elem) =>\n    $(elem).text().trim().replaceAll(/\\s+/g, ' ').includes(text),\n  );\n  if (alerts.length !== expectedLength) {\n    console.error(`Expected ${expectedLength}:`, text);\n    console.error('Actual:', $('.alert').text());\n  }\n  assert.lengthOf(alerts, expectedLength);\n}\n"]}