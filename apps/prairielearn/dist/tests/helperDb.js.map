{"version":3,"file":"helperDb.js","sourceRoot":"","sources":["../../src/tests/helperDb.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAgB,MAAM,OAAO,CAAC;AACrC,OAAO,EAAE,MAAM,IAAI,CAAC;AAEpB,OAAO,EACL,sBAAsB,EACtB,qBAAqB,EACrB,IAAI,IAAI,cAAc,EACtB,qBAAqB,GACtB,MAAM,0BAA0B,CAAC;AAClC,OAAO,KAAK,UAAU,MAAM,2BAA2B,CAAC;AACxD,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,KAAK,MAAM,MAAM,oBAAoB,CAAC;AAE7C,MAAM,aAAa,GAAG,UAAU,CAAC;AACjC,MAAM,aAAa,GAAG,WAAW,CAAC;AAClC,MAAM,+BAA+B,GAAG,wCAAwC,CAAC;AAEjF,MAAM,iBAAiB,GAAG,QAAQ,CAAC;AACnC,MAAM,0BAA0B,GAAG,iBAAiB,CAAC;AAErD,MAAM,iBAAiB,GAAG,KAAK,CAAC,qBAAqB,CAAC;IACpD,IAAI,EAAE,aAAa;IACnB,IAAI,EAAE,aAAa;IACnB,eAAe,EAAE,UAAU;IAC3B,QAAQ,EAAE,iBAAiB;IAC3B,iBAAiB,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;QAClC,wEAAwE;QACxE,+EAA+E;QAC/E,4EAA4E;QAC5E,oBAAoB;QACpB,MAAM,MAAM,CAAC,KAAK,CAChB,+GAA+G,CAChH,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AAEH,KAAK,UAAU,sBAAsB,CAAC,MAAc,EAAE,aAAsB;IAC1E,MAAM,QAAQ,GAAG;QACf,IAAI,EAAE,aAAa;QACnB,QAAQ,EAAE,MAAM;QAChB,IAAI,EAAE,aAAa;QACnB,GAAG,EAAE,EAAE;QACP,iBAAiB,EAAE,KAAK;QACxB,uBAAuB,EAAE,IAAI;KAC9B,CAAC;IACF,SAAS,gBAAgB,CAAC,GAAG;QAC3B,MAAM,GAAG,CAAC;IACZ,CAAC;IACD,MAAM,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IAElD,qEAAqE;IACrE,kBAAkB;IAClB,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IAElD,sFAAsF;IACtF,0EAA0E;IAC1E,qBAAqB,CAAC;QACpB,OAAO,EAAE,cAAc;QACvB,WAAW,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;KAC7E,CAAC,CAAC;IAEH,IAAI,aAAa,EAAE,CAAC;QAClB,MAAM,cAAc,CAClB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,YAAY,CAAC,EAAE,sBAAsB,CAAC,EAC/E,cAAc,CACf,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;IAC/C,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;IAEpB,MAAM,qBAAqB,EAAE,CAAC;IAC9B,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;IACzB,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;AAC3B,CAAC;AAED,KAAK,UAAU,kBAAkB,CAC/B,MAAc,EACd,cAAsB,EACtB,SAAkB;IAElB,MAAM,iBAAiB,CAAC,cAAc,CAAC;QACrC,oBAAoB,EAAE,SAAS;QAC/B,QAAQ,EAAE,MAAM;QAChB,gBAAgB,EAAE,cAAc;QAChC,aAAa,EAAE,IAAI;QACnB,OAAO,EAAE,GAAG,EAAE,CAAC,sBAAsB,CAAC,MAAM,EAAE,KAAK,CAAC;KACrD,CAAC,CAAC;AACL,CAAC;AAED,KAAK,UAAU,QAAQ;IACrB,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;IACzB,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;AAC3B,CAAC;AAED,KAAK,UAAU,cAAc,CAAC,MAAc;IAC1C,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;IAC9D,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;IACvB,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAC/B,uEAAuE,MAAM,KAAK,CACnF,CAAC;IACF,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAC3C,MAAM,MAAM,CAAC,GAAG,EAAE,CAAC;IACnB,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,KAAK,UAAU,cAAc;IAC3B,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,0BAA0B,CAAC,CAAC;IACxE,MAAM,MAAM,GAAG,+BAA+B,EAAE,CAAC;IACjD,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,MAAM,cAAc,EAAE,CAAC;IACzB,CAAC;IACD,MAAM,kBAAkB,CAAC,MAAM,EAAE,0BAA0B,EAAE,IAAI,CAAC,CAAC;IAEnE,4EAA4E;IAC5E,qEAAqE;IACrE,MAAM,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;QAC/D,MAAM,GAAG,CAAC;IACZ,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,MAAM;IAC1B,qEAAqE;IACrE,8DAA8D;IAC9D,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;IACtB,MAAM,cAAc,EAAE,CAAC;AACzB,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,qEAAqE;IACrE,8DAA8D;IAC9D,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;IACtB,MAAM,cAAc,EAAE,CAAC;IACvB,MAAM,QAAQ,EAAE,CAAC;AACnB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,KAAK;IACzB,qEAAqE;IACrE,8DAA8D;IAC9D,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;IACtB,MAAM,QAAQ,EAAE,CAAC;IACjB,MAAM,iBAAiB,CAAC,YAAY,EAAE,CAAC;AACzC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,cAAc;IAClC,MAAM,iBAAiB,CAAC,cAAc,CAAC;QACrC,oBAAoB,EAAE,IAAI;QAC1B,QAAQ,EAAE,0BAA0B;QACpC,aAAa,EAAE,KAAK;QACpB,OAAO,EAAE,GAAG,EAAE,CAAC,sBAAsB,CAAC,0BAA0B,EAAE,IAAI,CAAC;KACxE,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY;IAChC,MAAM,QAAQ,EAAE,CAAC;IACjB,MAAM,iBAAiB,CAAC,YAAY,CAAC;QACnC,QAAQ,EAAE,0BAA0B;QACpC,6DAA6D;QAC7D,KAAK,EAAE,IAAI;KACZ,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa;IACjC,MAAM,iBAAiB,CAAC,aAAa,EAAE,CAAC;AAC1C,CAAC;AAED,MAAM,UAAU,+BAA+B;IAC7C,OAAO,iBAAiB,CAAC,oCAAoC,EAAE,CAAC;AAClE,CAAC;AAED,MAAM,wBAAyB,SAAQ,KAAK;IAC1C;QACE,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,0BAA0B,CAAC;IACzC,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAAC,EAAuB;IACvE,MAAM,KAAK;SACR,qBAAqB,CAAC,KAAK,IAAI,EAAE;QAChC,MAAM,EAAE,EAAE,CAAC;QACX,MAAM,IAAI,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QACb,IAAI,GAAG,YAAY,wBAAwB,EAAE,CAAC;YAC5C,OAAO;QACT,CAAC;QACD,MAAM,GAAG,CAAC;IACZ,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import * as path from 'path';\n\nimport { type Context } from 'mocha';\nimport pg from 'pg';\n\nimport {\n  SCHEMA_MIGRATIONS_PATH,\n  initBatchedMigrations,\n  init as initMigrations,\n  stopBatchedMigrations,\n} from '@prairielearn/migrations';\nimport * as namedLocks from '@prairielearn/named-locks';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as sprocs from '../sprocs/index.js';\n\nconst POSTGRES_USER = 'postgres';\nconst POSTGRES_HOST = 'localhost';\nconst POSTGRES_INIT_CONNECTION_STRING = 'postgres://postgres@localhost/postgres';\n\nconst POSTGRES_DATABASE = 'pltest';\nconst POSTGRES_DATABASE_TEMPLATE = 'pltest_template';\n\nconst postgresTestUtils = sqldb.makePostgresTestUtils({\n  user: POSTGRES_USER,\n  host: POSTGRES_HOST,\n  defaultDatabase: 'postgres',\n  database: POSTGRES_DATABASE,\n  prepareAfterReset: async (client) => {\n    // This is the sole piece of database state that's actually created in a\n    // migration (`153_institutions__create`) - when we TRUNCATE the `institutions`\n    // table when resetting the database, we lose the default institution, so we\n    // add it back here.\n    await client.query(\n      \"INSERT INTO institutions (id, long_name, short_name) VALUES (1, 'Default', 'Default') ON CONFLICT DO NOTHING;\",\n    );\n  },\n});\n\nasync function runMigrationsAndSprocs(dbName: string, runMigrations: boolean): Promise<void> {\n  const pgConfig = {\n    user: POSTGRES_USER,\n    database: dbName,\n    host: POSTGRES_HOST,\n    max: 10,\n    idleTimeoutMillis: 30000,\n    errorOnUnusedParameters: true,\n  };\n  function idleErrorHandler(err) {\n    throw err;\n  }\n  await sqldb.initAsync(pgConfig, idleErrorHandler);\n\n  // We have to do this here so that `migrations.init` can successfully\n  // acquire a lock.\n  await namedLocks.init(pgConfig, idleErrorHandler);\n\n  // Some migrations will call `enqueueBatchedMigration` and `finalizeBatchedMigration`,\n  // so we need to make sure the batched migration machinery is initialized.\n  initBatchedMigrations({\n    project: 'prairielearn',\n    directories: [path.resolve(import.meta.dirname, '..', 'batched-migrations')],\n  });\n\n  if (runMigrations) {\n    await initMigrations(\n      [path.resolve(import.meta.dirname, '..', 'migrations'), SCHEMA_MIGRATIONS_PATH],\n      'prairielearn',\n    );\n  }\n\n  await sqldb.setRandomSearchSchemaAsync('test');\n  await sprocs.init();\n\n  await stopBatchedMigrations();\n  await namedLocks.close();\n  await sqldb.closeAsync();\n}\n\nasync function createFromTemplate(\n  dbName: string,\n  dbTemplateName: string,\n  dropFirst: boolean,\n): Promise<void> {\n  await postgresTestUtils.createDatabase({\n    dropExistingDatabase: dropFirst,\n    database: dbName,\n    templateDatabase: dbTemplateName,\n    configurePool: true,\n    prepare: () => runMigrationsAndSprocs(dbName, false),\n  });\n}\n\nasync function closeSql(): Promise<void> {\n  await namedLocks.close();\n  await sqldb.closeAsync();\n}\n\nasync function databaseExists(dbName: string): Promise<boolean> {\n  const client = new pg.Client(POSTGRES_INIT_CONNECTION_STRING);\n  await client.connect();\n  const result = await client.query(\n    `SELECT exists(SELECT * FROM pg_catalog.pg_database WHERE datname = '${dbName}');`,\n  );\n  const existsResult = result.rows[0].exists;\n  await client.end();\n  return existsResult;\n}\n\nasync function setupDatabases(): Promise<void> {\n  const templateExists = await databaseExists(POSTGRES_DATABASE_TEMPLATE);\n  const dbName = getDatabaseNameForCurrentWorker();\n  if (!templateExists) {\n    await createTemplate();\n  }\n  await createFromTemplate(dbName, POSTGRES_DATABASE_TEMPLATE, true);\n\n  // Ideally this would happen only over in `helperServer`, but we need to use\n  // the same database details, so this is a convenient place to do it.\n  await namedLocks.init(postgresTestUtils.getPoolConfig(), (err) => {\n    throw err;\n  });\n}\n\nexport async function before(this: Context): Promise<void> {\n  // long timeout because DROP DATABASE might take a long time to error\n  // if other processes have an open connection to that database\n  this.timeout?.(20000);\n  await setupDatabases();\n}\n\n/**\n * This version will only (re)create the database with migrations; it will\n * then close the connection in sqldb. This is necessary for database\n * schema verification, where databaseDiff will set up a connection to the\n * desired database.\n */\nexport async function beforeOnlyCreate(this: Context): Promise<void> {\n  // long timeout because DROP DATABASE might take a long time to error\n  // if other processes have an open connection to that database\n  this.timeout?.(20000);\n  await setupDatabases();\n  await closeSql();\n}\n\nexport async function after(this: Context): Promise<void> {\n  // long timeout because DROP DATABASE might take a long time to error\n  // if other processes have an open connection to that database\n  this.timeout?.(20000);\n  await closeSql();\n  await postgresTestUtils.dropDatabase();\n}\n\nexport async function createTemplate(): Promise<void> {\n  await postgresTestUtils.createDatabase({\n    dropExistingDatabase: true,\n    database: POSTGRES_DATABASE_TEMPLATE,\n    configurePool: false,\n    prepare: () => runMigrationsAndSprocs(POSTGRES_DATABASE_TEMPLATE, true),\n  });\n}\n\nexport async function dropTemplate(): Promise<void> {\n  await closeSql();\n  await postgresTestUtils.dropDatabase({\n    database: POSTGRES_DATABASE_TEMPLATE,\n    // Always drop the template regardless of PL_KEEP_TEST_DB env\n    force: true,\n  });\n}\n\nexport async function resetDatabase(): Promise<void> {\n  await postgresTestUtils.resetDatabase();\n}\n\nexport function getDatabaseNameForCurrentWorker(): string {\n  return postgresTestUtils.getDatabaseNameForCurrentMochaWorker();\n}\n\nclass RollbackTransactionError extends Error {\n  constructor() {\n    super('Rollback transaction');\n    this.name = 'RollbackTransactionError';\n  }\n}\n\n/**\n * Runs the provided function in the context of a transaction, then rolls the\n * transaction back after the function completes.\n *\n * Note that this relies on AsyncLocalStorage to propagate the transaction.\n * The current transaction will not be propagated across network calls, so\n * use this carefully.\n */\nexport async function runInTransactionAndRollback(fn: () => Promise<void>): Promise<void> {\n  await sqldb\n    .runInTransactionAsync(async () => {\n      await fn();\n      throw new RollbackTransactionError();\n    })\n    .catch((err) => {\n      if (err instanceof RollbackTransactionError) {\n        return;\n      }\n      throw err;\n    });\n}\n"]}