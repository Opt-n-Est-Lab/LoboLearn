{"version":3,"file":"helperQuestion.js","sourceRoot":"","sources":["../../src/tests/helperQuestion.ts"],"names":[],"mappings":"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","sourcesContent":["import { setTimeout as sleep } from 'timers/promises';\n\nimport { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetch, { FormData } from 'node-fetch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nexport function waitForJobSequence(locals: Record<string, any>) {\n  describe('The job sequence', function () {\n    it('should have an id', async function () {\n      const result = await sqldb.queryOneRowAsync(sql.select_last_job_sequence, []);\n      locals.job_sequence_id = result.rows[0].id;\n    });\n    it('should be successful', async function () {\n      do {\n        await sleep(10);\n        const result = await sqldb.queryOneRowAsync(sql.select_job_sequence, {\n          job_sequence_id: locals.job_sequence_id,\n        });\n        locals.job_sequence = result.rows[0];\n        assert(locals.job_sequence);\n      } while (locals.job_sequence.status === 'Running');\n    });\n    it('should be successful', async () => {\n      assert(locals.job_sequence);\n      if (locals.job_sequence.status !== 'Success') {\n        console.log(locals.job_sequence);\n        const params = { job_sequence_id: locals.job_sequence_id };\n        const result = await sqldb.queryAsync(sql.select_jobs, params);\n        console.log(result.rows);\n      }\n      assert.equal(locals.job_sequence.status, 'Success');\n    });\n  });\n}\n\nexport function getInstanceQuestion(locals: Record<string, any>) {\n  describe('GET to instance_question URL', function () {\n    it('should load successfully', async function () {\n      assert(locals.question);\n      const questionUrl =\n        locals.questionBaseUrl + '/' + locals.question.id + (locals.questionPreviewTabUrl || '');\n      const response = await fetch(questionUrl);\n      assert.equal(response.status, 200);\n      const page = await response.text();\n      locals.$ = cheerio.load(page);\n    });\n    it('should contain parsable question data if Calculation', function () {\n      if (locals.question?.type !== 'Calculation') return;\n      assert(locals.$);\n      const elemList = locals.$('.question-data');\n      assert.lengthOf(elemList, 1);\n      assert(elemList.text());\n      locals.questionData = JSON.parse(\n        decodeURIComponent(Buffer.from(elemList.text(), 'base64').toString()),\n      );\n    });\n    it('should have a variant_id in the questionData if Calculation', function () {\n      if (locals.question?.type !== 'Calculation') return;\n      assert.nestedProperty(locals.questionData, 'variant.id');\n      locals.variant_id = locals.questionData?.variant.id;\n    });\n    it('should have a variant_id input if Freeform with grade or save buttons', function () {\n      if (locals.question?.type !== 'Freeform') return;\n      if (\n        !locals.shouldHaveButtons?.includes('grade') &&\n        !locals.shouldHaveButtons?.includes('save')\n      ) {\n        return;\n      }\n      assert(locals.$);\n      const elemList = locals.$('.question-form input[name=\"__variant_id\"]');\n      assert.lengthOf(elemList, 1);\n      assert.nestedProperty(elemList[0], 'attribs.value');\n      locals.variant_id = elemList[0].attribs.value;\n    });\n    it('should have the variant in the DB if has grade or save button', async function () {\n      if (\n        !locals.shouldHaveButtons?.includes('grade') &&\n        !locals.shouldHaveButtons?.includes('save')\n      ) {\n        return;\n      }\n      const result = await sqldb.queryOneRowAsync(sql.select_variant, {\n        variant_id: locals.variant_id,\n      });\n      locals.variant = result.rows[0];\n    });\n    it('should have the correct variant.instance_question.id if has grade or save button and is student page', function () {\n      if (!locals.isStudentPage) return;\n      if (\n        !locals.shouldHaveButtons?.includes('grade') &&\n        !locals.shouldHaveButtons?.includes('save')\n      ) {\n        return;\n      }\n      assert.equal(locals.variant?.instance_question_id, locals.question?.id);\n    });\n    it('should have the correct variant.question.id if has grade or save button and is instructor page', function () {\n      if (locals.isStudentPage) return;\n      if (\n        !locals.shouldHaveButtons?.includes('grade') &&\n        !locals.shouldHaveButtons?.includes('save')\n      ) {\n        return;\n      }\n      assert.equal(locals.variant?.question_id, locals.question?.id);\n    });\n\n    it('should not be a broken variant if Freeform with grade or save button', function () {\n      if (locals.question?.type !== 'Freeform') return;\n      if (\n        !locals.shouldHaveButtons?.includes('grade') &&\n        !locals.shouldHaveButtons?.includes('save')\n      ) {\n        return;\n      }\n      assert.equal(locals.variant?.broken, false);\n      assert.isNull(locals.variant?.broken_at);\n    });\n\n    it('should have a CSRF token if has grade or save button', function () {\n      if (\n        !locals.shouldHaveButtons?.includes('grade') &&\n        !locals.shouldHaveButtons?.includes('save')\n      ) {\n        return;\n      }\n      assert(locals.$);\n      const elemList = locals.$('.question-form input[name=\"__csrf_token\"]');\n      assert.lengthOf(elemList, 1);\n      assert.nestedProperty(elemList[0], 'attribs.value');\n      locals.__csrf_token = elemList[0].attribs.value;\n      assert.isString(locals.__csrf_token);\n    });\n    it('should have or not have grade button', function () {\n      assert(locals.$);\n      const elemList =\n        locals.question?.type === 'Freeform'\n          ? locals.$('button[name=\"__action\"][value=\"grade\"]')\n          : locals.$('button.question-grade');\n      if (locals.shouldHaveButtons?.includes('grade')) {\n        assert.lengthOf(elemList, 1);\n      } else {\n        assert.lengthOf(elemList, 0);\n      }\n    });\n    it('should have or not have save button', function () {\n      assert(locals.$);\n      const elemList =\n        locals.question?.type === 'Freeform'\n          ? locals.$('button[name=\"__action\"][value=\"save\"]')\n          : locals.$('button.question-save');\n      if (locals.shouldHaveButtons?.includes('save')) {\n        assert.lengthOf(elemList, 1);\n      } else {\n        assert.lengthOf(elemList, 0);\n      }\n    });\n    it('should have or not have newVariant button', function () {\n      assert(locals.$);\n      const elemList = locals.$('a:contains(New variant)');\n      if (locals.shouldHaveButtons?.includes('newVariant')) {\n        assert.lengthOf(elemList, 1);\n      } else {\n        assert.lengthOf(elemList, 0);\n      }\n    });\n    it('should have or not have tryAgain button', function () {\n      assert(locals.$);\n      const elemList = locals.$('a:contains(Try a new variant)');\n      if (locals.shouldHaveButtons?.includes('tryAgain')) {\n        assert.lengthOf(elemList, 1);\n      } else {\n        assert.lengthOf(elemList, 0);\n      }\n    });\n  });\n}\n\nexport function postInstanceQuestion(locals: Record<string, any>) {\n  describe('POST to instance_question URL', function () {\n    it('should generate the submittedAnswer', function () {\n      assert(locals.getSubmittedAnswer);\n      locals.submittedAnswer = locals.getSubmittedAnswer(locals.variant);\n    });\n    it('should load successfully', async function () {\n      let form;\n      if (locals.question?.type === 'Calculation') {\n        form = {\n          __action: locals.postAction,\n          __csrf_token: locals.__csrf_token,\n          postData: JSON.stringify({\n            variant: locals.variant,\n            submittedAnswer: locals.submittedAnswer,\n          }),\n        };\n      } else if (locals.question?.type === 'Freeform') {\n        form = {\n          __action: locals.postAction,\n          __csrf_token: locals.__csrf_token,\n          __variant_id: locals.variant?.id,\n        };\n        Object.assign(form, locals.submittedAnswer);\n      } else {\n        assert.fail('bad question.type:' + locals.question?.type);\n      }\n      const questionUrl =\n        locals.questionBaseUrl + '/' + locals.question.id + (locals.questionPreviewTabUrl || '');\n\n      locals.preEndTime = Date.now();\n      const response = await fetch(questionUrl, {\n        method: 'POST',\n        body: new URLSearchParams(form),\n      });\n      locals.postEndTime = Date.now();\n      assert.equal(response.status, 200);\n      const page = await response.text();\n      locals.$ = cheerio.load(page);\n    });\n    it('should create a submission', async function () {\n      const result = await sqldb.queryAsync(sql.select_last_submission, {});\n      assert.equal(result.rowCount, 1);\n      locals.submission = result.rows[0];\n    });\n    it('should have the correct submission.variant_id', function () {\n      assert.equal(locals.submission?.variant_id, locals.variant?.id);\n    });\n    it('should not be broken if Freeform', function () {\n      if (locals.question?.type === 'Freeform') {\n        assert.equal(locals.submission?.broken, false);\n      }\n    });\n    it('should select the assessment_instance duration from the DB if student page', async function () {\n      if (locals.isStudentPage) {\n        const result = await sqldb.queryAsync(sql.select_assessment_instance_durations, []);\n        assert.equal(result.rowCount, 1);\n        locals.assessment_instance_duration = result.rows[0].duration;\n      }\n    });\n    it('should have the correct assessment_instance duration if student page', function () {\n      if (locals.isStudentPage) {\n        assert(locals.preEndTime);\n        assert(locals.postEndTime);\n        assert(locals.preStartTime);\n        assert(locals.postStartTime);\n        assert(locals.assessment_instance_duration);\n        const min_duration = (locals.preEndTime - locals.postStartTime) / 1000;\n        const max_duration = (locals.postEndTime - locals.preStartTime) / 1000;\n        assert.isAbove(locals.assessment_instance_duration, min_duration);\n        assert.isBelow(locals.assessment_instance_duration, max_duration);\n      }\n    });\n  });\n}\n\nexport function postInstanceQuestionAndFail(locals: Record<string, any>, expectedStatus: number) {\n  describe('POST to instance_question URL', function () {\n    it('should generate the submittedAnswer', function () {\n      assert(locals.getSubmittedAnswer);\n      locals.submittedAnswer = locals.getSubmittedAnswer(locals.variant);\n    });\n    it('should error', async function () {\n      let form;\n      if (locals.question?.type === 'Calculation') {\n        form = {\n          __action: locals.postAction,\n          __csrf_token: locals.__csrf_token,\n          postData: JSON.stringify({\n            variant: locals.variant,\n            submittedAnswer: locals.submittedAnswer,\n          }),\n        };\n      } else if (locals.question?.type === 'Freeform') {\n        form = {\n          __action: locals.postAction,\n          __csrf_token: locals.__csrf_token,\n          __variant_id: locals.variant?.id,\n        };\n        Object.assign(form, locals.submittedAnswer);\n      } else {\n        assert.fail('bad question.type:' + locals.question?.type);\n      }\n      const questionUrl =\n        locals.questionBaseUrl + '/' + locals.question.id + (locals.questionPreviewTabUrl || '');\n      const response = await fetch(questionUrl, {\n        method: 'POST',\n        body: new URLSearchParams(form),\n      });\n      assert.equal(response.status, expectedStatus);\n    });\n  });\n}\n\nexport function checkSubmissionScore(locals: Record<string, any>) {\n  describe('check submission score', function () {\n    it('should have the submission', async function () {\n      const result = await sqldb.queryOneRowAsync(sql.select_last_submission_for_question, {\n        question_id: locals.question?.id,\n      });\n      locals.submission = result.rows[0];\n    });\n    it('should be graded with expected score', function () {\n      assert.equal(locals.submission?.score, locals.expectedResult?.submission_score);\n    });\n    it('should be graded with expected correctness', function () {\n      assert.equal(locals.submission?.correct, locals.expectedResult?.submission_correct);\n    });\n  });\n}\n\nexport function checkQuestionScore(locals: Record<string, any>) {\n  describe('check question score', function () {\n    it('should have the submission', async function () {\n      if ('submission_score' in locals.expectedResult) {\n        const result = await sqldb.queryOneRowAsync(\n          sql.select_last_submission_for_instance_question,\n          {\n            instance_question_id: locals.question?.id,\n          },\n        );\n        locals.submission = result.rows[0];\n      }\n    });\n    it('should be graded with expected score', function () {\n      if ('submission_score' in locals.expectedResult) {\n        assert.equal(locals.submission?.score, locals.expectedResult?.submission_score);\n      }\n    });\n    it('should be graded with expected correctness', function () {\n      if ('submission_correct' in locals.expectedResult) {\n        assert.equal(locals.submission?.correct, locals.expectedResult?.submission_correct);\n      }\n    });\n\n    it('should still have the instance_question', async function () {\n      const result = await sqldb.queryOneRowAsync(sql.select_instance_question, {\n        instance_question_id: locals.question?.id,\n      });\n      locals.instance_question = result.rows[0];\n    });\n    it('should have the correct instance_question points', function () {\n      assert(locals.instance_question);\n      assert(locals.expectedResult);\n      assert.approximately(\n        locals.instance_question?.points,\n        locals.expectedResult.instance_question_points,\n        1e-6,\n      );\n    });\n    it('should have the correct instance_question score_perc', function () {\n      assert(locals.instance_question);\n      assert(locals.expectedResult);\n      assert.approximately(\n        locals.instance_question?.score_perc,\n        locals.expectedResult.instance_question_score_perc,\n        1e-6,\n      );\n    });\n    it('should have the correct instance_question auto_points', function () {\n      if (typeof locals.expectedResult?.instance_question_auto_points !== 'undefined') {\n        assert(locals.instance_question);\n        assert.approximately(\n          locals.instance_question?.auto_points,\n          locals.expectedResult.instance_question_auto_points,\n          1e-6,\n        );\n      }\n    });\n    it('should have the correct instance_question manual_points', function () {\n      if (typeof locals.expectedResult?.instance_question_manual_points !== 'undefined') {\n        assert(locals.instance_question);\n        assert.approximately(\n          locals.instance_question?.manual_points,\n          locals.expectedResult.instance_question_manual_points,\n          1e-6,\n        );\n      }\n    });\n  });\n}\n\nexport function checkQuestionStats(locals: Record<string, any>) {\n  describe('check question stats', function () {\n    it('should have the correct stats', function () {\n      Object.keys(locals.expectedResult.instance_question_stats ?? []).forEach((key) => {\n        const expected_value = locals.expectedResult.instance_question_stats[key];\n        assert.isDefined(locals.instance_question?.[key]);\n        if (expected_value === null) {\n          assert.isNull(locals.instance_question?.[key]);\n        } else if (typeof expected_value === 'number') {\n          assert.approximately(locals.instance_question?.[key], expected_value, 1e-6);\n        } else if (Array.isArray(expected_value)) {\n          assert.lengthOf(locals.instance_question?.[key], expected_value.length);\n          expected_value.forEach((item, i) => {\n            if (item == null) {\n              assert.isNull(locals.instance_question?.[key][i]);\n            } else {\n              assert.approximately(item, locals.instance_question?.[key][i], 1e-6);\n            }\n          });\n        }\n      });\n    });\n  });\n}\n\nexport function checkAssessmentScore(locals: Record<string, any>) {\n  describe('check assessment score', function () {\n    it('should still have the assessment_instance', async function () {\n      const result = await sqldb.queryOneRowAsync(sql.select_assessment_instance, {\n        assessment_instance_id: locals.assessment_instance?.id,\n      });\n      locals.assessment_instance = result.rows[0];\n    });\n    it('should have the correct assessment_instance points', function () {\n      assert(locals.assessment_instance);\n      assert(locals.expectedResult);\n      assert.approximately(\n        locals.assessment_instance.points,\n        locals.expectedResult.assessment_instance_points,\n        1e-6,\n      );\n    });\n    it('should have the correct assessment_instance score_perc', function () {\n      assert(locals.assessment_instance);\n      assert(locals.expectedResult);\n      assert.approximately(\n        locals.assessment_instance.score_perc,\n        locals.expectedResult.assessment_instance_score_perc,\n        1e-6,\n      );\n    });\n  });\n}\n\nexport function checkQuestionFeedback(locals: Record<string, any>) {\n  describe('check question feedback', function () {\n    it('should still have question feedback', async function () {\n      const result = await sqldb.queryOneRowAsync(sql.select_question_feedback, {\n        assessment_instance_id: locals.assessment_instance.id,\n        qid: locals.expectedFeedback.qid,\n        submission_id: locals.expectedFeedback.submission_id || null,\n      });\n      locals.question_feedback = result.rows[0];\n    });\n    it('should have the correct feedback', function () {\n      for (const p in locals.expectedFeedback.feedback) {\n        assert.deepEqual(\n          locals.question_feedback?.feedback[p],\n          locals.expectedFeedback.feedback[p],\n        );\n      }\n    });\n  });\n}\n\nexport function regradeAssessment(locals: Record<string, any>) {\n  describe('GET to instructorAssessmentRegrading URL', async function () {\n    it('should succeed', async function () {\n      locals.instructorAssessmentRegradingUrl =\n        locals.courseInstanceBaseUrl +\n        '/instructor/assessment/' +\n        locals.assessment_id +\n        '/regrading';\n      const response = await fetch(locals.instructorAssessmentRegradingUrl);\n      assert.equal(response.status, 200);\n      const page = await response.text();\n      locals.$ = cheerio.load(page);\n    });\n    it('should have a CSRF token', function () {\n      assert(locals.$);\n      const elemList = locals.$('#regrade-all-form input[name=\"__csrf_token\"]');\n      assert.lengthOf(elemList, 1);\n      assert.nestedProperty(elemList[0], 'attribs.value');\n      locals.__csrf_token = elemList[0].attribs.value;\n      assert.isString(locals.__csrf_token);\n    });\n  });\n  describe('POST to instructorAssessmentRegrading URL for regrading', function () {\n    it('should succeed', async function () {\n      assert(locals.instructorAssessmentRegradingUrl);\n      const response = await fetch(locals.instructorAssessmentRegradingUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'regrade_all',\n          __csrf_token: locals.__csrf_token,\n        }),\n      });\n      assert.equal(response.status, 200);\n    });\n  });\n  waitForJobSequence(locals);\n}\n\nexport function uploadInstanceQuestionScores(locals: Record<string, any>) {\n  describe('GET to instructorAssessmentUploads URL', function () {\n    it('should succeed', async function () {\n      locals.instructorAssessmentUploadsUrl =\n        locals.courseInstanceBaseUrl +\n        '/instructor/assessment/' +\n        locals.assessment_id +\n        '/uploads';\n      const response = await fetch(locals.instructorAssessmentUploadsUrl);\n      assert.equal(response.status, 200);\n      const page = await response.text();\n      locals.$ = cheerio.load(page);\n    });\n    it('should have a CSRF token', function () {\n      assert(locals.$);\n      const elemList = locals.$('#upload-instance-question-scores-form input[name=\"__csrf_token\"]');\n      assert.lengthOf(elemList, 1);\n      assert.nestedProperty(elemList[0], 'attribs.value');\n      locals.__csrf_token = elemList[0].attribs.value;\n      assert.isString(locals.__csrf_token);\n    });\n  });\n  describe('POST to instructorAssessmentUploads URL for upload', function () {\n    it('should succeed', async function () {\n      const formData = new FormData();\n      formData.append('__action', 'upload_instance_question_scores');\n      formData.append('__csrf_token', locals.__csrf_token);\n      formData.append('file', new Blob([Buffer.from(locals.csvData)]), 'data.csv');\n      assert(locals.instructorAssessmentUploadsUrl);\n      const response = await fetch(locals.instructorAssessmentUploadsUrl, {\n        method: 'POST',\n        body: formData,\n      });\n      assert.equal(response.status, 200);\n    });\n  });\n  waitForJobSequence(locals);\n}\n\nexport function uploadAssessmentInstanceScores(locals: Record<string, any>) {\n  describe('GET to instructorAssessmentUploads URL', function () {\n    it('should succeed', async function () {\n      locals.instructorAssessmentUploadsUrl =\n        locals.courseInstanceBaseUrl +\n        '/instructor/assessment/' +\n        locals.assessment_id +\n        '/uploads';\n      const response = await fetch(locals.instructorAssessmentUploadsUrl);\n      assert.equal(response.status, 200);\n      const page = await response.text();\n      locals.$ = cheerio.load(page);\n    });\n    it('should have a CSRF token', function () {\n      assert(locals.$);\n      const elemList = locals.$(\n        '#upload-assessment-instance-scores-form input[name=\"__csrf_token\"]',\n      );\n      assert.lengthOf(elemList, 1);\n      assert.nestedProperty(elemList[0], 'attribs.value');\n      locals.__csrf_token = elemList[0].attribs.value;\n      assert.isString(locals.__csrf_token);\n    });\n  });\n  describe('POST to instructorAssessmentUploads URL for upload', function () {\n    it('should succeed', async function () {\n      const formData = new FormData();\n      formData.append('__action', 'upload_assessment_instance_scores');\n      formData.append('__csrf_token', locals.__csrf_token);\n      formData.append('file', new Blob([Buffer.from(locals.csvData)]), 'data.csv');\n      assert(locals.instructorAssessmentUploadsUrl);\n      const response = await fetch(locals.instructorAssessmentUploadsUrl, {\n        method: 'POST',\n        body: formData,\n      });\n      assert.equal(response.status, 200);\n    });\n  });\n  waitForJobSequence(locals);\n}\n\nexport function autoTestQuestion(locals: Record<string, any>, qid: string) {\n  describe('auto-testing question ' + qid, function () {\n    describe('the setup', function () {\n      it('should find the question in the database', async function () {\n        const result = await sqldb.queryZeroOrOneRowAsync(sql.select_question_by_qid, { qid });\n        assert.equal(result.rowCount, 1);\n        locals.question = result.rows[0];\n      });\n      it('should be a Freeform question', function () {\n        assert.equal(locals.question?.type, 'Freeform');\n      });\n      it('should have submission data', function () {\n        locals.shouldHaveButtons = ['grade', 'save', 'newVariant'];\n        locals.postAction = 'grade';\n      });\n    });\n    getInstanceQuestion(locals);\n    describe('the question variant', function () {\n      it('should produce no issues', async function () {\n        const result = await sqldb.queryAsync(sql.select_issues_for_last_variant, []);\n        assert.equal(\n          result.rowCount,\n          0,\n          `found ${result.rowCount} issues (expected zero issues):\\n` +\n            JSON.stringify(result.rows, null, '    '),\n        );\n      });\n    });\n    describe('GET to instructor question settings URL', function () {\n      it('should load successfully', async function () {\n        assert(locals.question);\n        const questionUrl = locals.questionBaseUrl + '/' + locals.question.id + '/settings';\n        const response = await fetch(questionUrl);\n        assert.equal(response.status, 200);\n        const page = await response.text();\n        locals.$ = cheerio.load(page);\n      });\n      it('should have a CSRF token', function () {\n        assert(locals.$);\n        const elemList = locals.$('form[name=\"question-tests-form\"] input[name=\"__csrf_token\"]');\n        assert.lengthOf(elemList, 1);\n        assert.nestedProperty(elemList[0], 'attribs.value');\n        locals.__csrf_token = elemList[0].attribs.value;\n        assert.isString(locals.__csrf_token);\n      });\n    });\n    describe('the test job sequence', function () {\n      it('should start with POST to instructor question settings URL for test_once', async function () {\n        assert(locals.question);\n        assert(locals.__csrf_token);\n        const questionUrl = locals.questionBaseUrl + '/' + locals.question.id + '/settings/test';\n        const response = await fetch(questionUrl, {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'test_once',\n            __csrf_token: locals.__csrf_token,\n          }),\n        });\n        assert.equal(response.status, 200);\n      });\n      it('should have an id', async function () {\n        const result = await sqldb.queryOneRowAsync(sql.select_last_job_sequence, []);\n        locals.job_sequence_id = result.rows[0].id;\n      });\n      it('should complete', async function () {\n        do {\n          await sleep(10);\n          const result = await sqldb.queryOneRowAsync(sql.select_job_sequence, {\n            job_sequence_id: locals.job_sequence_id,\n          });\n          locals.job_sequence = result.rows[0];\n          assert(locals.job_sequence);\n        } while (locals.job_sequence.status === 'Running');\n      });\n      it('should be successful and produce no issues', async function () {\n        assert(locals.job_sequence);\n        const issues = await sqldb.queryAsync(sql.select_issues_for_last_variant, []);\n\n        // To aid in debugging, if the job failed, we'll fetch the logs from\n        // all child jobs and print them out. We'll also log any issues. We\n        // do this before making assertions to ensure that they're printed.\n        if (locals.job_sequence.status !== 'Success') {\n          console.log(locals.job_sequence);\n          const params = { job_sequence_id: locals.job_sequence_id };\n          const result = await sqldb.queryAsync(sql.select_jobs, params);\n          console.log(result.rows);\n        }\n        if (issues.rows.length > 0) {\n          console.log(issues.rows);\n        }\n\n        assert.equal(locals.job_sequence.status, 'Success');\n        assert.lengthOf(issues.rows, 0);\n      });\n    });\n  });\n}\n\nexport async function checkNoIssuesForLastVariantAsync() {\n  const result = await sqldb.queryAsync(sql.select_issues_for_last_variant, []);\n  assert.equal(\n    result.rowCount,\n    0,\n    `found ${result.rowCount} issues (expected zero issues):\\n` +\n      JSON.stringify(result.rows, null, '    '),\n  );\n}\n"]}