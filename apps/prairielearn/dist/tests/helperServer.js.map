{"version":3,"file":"helperServer.js","sourceRoot":"","sources":["../../src/tests/helperServer.ts"],"names":[],"mappings":"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","sourcesContent":["import { setTimeout as sleep } from 'node:timers/promises';\n\nimport { assert } from 'chai';\nimport debugfn from 'debug';\nimport * as tmp from 'tmp-promise';\n\nimport { cache } from '@prairielearn/cache';\nimport * as opentelemetry from '@prairielearn/opentelemetry';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as cron from '../cron/index.js';\nimport * as assets from '../lib/assets.js';\nimport * as codeCaller from '../lib/code-caller/index.js';\nimport { config } from '../lib/config.js';\nimport * as externalGrader from '../lib/externalGrader.js';\nimport * as externalGradingSocket from '../lib/externalGradingSocket.js';\nimport * as load from '../lib/load.js';\nimport { TEST_COURSE_PATH } from '../lib/paths.js';\nimport * as serverJobs from '../lib/server-jobs.js';\nimport * as socketServer from '../lib/socket-server.js';\nimport * as freeformServer from '../question-servers/freeform.js';\nimport * as server from '../server.js';\n\nimport * as helperCourse from './helperCourse.js';\nimport * as helperDb from './helperDb.js';\n\nconst debug = debugfn('prairielearn:helperServer');\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconfig.startServer = false;\n// Pick a unique port based on the Mocha worker ID.\nconfig.serverPort = (3007 + Number.parseInt(process.env.MOCHA_WORKER_ID ?? '0', 10)).toString();\n\nexport function before(courseDir: string | string[] = TEST_COURSE_PATH): () => Promise<void> {\n  return async () => {\n    debug('before()');\n    try {\n      // We (currently) don't ever want tracing to run during tests.\n      await opentelemetry.init({ openTelemetryEnabled: false });\n\n      debug('before(): initializing DB');\n      // pass \"this\" explicitly to enable this.timeout() calls\n      await helperDb.before.call(this);\n\n      debug('before(): create tmp dir for config.filesRoot');\n      const tmpDir = await tmp.dir({ unsafeCleanup: true });\n      config.filesRoot = tmpDir.path;\n\n      debug('before(): initializing cron');\n      await cron.init();\n\n      debug('before(): inserting dev user');\n      await server.insertDevUser();\n\n      debug('before(): sync from disk');\n      if (Array.isArray(courseDir)) {\n        for (const dir of courseDir) {\n          await helperCourse.syncCourse(dir);\n        }\n      } else {\n        await helperCourse.syncCourse(courseDir);\n      }\n\n      debug('before(): set up load estimators');\n      load.initEstimator('request', 1);\n      load.initEstimator('authed_request', 1);\n      load.initEstimator('python', 1);\n\n      debug('before(): initialize code callers');\n      await codeCaller.init();\n      await assets.init();\n\n      debug('before(): start server');\n      const httpServer = await server.startServer();\n\n      debug('before(): initialize socket server');\n      socketServer.init(httpServer);\n\n      debug('before(): initialize cache');\n      await cache.init({\n        type: config.cacheType,\n        keyPrefix: config.cacheKeyPrefix,\n        redisUrl: config.redisUrl,\n      });\n\n      debug('before(): initialize server jobs');\n      serverJobs.init();\n\n      debug('before(): initialize freeform server');\n      await freeformServer.init();\n\n      externalGrader.init();\n      externalGradingSocket.init();\n    } finally {\n      debug('before(): completed');\n    }\n  };\n}\n\nexport async function after(): Promise<void> {\n  debug('after()');\n  // call close()/stop() functions in reverse order to the\n  // start() functions above\n  try {\n    await assets.close();\n\n    debug('after(): finish workers');\n    await codeCaller.finish();\n\n    debug('after(): stop server');\n    await server.stopServer();\n\n    debug('after(): close socket server');\n    await socketServer.close();\n\n    debug('after(): close load estimators');\n    load.close();\n\n    debug('after(): stop cron');\n    await cron.stop();\n\n    debug('after(): close server jobs');\n    await serverJobs.stop();\n\n    debug('after(): close cache');\n    await cache.close();\n\n    debug('after(): finish DB');\n    await helperDb.after.call(this);\n  } finally {\n    debug('after(): complete');\n  }\n}\n\nexport async function waitForJobSequence(job_sequence_id) {\n  let job_sequence;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const result = await sqldb.queryOneRowAsync(sql.select_job_sequence, {\n      job_sequence_id,\n    });\n    job_sequence = result.rows[0];\n    if (job_sequence.status !== 'Running') break;\n    await sleep(10);\n  }\n  return job_sequence;\n}\n\nexport async function waitForJobSequenceStatus(job_sequence_id, status: 'Success' | 'Error') {\n  const job_sequence = await waitForJobSequence(job_sequence_id);\n\n  // In the case of a failure, print more information to aid debugging.\n  if (job_sequence.status !== status) {\n    console.log(job_sequence);\n    const result = await sqldb.queryAsync(sql.select_jobs, { job_sequence_id });\n    console.log(result.rows);\n  }\n\n  assert.equal(job_sequence.status, status);\n}\n\nexport async function waitForJobSequenceSuccess(job_sequence_id) {\n  await waitForJobSequenceStatus(job_sequence_id, 'Success');\n}\n"]}