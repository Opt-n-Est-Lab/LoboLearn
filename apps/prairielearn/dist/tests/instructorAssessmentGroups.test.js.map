{"version":3,"file":"instructorAssessmentGroups.test.js","sourceRoot":"","sources":["../../src/tests/instructorAssessmentGroups.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport fetchCookie from 'fetch-cookie';\nimport { step } from 'mocha-steps';\n\nimport { loadSqlEquiv, queryRow } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { IdSchema, type User } from '../lib/db-types.js';\nimport { generateAndEnrollUsers } from '../models/enrollment.js';\n\nimport {\n  assertAlert,\n  extractAndSaveCSRFToken,\n  fetchCheerio,\n  getCSRFToken,\n} from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\ndescribe('Instructor group controls', () => {\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  const siteUrl = 'http://localhost:' + config.serverPort;\n  const baseUrl = siteUrl + '/pl';\n  const courseInstanceUrl = baseUrl + '/course_instance/1';\n\n  let users: User[] = [];\n  let assessment_id: string;\n  let instructorAssessmentGroupsUrl: string;\n  let group1RowId: string | undefined;\n  let group2RowId: string | undefined;\n\n  step('has group-based homework assessment', async () => {\n    assessment_id = await queryRow(sql.select_group_work_assessment, {}, IdSchema);\n    instructorAssessmentGroupsUrl = `${courseInstanceUrl}/instructor/assessment/${assessment_id}/groups`;\n  });\n\n  step('enroll random users', async () => {\n    users = await generateAndEnrollUsers({ count: 5, course_instance_id: '1' });\n  });\n\n  step('can create a new group', async () => {\n    const getResponse = await fetchCheerio(instructorAssessmentGroupsUrl, {});\n    const csrfToken = extractAndSaveCSRFToken({}, getResponse.$, '#addGroupModal');\n\n    const response = await fetchCheerio(instructorAssessmentGroupsUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __csrf_token: csrfToken,\n        __action: 'add_group',\n        group_name: 'TestGroup',\n        // Add first two users to the group\n        uids: users\n          .slice(0, 2)\n          .map((u) => u.uid)\n          .join(','),\n      }),\n    });\n    assert.equal(response.status, 200);\n    const groupRow = response.$('#usersTable tr:contains(TestGroup)');\n    assert.lengthOf(groupRow, 1);\n    assert.ok(groupRow.is(`:contains(${users[0].uid})`));\n    assert.ok(groupRow.is(`:contains(${users[1].uid})`));\n    group1RowId = groupRow.attr('data-test-group-id');\n  });\n\n  step('cannot create a group with a user already in another group', async () => {\n    const getResponse = await fetchCheerio(instructorAssessmentGroupsUrl, {});\n    const csrfToken = extractAndSaveCSRFToken({}, getResponse.$, '#addGroupModal');\n\n    const response = await fetchCookie(fetchCheerio)(instructorAssessmentGroupsUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __csrf_token: csrfToken,\n        __action: 'add_group',\n        group_name: 'TestGroup2',\n        // Add first two users to the group\n        uids: users\n          .slice(0, 2)\n          .map((u) => u.uid)\n          .join(','),\n      }),\n    });\n    assert.equal(response.status, 200);\n    assertAlert(response.$, 'in another group');\n    assert.lengthOf(response.$('#usersTable td:contains(TestGroup2)'), 0);\n  });\n\n  step('can create a second group', async () => {\n    const getResponse = await fetchCheerio(instructorAssessmentGroupsUrl, {});\n    const csrfToken = extractAndSaveCSRFToken({}, getResponse.$, '#addGroupModal');\n\n    const response = await fetchCheerio(instructorAssessmentGroupsUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __csrf_token: csrfToken,\n        __action: 'add_group',\n        group_name: 'TestGroup2',\n        // Add second two users to the group\n        uids: users\n          .slice(2, 4)\n          .map((u) => u.uid)\n          .join(','),\n      }),\n    });\n    assert.equal(response.status, 200);\n    const groupRow = response.$('#usersTable tr:contains(TestGroup2)');\n    assert.lengthOf(groupRow, 1);\n    assert.ok(groupRow.is(`:contains(${users[2].uid})`));\n    assert.ok(groupRow.is(`:contains(${users[3].uid})`));\n    group2RowId = groupRow.attr('data-test-group-id');\n  });\n\n  step('can create a group with an instructor', async () => {\n    const getResponse = await fetchCheerio(instructorAssessmentGroupsUrl, {});\n    const csrfToken = extractAndSaveCSRFToken({}, getResponse.$, '#addGroupModal');\n\n    const response = await fetchCheerio(instructorAssessmentGroupsUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __csrf_token: csrfToken,\n        __action: 'add_group',\n        group_name: 'TestGroupWithInstructor',\n        // Add instructor to the group\n        uids: 'dev@example.com',\n      }),\n    });\n    assert.equal(response.status, 200);\n    const groupRow = response.$('#usersTable tr:contains(TestGroupWithInstructor)');\n    assert.lengthOf(groupRow, 1);\n    assert.ok(groupRow.is(':contains(\"dev@example.com\")'));\n  });\n\n  step('can add a user to an existing group', async () => {\n    const getResponse = await fetchCheerio(instructorAssessmentGroupsUrl, {});\n\n    // The add member form is dynamically rendered on the client, so we need to\n    // grab the CSRF token from somewhere else instead of getting it from the\n    // actual form.\n    const csrfToken = getCSRFToken(getResponse.$);\n\n    const response = await fetchCookie(fetchCheerio)(instructorAssessmentGroupsUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __csrf_token: csrfToken,\n        __action: 'add_member',\n        group_id: group1RowId || '',\n        // Add final user to the first group\n        add_member_uids: users[4].uid,\n      }),\n    });\n    assert.equal(response.status, 200);\n    assert.lengthOf(response.$('.alert'), 0);\n    assert.lengthOf(response.$(`#usersTable tr:contains(TestGroup):contains(${users[4].uid})`), 1);\n  });\n\n  step('cannot add a user to a group if they are already in another group', async () => {\n    const getResponse = await fetchCheerio(instructorAssessmentGroupsUrl, {});\n\n    // The add member form is dynamically rendered on the client, so we need to\n    // grab the CSRF token from somewhere else instead of getting it from the\n    // actual form.\n    const csrfToken = getCSRFToken(getResponse.$);\n\n    const response = await fetchCookie(fetchCheerio)(instructorAssessmentGroupsUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __csrf_token: csrfToken,\n        __action: 'add_member',\n        group_id: group2RowId || '',\n        // Add final user to the second group\n        add_member_uids: users[4].uid,\n      }),\n    });\n    assert.equal(response.status, 200);\n    assertAlert(response.$, 'in another group');\n    assert.lengthOf(response.$(`#usersTable tr:contains(TestGroup):contains(${users[4].uid})`), 1);\n    assert.lengthOf(response.$(`#usersTable tr:contains(TestGroup2):contains(${users[4].uid})`), 0);\n  });\n});\n"]}