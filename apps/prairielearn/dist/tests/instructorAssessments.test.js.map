{"version":3,"file":"instructorAssessments.test.js","sourceRoot":"","sources":["../../src/tests/instructorAssessments.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport { execa } from 'execa';\nimport fs from 'fs-extra';\nimport { step } from 'mocha-steps';\nimport * as tmp from 'tmp';\n\nimport { loadSqlEquiv, queryAsync } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport { fetchCheerio } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst siteUrl = `http://localhost:${config.serverPort}`;\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst baseDir = tmp.dirSync().name;\n\nconst courseOriginDir = path.join(baseDir, 'courseOrigin');\nconst courseLiveDir = path.join(baseDir, 'courseLive');\nconst assessmentLiveDir = path.join(courseLiveDir, 'courseInstances', 'Fa18', 'assessments');\n\nconst courseDevDir = path.join(baseDir, 'courseDev');\nconst courseTemplateDir = path.join(import.meta.dirname, 'testFileEditor', 'courseTemplate');\n\ndescribe('Creating an assessment', () => {\n  before(async () => {\n    // Clone the course template for testing\n    await execa('git', ['-c', 'init.defaultBranch=master', 'init', '--bare', courseOriginDir], {\n      cwd: '.',\n      env: process.env,\n    });\n\n    await execa('git', ['clone', courseOriginDir, courseLiveDir], {\n      cwd: '.',\n      env: process.env,\n    });\n\n    await fs.copy(courseTemplateDir, courseLiveDir);\n\n    const execOptions = { cwd: courseLiveDir, env: process.env };\n    await execa('git', ['add', '-A'], execOptions);\n    await execa('git', ['commit', '-m', 'Initial commit'], execOptions);\n    await execa('git', ['push', 'origin', 'master'], execOptions);\n    await execa('git', ['clone', courseOriginDir, courseDevDir], { cwd: '.', env: process.env });\n\n    await helperServer.before(courseLiveDir)();\n\n    await queryAsync(sql.update_course_repo, { repo: courseOriginDir });\n  });\n\n  after(helperServer.after);\n\n  step('create a new assessment without module', async () => {\n    // Fetch the assessments page for the course instance\n    const assessmentsPageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n    );\n\n    assert.equal(assessmentsPageResponse.status, 200);\n\n    // Create the new assessment without a module\n    const assessmentCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_assessment',\n          __csrf_token: assessmentsPageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: assessmentsPageResponse.$('input[name=orig_hash]').val() as string,\n          title: 'Test Title',\n          aid: 'HW2',\n          type: 'Homework',\n          set: 'Practice Quiz',\n        }),\n      },\n    );\n\n    assert.equal(assessmentCreationResponse.status, 200);\n    assert.equal(\n      assessmentCreationResponse.url,\n      `${siteUrl}/pl/course_instance/1/instructor/assessment/2/questions`,\n    );\n  });\n\n  step('verify the assessment has the correct info', async () => {\n    const assessmentLiveInfoPath = path.join(\n      assessmentLiveDir,\n      'HW2', // Verify that the aid was used as the assessment folder's name\n      'infoAssessment.json',\n    );\n    const assessmentInfo = JSON.parse(await fs.readFile(assessmentLiveInfoPath, 'utf8'));\n    assert.equal(assessmentInfo.title, 'Test Title');\n    assert.equal(assessmentInfo.type, 'Homework');\n    assert.equal(assessmentInfo.set, 'Practice Quiz');\n  });\n\n  step('create new assessment with module', async () => {\n    // Fetch the assessments page for the course instance\n    const assessmentsPageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n    );\n\n    assert.equal(assessmentsPageResponse.status, 200);\n\n    // Create the new assessment with a module\n    const assessmentCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_assessment',\n          __csrf_token: assessmentsPageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: assessmentsPageResponse.$('input[name=orig_hash]').val() as string,\n          title: 'Test Title 3',\n          aid: 'HW3',\n          type: 'Homework',\n          set: 'Practice Quiz',\n          module: 'Module2',\n        }),\n      },\n    );\n\n    assert.equal(assessmentCreationResponse.status, 200);\n    assert.equal(\n      assessmentCreationResponse.url,\n      `${siteUrl}/pl/course_instance/1/instructor/assessment/3/questions`,\n    );\n  });\n\n  step('verify the assessment has the correct info, including the module', async () => {\n    const assessmentLiveInfoPath = path.join(\n      assessmentLiveDir,\n      'HW3', // Verify that the aid was used as the assessment folder's name\n      'infoAssessment.json',\n    );\n    const assessmentInfo = JSON.parse(await fs.readFile(assessmentLiveInfoPath, 'utf8'));\n    assert.equal(assessmentInfo.title, 'Test Title 3');\n    assert.equal(assessmentInfo.type, 'Homework');\n    assert.equal(assessmentInfo.set, 'Practice Quiz');\n    assert.equal(assessmentInfo.module, 'Module2');\n  });\n\n  step('create new assessment with duplicate aid, title', async () => {\n    // Fetch the assessments page for the course instance\n    const assessmentsPageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n    );\n\n    assert.equal(assessmentsPageResponse.status, 200);\n\n    // Create the new assessment with a duplicate aid and title\n    const assessmentCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_assessment',\n          __csrf_token: assessmentsPageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: assessmentsPageResponse.$('input[name=orig_hash]').val() as string,\n          title: 'Test Title', // Same title as the first assessment\n          aid: 'HW2', // Same aid as the first assessment\n          type: 'Homework',\n          set: 'Practice Quiz',\n        }),\n      },\n    );\n\n    assert.equal(assessmentCreationResponse.status, 200);\n    assert.equal(\n      assessmentCreationResponse.url,\n      `${siteUrl}/pl/course_instance/1/instructor/assessment/4/questions`,\n    );\n  });\n\n  step('verify that the title and aid had 2 appended to them', async () => {\n    const assessmentLiveInfoPath = path.join(\n      assessmentLiveDir,\n      'HW2_2', // Verify that the aid was used as the assessment folder's name\n      'infoAssessment.json',\n    );\n    const assessmentInfo = JSON.parse(await fs.readFile(assessmentLiveInfoPath, 'utf8'));\n    assert.equal(assessmentInfo.title, 'Test Title (2)'); // Verify that 2 was appended to the title\n    assert.equal(assessmentInfo.type, 'Homework');\n    assert.equal(assessmentInfo.set, 'Practice Quiz');\n  });\n\n  step('should not be able to create an assessment without fields', async () => {\n    // Fetch the assessments page for the course instance\n    const assessmentsPageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n    );\n\n    assert.equal(assessmentsPageResponse.status, 200);\n\n    // Create a new assessment without a module\n    const assessmentCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_assessment',\n          __csrf_token: assessmentsPageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: assessmentsPageResponse.$('input[name=orig_hash]').val() as string,\n        }),\n      },\n    );\n\n    assert.equal(assessmentCreationResponse.status, 400);\n    assert.equal(\n      assessmentCreationResponse.url,\n      `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n    );\n  });\n\n  step(\n    'should not be able to create an assessment with aid not contained in the root directory',\n    async () => {\n      // Fetch the assessments page for the course instance\n      const assessmentsPageResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n      );\n\n      assert.equal(assessmentsPageResponse.status, 200);\n\n      // Create a new assessment with aid that is not contained in the root directory\n      const assessmentCreationResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n        {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'add_assessment',\n            __csrf_token: assessmentsPageResponse.$('input[name=__csrf_token]').val() as string,\n            orig_hash: assessmentsPageResponse.$('input[name=orig_hash]').val() as string,\n            title: 'Test Assessment',\n            aid: '../test-assessment',\n            type: 'Homework',\n            set: 'Practice Quiz',\n          }),\n        },\n      );\n\n      assert.equal(assessmentCreationResponse.status, 400);\n      assert.equal(\n        assessmentCreationResponse.url,\n        `${siteUrl}/pl/course_instance/1/instructor/instance_admin/assessments`,\n      );\n    },\n  );\n});\n"]}