{"version":3,"file":"instructorBreakVariants.test.js","sourceRoot":"","sources":["../../src/tests/instructorBreakVariants.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\n\nimport { loadSqlEquiv, queryRow } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { IdSchema } from '../lib/db-types.js';\n\nimport { fetchCheerio, getCSRFToken } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\nimport { type AuthUser, withUser } from './utils/auth.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst siteUrl = `http://localhost:${config.serverPort}`;\nconst courseInstanceUrl = `${siteUrl}/pl/course_instance/1`;\nconst studentUser: AuthUser = {\n  uid: 'student@example.com',\n  name: 'Example Student',\n  uin: 'student',\n  email: 'student@example.com',\n};\n\ndescribe('Instructor force-breaking variants', () => {\n  let assessmentId: string;\n  let partialCredit1AssessmentQuestionId: string;\n  let partialCredit2AssessmentQuestionId: string;\n  let partialCredit1VariantId: string;\n  let partialCredit2VariantId: string;\n  let assessmentStudentUrl: string;\n\n  before(async () => {\n    await helperServer.before()();\n\n    assessmentId = await queryRow(sql.select_break_variants_exam, {}, IdSchema);\n    assessmentStudentUrl = `${siteUrl}/pl/course_instance/1/assessment/${assessmentId}`;\n\n    partialCredit1AssessmentQuestionId = await queryRow(\n      sql.select_assessment_question,\n      { qid: 'partialCredit1', assessment_id: assessmentId },\n      IdSchema,\n    );\n    partialCredit2AssessmentQuestionId = await queryRow(\n      sql.select_assessment_question,\n      { qid: 'partialCredit2', assessment_id: assessmentId },\n      IdSchema,\n    );\n  });\n  after(helperServer.after);\n\n  step('student starts assessment', async () => {\n    await withUser(studentUser, async () => {\n      const assessmentResponse = await fetchCheerio(assessmentStudentUrl);\n      assert.equal(assessmentResponse.status, 200);\n\n      const response = await fetchCheerio(assessmentStudentUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'new_instance',\n          __csrf_token: getCSRFToken(assessmentResponse.$),\n        }),\n      });\n      assert.equal(response.status, 200);\n    });\n  });\n\n  step('student creates and submits to first variant', async () => {\n    await withUser(studentUser, async () => {\n      const assessmentResponse = await fetchCheerio(assessmentStudentUrl);\n      assert.equal(assessmentResponse.status, 200);\n      const partialCredit1Url = assessmentResponse.$('a:contains(\"Question 1\")').attr('href');\n\n      const questionResponse = await fetchCheerio(`${siteUrl}${partialCredit1Url}`);\n      assert.equal(questionResponse.status, 200);\n\n      partialCredit1VariantId = questionResponse\n        .$('input[name=__variant_id]')\n        .val()\n        ?.toString() as string;\n\n      const submissionResponse = await fetchCheerio(`${siteUrl}${partialCredit1Url}`, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token: getCSRFToken(questionResponse.$),\n          __variant_id: partialCredit1VariantId,\n          s: '50',\n        }),\n      });\n      assert.equal(submissionResponse.status, 200);\n    });\n  });\n\n  step('student creates and submits to second variant', async () => {\n    await withUser(studentUser, async () => {\n      const assessmentResponse = await fetchCheerio(assessmentStudentUrl);\n      assert.equal(assessmentResponse.status, 200);\n      const partialCredit2Url = assessmentResponse.$('a:contains(\"Question 2\")').attr('href');\n\n      const questionResponse = await fetchCheerio(`${siteUrl}${partialCredit2Url}`);\n      assert.equal(questionResponse.status, 200);\n\n      partialCredit2VariantId = questionResponse\n        .$('input[name=__variant_id]')\n        .val()\n        ?.toString() as string;\n\n      const submissionResponse = await fetchCheerio(`${siteUrl}${partialCredit2Url}`, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token: getCSRFToken(questionResponse.$),\n          __variant_id: partialCredit2VariantId,\n          s: '50',\n        }),\n      });\n      assert.equal(submissionResponse.status, 200);\n    });\n  });\n\n  step('instructor breaks first variant via assessment question page', async () => {\n    const assessmentQuestionsUrl = `${courseInstanceUrl}/instructor/assessment/${assessmentId}/questions`;\n\n    const assessmentQuestionsResponse = await fetchCheerio(assessmentQuestionsUrl);\n    const csrfToken = getCSRFToken(assessmentQuestionsResponse.$);\n\n    const breakVariantsResponse = await fetchCheerio(assessmentQuestionsUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'reset_question_variants',\n        __csrf_token: csrfToken,\n        unsafe_assessment_question_id: partialCredit1AssessmentQuestionId,\n      }),\n    });\n    assert.equal(breakVariantsResponse.status, 200);\n  });\n\n  step('instructor breaks second variant via student instance page', async () => {\n    const instanceUrl = `${courseInstanceUrl}/instructor/assessment_instance/1`;\n\n    const instanceQuestion = await queryRow(\n      sql.select_instance_question,\n      { assessment_question_id: partialCredit2AssessmentQuestionId },\n      IdSchema,\n    );\n\n    const instanceResponse = await fetchCheerio(instanceUrl);\n    const csrfToken = getCSRFToken(instanceResponse.$);\n\n    const breakVariantsResponse = await fetchCheerio(instanceUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'reset_question_variants',\n        __csrf_token: csrfToken,\n        unsafe_instance_question_id: instanceQuestion,\n      }),\n    });\n    assert.equal(breakVariantsResponse.status, 200);\n  });\n\n  step('student sees new variant when revisiting first question', async () => {\n    await withUser(studentUser, async () => {\n      const assessmentResponse = await fetchCheerio(assessmentStudentUrl);\n      assert.equal(assessmentResponse.status, 200);\n      const addNumbersUrl = assessmentResponse.$('a:contains(\"Question 1\")').attr('href');\n\n      const questionResponse = await fetchCheerio(`${siteUrl}${addNumbersUrl}`);\n      assert.equal(questionResponse.status, 200);\n\n      const variantId = questionResponse.$('input[name=__variant_id]').val()?.toString() as string;\n      assert.notEqual(variantId, partialCredit1VariantId);\n    });\n  });\n\n  step('student sees new variant when revisiting second question', async () => {\n    await withUser(studentUser, async () => {\n      const assessmentResponse = await fetchCheerio(assessmentStudentUrl);\n      assert.equal(assessmentResponse.status, 200);\n      const addNumbersUrl = assessmentResponse.$('a:contains(\"Question 2\")').attr('href');\n\n      const questionResponse = await fetchCheerio(`${siteUrl}${addNumbersUrl}`);\n      assert.equal(questionResponse.status, 200);\n\n      const variantId = questionResponse.$('input[name=__variant_id]').val()?.toString() as string;\n      assert.notEqual(variantId, partialCredit2VariantId);\n    });\n  });\n});\n"]}