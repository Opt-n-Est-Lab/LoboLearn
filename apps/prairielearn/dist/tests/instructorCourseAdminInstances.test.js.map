{"version":3,"file":"instructorCourseAdminInstances.test.js","sourceRoot":"","sources":["../../src/tests/instructorCourseAdminInstances.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport { execa } from 'execa';\nimport fs from 'fs-extra';\nimport { step } from 'mocha-steps';\nimport * as tmp from 'tmp';\n\nimport { loadSqlEquiv, queryAsync } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport { fetchCheerio } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst siteUrl = `http://localhost:${config.serverPort}`;\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst baseDir = tmp.dirSync().name;\n\nconst courseOriginDir = path.join(baseDir, 'courseOrigin');\nconst courseLiveDir = path.join(baseDir, 'courseLive');\nconst courseInstancesCourseLiveDir = path.join(courseLiveDir, 'courseInstances');\n\nconst courseDevDir = path.join(baseDir, 'courseDev');\nconst courseTemplateDir = path.join(import.meta.dirname, 'testFileEditor', 'courseTemplate');\n\ndescribe('Creating a course instance', () => {\n  before(async () => {\n    // Clone the course template for testing\n    await execa('git', ['-c', 'init.defaultBranch=master', 'init', '--bare', courseOriginDir], {\n      cwd: '.',\n      env: process.env,\n    });\n\n    await execa('git', ['clone', courseOriginDir, courseLiveDir], {\n      cwd: '.',\n      env: process.env,\n    });\n\n    await fs.copy(courseTemplateDir, courseLiveDir);\n\n    const execOptions = { cwd: courseLiveDir, env: process.env };\n    await execa('git', ['add', '-A'], execOptions);\n    await execa('git', ['commit', '-m', 'Initial commit'], execOptions);\n    await execa('git', ['push', 'origin', 'master'], execOptions);\n    await execa('git', ['clone', courseOriginDir, courseDevDir], { cwd: '.', env: process.env });\n\n    await helperServer.before(courseLiveDir)();\n\n    await queryAsync(sql.update_course_repo, { repo: courseOriginDir });\n  });\n\n  after(helperServer.after);\n\n  step('create a new course instance', async () => {\n    // Fetch the course instance page for the course\n    const courseInstancePageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n    );\n\n    assert.equal(courseInstancePageResponse.status, 200);\n\n    // Create the new course instance\n    const courseInstanceCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_course_instance',\n          __csrf_token: courseInstancePageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: courseInstancePageResponse.$('input[name=orig_hash]').val() as string,\n          short_name: 'Fa19',\n          long_name: 'Fall 2019',\n          start_access_date: '2021-01-01T00:00:00',\n          end_access_date: '2021-01-02T00:00:00',\n          access_dates_enabled: 'on',\n        }),\n      },\n    );\n\n    assert.equal(courseInstanceCreationResponse.status, 200);\n\n    // Verify that the user is redirected to the assessments page for the new course instance\n    assert.equal(\n      courseInstanceCreationResponse.url,\n      `${siteUrl}/pl/course_instance/2/instructor/instance_admin/assessments`,\n    );\n  });\n\n  step('verify course instance has the correct info', async () => {\n    const courseInstanceInfoPath = path.join(\n      courseInstancesCourseLiveDir,\n      'Fa19', // Verify that the short_name has been used as the course instance folder's name\n      'infoCourseInstance.json',\n    );\n\n    const courseInstanceInfo = JSON.parse(await fs.readFile(courseInstanceInfoPath, 'utf8'));\n\n    assert.equal(courseInstanceInfo.longName, 'Fall 2019');\n    assert.equal(courseInstanceInfo.allowAccess.length, 1);\n    assert.equal(courseInstanceInfo.allowAccess[0].startDate, '2021-01-01 00:00:00');\n    assert.equal(courseInstanceInfo.allowAccess[0].endDate, '2021-01-02 00:00:00');\n  });\n\n  step('add course instance with the same long_name and short_name', async () => {\n    const courseInstancePageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n    );\n\n    assert.equal(courseInstancePageResponse.status, 200);\n\n    // Create the new course instance with the same short_name and long_name as the first one\n    const courseInstanceCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_course_instance',\n          __csrf_token: courseInstancePageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: courseInstancePageResponse.$('input[name=orig_hash]').val() as string,\n          short_name: 'Fa19', // Same short_name as the first course instance\n          long_name: 'Fall 2019', // Same long_name as the first course instance\n          start_access_date: '2021-01-01T00:00:00',\n          end_access_date: '2021-01-02T00:00:00',\n          access_dates_enabled: 'on',\n        }),\n      },\n    );\n\n    assert.equal(courseInstanceCreationResponse.status, 200);\n\n    // Verify that the user is redirected to the assessments page for the new course instance\n    assert.equal(\n      courseInstanceCreationResponse.url,\n      `${siteUrl}/pl/course_instance/3/instructor/instance_admin/assessments`,\n    );\n  });\n\n  step('verify that the new course instance names had 2 appended to them', async () => {\n    const courseInstanceInfoPath = path.join(\n      courseInstancesCourseLiveDir,\n      'Fa19_2',\n      'infoCourseInstance.json',\n    );\n\n    const courseInstanceInfo = JSON.parse(await fs.readFile(courseInstanceInfoPath, 'utf8'));\n\n    assert.equal(courseInstanceInfo.longName, 'Fall 2019 (2)');\n  });\n\n  step('add course instance without start_access_date and end_access_date', async () => {\n    const courseInstancePageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n    );\n\n    assert.equal(courseInstancePageResponse.status, 200);\n\n    // Create the new course instance without a start_access_date and end_access_date\n    const courseInstanceCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_course_instance',\n          __csrf_token: courseInstancePageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: courseInstancePageResponse.$('input[name=orig_hash]').val() as string,\n          short_name: 'Fa20',\n          long_name: 'Fall 2020',\n          access_dates_enabled: 'on',\n        }),\n      },\n    );\n\n    assert.equal(courseInstanceCreationResponse.status, 200);\n\n    // Verify that the user is redirected to the assessments page for the new course instance\n    assert.equal(\n      courseInstanceCreationResponse.url,\n      `${siteUrl}/pl/course_instance/4/instructor/instance_admin/assessments`,\n    );\n  });\n\n  step('verify course instance is created with an empty allowAccess array', async () => {\n    const courseInstanceInfoPath = path.join(\n      courseInstancesCourseLiveDir,\n      'Fa20',\n      'infoCourseInstance.json',\n    );\n\n    const courseInstanceInfo = JSON.parse(await fs.readFile(courseInstanceInfoPath, 'utf8'));\n\n    assert.equal(courseInstanceInfo.longName, 'Fall 2020');\n\n    assert.equal(courseInstanceInfo.allowAccess.length, 0);\n  });\n\n  step('add course instance with access_dates_enabled unchecked', async () => {\n    const courseInstancePageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n    );\n\n    assert.equal(courseInstancePageResponse.status, 200);\n\n    // Create the new course instance with access_dates_enabled not specified (unchecked)\n    const courseInstanceCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_course_instance',\n          __csrf_token: courseInstancePageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: courseInstancePageResponse.$('input[name=orig_hash]').val() as string,\n          short_name: 'Sp21',\n          long_name: 'Spring 2021',\n          start_access_date: '2021-01-01T00:00:00',\n          end_access_date: '2021-01-02T00:00:00',\n        }),\n      },\n    );\n\n    assert.equal(courseInstanceCreationResponse.status, 200);\n\n    // Verify that the user is redirected to the assessments page for the new course instance\n    assert.equal(\n      courseInstanceCreationResponse.url,\n      `${siteUrl}/pl/course_instance/5/instructor/instance_admin/assessments`,\n    );\n  });\n\n  step('verify course instance is created with an empty allowAccess array', async () => {\n    const courseInstanceInfoPath = path.join(\n      courseInstancesCourseLiveDir,\n      'Sp21',\n      'infoCourseInstance.json',\n    );\n\n    const courseInstanceInfo = JSON.parse(await fs.readFile(courseInstanceInfoPath, 'utf8'));\n\n    assert.equal(courseInstanceInfo.longName, 'Spring 2021');\n\n    assert.equal(courseInstanceInfo.allowAccess.length, 0);\n  });\n\n  step('should not be able to create course instance with no short_name', async () => {\n    const courseInstancePageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n    );\n\n    assert.equal(courseInstancePageResponse.status, 200);\n\n    const courseInstanceCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_course_instance',\n          __csrf_token: courseInstancePageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: courseInstancePageResponse.$('input[name=orig_hash]').val() as string,\n          // No short_name specified\n          long_name: 'Fall 2019',\n          start_access_date: '2021-01-01T00:00:00',\n          end_access_date: '2021-01-02T00:00:00',\n          access_dates_enabled: 'on',\n        }),\n      },\n    );\n\n    assert.equal(courseInstanceCreationResponse.status, 400);\n    assert.equal(\n      courseInstanceCreationResponse.url,\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n    );\n  });\n\n  step('should not be able to create course instance with no long_name', async () => {\n    const courseInstancePageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n    );\n\n    assert.equal(courseInstancePageResponse.status, 200);\n\n    const courseInstanceCreationResponse = await fetchCheerio(\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_course_instance',\n          __csrf_token: courseInstancePageResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: courseInstancePageResponse.$('input[name=orig_hash]').val() as string,\n          short_name: 'Fa19',\n          // No long_name specified\n          start_access_date: '2021-01-01T00:00:00',\n          end_access_date: '2021-01-02T00:00:00',\n          access_dates_enabled: 'on',\n        }),\n      },\n    );\n\n    assert.equal(courseInstanceCreationResponse.status, 400);\n    assert.equal(\n      courseInstanceCreationResponse.url,\n      `${siteUrl}/pl/course/1/course_admin/instances`,\n    );\n  });\n\n  step(\n    'should not be able to create course instance with short_name that falls outside correct root directory',\n    async () => {\n      const courseInstancePageResponse = await fetchCheerio(\n        `${siteUrl}/pl/course/1/course_admin/instances`,\n      );\n\n      assert.equal(courseInstancePageResponse.status, 200);\n\n      // Create the new course instance with a short_name that falls outside the correct root directory\n      const courseInstanceCreationResponse = await fetchCheerio(\n        `${siteUrl}/pl/course/1/course_admin/instances`,\n        {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'add_course_instance',\n            __csrf_token: courseInstancePageResponse.$('input[name=__csrf_token]').val() as string,\n            orig_hash: courseInstancePageResponse.$('input[name=orig_hash]').val() as string,\n            short_name: '../Fa26',\n            long_name: 'Fall 2026',\n            access_dates_enabled: 'on',\n          }),\n        },\n      );\n\n      assert.equal(courseInstanceCreationResponse.status, 200);\n      assert.match(courseInstanceCreationResponse.url, /\\/pl\\/course\\/1\\/edit_error\\/\\d+$/);\n    },\n  );\n});\n"]}