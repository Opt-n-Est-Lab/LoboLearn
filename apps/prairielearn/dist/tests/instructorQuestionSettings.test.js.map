{"version":3,"file":"instructorQuestionSettings.test.js","sourceRoot":"","sources":["../../src/tests/instructorQuestionSettings.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport { execa } from 'execa';\nimport fs from 'fs-extra';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\nimport * as tmp from 'tmp';\n\nimport { loadSqlEquiv, queryAsync } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { insertCoursePermissionsByUserUid } from '../models/course-permissions.js';\nimport { selectQuestionById } from '../models/question.js';\n\nimport { fetchCheerio } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\nimport { getOrCreateUser, withUser } from './utils/auth.js';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst courseTemplateDir = path.join(import.meta.dirname, 'testFileEditor', 'courseTemplate');\nconst baseDir = tmp.dirSync().name;\nconst courseOriginDir = path.join(baseDir, 'courseOrigin');\nconst courseLiveDir = path.join(baseDir, 'courseLive');\nconst courseDevDir = path.join(baseDir, 'courseDev');\nconst questionLiveDir = path.join(courseLiveDir, 'questions');\nlet questionLiveInfoPath = path.join(questionLiveDir, 'test', 'question', 'info.json');\nconst questionDevDir = path.join(courseDevDir, 'questions', 'test', 'question');\nlet questionDevInfoPath = path.join(questionDevDir, 'info.json');\n\nconst siteUrl = `http://localhost:${config.serverPort}`;\n\ndescribe('Editing question settings', () => {\n  before(async () => {\n    await execa('git', ['-c', 'init.defaultBranch=master', 'init', '--bare', courseOriginDir], {\n      cwd: '.',\n      env: process.env,\n    });\n\n    await execa('git', ['clone', courseOriginDir, courseLiveDir], {\n      cwd: '.',\n      env: process.env,\n    });\n\n    await fs.copy(courseTemplateDir, courseLiveDir);\n\n    const execOptions = { cwd: courseLiveDir, env: process.env };\n    await execa('git', ['add', '-A'], execOptions);\n    await execa('git', ['commit', '-m', 'Initial commit'], execOptions);\n    await execa('git', ['push', 'origin', 'master'], execOptions);\n    await execa('git', ['clone', courseOriginDir, courseDevDir], { cwd: '.', env: process.env });\n\n    await helperServer.before(courseLiveDir)();\n\n    await queryAsync(sql.update_course_repo, { repo: courseOriginDir });\n  });\n\n  after(helperServer.after);\n\n  step('access the test question info file', async () => {\n    const questionInfo = JSON.parse(await fs.readFile(questionLiveInfoPath, 'utf8'));\n    assert.equal(questionInfo.title, 'Test question');\n  });\n\n  step('change question info', async () => {\n    const settingsPageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n    );\n    assert.equal(settingsPageResponse.status, 200);\n\n    const response = await fetch(`${siteUrl}/pl/course_instance/1/instructor/question/1/settings`, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'update_question',\n        __csrf_token: settingsPageResponse.$('input[name=__csrf_token]').val() as string,\n        orig_hash: settingsPageResponse.$('input[name=orig_hash]').val() as string,\n        title: 'New title',\n        qid: 'question',\n        topic: 'Test2',\n        tags: 'test2',\n      }),\n    });\n\n    assert.equal(response.status, 200);\n    assert.equal(response.url, `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`);\n  });\n\n  step('verify question info change', async () => {\n    questionLiveInfoPath = path.join(questionLiveDir, 'question', 'info.json');\n    const questionLiveInfo = JSON.parse(await fs.readFile(questionLiveInfoPath, 'utf8'));\n    assert.equal(questionLiveInfo.title, 'New title');\n  });\n\n  step('verify nesting a question id', async () => {\n    const settingsPageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n    );\n    assert.equal(settingsPageResponse.status, 200);\n\n    const body = new URLSearchParams({\n      __action: 'update_question',\n      __csrf_token: settingsPageResponse.$('input[name=__csrf_token]').val() as string,\n      orig_hash: settingsPageResponse.$('input[name=orig_hash]').val() as string,\n      title: 'New title',\n      qid: 'test/question1',\n      topic: 'Test',\n    });\n    body.append('tags', 'test1');\n    body.append('tags', 'test2');\n\n    const response = await fetch(`${siteUrl}/pl/course_instance/1/instructor/question/1/settings`, {\n      method: 'POST',\n      body,\n    });\n\n    assert.equal(response.status, 200);\n    assert.equal(response.url, `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`);\n  });\n\n  step('verify changing qid did not leave any empty directories', async () => {\n    const questionDir = path.join(courseLiveDir, 'question');\n    assert.notOk(await fs.pathExists(questionDir));\n  });\n\n  step('pull and verify changes', async () => {\n    await execa('git', ['pull'], { cwd: courseDevDir, env: process.env });\n    questionDevInfoPath = path.join(courseDevDir, 'questions', 'test', 'question1', 'info.json');\n    const questionDevInfo = JSON.parse(await fs.readFile(questionDevInfoPath, 'utf8'));\n    assert.equal(questionDevInfo.title, 'New title');\n  });\n\n  step('verify question info change in db', async () => {\n    const question = await selectQuestionById('1');\n    assert.equal(question.title, 'New title');\n  });\n\n  step('should not be able to submit without being an authorized user', async () => {\n    const user = await getOrCreateUser({\n      uid: 'viewer@example.com',\n      name: 'Viewer User',\n      uin: 'viewer',\n      email: 'viewer@example.com',\n    });\n    await insertCoursePermissionsByUserUid({\n      course_id: '1',\n      uid: 'viewer@example.com',\n      course_role: 'Viewer',\n      authn_user_id: '1',\n    });\n    await withUser(user, async () => {\n      const settingsPageResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n      );\n      assert.equal(settingsPageResponse.status, 200);\n\n      const response = await fetch(\n        `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n        {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'update_question',\n            __csrf_token: settingsPageResponse.$('input[name=\"__csrf_token\"]').val() as string,\n            orig_hash: settingsPageResponse.$('input[name=\"orig_hash\"]').val() as string,\n            title: 'Test Title - Unauthorized',\n            qid: 'test/question',\n          }),\n        },\n      );\n      assert.equal(response.status, 403);\n    });\n  });\n\n  step('should not be able to submit without question info file', async () => {\n    questionLiveInfoPath = path.join(questionLiveDir, 'test', 'question1', 'info.json');\n    await fs.move(questionLiveInfoPath, `${questionLiveInfoPath}.bak`);\n    try {\n      const settingsPageResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n      );\n      assert.equal(settingsPageResponse.status, 200);\n\n      const response = await fetch(\n        `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n        {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'update_question',\n            __csrf_token: settingsPageResponse.$('input[name=\"__csrf_token\"]').val() as string,\n            orig_hash: settingsPageResponse.$('input[name=\"orig_hash\"]').val() as string,\n            title: 'Test title - no info file',\n            qid: 'test/question',\n          }),\n        },\n      );\n      assert.equal(response.status, 400);\n    } finally {\n      await fs.move(`${questionLiveInfoPath}.bak`, questionLiveInfoPath);\n    }\n  });\n\n  step('should not be able to submit if repo question info file has been changed', async () => {\n    const settingsPageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n    );\n    assert.equal(settingsPageResponse.status, 200);\n\n    const questionInfo = JSON.parse(await fs.readFile(questionLiveInfoPath, 'utf8'));\n    const newQuestionInfo = { ...questionInfo, title: 'New title - changed' };\n    await fs.writeFile(questionLiveInfoPath, JSON.stringify(newQuestionInfo, null, 2));\n    await execa('git', ['add', '-A'], { cwd: courseLiveDir, env: process.env });\n    await execa('git', ['commit', '-m', 'Change question info'], {\n      cwd: courseLiveDir,\n      env: process.env,\n    });\n    await execa('git', ['push', 'origin', 'master'], { cwd: courseLiveDir, env: process.env });\n\n    const response = await fetch(`${siteUrl}/pl/course_instance/1/instructor/question/1/settings`, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'update_question',\n        __csrf_token: settingsPageResponse.$('input[name=\"__csrf_token\"]').val() as string,\n        orig_hash: settingsPageResponse.$('input[name=\"orig_hash\"]').val() as string,\n        title: 'Test title - changed',\n        qid: 'test/question',\n      }),\n    });\n    assert.equal(response.status, 200);\n    assert.match(response.url, /\\/pl\\/course_instance\\/1\\/instructor\\/edit_error\\/\\d+$/);\n  });\n\n  step('change question id', async () => {\n    const settingsPageResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n    );\n    assert.equal(settingsPageResponse.status, 200);\n\n    // Change the question id to a new, valid id. Leave the title, qid, and topic unchanged.\n    const response = await fetch(`${siteUrl}/pl/course_instance/1/instructor/question/1/settings`, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'update_question',\n        __csrf_token: settingsPageResponse.$('input[name=__csrf_token]').val() as string,\n        orig_hash: settingsPageResponse.$('input[name=orig_hash]').val() as string,\n        title: 'Test title - changed',\n        qid: 'question2',\n        topic: 'Test',\n      }),\n    });\n\n    assert.equal(response.status, 200);\n    assert.equal(response.url, `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`);\n  });\n\n  step('verify question id changed', async () => {\n    questionLiveInfoPath = path.join(\n      questionLiveDir,\n      'question2', // The new question id\n      'info.json',\n    );\n\n    // If the file at path questionLiveInfoPath exists, then the question id was successfully changed\n    assert.ok(await fs.pathExists(questionLiveInfoPath));\n  });\n\n  step(\n    'should not be able to submit if changed question id is not in the root directory',\n    async () => {\n      const settingsPageResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n      );\n      assert.equal(settingsPageResponse.status, 200);\n\n      // Change the question id to one that is not contained within the root directory. Leave the title, qid, and topic unchanged.\n      const response = await fetch(\n        `${siteUrl}/pl/course_instance/1/instructor/question/1/settings`,\n        {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'update_question',\n            __csrf_token: settingsPageResponse.$('input[name=__csrf_token]').val() as string,\n            orig_hash: settingsPageResponse.$('input[name=orig_hash]').val() as string,\n            title: 'Test title - changed',\n            qid: '../question3',\n            topic: 'Test',\n          }),\n        },\n      );\n\n      assert.equal(response.status, 400);\n    },\n  );\n});\n"]}