{"version":3,"file":"instructorQuestions.test.js","sourceRoot":"","sources":["../../src/tests/instructorQuestions.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetch from 'node-fetch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { idsEqual } from '../lib/id.js';\n\nimport {\n  testElementClientFiles,\n  testFileDownloads,\n  testQuestionPreviews,\n} from './helperQuestionPreview.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\nconst courseInstanceBaseUrl = baseUrl + '/course_instance/1/instructor';\nconst questionsUrl = courseInstanceBaseUrl + '/course_admin/questions';\nconst questionsUrlCourse = baseUrl + '/course/1/course_admin/questions';\n\nconst addNumbers = {\n  id: '',\n  qid: 'addNumbers',\n  type: 'Freeform',\n  title: 'Add two numbers',\n};\nconst addVectors = {\n  id: '',\n  qid: 'addVectors',\n  type: 'Calculation',\n  title: 'Addition of vectors in Cartesian coordinates',\n};\nconst downloadFile = {\n  id: '',\n  qid: 'downloadFile',\n  type: 'Freeform',\n  title: 'File download example question',\n};\nconst differentiatePolynomial = {\n  id: '',\n  qid: 'differentiatePolynomial',\n  type: 'Freeform',\n  title: 'Differentiate a polynomial function of one variable',\n};\nconst customElement = {\n  id: '',\n  qid: 'customElement',\n  type: 'Freeform',\n  title: 'Demo: Custom element',\n};\nconst testQuestions = [\n  addNumbers,\n  addVectors,\n  downloadFile,\n  differentiatePolynomial,\n  customElement,\n];\n\ndescribe('Instructor questions', function () {\n  this.timeout(60000);\n\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  let questionData;\n\n  describe('the database', function () {\n    let questions;\n    it('should contain questions', async () => {\n      const result = await sqldb.queryAsync(sql.select_questions, []);\n      if (result.rowCount === 0) {\n        throw new Error('no questions in DB');\n      }\n      questions = result.rows;\n    });\n\n    for (const testQuestion of testQuestions) {\n      it(`should contain the ${testQuestion.qid} question`, function () {\n        const foundQuestion = questions.find((question) => question.directory === testQuestion.qid);\n        assert.isDefined(foundQuestion);\n        testQuestion.id = foundQuestion.id;\n      });\n    }\n  });\n\n  describe('GET ' + questionsUrlCourse, function () {\n    let parsedPage;\n    it('should load successfully and contain question data', async () => {\n      const res = await fetch(questionsUrlCourse);\n      assert.equal(res.status, 200);\n      parsedPage = cheerio.load(await res.text());\n    });\n    it('should contain question data', function () {\n      questionData = parsedPage('#questionsTable').data('data');\n      assert.isArray(questionData);\n      questionData.forEach((question) => assert.isObject(question));\n    });\n\n    for (const testQuestion of testQuestions) {\n      it(`should include ${testQuestion.qid} question`, function () {\n        const elemList = questionData.filter((question) => idsEqual(question.id, testQuestion.id));\n        assert.lengthOf(elemList, 1);\n        assert.equal(testQuestion.qid, elemList[0].qid);\n        assert.equal(testQuestion.title, elemList[0].title);\n      });\n    }\n  });\n\n  describe('GET ' + questionsUrl, function () {\n    let parsedPage;\n    it('should load successfully', async () => {\n      const res = await fetch(questionsUrl);\n      assert.equal(res.status, 200);\n      const page = await res.text();\n      parsedPage = cheerio.load(page);\n    });\n    it('should contain question data', function () {\n      questionData = parsedPage('#questionsTable').data('data');\n      assert.isArray(questionData);\n      questionData.forEach((question) => assert.isObject(question));\n    });\n    for (const testQuestion of testQuestions) {\n      it(`should include ${testQuestion.qid} question`, function () {\n        const elemList = questionData.filter((question) => idsEqual(question.id, testQuestion.id));\n        assert.lengthOf(elemList, 1);\n        assert.equal(testQuestion.qid, elemList[0].qid);\n        assert.equal(testQuestion.title, elemList[0].title);\n      });\n    }\n  });\n\n  describe('Test Question Previews', function () {\n    const previewPageInfo = {\n      siteUrl,\n      baseUrl,\n      questionBaseUrl: courseInstanceBaseUrl + '/question',\n      questionPreviewTabUrl: '/preview',\n      isStudentPage: false,\n    };\n\n    testQuestionPreviews(previewPageInfo, addNumbers, addVectors);\n    testFileDownloads(previewPageInfo, downloadFile, true);\n    testElementClientFiles(previewPageInfo, customElement);\n  });\n\n  describe('QID redirect routes', () => {\n    it('redirects to the correct question from course route', async () => {\n      const res = await fetch(`${questionsUrlCourse}/qid/addNumbers?variant_seed=1234`);\n      assert.equal(res.status, 200);\n      assert.equal(\n        res.url,\n        `${baseUrl}/course/1/question/${addNumbers.id}/preview?variant_seed=1234`,\n      );\n    });\n\n    it('redirects to the correct question from instance route', async () => {\n      const res = await fetch(`${questionsUrl}/qid/addNumbers?variant_seed=1234`);\n      assert.equal(res.status, 200);\n      assert.equal(\n        res.url,\n        `${baseUrl}/course_instance/1/instructor/question/${addNumbers.id}/preview?variant_seed=1234`,\n      );\n    });\n  });\n});\n"]}