{"version":3,"file":"instructorQuestionsCreation.test.js","sourceRoot":"","sources":["../../src/tests/instructorQuestionsCreation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport { execa } from 'execa';\nimport fs from 'fs-extra';\nimport { step } from 'mocha-steps';\nimport * as tmp from 'tmp';\n\nimport { loadSqlEquiv, queryAsync } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { EXAMPLE_COURSE_PATH } from '../lib/paths.js';\n\nimport { fetchCheerio } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst siteUrl = `http://localhost:${config.serverPort}`;\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nconst baseDir = tmp.dirSync().name;\n\nconst courseOriginDir = path.join(baseDir, 'courseOrigin');\nconst courseLiveDir = path.join(baseDir, 'courseLive');\nconst questionsLiveDir = path.join(courseLiveDir, 'questions');\n\nconst courseDevDir = path.join(baseDir, 'courseDev');\nconst courseTemplateDir = path.join(import.meta.dirname, 'testFileEditor', 'courseTemplate');\n\ndescribe('Creating a question', () => {\n  before(async () => {\n    // Clone the course template for testing\n    await execa('git', ['-c', 'init.defaultBranch=master', 'init', '--bare', courseOriginDir], {\n      cwd: '.',\n      env: process.env,\n    });\n\n    await execa('git', ['clone', courseOriginDir, courseLiveDir], {\n      cwd: '.',\n      env: process.env,\n    });\n\n    await fs.copy(courseTemplateDir, courseLiveDir);\n\n    const execOptions = { cwd: courseLiveDir, env: process.env };\n    await execa('git', ['add', '-A'], execOptions);\n    await execa('git', ['commit', '-m', 'Initial commit'], execOptions);\n    await execa('git', ['push', 'origin', 'master'], execOptions);\n    await execa('git', ['clone', courseOriginDir, courseDevDir], { cwd: '.', env: process.env });\n\n    await helperServer.before(courseLiveDir)();\n\n    await queryAsync(sql.update_course_repo, { repo: courseOriginDir });\n  });\n\n  after(helperServer.after);\n\n  step('create a new empty question', async () => {\n    // Fetch the questions page for the course instance\n    const questionsResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n    );\n\n    assert.equal(questionsResponse.status, 200);\n\n    // Create the new empty question\n    const createQuestionResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_question',\n          __csrf_token: questionsResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: questionsResponse.$('input[name=orig_hash]').val() as string,\n          title: 'Test Question',\n          qid: 'test-question',\n          start_from: 'Empty question',\n        }),\n      },\n    );\n\n    assert.equal(createQuestionResponse.status, 200);\n\n    assert.equal(\n      createQuestionResponse.url,\n      `${siteUrl}/pl/course_instance/1/instructor/question/2/file_edit/questions/test-question/question.html`,\n    );\n  });\n\n  step('verify that the new empty question has the correct info', async () => {\n    const questionLiveInfoPath = path.join(\n      questionsLiveDir,\n      'test-question', // Verify that the qid was used as the question folder's name\n      'info.json',\n    );\n    const questionInfo = JSON.parse(await fs.readFile(questionLiveInfoPath, 'utf8'));\n\n    assert.equal(questionInfo.title, 'Test Question');\n    assert.equal(questionInfo.topic, 'Default');\n    assert.isUndefined(questionInfo.shareSourcePublicly);\n  });\n\n  step('create a new template question', async () => {\n    // Fetch the questions page for the course instance\n    const questionsResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n    );\n\n    assert.equal(questionsResponse.status, 200);\n\n    // Create the new template question based on the random graph template question\n    const createQuestionResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_question',\n          __csrf_token: questionsResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: questionsResponse.$('input[name=orig_hash]').val() as string,\n          title: 'Test Random Graph',\n          qid: 'test-random-graph',\n          start_from: 'Template',\n          template_qid: 'template/matrix-component-input/random-graph',\n        }),\n      },\n    );\n\n    assert.equal(createQuestionResponse.status, 200);\n\n    assert.equal(\n      createQuestionResponse.url,\n      `${siteUrl}/pl/course_instance/1/instructor/question/3/preview`,\n    );\n  });\n\n  step('verify that the new template question has the correct info', async () => {\n    const questionLivePath = path.join(questionsLiveDir, 'test-random-graph');\n    const questionLiveInfoPath = path.join(questionLivePath, 'info.json');\n    const questionInfo = JSON.parse(await fs.readFile(questionLiveInfoPath, 'utf8'));\n\n    assert.equal(questionInfo.title, 'Test Random Graph');\n    assert.equal(questionInfo.topic, 'Default');\n    assert.isUndefined(questionInfo.shareSourcePublicly);\n\n    // Check that the server.py file has the correct contents\n    const newQuestionServerFilePath = path.join(questionLivePath, 'server.py');\n    const originalQuestionServerFilePath = path.join(\n      EXAMPLE_COURSE_PATH,\n      'questions',\n      'template',\n      'matrix-component-input',\n      'random-graph',\n      'server.py',\n    );\n\n    const newQuestionServerFileContent = await fs.readFile(newQuestionServerFilePath, 'utf8');\n    const originalQuestionServerFileContent = await fs.readFile(\n      originalQuestionServerFilePath,\n      'utf8',\n    );\n\n    assert.equal(newQuestionServerFileContent, originalQuestionServerFileContent);\n\n    // Check that the question.html file has the correct contents\n    const newQuestionHtmlFilePath = path.join(questionLivePath, 'question.html');\n    const originalQuestionHtmlFilePath = path.join(\n      EXAMPLE_COURSE_PATH,\n      'questions',\n      'template',\n      'matrix-component-input',\n      'random-graph',\n      'question.html',\n    );\n\n    const newQuestionHtmlFileContent = await fs.readFile(newQuestionHtmlFilePath, 'utf8');\n    const originalQuestionHtmlFileContent = await fs.readFile(originalQuestionHtmlFilePath, 'utf8');\n\n    assert.equal(newQuestionHtmlFileContent, originalQuestionHtmlFileContent);\n  });\n\n  step('create new question with duplicate qid, title', async () => {\n    // Fetch the questions page for the course instance\n    const questionsResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n    );\n    assert.equal(questionsResponse.status, 200);\n\n    // Create the new empty question with the same qid and title as the first question\n    const createQuestionResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_question',\n          __csrf_token: questionsResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: questionsResponse.$('input[name=orig_hash]').val() as string,\n          title: 'Test Question',\n          qid: 'test-question',\n          start_from: 'Empty question',\n        }),\n      },\n    );\n    assert.equal(createQuestionResponse.status, 200);\n    assert.equal(\n      createQuestionResponse.url,\n      `${siteUrl}/pl/course_instance/1/instructor/question/4/file_edit/questions/test-question_2/question.html`,\n    );\n  });\n\n  step('verify that the title and qid had 2 appended to them', async () => {\n    const questionLiveInfoPath = path.join(\n      questionsLiveDir,\n      'test-question_2', // Verify that the qid with 2 appended to it was used as the name of the question folder\n      'info.json',\n    );\n    const questionInfo = JSON.parse(await fs.readFile(questionLiveInfoPath, 'utf8'));\n    assert.equal(questionInfo.title, 'Test Question (2)'); // Verify that the title had (2) appended to it\n    assert.equal(questionInfo.topic, 'Default');\n    assert.isUndefined(questionInfo.shareSourcePublicly);\n  });\n\n  step('should not be able to create a question without a title or qid', async () => {\n    // Fetch the questions page for the course instance\n    const questionsResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n    );\n    assert.equal(questionsResponse.status, 200);\n\n    // Create a new empty question without a title or qid\n    const createQuestionResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_question',\n          __csrf_token: questionsResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: questionsResponse.$('input[name=orig_hash]').val() as string,\n          start_from: 'Empty question',\n        }),\n      },\n    );\n    assert.equal(createQuestionResponse.status, 400);\n  });\n\n  step('should not be able to create a question without specifying start_from', async () => {\n    // Fetch the questions page for the course instance\n    const questionsResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n    );\n    assert.equal(questionsResponse.status, 200);\n\n    // Create a new empty question without specifying start_from\n    const createQuestionResponse = await fetchCheerio(\n      `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'add_question',\n          __csrf_token: questionsResponse.$('input[name=__csrf_token]').val() as string,\n          orig_hash: questionsResponse.$('input[name=orig_hash]').val() as string,\n          title: 'New Test Question',\n          qid: 'new-test-question',\n        }),\n      },\n    );\n    assert.equal(createQuestionResponse.status, 400);\n  });\n\n  step(\n    'should not be able to create a question with qid not contained in the root directory',\n    async () => {\n      // Fetch the questions page for the course instance\n      const questionsResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n      );\n      assert.equal(questionsResponse.status, 200);\n\n      // Create a new empty question with a qid not contained in the root directory\n      const createQuestionResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n        {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'add_question',\n            __csrf_token: questionsResponse.$('input[name=__csrf_token]').val() as string,\n            orig_hash: questionsResponse.$('input[name=orig_hash]').val() as string,\n            title: 'New Test Question',\n            qid: '../new-test-question',\n            start_from: 'Empty question',\n          }),\n        },\n      );\n\n      assert.equal(createQuestionResponse.status, 400);\n    },\n  );\n\n  step(\n    'should not be able to create a question from a non-existent template question',\n    async () => {\n      // Fetch the questions page for the course instance\n      const questionsResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n      );\n      assert.equal(questionsResponse.status, 200);\n\n      // Create a new empty question with a non-existent template question qid\n      const createQuestionResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n        {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'add_question',\n            __csrf_token: questionsResponse.$('input[name=__csrf_token]').val() as string,\n            orig_hash: questionsResponse.$('input[name=orig_hash]').val() as string,\n            title: 'New Test Question',\n            qid: 'new-test-question',\n            start_from: 'Template',\n            template_qid: 'template/non-existent-template',\n          }),\n        },\n      );\n\n      assert.equal(createQuestionResponse.status, 200);\n      assert.match(\n        createQuestionResponse.url,\n        /\\/pl\\/course_instance\\/1\\/instructor\\/edit_error\\/\\d+$/,\n      );\n    },\n  );\n\n  step(\n    'should not be able to create a question with template_qid not contained in the root directory',\n    async () => {\n      // Fetch the questions page for the course instance\n      const questionsResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n      );\n      assert.equal(questionsResponse.status, 200);\n\n      // Create a new question from a template with a template_qid not contained in the correct root directory\n      const createQuestionResponse = await fetchCheerio(\n        `${siteUrl}/pl/course_instance/1/instructor/course_admin/questions`,\n        {\n          method: 'POST',\n          body: new URLSearchParams({\n            __action: 'add_question',\n            __csrf_token: questionsResponse.$('input[name=__csrf_token]').val() as string,\n            orig_hash: questionsResponse.$('input[name=orig_hash]').val() as string,\n            title: 'New Test Question',\n            qid: 'new-test-question',\n            start_from: 'Template',\n            template_qid: '../template/matrix-component-input/random-graph',\n          }),\n        },\n      );\n\n      assert.equal(createQuestionResponse.status, 200);\n      assert.match(\n        createQuestionResponse.url,\n        /\\/pl\\/course_instance\\/1\\/instructor\\/edit_error\\/\\d+$/,\n      );\n    },\n  );\n});\n"]}