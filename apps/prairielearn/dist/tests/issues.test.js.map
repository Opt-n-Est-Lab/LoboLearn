{"version":3,"file":"issues.test.js","sourceRoot":"","sources":["../../src/tests/issues.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\nconst courseInstanceIssuesUrl = baseUrl + '/course_instance/1/instructor/course_admin/issues';\nconst courseIssuesUrl = baseUrl + '/course/1/course_admin/issues';\n\ndescribe('Issues', function () {\n  this.timeout(10000);\n\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  doTest(courseInstanceIssuesUrl, 'course');\n  doTest(courseIssuesUrl, 'course instance');\n});\n\nfunction doTest(issuesUrl: string, label: string) {\n  describe(`Report issue with question and close all issues in ${label}`, () => {\n    let questionUrl;\n\n    step('should report issues to a question', async () => {\n      const questionId = (await sqldb.queryOneRowAsync(sql.select_question_id, [])).rows[0].id;\n      questionUrl = `${baseUrl}/course_instance/1/instructor/question/${questionId}/preview`;\n      let res = await fetch(questionUrl);\n      const $ = cheerio.load(await res.text());\n\n      const csrfToken = $('div[id=\"issueCollapse\"] input[name=\"__csrf_token\"]')\n        .first()\n        .attr('value');\n      assert(typeof csrfToken === 'string');\n\n      const variantId = $('div[id=\"issueCollapse\"] input[name=\"__variant_id\"]')\n        .first()\n        .attr('value');\n      assert(typeof variantId === 'string');\n\n      // We'll report three issues total so that we have a variety to close.\n      // We give them distinct descriptions to test that \"close matching\" works.\n\n      res = await fetch(questionUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'report_issue',\n          __csrf_token: csrfToken,\n          __variant_id: variantId,\n          description: 'mountain breeze crisp',\n        }),\n      });\n      assert.equal(res.status, 200);\n\n      res = await fetch(questionUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'report_issue',\n          __csrf_token: csrfToken,\n          __variant_id: variantId,\n          description: 'velvet sunset glow',\n        }),\n      });\n      assert.equal(res.status, 200);\n\n      res = await fetch(questionUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'report_issue',\n          __csrf_token: csrfToken,\n          __variant_id: variantId,\n          description: 'whispering river serenade',\n        }),\n      });\n      assert.equal(res.status, 200);\n\n      const result = await sqldb.queryAsync(sql.select_open_issues, []);\n      assert.equal(result.rowCount, 3, 'Expected three open issues');\n    });\n\n    step('should close issues matching a query', async () => {\n      const issuesUrlWithQuery = `${issuesUrl}?q=is%3Aopen+mountain`;\n      let res = await fetch(issuesUrlWithQuery);\n      const $ = cheerio.load(await res.text());\n\n      const csrfToken = $('div#closeMatchingIssuesModal input[name=\"__csrf_token\"]')\n        .first()\n        .attr('value');\n      assert(typeof csrfToken === 'string');\n\n      const issueIds = $('div#closeMatchingIssuesModal input[name=\"unsafe_issue_ids\"]')\n        .first()\n        .attr('value');\n      assert(typeof issueIds === 'string');\n\n      res = await fetch(issuesUrlWithQuery, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'close_matching',\n          __csrf_token: csrfToken,\n          unsafe_issue_ids: issueIds,\n        }),\n      });\n      assert.equal(res.status, 200);\n\n      const result = await sqldb.queryAsync(sql.select_open_issues, []);\n      assert.equal(result.rowCount, 2, 'Expected two open issues');\n    });\n\n    step('should close all open issues', async () => {\n      let res = await fetch(issuesUrl);\n      const $ = cheerio.load(await res.text());\n\n      const csrfToken = $('div#closeMatchingIssuesModal input[name=\"__csrf_token\"]')\n        .first()\n        .attr('value');\n      assert(typeof csrfToken === 'string');\n\n      const issueIds = $('div#closeMatchingIssuesModal input[name=\"unsafe_issue_ids\"]')\n        .first()\n        .attr('value');\n      assert(typeof issueIds === 'string');\n\n      res = await fetch(issuesUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'close_matching',\n          __csrf_token: csrfToken,\n          unsafe_issue_ids: issueIds,\n        }),\n      });\n      assert.equal(res.status, 200);\n\n      const result = await sqldb.queryAsync(sql.select_open_issues, []);\n      assert.equal(result.rowCount, 0, 'Expected zero open issues');\n    });\n  });\n}\n"]}