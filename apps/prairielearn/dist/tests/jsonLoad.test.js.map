{"version":3,"file":"jsonLoad.test.js","sourceRoot":"","sources":["../../src/tests/jsonLoad.test.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAEhD,MAAM,QAAQ,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;AAEhG,MAAM,MAAM,GAAG;IACb,OAAO,EAAE,yCAAyC;IAClD,IAAI,EAAE,QAAQ;IACd,oBAAoB,EAAE,KAAK;IAC3B,UAAU,EAAE;QACV,GAAG,EAAE;YACH,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;YACjC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE;gBACrB,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,CAAC;aACX,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,QAAQ,CAAC,YAAY,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,qBAAqB,CAAC,EAAE,MAAM,CAAC,CAAC;YAClF,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE;gBACrB,GAAG,EAAE,KAAK;aACX,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\n\nimport * as jsonLoad from '../lib/json-load.js';\n\nconst testfile = (filename: string) => path.join(import.meta.dirname, 'testJsonLoad', filename);\n\nconst schema = {\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    foo: {\n      type: 'string',\n    },\n  },\n};\n\ndescribe('JSON loading', () => {\n  describe('readJSON', () => {\n    it('reads a JSON file', async () => {\n      const json = await jsonLoad.readJSON(testfile('basic.json'));\n      assert.deepEqual(json, {\n        hello: 'world',\n        testing: 1,\n      });\n    });\n\n    it(\"errors on a JSON file that doesn't exist\", async () => {\n      await assert.isRejected(jsonLoad.readJSON(testfile('donotexist.json')));\n    });\n\n    it('errors on a malformed JSON file', async () => {\n      await assert.isRejected(jsonLoad.readJSON(testfile('broken.json')));\n    });\n  });\n\n  describe('validateJSON', () => {\n    it('validates JSON that matches a schema', () => {\n      jsonLoad.validateJSON({ foo: 'bar' }, schema);\n    });\n\n    it(\"rejects JSON that does't match a schema\", () => {\n      assert.throws(() => jsonLoad.validateJSON({ foo: 1 }, schema));\n    });\n  });\n\n  describe('readInfoJson', () => {\n    it('reads JSON that matches a schema', async () => {\n      const json = await jsonLoad.readInfoJSON(testfile('forSchemaValid.json'), schema);\n      assert.deepEqual(json, {\n        foo: 'bar',\n      });\n    });\n\n    it('errors for JSON that does not a schema', async () => {\n      await assert.isRejected(jsonLoad.readInfoJSON(testfile('forSchemaInvalid.json'), schema));\n    });\n  });\n});\n"]}