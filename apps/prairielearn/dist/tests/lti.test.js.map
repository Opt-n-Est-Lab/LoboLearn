{"version":3,"file":"lti.test.js","sourceRoot":"","sources":["../../src/tests/lti.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport fetch from 'node-fetch';\nimport oauthSignature from 'oauth-signature';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst locals: Record<string, any> = {};\n\nlocals.siteUrl = 'http://localhost:' + config.serverPort;\nlocals.baseUrl = locals.siteUrl + '/pl';\nlocals.ltiUrl = locals.baseUrl + '/lti';\n\nconfig.ltiRedirectUrl = locals.ltiUrl;\n\ndescribe('LTI', function () {\n  this.timeout(20000);\n\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  const body: Record<string, string> = {\n    lti_message_type: 'basic-lti-launch-request',\n    lti_version: 'LTI-1p0',\n    resource_link_id: 'somethingsomething',\n    oauth_consumer_key: 'oauth_key',\n    oauth_timestamp: Math.floor(Date.now() / 1000).toString(),\n    oauth_nonce: 'nonceNonce',\n    user_id: 'testuser1',\n    roles: 'Learner',\n    context_id: 'testContext',\n  };\n  const secret = 'sFDpR@RzLdDW';\n  const genSignature = oauthSignature.generate('POST', locals.ltiUrl, body, secret, undefined, {\n    encodeSignature: false,\n  });\n\n  describe('test LTI callback', function () {\n    it('should throw 403 with an invalid consumer_key', async () => {\n      const res = await fetch(locals.ltiUrl, { method: 'POST', body: new URLSearchParams(body) });\n      assert.equal(res.status, 403);\n    });\n    it('should throw 403 with an invalid secret', async () => {\n      await sqldb.queryAsync(sql.invalid_secret, {});\n      const res = await fetch(locals.ltiUrl, { method: 'POST', body: new URLSearchParams(body) });\n      assert.equal(res.status, 403);\n    });\n    it('should throw 400 as a Learner with no LTI link defined', async () => {\n      body.oauth_signature = genSignature;\n      const res = await fetch(locals.ltiUrl, { method: 'POST', body: new URLSearchParams(body) });\n      assert.equal(res.status, 403);\n    });\n    it('should 302 (redirect) as a Learner with an LTI link created', async () => {\n      await sqldb.queryAsync(sql.lti_link, {});\n      const res = await fetch(locals.ltiUrl, {\n        method: 'POST',\n        body: new URLSearchParams(body),\n        redirect: 'manual',\n      });\n      assert.equal(res.status, 302);\n    });\n  });\n});\n\n/* TODO\n * Test nonce reuse\n * Test time out of range\n * Test instructor access without LTI link\n */\n"]}