{"version":3,"file":"lti13.test.js","sourceRoot":"","sources":["../../src/tests/lti13.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport express from 'express';\nimport fetchCookie from 'fetch-cookie';\nimport getPort from 'get-port';\nimport * as jose from 'jose';\nimport { step } from 'mocha-steps';\nimport nodeJose from 'node-jose';\nimport { z } from 'zod';\n\nimport { queryAsync, queryOptionalRow } from '@prairielearn/postgres';\n\nimport { fetchRetry, fetchRetryPaginated, getAccessToken } from '../ee/lib/lti13.js';\nimport { config } from '../lib/config.js';\nimport { Lti13UserSchema } from '../lib/db-types.js';\nimport { selectOptionalUserByUid } from '../models/user.js';\n\nimport { fetchCheerio } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst CLIENT_ID = 'prairielearn_test_lms';\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\n\nasync function withServer<T>(app: express.Express, port: number, fn: () => Promise<T>) {\n  const server = app.listen(port);\n\n  await new Promise<void>((resolve, reject) => {\n    server.on('listening', () => resolve());\n    server.on('error', (err) => reject(err));\n  });\n\n  try {\n    return await fn();\n  } finally {\n    server.close();\n  }\n}\n\ndescribe('LTI 1.3', () => {\n  let oidcProviderPort: number;\n  let keystore: nodeJose.JWK.KeyStore;\n\n  before(async () => {\n    config.isEnterprise = true;\n    config.features.lti13 = true;\n    await helperServer.before()();\n\n    // We need to give the default institution a `uid_regexp`.\n    await queryAsync(\"UPDATE institutions SET uid_regexp = '@example\\\\.com$'\", {});\n\n    // Allocate an available port for the OIDC provider.\n    oidcProviderPort = await getPort();\n\n    keystore = nodeJose.JWK.createKeyStore();\n    await keystore.generate('RSA', 2048, {\n      alg: 'RS256',\n      use: 'sig',\n      kid: 'test',\n    });\n  });\n\n  after(async () => {\n    helperServer.after();\n    config.isEnterprise = false;\n    config.features = {};\n  });\n\n  step('create an LTI instance', async () => {\n    // Load the LTI admin page.\n    const ltiInstancesResponse = await fetchCheerio(\n      `${siteUrl}/pl/administrator/institution/1/lti13`,\n    );\n    assert.equal(ltiInstancesResponse.status, 200);\n\n    const newInstanceButton = ltiInstancesResponse.$('button:contains(Add a new LTI 1.3 instance)');\n    const newInstanceForm = newInstanceButton.closest('form');\n\n    // Create a new LTI instance.\n    const createInstanceResponse = await fetchCheerio(\n      `${siteUrl}/pl/administrator/institution/1/lti13`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __csrf_token: newInstanceForm.find('input[name=__csrf_token]').val() as string,\n          __action: newInstanceButton.attr('value') as string,\n        }),\n      },\n    );\n    assert.equal(createInstanceResponse.status, 200);\n\n    // Let's see how far we can get without customizing anything in the instance...\n  });\n\n  step('configure an LTI instance', async () => {\n    const ltiInstanceResponse = await fetchCheerio(\n      `${siteUrl}/pl/administrator/institution/1/lti13/1`,\n    );\n    assert.equal(ltiInstanceResponse.status, 200);\n\n    const savePlatformOptionsButton = ltiInstanceResponse.$(\n      'button:contains(Save platform options)',\n    );\n    const platformOptionsForm = savePlatformOptionsButton.closest('form');\n\n    // Update the platform options.\n    const updatePlatformOptionsResponse = await fetchCheerio(\n      `${siteUrl}/pl/administrator/institution/1/lti13/1`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __csrf_token: platformOptionsForm.find('input[name=__csrf_token]').val() as string,\n          __action: platformOptionsForm.find('input[name=__action]').val() as string,\n          platform: 'Unknown',\n          issuer_params: JSON.stringify({\n            issuer: `http://localhost:${oidcProviderPort}`,\n            authorization_endpoint: `http://localhost:${oidcProviderPort}/auth`,\n            jwks_uri: `http://localhost:${oidcProviderPort}/jwks`,\n            token_endpoint: `http://localhost:${oidcProviderPort}/token`,\n          }),\n          custom_fields: '{}',\n          client_id: CLIENT_ID,\n        }),\n      },\n    );\n    assert.equal(updatePlatformOptionsResponse.status, 200);\n\n    const addKeyButton = updatePlatformOptionsResponse.$('button:contains(Add key to keystore)');\n    const keystoreForm = addKeyButton.closest('form');\n\n    // Create a key\n    const createKeyResponse = await fetchCheerio(\n      `${siteUrl}/pl/administrator/institution/1/lti13/1`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          __csrf_token: keystoreForm.find('input[name=__csrf_token]').val() as string,\n          __action: addKeyButton.attr('value') as string,\n        }),\n      },\n    );\n    assert.equal(createKeyResponse.status, 200);\n  });\n\n  step('enable LTI 1.3 as an authentication provider', async () => {\n    const ssoResponse = await fetchCheerio(`${siteUrl}/pl/administrator/institution/1/sso`);\n    assert.equal(ssoResponse.status, 200);\n\n    const saveButton = ssoResponse.$('button:contains(Save)');\n    const form = saveButton.closest('form');\n    const lti13Label = form.find('label:contains(LTI 1.3)');\n    const lti13Input = lti13Label.closest('div').find('input');\n\n    const enableLtiResponse = await fetchCheerio(`${siteUrl}/pl/administrator/institution/1/sso`, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __csrf_token: form.find('input[name=__csrf_token]').val() as string,\n        __action: saveButton.attr('value') as string,\n        enabled_authn_provider_ids: lti13Input.attr('value') as string,\n      }),\n    });\n    assert.equal(enableLtiResponse.status, 200);\n  });\n\n  step('perform login', async () => {\n    // `openid-client` relies on the session to store state, so we need to use\n    // a cookie-aware version of fetch.\n    const fetchWithCookies = fetchCookie(fetchCheerio);\n\n    const startLoginResponse = await fetchWithCookies(`${siteUrl}/pl/lti13_instance/1/auth/login`, {\n      method: 'POST',\n      body: new URLSearchParams({\n        iss: siteUrl,\n        login_hint: 'fef15674-ae78-4763-b915-6fe3dbf42c67',\n        target_link_uri: `${siteUrl}/pl/lti13_instance/1/course_navigation`,\n      }),\n      redirect: 'manual',\n    });\n    assert.equal(startLoginResponse.status, 302);\n\n    const redirectUrl = new URL(startLoginResponse.headers.get('location') as string);\n    assert.equal(redirectUrl.hostname, 'localhost');\n    assert.equal(redirectUrl.pathname, '/auth');\n    assert.equal(redirectUrl.searchParams.get('client_id'), CLIENT_ID);\n    assert.equal(redirectUrl.searchParams.get('scope'), 'openid');\n    assert.equal(redirectUrl.searchParams.get('response_type'), 'id_token');\n    assert.equal(redirectUrl.searchParams.get('response_mode'), 'form_post');\n    assert.equal(\n      redirectUrl.searchParams.get('redirect_uri'),\n      `${siteUrl}/pl/lti13_instance/1/auth/callback`,\n    );\n    assert.equal(\n      redirectUrl.searchParams.get('login_hint'),\n      'fef15674-ae78-4763-b915-6fe3dbf42c67',\n    );\n    assert.ok(redirectUrl.searchParams.get('nonce'));\n    assert.ok(redirectUrl.searchParams.get('state'));\n\n    const redirectUri = redirectUrl.searchParams.get('redirect_uri') as string;\n    const nonce = redirectUrl.searchParams.get('nonce') as string;\n    const state = redirectUrl.searchParams.get('state') as string;\n\n    const key = keystore.get('test');\n    const joseKey = await jose.importJWK(key.toJSON(true) as any);\n    const fakeIdToken = await new jose.SignJWT({\n      nonce,\n      // The below values are based on data observed by Dave during an actual\n      // login with Canvas.\n      'https://purl.imsglobal.org/spec/lti/claim/message_type': 'LtiResourceLinkRequest',\n      'https://purl.imsglobal.org/spec/lti/claim/version': '1.3.0',\n      'https://purl.imsglobal.org/spec/lti/claim/deployment_id':\n        '7fdce954-4c33-47c9-97b4-e435dbbed9bb',\n      // This MUST match the value in the login request.\n      'https://purl.imsglobal.org/spec/lti/claim/target_link_uri': `${siteUrl}/pl/lti13_instance/1/course_navigation`,\n      'https://purl.imsglobal.org/spec/lti/claim/resource_link': {\n        id: 'f6bc7a50-448c-4469-94f7-54d6ea882c2a',\n        title: 'Test Course',\n      },\n      'https://purl.imsglobal.org/spec/lti/claim/roles': [\n        'http://purl.imsglobal.org/vocab/lis/v2/institution/person#Instructor',\n        'http://purl.imsglobal.org/vocab/lis/v2/membership#Instructor',\n        'http://purl.imsglobal.org/vocab/lis/v2/system/person#User',\n      ],\n      'https://purl.imsglobal.org/spec/lti/claim/context': {\n        id: 'f6bc7a50-448c-4469-94f7-54d6ea882c2a',\n        type: ['http://purl.imsglobal.org/vocab/lis/v2/course#CourseOffering'],\n        label: 'TEST 101',\n        title: 'Test Course',\n      },\n      name: 'Test User',\n      email: 'test-user@example.com',\n      'https://purl.imsglobal.org/spec/lti/claim/custom': {\n        uin: '123456789',\n      },\n      'https://purl.imsglobal.org/spec/lti-ags/claim/endpoint': {\n        scope: [\n          'https://purl.imsglobal.org/spec/lti-ags/scope/lineitem',\n          'https://purl.imsglobal.org/spec/lti-ags/scope/score',\n        ],\n        errors: {\n          errors: {},\n        },\n        lineitems: `https://localhost:${oidcProviderPort}/api/lti/courses/1/line_items`,\n        validation_context: null,\n      },\n    })\n      .setProtectedHeader({ alg: 'RS256' })\n      .setIssuer(`http://localhost:${oidcProviderPort}`)\n      .setIssuedAt()\n      .setExpirationTime('1h')\n      .setSubject('a555090c-8355-4b58-b315-247612cc22f0')\n      .setAudience(CLIENT_ID)\n      .sign(joseKey);\n\n    // Run a server to respond to JWKS requests.\n    const app = express();\n    app.get('/jwks', (req, res) => {\n      res.setHeader('Content-Type', 'application/json');\n      // Pass `false` to `toJSON` to only include public keys.\n      res.end(JSON.stringify(keystore.toJSON(false)));\n    });\n\n    const finishLoginResponse = await withServer(app, oidcProviderPort, async () => {\n      return await fetchWithCookies(redirectUri, {\n        method: 'POST',\n        body: new URLSearchParams({\n          nonce,\n          state,\n          id_token: fakeIdToken,\n        }),\n      });\n    });\n\n    assert.equal(finishLoginResponse.status, 200);\n    // Inspect more into this response for output that is for Instructors vs for Students\n    // Setup link to a course instance (database modification)\n    // Confirm the redirect passes through to the course\n\n    const repeatLoginTestNonce = await withServer(app, oidcProviderPort, async () => {\n      return await fetchWithCookies(redirectUri, {\n        method: 'POST',\n        body: new URLSearchParams({\n          nonce,\n          state,\n          id_token: fakeIdToken,\n        }),\n        redirect: 'manual',\n      });\n    });\n\n    // This should fail for nonce reuse\n    assert.equal(repeatLoginTestNonce.status, 500);\n  });\n\n  step('validate login', async () => {\n    // There should be a new user.\n    const user = await selectOptionalUserByUid('test-user@example.com');\n    assert.ok(user);\n    assert.equal(user?.uid, 'test-user@example.com');\n    assert.equal(user?.name, 'Test User');\n    assert.equal(user?.uin, '123456789');\n    assert.equal(user?.institution_id, '1');\n\n    // The new user should have an entry in `lti13_users`.\n    const ltiUser = await queryOptionalRow(\n      'SELECT * FROM lti13_users WHERE user_id = $user_id',\n      {\n        user_id: user?.user_id,\n      },\n      Lti13UserSchema,\n    );\n    assert.ok(ltiUser);\n    assert.equal(ltiUser?.sub, 'a555090c-8355-4b58-b315-247612cc22f0');\n    assert.equal(ltiUser?.lti13_instance_id, '1');\n  });\n\n  step('malformed requests fail', async () => {\n    const fetchWithCookies = fetchCookie(fetchCheerio);\n\n    // Malformed login\n    const startBadLoginResponse = await fetchWithCookies(\n      `${siteUrl}/pl/lti13_instance/1/auth/login`,\n      {\n        method: 'POST',\n        body: new URLSearchParams({\n          iss: siteUrl,\n          // Missing required login_hint\n          //login_hint: 'fef15674-ae78-4763-b915-6fe3dbf42c67',\n          target_link_uri: `${siteUrl}/pl/lti13_instance/1/course_navigation`,\n        }),\n        redirect: 'manual',\n      },\n    );\n    assert.equal(startBadLoginResponse.status, 500);\n\n    // Successful login to test malformed response\n    const startLoginResponse = await fetchWithCookies(`${siteUrl}/pl/lti13_instance/1/auth/login`, {\n      method: 'POST',\n      body: new URLSearchParams({\n        iss: siteUrl,\n        login_hint: 'fef15674-ae78-4763-b915-6fe3dbf42c67',\n        target_link_uri: `${siteUrl}/pl/lti13_instance/1/course_navigation`,\n      }),\n      redirect: 'manual',\n    });\n    assert.equal(startLoginResponse.status, 302);\n\n    const redirectUrl = new URL(startLoginResponse.headers.get('location') as string);\n\n    assert.ok(redirectUrl.searchParams.get('state'));\n\n    const redirectUri = redirectUrl.searchParams.get('redirect_uri') as string;\n    const nonce = redirectUrl.searchParams.get('nonce') as string;\n\n    // Not a real token, not running a JWKS server, so not a full test\n    // Just making sure if state is missing that PL errors\n    const finishBadLoginResponse = await fetchWithCookies(redirectUri, {\n      method: 'POST',\n      body: new URLSearchParams({\n        nonce,\n        // Missing state parameter\n        //state,\n        id_token: 'junkjunkjunk',\n      }),\n      redirect: 'manual',\n    });\n\n    assert.equal(finishBadLoginResponse.status, 500);\n  });\n\n  step('request access token', async () => {\n    const ACCESS_TOKEN = '33679293-edd6-4415-af36-03113feb8447';\n\n    // Run a server to respond to token requests.\n    const app = express();\n    app.use(express.urlencoded({ extended: true }));\n\n    app.post('/token', async (req, res) => {\n      assert.equal(req.body.grant_type, 'client_credentials');\n      assert.equal(req.body.client_id, CLIENT_ID);\n      assert.equal(\n        req.body.client_assertion_type,\n        'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      );\n\n      // Decodes but does not validate\n      const jwt = JSON.parse(\n        Buffer.from(req.body.client_assertion.split('.')[1], 'base64').toString(),\n      );\n      assert.equal(jwt.iss, CLIENT_ID);\n      assert.property(jwt, 'jti');\n\n      res.send(\n        JSON.stringify({\n          access_token: ACCESS_TOKEN,\n          stenotype: 'bearer',\n          expires_in: 3600,\n          scope: req.body.scope,\n        }),\n      );\n    });\n\n    await withServer(app, oidcProviderPort, async () => {\n      const result = await getAccessToken('1');\n      assert.equal(result, ACCESS_TOKEN);\n    });\n  });\n});\n\ndescribe('fetchRetry()', async () => {\n  let apiProviderPort: number;\n  const app = express();\n  let baseUrl: string;\n\n  let apiCount: number;\n\n  // Thanks chatGPT\n  const products = [\n    'Apple',\n    'Banana',\n    'Cherry',\n    'Date',\n    'Eggplant',\n    'Fig',\n    'Grapes',\n    'Honeydew',\n    'Iceberg',\n    'Jackfruit',\n    'Kiwi',\n    'Lemon',\n    'Mango',\n    'Nectarine',\n    'Orange',\n    'Papaya',\n    'Quince',\n    'Raspberry',\n    'Strawberry',\n    'Tomato',\n    'Ugli fruit',\n    'Vanilla',\n    'Watermelon',\n    'Xigua',\n    'Yam',\n    'Zucchini',\n  ];\n\n  const productApi = (req, res) => {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const totalPages = Math.ceil(products.length / limit);\n\n    // Base URL for links\n    const baseUrl = `${req.protocol}://${req.get('host')}${req.baseUrl}${req.path}`;\n\n    // Generate Link Header\n    const links: string[] = [];\n\n    if (page < totalPages) {\n      links.push(`<${baseUrl}?page=${page + 1}&limit=${limit}>; rel=\"next\"`);\n    }\n    if (page > 1) {\n      links.push(`<${baseUrl}?page=${page - 1}&limit=${limit}>; rel=\"prev\"`);\n    }\n    links.push(`<${baseUrl}?page=1&limit=${limit}>; rel=\"first\"`);\n    links.push(`<${baseUrl}?page=${totalPages}&limit=${limit}>; rel=\"last\"`);\n\n    res.set('Link', links.join(', '));\n\n    const returning = products.slice(startIndex, endIndex);\n    res.json(returning);\n  };\n\n  function respond403(res) {\n    console.warn('Throwing 403, attempt ' + apiCount);\n    res.status(403).json([]);\n  }\n\n  before(async () => {\n    apiProviderPort = await getPort();\n    baseUrl = `http://localhost:${apiProviderPort}/`;\n    // Run a server to respond to API requests.\n    app.use(express.urlencoded({ extended: true }));\n\n    app.use((req, res, next) => {\n      apiCount++;\n      next();\n    });\n\n    app.get('/403all', async (req, res) => {\n      respond403(res);\n    });\n\n    app.get('/403oddAttempt', async (req, res) => {\n      if (apiCount % 2 === 1) {\n        respond403(res);\n      } else {\n        productApi(req, res);\n      }\n    });\n\n    app.get('/', productApi);\n  });\n\n  step('should return the full list by iterating', async () => {\n    apiCount = 0;\n    await withServer(app, apiProviderPort, async () => {\n      const resultArray = await fetchRetryPaginated(baseUrl, {}, { sleepMs: 100 });\n      assert.equal(resultArray.length, 3);\n      // Unwrap to one combined array\n      const products = z.string().array().array().parse(resultArray);\n      const fullList = products.flat();\n      assert.equal(fullList.length, 26);\n      assert.equal(apiCount, 3);\n    });\n  });\n\n  step('should return the full list with a large limit', async () => {\n    apiCount = 0;\n    await withServer(app, apiProviderPort, async () => {\n      const res = await fetchRetry(baseUrl + '?limit=100', {}, { sleepMs: 100 });\n      const products = z\n        .string()\n        .array()\n        .parse(await res.json());\n      const fullList = products.flat();\n      assert.equal(fullList.length, 26);\n      assert.equal(apiCount, 1);\n    });\n  });\n\n  step('should throw an error on all 403s', async () => {\n    apiCount = 0;\n    await withServer(app, apiProviderPort, async () => {\n      await assert.isRejected(fetchRetry(baseUrl + '403all', {}, { sleepMs: 100 }), /fetch error/);\n      assert.equal(apiCount, 5);\n    });\n  });\n\n  step('should return the full list by iterating with intermittant 403s', async () => {\n    apiCount = 0;\n    await withServer(app, apiProviderPort, async () => {\n      const resultArray = await fetchRetryPaginated(\n        baseUrl + '403oddAttempt',\n        {},\n        { sleepMs: 100 },\n      );\n      assert.equal(resultArray.length, 3);\n      const products = z.string().array().array().parse(resultArray);\n      const fullList = products.flat();\n      assert.equal(fullList.length, 26);\n      assert.equal(apiCount, 6);\n    });\n  });\n});\n"]}