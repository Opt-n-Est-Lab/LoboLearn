{"version":3,"file":"manualGrading.test.js","sourceRoot":"","sources":["../../src/tests/manualGrading.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport _ from 'lodash';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport {\n  insertCourseInstancePermissions,\n  insertCoursePermissionsByUserUid,\n} from '../models/course-permissions.js';\n\nimport {\n  type User,\n  assertAlert,\n  parseInstanceQuestionId,\n  saveOrGrade,\n  setUser,\n} from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\nconst defaultUser: User = {\n  authUid: config.authUid,\n  authName: config.authName,\n  authUin: config.authUin,\n};\n\ntype MockUser = User & {\n  user_id?: string;\n  authUid: string;\n};\n\ninterface RubricItem {\n  id?: string;\n  points: number;\n  description: string;\n  explanation?: string;\n  grader_note?: string;\n  always_show_to_students: boolean;\n  description_render?: string;\n  explanation_render?: string;\n  grader_note_render?: string;\n}\n\nconst mockStudents: MockUser[] = [\n  { authUid: 'student1', authName: 'Student User 1', authUin: '00000001' },\n  { authUid: 'student2', authName: 'Student User 2', authUin: '00000002' },\n  { authUid: 'student3', authName: 'Student User 3', authUin: '00000003' },\n  { authUid: 'student4', authName: 'Student User 4', authUin: '00000004' },\n];\n\nconst mockStaff: MockUser[] = [\n  { authUid: 'staff1', authName: 'Staff User 1', authUin: 'STAFF001' },\n  { authUid: 'staff2', authName: 'Staff User 2', authUin: 'STAFF002' },\n  { authUid: 'staff3', authName: 'Staff User 3', authUin: 'STAFF003' },\n  { authUid: 'staff4', authName: 'Staff User 4', authUin: 'STAFF004' },\n];\n\nconst assessmentTitle = 'Homework for Internal, External, Manual grading methods';\nconst manualGradingQuestionTitle = 'Manual Grading: Fibonacci function, file upload';\n\n/**\n * @param user student or instructor user to load page by\n * @returns \"Homework for Internal, External, Manual grading methods\" page text\n */\nasync function loadHomeworkPage(user: User): Promise<string> {\n  setUser(user);\n  const studentCourseInstanceUrl = baseUrl + '/course_instance/1';\n  const courseInstanceBody = await (await fetch(studentCourseInstanceUrl)).text();\n  const $courseInstancePage = cheerio.load(courseInstanceBody);\n  const hm9InternalExternalManualUrl =\n    siteUrl + $courseInstancePage(`a:contains(\"${assessmentTitle}\")`).attr('href');\n  const res = await fetch(hm9InternalExternalManualUrl);\n  assert.equal(res.ok, true);\n  return res.text();\n}\n\n/**\n * @param user student or instructor user to load page by\n * @returns student URL for manual grading question\n */\nasync function loadHomeworkQuestionUrl(user: User): Promise<string> {\n  const hm1Body = await loadHomeworkPage(user);\n  const $hm1Body = cheerio.load(hm1Body);\n  return siteUrl + $hm1Body(`a:contains(\"${manualGradingQuestionTitle}\")`).attr('href');\n}\n\n/**\n * Gets the score text for the first submission panel on the page.\n */\nfunction getLatestSubmissionStatus($: cheerio.CheerioAPI): string {\n  return $('[data-testid=\"submission-status\"] .badge').first().text();\n}\n\nlet iqUrl: string, iqId: string | number;\nlet instancesAssessmentUrl: string;\nlet manualGradingAssessmentUrl: string;\nlet manualGradingAssessmentQuestionUrl: string;\nlet manualGradingIQUrl: string;\nlet manualGradingNextUngradedUrl: string;\nlet $manualGradingPage: cheerio.CheerioAPI;\nlet score_percent: number, score_points: number, adjust_points: number | null;\nlet feedback_note: string;\nlet rubric_items: RubricItem[];\nlet selected_rubric_items: number[];\n\nasync function submitGradeForm(\n  method: 'rubric' | 'points' | 'percentage' = 'rubric',\n): Promise<void> {\n  const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n  const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n  const form = $manualGradingIQPage('form[name=manual-grading-form]');\n  const params = new URLSearchParams({\n    __action: 'add_manual_grade',\n    __csrf_token: form.find('input[name=__csrf_token]').attr('value') || '',\n    submission_id: form.find('input[name=submission_id]').attr('value') || '',\n    modified_at: form.find('input[name=modified_at]').attr('value') || '',\n    score_manual_points: (method === 'points' ? score_points : score_points - 1).toString(),\n    score_manual_percent: (method === 'percentage' ? score_percent : score_percent - 10).toString(),\n    submission_note: feedback_note,\n  });\n  if (adjust_points) params.append('score_manual_adjust_points', adjust_points.toString());\n  (selected_rubric_items || [])\n    .map((index) => rubric_items[index].id)\n    .forEach((id) => {\n      assert(id);\n      params.append('rubric_item_selected_manual', id);\n    });\n  if (method === 'percentage') params.append('use_score_perc', 'on');\n  await fetch(manualGradingIQUrl, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n    body: params,\n  });\n}\n\nfunction checkGradingResults(assigned_grader: MockUser, grader: MockUser): void {\n  step('manual grading page for instance question lists updated values', async () => {\n    setUser(defaultUser);\n    const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n    const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n    const form = $manualGradingIQPage('form[name=manual-grading-form]');\n    // The percentage input is not checked because its value is updated via client-side JS, which is\n    // currently not supported by the test suite\n    assert.equal(form.find('input[name=score_manual_points]').val(), score_points.toString());\n    assert.equal(form.find('textarea').text(), feedback_note);\n\n    if (rubric_items) {\n      rubric_items.forEach((item, index) => {\n        const checkbox = form.find(`.js-selectable-rubric-item[value=\"${item.id}\"]`);\n        assert.equal(checkbox.length, 1);\n        assert.equal(checkbox.is(':checked'), selected_rubric_items.includes(index));\n      });\n      assert.equal(\n        form.find('input[name=score_manual_adjust_points]').val(),\n        (adjust_points ?? '').toString(),\n      );\n    } else {\n      assert.equal(form.find('.js-selectable-rubric-item').length, 0);\n      assert.equal(form.find('input[name=score_manual_adjust_points]').length, 0);\n    }\n  });\n\n  step('manual grading page for assessment question lists updated values', async () => {\n    setUser(defaultUser);\n    const manualGradingAQData = await (\n      await fetch(manualGradingAssessmentQuestionUrl + '/instances.json')\n    ).text();\n    const instanceList = JSON.parse(manualGradingAQData)?.instance_questions;\n    assert(instanceList);\n    assert.lengthOf(instanceList, 1);\n    assert.equal(instanceList[0].id, iqId);\n    assert.isNotOk(instanceList[0].requires_manual_grading);\n    assert.equal(instanceList[0].assigned_grader, assigned_grader.user_id);\n    assert.equal(instanceList[0].assigned_grader_name, assigned_grader.authName);\n    assert.equal(instanceList[0].last_grader, grader.user_id);\n    assert.equal(instanceList[0].last_grader_name, grader.authName);\n    assert.closeTo(instanceList[0].score_perc, score_percent, 0.01);\n    assert.closeTo(instanceList[0].points, score_points, 0.01);\n    assert.closeTo(instanceList[0].manual_points, score_points, 0.01);\n    assert.closeTo(instanceList[0].auto_points, 0, 0.01);\n  });\n\n  step('manual grading page for assessment does NOT show graded instance for grading', async () => {\n    setUser(mockStaff[0]);\n    const manualGradingPage = await (await fetch(manualGradingAssessmentUrl)).text();\n    $manualGradingPage = cheerio.load(manualGradingPage);\n    const row = $manualGradingPage(`tr:contains(\"${manualGradingQuestionTitle}\")`);\n    assert.equal(row.length, 1);\n    const count = row.find('td[data-testid=\"iq-to-grade-count\"]').text().replace(/\\s/g, '');\n    assert.equal(count, '0/1');\n    const nextButton = row.find('.btn:contains(\"next submission\")');\n    assert.equal(nextButton.length, 0);\n  });\n\n  step('next ungraded button should point to general page after grading', async () => {\n    setUser(mockStaff[0]);\n    let nextUngraded = await fetch(manualGradingNextUngradedUrl, { redirect: 'manual' });\n    assert.equal(nextUngraded.status, 302);\n    assert.equal(\n      nextUngraded.headers.get('location'),\n      new URL(manualGradingAssessmentQuestionUrl).pathname,\n    );\n    setUser(mockStaff[1]);\n    nextUngraded = await fetch(manualGradingNextUngradedUrl, { redirect: 'manual' });\n    assert.equal(nextUngraded.status, 302);\n    assert.equal(\n      nextUngraded.headers.get('location'),\n      new URL(manualGradingAssessmentQuestionUrl).pathname,\n    );\n  });\n\n  step('student view should have the new score/feedback/rubric', async () => {\n    iqUrl = await loadHomeworkQuestionUrl(mockStudents[0]);\n    const questionsPage = await (await fetch(iqUrl)).text();\n    const $questionsPage = cheerio.load(questionsPage);\n    const feedbackBlock = $questionsPage('[data-testid=\"submission-with-feedback\"]').first();\n\n    assert.equal(\n      getLatestSubmissionStatus($questionsPage),\n      `manual grading: ${Math.floor(score_percent)}%`,\n    );\n    assert.equal(\n      $questionsPage(\n        '#question-score-panel tr:contains(\"Total points\") [data-testid=\"awarded-points\"]',\n      )\n        .first()\n        .text()\n        .trim(),\n      `${score_points}`,\n    );\n    assert.equal(\n      feedbackBlock.find('[data-testid=\"feedback-body\"]').first().text().trim(),\n      feedback_note,\n    );\n\n    if (!rubric_items) {\n      const container = feedbackBlock.find('[data-testid^=\"rubric-item-container-\"]');\n      assert.equal(container.length, 0);\n    } else {\n      rubric_items.forEach((item, index) => {\n        const container = feedbackBlock.find(`[data-testid=\"rubric-item-container-${item.id}\"]`);\n        if (item.always_show_to_students || selected_rubric_items.includes(index)) {\n          assert.equal(container.length, 1);\n          assert.equal(\n            container.find('input[type=\"checkbox\"]').is(':checked'),\n            selected_rubric_items.includes(index),\n          );\n          assert.equal(\n            container.find('[data-testid=\"rubric-item-points\"]').text().trim(),\n            `[${item.points >= 0 ? '+' : ''}${item.points}]`,\n          );\n          assert.equal(\n            container.find('[data-testid=\"rubric-item-description\"]').html()?.trim(),\n            item.description_render ?? item.description,\n          );\n          if (item.explanation) {\n            assert.equal(\n              container.find('[data-testid=\"rubric-item-explanation\"]').attr('data-bs-content'),\n              item.explanation_render ?? `<p>${item.explanation}</p>`,\n            );\n          } else {\n            assert.equal(container.find('[data-testid=\"rubric-item-explanation\"]').length, 0);\n          }\n        } else {\n          assert.equal(container.length, 0);\n        }\n      });\n    }\n    if (adjust_points) {\n      assert.equal(\n        feedbackBlock.find('[data-testid=\"rubric-adjust-points\"]').text().trim(),\n        `[${adjust_points >= 0 ? '+' : ''}${adjust_points}]`,\n      );\n    } else {\n      assert.equal(feedbackBlock.find('[data-testid=\"rubric-adjust-points\"]').length, 0);\n    }\n  });\n}\n\nfunction checkSettingsResults(\n  starting_points: number,\n  min_points: number,\n  max_extra_points: number,\n): void {\n  step('rubric settings modal should update with new values', async () => {\n    const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n    const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n    const form = $manualGradingIQPage('form[name=rubric-settings]');\n\n    assert.equal(\n      form.find(`input[name=\"starting_points\"][value=\"${starting_points}\"]`).is(':checked'),\n      true,\n    );\n    assert.equal(form.find('input[name=\"max_extra_points\"]').val(), max_extra_points.toString());\n    assert.equal(form.find('input[name=\"min_points\"]').val(), min_points.toString());\n\n    const idFields = form.find('input[name^=\"rubric_item\"][name$=\"[id]\"]');\n\n    rubric_items.forEach((item, index) => {\n      const idField = $manualGradingIQPage(idFields.get(index));\n      assert.equal(idField.length, 1);\n      if (!item.id) {\n        item.id = idField.attr('value');\n      }\n      assert.equal(idField.val(), item.id);\n      assert.equal(idField.attr('name'), `rubric_item[cur${item.id}][id]`);\n      const points = form.find(`[name=\"rubric_item[cur${item.id}][points]\"]`);\n      assert.equal(points.val(), item.points.toString());\n      const description = form.find(`[name=\"rubric_item[cur${item.id}][description]\"]`);\n      assert.equal(description.val(), item.description);\n      const explanation = form.find(\n        `button[data-input-name=\"rubric_item[cur${item.id}][explanation]\"]`,\n      );\n      assert.equal(explanation.attr('data-current-value') ?? '', item.explanation ?? '');\n      const graderNote = form.find(\n        `button[data-input-name=\"rubric_item[cur${item.id}][grader_note]\"]`,\n      );\n      assert.equal(graderNote.attr('data-current-value') ?? '', item.grader_note ?? '');\n      const always_show_to_students = form.find(\n        `[name=\"rubric_item[cur${item.id}][always_show_to_students]\"]:checked`,\n      );\n      assert.equal(always_show_to_students.val(), item.always_show_to_students ? 'true' : 'false');\n    });\n  });\n\n  step('grading panel should have proper values for rubric', async () => {\n    const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n    const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n    const form = $manualGradingIQPage('form[name=manual-grading-form]');\n\n    rubric_items.forEach((item) => {\n      const checkbox = form.find(`.js-selectable-rubric-item[value=\"${item.id}\"]`);\n      assert.equal(checkbox.length, 1);\n      const container = checkbox.parents('.js-selectable-rubric-item-label');\n      assert.equal(container.length, 1);\n      assert.equal(\n        container.find('[data-testid=\"rubric-item-points\"]').text().trim(),\n        `[${item.points >= 0 ? '+' : ''}${item.points}]`,\n      );\n      assert.equal(\n        container.find('[data-testid=\"rubric-item-description\"]').html()?.trim(),\n        item.description_render ?? item.description,\n      );\n      assert.equal(\n        container.find('[data-testid=\"rubric-item-explanation\"]').html()?.trim(),\n        item.explanation_render ?? (item.explanation ? `<p>${item.explanation}</p>` : ''),\n      );\n      assert.equal(\n        container.find('[data-testid=\"rubric-item-grader-note\"]').html()?.trim(),\n        item.grader_note_render ?? (item.grader_note ? `<p>${item.grader_note}</p>` : ''),\n      );\n    });\n  });\n}\n\nfunction buildRubricItemFields(items: RubricItem[]): Record<string, string> {\n  return Object.fromEntries(\n    Object.entries(\n      _.mapKeys(items, (item, index) => (item.id ? `cur${item.id}` : `new${index}`)),\n    ).flatMap(([key, item], order) =>\n      Object.entries({ order, ...item }).map(([field, value]) => [\n        `rubric_item[${key}][${field}]`,\n        String(value),\n      ]),\n    ),\n  );\n}\n\ndescribe('Manual Grading', function () {\n  this.timeout(80000);\n\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  before('build assessment manual grading page URL', async () => {\n    const assessments = (await sqldb.queryAsync(sql.get_assessment, {})).rows;\n    assert.lengthOf(assessments, 1);\n    manualGradingAssessmentUrl = `${baseUrl}/course_instance/1/instructor/assessment/${assessments[0].id}/manual_grading`;\n    instancesAssessmentUrl = `${baseUrl}/course_instance/1/instructor/assessment/${assessments[0].id}/instances`;\n  });\n\n  before('add staff users', async () => {\n    await Promise.all(\n      mockStaff.map(async (staff) => {\n        const { user_id } = await insertCoursePermissionsByUserUid({\n          course_id: '1',\n          uid: staff.authUid,\n          course_role: 'None',\n          authn_user_id: '1',\n        });\n        staff.user_id = user_id;\n        await insertCourseInstancePermissions({\n          course_id: '1',\n          user_id: staff.user_id,\n          course_instance_id: '1',\n          course_instance_role: 'Student Data Editor',\n          authn_user_id: '1',\n        });\n      }),\n    );\n  });\n\n  after('reset default user', () => setUser(defaultUser));\n\n  describe('Submit and grade a manually graded question', () => {\n    describe('Student submission tags question for grading', () => {\n      step('load page as student', async () => {\n        iqUrl = await loadHomeworkQuestionUrl(mockStudents[0]);\n        iqId = parseInstanceQuestionId(iqUrl);\n        manualGradingIQUrl = `${manualGradingAssessmentUrl}/instance_question/${iqId}`;\n\n        const instance_questions = (await sqldb.queryAsync(sql.get_instance_question, { iqId }))\n          .rows;\n        assert.lengthOf(instance_questions, 1);\n        assert.equal(instance_questions[0].requires_manual_grading, false);\n      });\n\n      step('submit an answer to the question', async () => {\n        const gradeRes = await saveOrGrade(iqUrl, {}, 'save', [\n          { name: 'fib.py', contents: Buffer.from('solution').toString('base64') },\n        ]);\n        const questionsPage = await gradeRes.text();\n        const $questionsPage = cheerio.load(questionsPage);\n\n        assert.equal(gradeRes.status, 200);\n        assert.equal(\n          getLatestSubmissionStatus($questionsPage),\n          'manual grading: waiting for grading',\n        );\n      });\n\n      step('should tag question as requiring grading', async () => {\n        const instanceQuestions = (await sqldb.queryAsync(sql.get_instance_question, { iqId }))\n          .rows;\n        assert.lengthOf(instanceQuestions, 1);\n        assert.equal(instanceQuestions[0].requires_manual_grading, true);\n      });\n    });\n\n    describe('Manual grading behavior while instance is open', () => {\n      step('manual grading page should warn about an open instance', async () => {\n        setUser(defaultUser);\n        const manualGradingPage = await (await fetch(manualGradingAssessmentUrl)).text();\n        $manualGradingPage = cheerio.load(manualGradingPage);\n        assertAlert($manualGradingPage, 'has one open instance');\n      });\n\n      step('manual grading page should list one question requiring grading', async () => {\n        const row = $manualGradingPage(`tr:contains(\"${manualGradingQuestionTitle}\")`);\n        assert.equal(row.length, 1);\n        const count = row.find('td[data-testid=\"iq-to-grade-count\"]').text().replace(/\\s/g, '');\n        assert.equal(count, '1/1');\n        const nextButton = row.find('.btn:contains(\"next submission\")');\n        assert.equal(nextButton.length, 1);\n        manualGradingAssessmentQuestionUrl =\n          siteUrl + row.find(`a:contains(\"${manualGradingQuestionTitle}\")`).attr('href');\n        manualGradingNextUngradedUrl = manualGradingAssessmentQuestionUrl + '/next_ungraded';\n      });\n\n      step(\n        'manual grading page for assessment question should warn about an open instance',\n        async () => {\n          setUser(defaultUser);\n          const manualGradingAQPage = await (\n            await fetch(manualGradingAssessmentQuestionUrl)\n          ).text();\n          const $manualGradingAQPage = cheerio.load(manualGradingAQPage);\n          assertAlert($manualGradingAQPage, 'has one open instance');\n        },\n      );\n\n      step('manual grading page for assessment question should list one instance', async () => {\n        setUser(defaultUser);\n        const manualGradingAQData = await (\n          await fetch(manualGradingAssessmentQuestionUrl + '/instances.json')\n        ).text();\n        const instanceList = JSON.parse(manualGradingAQData)?.instance_questions;\n        assert(instanceList);\n        assert.lengthOf(instanceList, 1);\n        assert.equal(instanceList[0].id, iqId);\n        assert.isOk(instanceList[0].requires_manual_grading);\n        assert.isNotOk(instanceList[0].assigned_grader);\n        assert.isNotOk(instanceList[0].assigned_grader_name);\n        assert.isNotOk(instanceList[0].last_grader);\n        assert.isNotOk(instanceList[0].last_grader_name);\n      });\n\n      step(\n        'manual grading page for instance question should warn about an open instance',\n        async () => {\n          setUser(defaultUser);\n          const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n          const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n          assertAlert($manualGradingIQPage, 'is still open');\n        },\n      );\n    });\n\n    describe('Manual grading behaviour when instance is closed', () => {\n      step('close assessment', async () => {\n        setUser(defaultUser);\n        const instancesBody = await (await fetch(instancesAssessmentUrl)).text();\n        const $instancesBody = cheerio.load(instancesBody);\n        const token =\n          $instancesBody('#grade-all-form').find('input[name=__csrf_token]').attr('value') || '';\n        await fetch(instancesAssessmentUrl, {\n          method: 'POST',\n          headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n          body: new URLSearchParams({\n            __action: 'close_all',\n            __csrf_token: token,\n          }).toString(),\n        });\n      });\n\n      step('manual grading page should NOT warn about an open instance', async () => {\n        setUser(defaultUser);\n        const manualGradingPage = await (await fetch(manualGradingAssessmentUrl)).text();\n        $manualGradingPage = cheerio.load(manualGradingPage);\n        assertAlert($manualGradingPage, 'has one open instance', 0);\n      });\n\n      step(\n        'manual grading page for assessment question should NOT warn about an open instance',\n        async () => {\n          setUser(defaultUser);\n          const manualGradingAQPage = await (\n            await fetch(manualGradingAssessmentQuestionUrl)\n          ).text();\n          const $manualGradingAQPage = cheerio.load(manualGradingAQPage);\n          assertAlert($manualGradingAQPage, 'has one open instance', 0);\n        },\n      );\n\n      step(\n        'manual grading page for instance question should NOT warn about an open instance',\n        async () => {\n          setUser(defaultUser);\n          const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n          const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n          assertAlert($manualGradingIQPage, 'is still open', 0);\n        },\n      );\n\n      step('next ungraded button should point to existing instance for all graders', async () => {\n        setUser(defaultUser);\n        let nextUngraded = await fetch(manualGradingNextUngradedUrl, { redirect: 'manual' });\n        assert.equal(nextUngraded.status, 302);\n        console.log(nextUngraded.headers.get('location'), new URL(manualGradingIQUrl).pathname);\n        assert.equal(nextUngraded.headers.get('location'), new URL(manualGradingIQUrl).pathname);\n        setUser(mockStaff[0]);\n        nextUngraded = await fetch(manualGradingNextUngradedUrl, { redirect: 'manual' });\n        assert.equal(nextUngraded.status, 302);\n        assert.equal(nextUngraded.headers.get('location'), new URL(manualGradingIQUrl).pathname);\n        setUser(mockStaff[1]);\n        nextUngraded = await fetch(manualGradingNextUngradedUrl, { redirect: 'manual' });\n        assert.equal(nextUngraded.status, 302);\n        assert.equal(nextUngraded.headers.get('location'), new URL(manualGradingIQUrl).pathname);\n      });\n    });\n\n    describe('Assigning grading to staff members', () => {\n      step('tag question to specific grader', async () => {\n        setUser(defaultUser);\n        const manualGradingAQPage = await (await fetch(manualGradingAssessmentQuestionUrl)).text();\n        const $manualGradingAQPage = cheerio.load(manualGradingAQPage);\n        const token =\n          $manualGradingAQPage('form[name=grading-form]')\n            .find('input[name=__csrf_token]')\n            .attr('value') || '';\n\n        await fetch(manualGradingAssessmentQuestionUrl, {\n          method: 'POST',\n          headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n          body: new URLSearchParams({\n            __action: 'batch_action',\n            __csrf_token: token,\n            batch_action_data: JSON.stringify({ assigned_grader: mockStaff[0].user_id }),\n            instance_question_id: iqId.toString(),\n          }).toString(),\n        });\n      });\n\n      step('manual grading page for assessment question should list tagged grader', async () => {\n        setUser(defaultUser);\n        const manualGradingAQData = await (\n          await fetch(manualGradingAssessmentQuestionUrl + '/instances.json')\n        ).text();\n        const instanceList = JSON.parse(manualGradingAQData)?.instance_questions;\n        assert(instanceList);\n        assert.lengthOf(instanceList, 1);\n        assert.equal(instanceList[0].id, iqId);\n        assert.isOk(instanceList[0].requires_manual_grading);\n        assert.equal(instanceList[0].assigned_grader, mockStaff[0].user_id);\n        assert.equal(instanceList[0].assigned_grader_name, mockStaff[0].authName);\n        assert.isNotOk(instanceList[0].last_grader);\n        assert.isNotOk(instanceList[0].last_grader_name);\n      });\n\n      step('manual grading page should show next ungraded button for assigned grader', async () => {\n        setUser(mockStaff[0]);\n        const manualGradingPage = await (await fetch(manualGradingAssessmentUrl)).text();\n        $manualGradingPage = cheerio.load(manualGradingPage);\n        const row = $manualGradingPage(`tr:contains(\"${manualGradingQuestionTitle}\")`);\n        assert.equal(row.length, 1);\n        const count = row.find('td[data-testid=\"iq-to-grade-count\"]').text().replace(/\\s/g, '');\n        assert.equal(count, '1/1');\n        const nextButton = row.find('.btn:contains(\"next submission\")');\n        assert.equal(nextButton.length, 1);\n      });\n\n      step(\n        'manual grading page should NOT show next ungraded button for non-assigned grader',\n        async () => {\n          setUser(mockStaff[1]);\n          const manualGradingPage = await (await fetch(manualGradingAssessmentUrl)).text();\n          $manualGradingPage = cheerio.load(manualGradingPage);\n          const row = $manualGradingPage(`tr:contains(\"${manualGradingQuestionTitle}\")`);\n          assert.equal(row.length, 1);\n          const count = row.find('td[data-testid=\"iq-to-grade-count\"]').text().replace(/\\s/g, '');\n          assert.equal(count, '1/1');\n          const nextButton = row.find('.btn:contains(\"next submission\")');\n          assert.equal(nextButton.length, 0);\n        },\n      );\n\n      step(\n        'next ungraded button should point to existing instance for assigned grader',\n        async () => {\n          setUser(mockStaff[0]);\n          const nextUngraded = await fetch(manualGradingNextUngradedUrl, { redirect: 'manual' });\n          assert.equal(nextUngraded.status, 302);\n          assert.equal(nextUngraded.headers.get('location'), new URL(manualGradingIQUrl).pathname);\n        },\n      );\n\n      step(\n        'next ungraded button should point to general page for non-assigned graders',\n        async () => {\n          setUser(mockStaff[1]);\n          const nextUngraded = await fetch(manualGradingNextUngradedUrl, { redirect: 'manual' });\n          assert.equal(nextUngraded.status, 302);\n          assert.equal(\n            nextUngraded.headers.get('location'),\n            new URL(manualGradingAssessmentQuestionUrl).pathname,\n          );\n        },\n      );\n    });\n\n    describe('Submit a grade using percentage (whole)', () => {\n      step('submit a grade using percentage', async () => {\n        setUser(mockStaff[2]);\n        score_percent = 30;\n        score_points = (score_percent * 6) / 100;\n        feedback_note = 'Test feedback note';\n        await submitGradeForm('percentage');\n      });\n\n      checkGradingResults(mockStaff[0], mockStaff[2]);\n    });\n\n    describe('Submit a grade using percentage (float)', () => {\n      step('submit a grade using percentage', async () => {\n        setUser(mockStaff[2]);\n        score_percent = 20.5;\n        score_points = (score_percent * 6) / 100;\n        feedback_note = 'Test feedback note';\n        await submitGradeForm('percentage');\n      });\n\n      checkGradingResults(mockStaff[0], mockStaff[2]);\n    });\n\n    describe('Submit a grade using points (whole)', () => {\n      step('submit a grade using points', async () => {\n        setUser(mockStaff[1]);\n        score_points = 4;\n        score_percent = Math.round((score_points / 6) * 10000) / 100;\n        feedback_note = 'Test feedback note updated';\n        await submitGradeForm('points');\n      });\n\n      checkGradingResults(mockStaff[0], mockStaff[1]);\n    });\n\n    describe('Submit a grade using points (float)', () => {\n      step('submit a grade using points', async () => {\n        setUser(mockStaff[1]);\n        score_points = 4.25;\n        score_percent = Math.round((score_points / 6) * 10000) / 100;\n        feedback_note = 'Test feedback note updated';\n        await submitGradeForm('points');\n      });\n\n      checkGradingResults(mockStaff[0], mockStaff[1]);\n    });\n\n    describe('Using rubric', () => {\n      describe('Positive grading', () => {\n        step('set rubric settings for positive grading should succeed', async () => {\n          setUser(mockStaff[0]);\n          const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n          const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n          const form = $manualGradingIQPage('form[name=rubric-settings]');\n          rubric_items = [\n            { points: 6, description: 'First rubric item', always_show_to_students: true },\n            {\n              points: 3,\n              description: 'Second rubric item (partial, with `markdown`)',\n              explanation: 'Explanation with **markdown**',\n              grader_note: 'Instructions with *markdown*',\n              description_render: 'Second rubric item (partial, with <code>markdown</code>)',\n              explanation_render: '<p>Explanation with <strong>markdown</strong></p>',\n              grader_note_render: '<p>Instructions with <em>markdown</em></p>',\n              always_show_to_students: false,\n            },\n            {\n              points: 0.4,\n              description: 'Third rubric item (partial, with moustache: {{params.value1}})',\n              explanation: 'Explanation with moustache: {{params.value2}}',\n              grader_note:\n                'Instructions with *markdown* and moustache: {{params.value3}}\\n\\nAnd more than one line',\n              description_render: 'Third rubric item (partial, with moustache: 37)',\n              explanation_render: '<p>Explanation with moustache: 43</p>',\n              grader_note_render:\n                '<p>Instructions with <em>markdown</em> and moustache: 49</p>\\n<p>And more than one line</p>',\n              always_show_to_students: true,\n            },\n            {\n              points: -1.6,\n              description: 'Penalty rubric item (negative points, floating point)',\n              always_show_to_students: false,\n            },\n            {\n              points: 0,\n              description: 'Rubric item with no value (zero points)',\n              always_show_to_students: true,\n            },\n          ];\n\n          const response = await fetch(manualGradingIQUrl, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n            body: new URLSearchParams({\n              __action: form.find('input[name=__action]').attr('value') || '',\n              __csrf_token: form.find('input[name=__csrf_token]').attr('value') || '',\n              modified_at: form.find('input[name=modified_at]').attr('value') || '',\n              use_rubric: 'true',\n              replace_auto_points: 'false',\n              starting_points: '0', // Positive grading\n              min_points: '-0.3',\n              max_extra_points: '0.3',\n              ...buildRubricItemFields(rubric_items),\n            }).toString(),\n          });\n\n          assert.equal(response.ok, true);\n        });\n\n        checkSettingsResults(0, -0.3, 0.3);\n\n        step('submit a grade using a positive rubric', async () => {\n          setUser(mockStaff[0]);\n          selected_rubric_items = [0, 2, 3];\n          score_points = 4.8;\n          score_percent = 80;\n          feedback_note = 'Test feedback note updated after rubric';\n          await submitGradeForm();\n        });\n\n        checkGradingResults(mockStaff[0], mockStaff[0]);\n      });\n\n      describe('Changing rubric item points', () => {\n        step('update rubric items should succeed', async () => {\n          setUser(mockStaff[0]);\n          const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n          const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n          const form = $manualGradingIQPage('form[name=rubric-settings]');\n          rubric_items[2].points = 1;\n          score_points = 5.4;\n          score_percent = 90;\n\n          const response = await fetch(manualGradingIQUrl, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n            body: new URLSearchParams({\n              __action: form.find('input[name=__action]').attr('value') || '',\n              __csrf_token: form.find('input[name=__csrf_token]').attr('value') || '',\n              modified_at: form.find('input[name=modified_at]').attr('value') || '',\n              use_rubric: 'true',\n              replace_auto_points: 'false',\n              starting_points: '0', // Positive grading\n              min_points: '-0.5',\n              max_extra_points: '0.5',\n              ...buildRubricItemFields(rubric_items),\n            }).toString(),\n          });\n\n          assert.equal(response.ok, true);\n        });\n\n        checkSettingsResults(0, -0.5, 0.5);\n        checkGradingResults(mockStaff[0], mockStaff[0]);\n      });\n\n      describe('Grading without rubric items', () => {\n        step('submit a grade using a positive rubric', async () => {\n          setUser(mockStaff[0]);\n          selected_rubric_items = [];\n          score_points = 0;\n          score_percent = 0;\n          feedback_note = 'Test feedback note without any rubric items';\n          await submitGradeForm();\n        });\n\n        checkGradingResults(mockStaff[0], mockStaff[0]);\n\n        step('update rubric items should succeed', async () => {\n          setUser(mockStaff[0]);\n          const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n          const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n          const form = $manualGradingIQPage('form[name=rubric-settings]');\n\n          const response = await fetch(manualGradingIQUrl, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n            body: new URLSearchParams({\n              __action: form.find('input[name=__action]').attr('value') || '',\n              __csrf_token: form.find('input[name=__csrf_token]').attr('value') || '',\n              modified_at: form.find('input[name=modified_at]').attr('value') || '',\n              replace_auto_points: 'false',\n              use_rubric: 'true',\n              starting_points: '0', // Positive grading\n              min_points: '-0.3',\n              max_extra_points: '0.3',\n              ...buildRubricItemFields(rubric_items),\n            }).toString(),\n          });\n\n          assert.equal(response.ok, true);\n        });\n\n        checkSettingsResults(0, -0.3, 0.3);\n        checkGradingResults(mockStaff[0], mockStaff[0]);\n      });\n\n      describe('Using adjust points', () => {\n        step('submit a grade using a rubric with adjust points', async () => {\n          setUser(mockStaff[3]);\n          selected_rubric_items = [1, 3];\n          adjust_points = -0.2;\n          score_points = 1.2;\n          score_percent = 20;\n          feedback_note = 'Test feedback note updated after rubric and adjustment';\n          await submitGradeForm();\n        });\n\n        checkGradingResults(mockStaff[0], mockStaff[3]);\n      });\n\n      describe('Floor and ceiling (max/min points)', () => {\n        step('submit a grade that reaches the ceiling', async () => {\n          setUser(mockStaff[3]);\n          selected_rubric_items = [0, 1];\n          adjust_points = null;\n          score_points = 6.3;\n          score_percent = 105;\n          feedback_note = 'Test feedback note updated over ceiling';\n          await submitGradeForm();\n        });\n\n        checkGradingResults(mockStaff[0], mockStaff[3]);\n\n        step('submit a grade that reaches the ceiling with adjust points', async () => {\n          setUser(mockStaff[3]);\n          selected_rubric_items = [0, 1];\n          adjust_points = 1.2;\n          score_points = 7.5;\n          score_percent = 125;\n          feedback_note = 'Test feedback note updated over ceiling and adjustment';\n          await submitGradeForm();\n        });\n\n        checkGradingResults(mockStaff[0], mockStaff[3]);\n\n        step('update rubric items should succeed', async () => {\n          setUser(mockStaff[0]);\n          const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n          const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n          const form = $manualGradingIQPage('form[name=rubric-settings]');\n          score_points = 6.9;\n          score_percent = 115;\n\n          const response = await fetch(manualGradingIQUrl, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n            body: new URLSearchParams({\n              __action: form.find('input[name=__action]').attr('value') || '',\n              __csrf_token: form.find('input[name=__csrf_token]').attr('value') || '',\n              modified_at: form.find('input[name=modified_at]').attr('value') || '',\n              replace_auto_points: 'false',\n              use_rubric: 'true',\n              starting_points: '0', // Positive grading\n              min_points: '-0.3',\n              max_extra_points: '-0.3',\n              ...buildRubricItemFields(rubric_items),\n            }).toString(),\n          });\n\n          assert.equal(response.ok, true);\n        });\n\n        checkSettingsResults(0, -0.3, -0.3);\n        checkGradingResults(mockStaff[0], mockStaff[0]);\n\n        step('submit a grade that reaches the floor', async () => {\n          setUser(mockStaff[3]);\n          selected_rubric_items = [2, 3];\n          adjust_points = null;\n          score_points = -0.3;\n          score_percent = -5;\n          feedback_note = 'Test feedback note updated over ceiling';\n          await submitGradeForm();\n        });\n\n        checkGradingResults(mockStaff[0], mockStaff[3]);\n      });\n\n      describe('Negative grading', () => {\n        step('set rubric settings to negative grading should succeed', async () => {\n          setUser(mockStaff[0]);\n          const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n          const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n          const form = $manualGradingIQPage('form[name=rubric-settings]');\n          rubric_items = [\n            { points: 0, description: 'First rubric item', always_show_to_students: true },\n            {\n              points: -3,\n              description: 'Second rubric item (partial, with `markdown`)',\n              explanation: 'Explanation with **markdown**',\n              grader_note: 'Instructions with *markdown*',\n              description_render: 'Second rubric item (partial, with <code>markdown</code>)',\n              explanation_render: '<p>Explanation with <strong>markdown</strong></p>',\n              grader_note_render: '<p>Instructions with <em>markdown</em></p>',\n              always_show_to_students: true,\n            },\n            {\n              points: -4,\n              description: 'Third rubric item (partial, with moustache: {{params.value1}})',\n              explanation: 'Explanation with moustache: {{params.value2}}',\n              grader_note:\n                'Instructions with *markdown* and moustache: {{params.value3}}\\n\\nAnd more than one line',\n              description_render: 'Third rubric item (partial, with moustache: 37)',\n              explanation_render: '<p>Explanation with moustache: 43</p>',\n              grader_note_render:\n                '<p>Instructions with <em>markdown</em> and moustache: 49</p>\\n<p>And more than one line</p>',\n              always_show_to_students: false,\n            },\n            {\n              points: 1.6,\n              description:\n                'Positive rubric item in negative grading (positive points, floating point)',\n              always_show_to_students: false,\n            },\n            {\n              points: 6,\n              description: 'Rubric item with positive reaching maximum',\n              always_show_to_students: true,\n            },\n          ];\n\n          const response = await fetch(manualGradingIQUrl, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n            body: new URLSearchParams({\n              __action: form.find('input[name=__action]').attr('value') || '',\n              __csrf_token: form.find('input[name=__csrf_token]').attr('value') || '',\n              modified_at: form.find('input[name=modified_at]').attr('value') || '',\n              replace_auto_points: 'false',\n              use_rubric: 'true',\n              starting_points: '6', // Negative grading\n              min_points: '-0.6',\n              max_extra_points: '0.6',\n              ...buildRubricItemFields(rubric_items),\n            }).toString(),\n          });\n\n          assert.equal(response.ok, true);\n        });\n\n        checkSettingsResults(6, -0.6, 0.6);\n\n        step('submit a grade using a negative rubric', async () => {\n          setUser(mockStaff[0]);\n          selected_rubric_items = [0, 2, 3];\n          adjust_points = null;\n          score_points = 3.6;\n          score_percent = 60;\n          feedback_note = 'Test feedback note updated after negative rubric';\n          await submitGradeForm();\n        });\n\n        checkGradingResults(mockStaff[0], mockStaff[0]);\n      });\n    });\n\n    describe('New submission after manual grading', () => {\n      step('re-open assessment', async () => {\n        setUser(defaultUser);\n        const instancesBody = await (await fetch(instancesAssessmentUrl)).text();\n        const $instancesBody = cheerio.load(instancesBody);\n        const token = $instancesBody('input[name=__csrf_token]').attr('value') || '';\n        const response = await fetch(instancesAssessmentUrl, {\n          method: 'POST',\n          headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n          body: new URLSearchParams({\n            __action: 'set_time_limit_all',\n            __csrf_token: token,\n            action: 'unlimited',\n            time_add: '0',\n            reopen_closed: 'on',\n          }).toString(),\n        });\n        assert.equal(response.status, 200);\n      });\n\n      step('load page as student', async () => {\n        iqUrl = await loadHomeworkQuestionUrl(mockStudents[0]);\n        iqId = parseInstanceQuestionId(iqUrl);\n        manualGradingIQUrl = `${manualGradingAssessmentUrl}/instance_question/${iqId}`;\n\n        const instance_questions = (await sqldb.queryAsync(sql.get_instance_question, { iqId }))\n          .rows;\n        assert.lengthOf(instance_questions, 1);\n        assert.equal(instance_questions[0].requires_manual_grading, false);\n      });\n\n      step('submit an answer to the question', async () => {\n        const gradeRes = await saveOrGrade(iqUrl, {}, 'save', [\n          { name: 'fib.py', contents: Buffer.from('solution').toString('base64') },\n        ]);\n        const questionsPage = await gradeRes.text();\n        const $questionsPage = cheerio.load(questionsPage);\n\n        assert.equal(gradeRes.status, 200);\n        assert.equal(\n          getLatestSubmissionStatus($questionsPage),\n          'manual grading: waiting for grading',\n        );\n      });\n\n      step('should tag question as requiring grading', async () => {\n        const instanceQuestions = (await sqldb.queryAsync(sql.get_instance_question, { iqId }))\n          .rows;\n        assert.lengthOf(instanceQuestions, 1);\n        assert.equal(instanceQuestions[0].requires_manual_grading, true);\n      });\n\n      step('student view should keep the old feedback/rubric', async () => {\n        iqUrl = await loadHomeworkQuestionUrl(mockStudents[0]);\n        const questionsPage = await (await fetch(iqUrl)).text();\n        const $questionsPage = cheerio.load(questionsPage);\n        const submissions = $questionsPage('[data-testid=\"submission-with-feedback\"]');\n        assert.equal(submissions.eq(0).find('[id^=\"submission-feedback-\"]').length, 0);\n        assert.equal(submissions.eq(1).find('[id^=\"submission-feedback-\"]').length, 1);\n        assert.equal(\n          submissions.eq(1).find('[data-testid=\"feedback-body\"]').first().text().trim(),\n          feedback_note,\n        );\n      });\n\n      step('manual grading page should warn about an open instance', async () => {\n        setUser(defaultUser);\n        const manualGradingPage = await (await fetch(manualGradingAssessmentUrl)).text();\n        $manualGradingPage = cheerio.load(manualGradingPage);\n        assertAlert($manualGradingPage, 'has one open instance');\n      });\n\n      step('manual grading page should list one question requiring grading', async () => {\n        const row = $manualGradingPage(`tr:contains(\"${manualGradingQuestionTitle}\")`);\n        assert.equal(row.length, 1);\n        const count = row.find('td[data-testid=\"iq-to-grade-count\"]').text().replace(/\\s/g, '');\n        assert.equal(count, '1/1');\n        manualGradingAssessmentQuestionUrl =\n          siteUrl + row.find(`a:contains(\"${manualGradingQuestionTitle}\")`).attr('href');\n        manualGradingNextUngradedUrl = manualGradingAssessmentQuestionUrl + '/next_ungraded';\n      });\n\n      step(\n        'manual grading page for assessment question should warn about an open instance',\n        async () => {\n          setUser(defaultUser);\n          const manualGradingAQPage = await (\n            await fetch(manualGradingAssessmentQuestionUrl)\n          ).text();\n          const $manualGradingAQPage = cheerio.load(manualGradingAQPage);\n          assertAlert($manualGradingAQPage, 'has one open instance');\n        },\n      );\n\n      step('manual grading page for assessment question should list one instance', async () => {\n        setUser(defaultUser);\n        const manualGradingAQData = await (\n          await fetch(manualGradingAssessmentQuestionUrl + '/instances.json')\n        ).text();\n        const instanceList = JSON.parse(manualGradingAQData)?.instance_questions;\n        assert(instanceList);\n        assert.lengthOf(instanceList, 1);\n        assert.equal(instanceList[0].id, iqId);\n        assert.isOk(instanceList[0].requires_manual_grading);\n      });\n\n      step(\n        'manual grading page for instance question should warn about an open instance',\n        async () => {\n          setUser(defaultUser);\n          const manualGradingIQPage = await (await fetch(manualGradingIQUrl)).text();\n          const $manualGradingIQPage = cheerio.load(manualGradingIQPage);\n          assertAlert($manualGradingIQPage, 'is still open');\n        },\n      );\n\n      step('submit a new grade', async () => {\n        setUser(mockStaff[1]);\n        selected_rubric_items = [1, 2, 4];\n        adjust_points = null;\n        score_points = 5;\n        score_percent = 83.33;\n        feedback_note = 'Test feedback note for second submission';\n        await submitGradeForm();\n      });\n\n      checkGradingResults(mockStaff[0], mockStaff[1]);\n    });\n  });\n});\n"]}