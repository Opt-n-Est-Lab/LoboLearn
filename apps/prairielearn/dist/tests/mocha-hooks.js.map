{"version":3,"file":"mocha-hooks.js","sourceRoot":"","sources":["../../src/tests/mocha-hooks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,MAAM,OAAO,CAAC;AAC5C,OAAO,GAAG,MAAM,aAAa,CAAC;AAE9B,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAE7D,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,2EAA2E;IAC3E,qCAAqC;IACrC,MAAM,cAAc,EAAE,CAAC;AACzB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB;IACvC,0DAA0D;IAC1D,MAAM,YAAY,EAAE,CAAC;AACvB,CAAC;AAED,2EAA2E;AAC3E,0BAA0B;AAC1B,GAAG,CAAC,kBAAkB,EAAE,CAAC;AAEzB;;;GAGG;AACH,MAAM,CAAC,MAAM,UAAU,GAAmB;IACxC,KAAK,CAAC,SAAS;QACb,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,sBAAsB,CAAC,CAAC;QAEpD,MAAM,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI;QACpD,yEAAyE;QACzE,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,SAAS,CAC5C,CAAC;QACF,IAAI,CAAC,gBAAgB;YAAE,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QAC3E,gBAAgB,CAAC,KAAK,GAAG,MAAM,CAAC;QAEhC,uEAAuE;QACvE,yDAAyD;QACzD,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,+CAA+C;QACxE,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,CAAC,iCAAiC;QAEjE,+CAA+C;QAC/C,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;QAClC,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,CAAC;QACxD,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;CACF,CAAC","sourcesContent":["import { type RootHookObject } from 'mocha';\nimport tmp from 'tmp-promise';\n\nimport { createTemplate, dropTemplate } from './helperDb.js';\n\nexport async function mochaGlobalSetup() {\n  // Create a global instance of our template database, dropping the existing\n  // template database first if needed.\n  await createTemplate();\n}\n\nexport async function mochaGlobalTeardown() {\n  // Drop the template database to clean up after ourselves.\n  await dropTemplate();\n}\n\n// Ensure any temporary directories created by `tmp-promise` are cleaned up\n// when the process exits.\ntmp.setGracefulCleanup();\n\n/**\n * These hooks run once per worker when Mocha is running in parallel mode.\n * We take advantage of this to create a separate database for each worker.\n */\nexport const mochaHooks: RootHookObject = {\n  async beforeAll() {\n    const logger = await import('@prairielearn/logger');\n\n    const consoleTransport = logger.logger.transports.find(\n      // @ts-expect-error - The `TransportStream` type does not include `name`.\n      (transport) => transport.name === 'console',\n    );\n    if (!consoleTransport) throw new Error('Could not find console transport');\n    consoleTransport.level = 'warn';\n\n    // We can't use `import` here because this is a TS file and our tooling\n    // isn't yet set up to do dynamic imports of `.ts` files.\n    const { config } = await import('../lib/config.js');\n    config.workersCount = 2; // explicitly use 2 workers to test parallelism\n    config.fileEditorUseGit = true; // test use of git in file editor\n\n    // Allow using `chai-as-promised` in all tests.\n    const chai = await import('chai');\n    const chaiAsPromised = await import('chai-as-promised');\n    chai.use(chaiAsPromised.default);\n  },\n};\n"]}