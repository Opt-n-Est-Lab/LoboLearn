{"version":3,"file":"newsItems.test.js","sourceRoot":"","sources":["../../src/tests/newsItems.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\nimport fetch from 'node-fetch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport * as news_items from '../news_items/index.js';\n\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst locals: Record<string, any> = {};\n\nlocals.siteUrl = 'http://localhost:' + config.serverPort;\nlocals.baseUrl = locals.siteUrl + '/pl';\nlocals.newsItemsUrl = locals.baseUrl + '/news_items';\n\ndescribe('News items', function () {\n  this.timeout(10000);\n\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  describe('News item initialization', () => {\n    it('should prepare by creating the student test user', async () => {\n      const res = await fetch(locals.baseUrl, {\n        headers: {\n          Cookie: 'pl_test_user=test_student',\n        },\n      });\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n    });\n    it('should succeed with notifications turned on', async () => {\n      await news_items.init({\n        notifyIfPreviouslyEmpty: true,\n        errorIfLockNotAcquired: true,\n      });\n    });\n    it('should create a notification for news item 1 for admin user', async () => {\n      const results = await sqldb.queryAsync(sql.select_notification, {\n        uid: 'dev@example.com',\n        news_item_id: 1,\n      });\n      assert.equal(results.rowCount, 1);\n    });\n    it('should create a notification for news item 2 for admin user', async () => {\n      const results = await sqldb.queryAsync(sql.select_notification, {\n        uid: 'dev@example.com',\n        news_item_id: 2,\n      });\n      assert.equal(results.rowCount, 1);\n    });\n    it('should not create a notification for news item 1 for student user', async () => {\n      const results = await sqldb.queryAsync(sql.select_notification, {\n        uid: 'student@example.com',\n        news_item_id: 1,\n      });\n      assert.equal(results.rowCount, 0);\n    });\n    it('should not create a notification for news item 2 for student user', async () => {\n      const results = await sqldb.queryAsync(sql.select_notification, {\n        uid: 'student@example.com',\n        news_item_id: 2,\n      });\n      assert.equal(results.rowCount, 0);\n    });\n  });\n\n  // FIXME: We only test notification creation for course staff users\n  // (the dev user). We don't test for student users. This is\n  // because when this code was originally written we didn't have\n  // any student-visible news items and it was too horrible to mock\n  // one. If we add a student-visible news item in the future then\n  // we should create student_user (see authn.js) and check that it\n  // gets the appropriate notifications.\n\n  describe('News item notifications', () => {\n    it('should permit page load', async () => {\n      const res = await fetch(locals.baseUrl);\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n    });\n    it('should show up in the top navbar', () => {\n      const elemList = locals.$('span.news-item-count');\n      assert.lengthOf(elemList, 1);\n    });\n    it('should show up in the News link', () => {\n      const elemList = locals.$('span.news-item-link-count');\n      assert.lengthOf(elemList, 1);\n    });\n  });\n\n  describe('News items page at root level', () => {\n    it('should load', async () => {\n      const res = await fetch(locals.newsItemsUrl);\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n    });\n    it('should contain a link to the \"New layout\" news item', () => {\n      const elemList = locals.$('.news-items-table a:contains(\"New layout\")');\n      assert.lengthOf(elemList, 1);\n      locals.newsItem1Url = locals.siteUrl + elemList[0].attribs.href;\n      assert.equal(locals.newsItem1Url, locals.baseUrl + '/news_item/1/');\n    });\n  });\n\n  describe('Single news item page  at root level', () => {\n    it('should load', async () => {\n      const res = await fetch(locals.newsItem1Url);\n      assert.isOk(res.ok);\n      locals.$ = cheerio.load(await res.text());\n    });\n    it('should contain the \"New layout\" header', () => {\n      const elemList = locals.$('h1:contains(\"New layout\")');\n      assert.lengthOf(elemList, 1);\n    });\n    it('should remove notification 1', async () => {\n      const results = await sqldb.queryAsync(sql.select_notification, {\n        uid: 'dev@example.com',\n        news_item_id: 1,\n      });\n      assert.equal(results.rowCount, 0);\n    });\n    it('should still have notification 2', async () => {\n      const results = await sqldb.queryAsync(sql.select_notification, {\n        uid: 'dev@example.com',\n        news_item_id: 2,\n      });\n      assert.equal(results.rowCount, 1);\n    });\n  });\n\n  describe('News items page', () => {\n    it('should load in course instructor level', async () => {\n      const res = await fetch(locals.baseUrl + '/course/1/news_items', {\n        method: 'HEAD',\n      });\n      assert.isOk(res.ok);\n    });\n    it('should load in course instance instructor level', async () => {\n      const res = await fetch(locals.baseUrl + '/course_instance/1/instructor/news_items', {\n        method: 'HEAD',\n      });\n      assert.isOk(res.ok);\n    });\n    it('should load in course instance student level', async () => {\n      const res = await fetch(locals.baseUrl + '/course_instance/1/news_items', {\n        method: 'HEAD',\n      });\n      assert.isOk(res.ok);\n    });\n  });\n\n  describe('Single news item page', () => {\n    it('should load in course instructor level', async () => {\n      const res = await fetch(locals.baseUrl + '/course/1/news_item/1/', {\n        method: 'HEAD',\n      });\n      assert.isOk(res.ok);\n    });\n    it('should load in course instance instructor level', async () => {\n      const res = await fetch(locals.baseUrl + '/course_instance/1/instructor/news_item/1/', {\n        method: 'HEAD',\n      });\n      assert.isOk(res.ok);\n    });\n    it('should load in course instance student level', async () => {\n      const res = await fetch(locals.baseUrl + '/course_instance/1/news_item/1/', {\n        method: 'HEAD',\n      });\n      assert.isOk(res.ok);\n    });\n  });\n});\n"]}