{"version":3,"file":"effectiveUser.test.js","sourceRoot":"","sources":["../../../src/tests/permissions/effectiveUser.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport fs from 'fs-extra';\nimport { step } from 'mocha-steps';\nimport * as tmp from 'tmp-promise';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { ensureInstitutionAdministrator } from '../../ee/models/institution-administrator.js';\nimport { config } from '../../lib/config.js';\nimport { TEST_COURSE_PATH } from '../../lib/paths.js';\nimport {\n  insertCourseInstancePermissions,\n  insertCoursePermissionsByUserUid,\n  updateCourseInstancePermissionsRole,\n  updateCoursePermissionsRole,\n} from '../../models/course-permissions.js';\nimport { ensureEnrollment } from '../../models/enrollment.js';\nimport * as helperClient from '../helperClient.js';\nimport * as helperServer from '../helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nconst UserWithIdSchema = z.object({\n  user_id: z.string(),\n});\n\ndescribe('effective user', function () {\n  this.timeout(60000);\n\n  const context: Record<string, any> = {};\n  context.siteUrl = `http://localhost:${config.serverPort}`;\n  context.baseUrl = `${context.siteUrl}/pl`;\n  context.pageUrlTestCourse = `${context.baseUrl}/course/1`;\n  context.pageUrlExampleCourse = `${context.baseUrl}/course/2`;\n  context.pageUrlTestCourseInstance = `${context.baseUrl}/course_instance/1/instructor`;\n  context.pageUrlExampleCourseInstance = `${context.baseUrl}/course_instance/2/instructor`;\n  context.pageUrlStudent = `${context.baseUrl}/course_instance/1`;\n\n  before('set up testing server', async function () {\n    // We need two courses for this test so that we can validate behavior of\n    // institution administrators, specifically what happens when an instructor\n    // in one course tries to emulate an institution administrator and then\n    // access another course.\n    //\n    // However, we want to avoid using the example course, which has all sorts of\n    // weird special-cased permissions that make it harder to assert the expected\n    // behavior. So, we make a copy of the test course for our second course.\n    const secondCourseDir = await tmp.dir({ unsafeCleanup: true });\n    await fs.copy(TEST_COURSE_PATH, secondCourseDir.path);\n\n    await helperServer.before([TEST_COURSE_PATH, secondCourseDir.path]).call(this);\n  });\n\n  let institutionAdminId: string;\n  let instructorId: string;\n  let staffId: string;\n  let studentId: string;\n\n  before('insert users', async function () {\n    const institutionAdmin = await sqldb.callValidatedOneRow(\n      'users_select_or_insert',\n      [\n        'institution-admin@example.com',\n        'Institution Admin',\n        null,\n        'institution-admin@example.com',\n        'dev',\n      ],\n      UserWithIdSchema,\n    );\n    institutionAdminId = institutionAdmin.user_id;\n    await ensureInstitutionAdministrator({\n      institution_id: '1',\n      user_id: institutionAdminId,\n      authn_user_id: '1',\n    });\n\n    const instructor = await sqldb.callValidatedOneRow(\n      'users_select_or_insert',\n      ['instructor@example.com', 'Instructor User', '100000000', 'instructor@example.com', 'dev'],\n      UserWithIdSchema,\n    );\n    instructorId = instructor.user_id;\n    await insertCoursePermissionsByUserUid({\n      course_id: '1',\n      uid: 'instructor@example.com',\n      course_role: 'Owner',\n      authn_user_id: '1',\n    });\n\n    const staff = await sqldb.callValidatedOneRow(\n      'users_select_or_insert',\n      ['staff@example.com', 'Staff Three', null, 'staff@example.com', 'dev'],\n      UserWithIdSchema,\n    );\n    staffId = staff.user_id;\n    await insertCoursePermissionsByUserUid({\n      course_id: '1',\n      uid: 'staff@example.com',\n      course_role: 'Editor',\n      authn_user_id: '2',\n    });\n\n    const student = await sqldb.callValidatedOneRow(\n      'users_select_or_insert',\n      ['student@example.com', 'Student User', '000000001', 'student@example.com', 'dev'],\n      UserWithIdSchema,\n    );\n    studentId = student.user_id;\n    await ensureEnrollment({\n      user_id: studentId,\n      course_instance_id: '1',\n    });\n  });\n\n  after('shut down testing server', helperServer.after);\n\n  step('student can access course instance', async () => {\n    const headers = { cookie: 'pl_test_user=test_student' };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('student cannot override date (ignore when on student page)', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_student; pl2_requested_date=1700-01-19T00:00:01',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('student cannot override date (error when on instructor page)', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_student; pl2_requested_date=1700-01-19T00:00:01',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('student cannot override date (error when on instructor page) - course route', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_student; pl2_requested_date=1700-01-19T00:00:01',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourse, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('instructor can override date and does not become enrolled', async () => {\n    let result = await sqldb.queryAsync(sql.select_enrollment, {\n      user_id: instructorId,\n      course_instance_id: 1,\n    });\n    assert.lengthOf(result.rows, 0);\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_date=1700-01-19T00:00:01',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 200);\n    result = await sqldb.queryAsync(sql.select_enrollment, {\n      user_id: instructorId,\n      course_instance_id: 1,\n    });\n    assert.lengthOf(result.rows, 0);\n  });\n\n  step('instructor can access course instance', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('instructor (no course instance role) cannot emulate student', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_uid=student@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('instructor (student data viewer) cannot emulate student', async () => {\n    await insertCourseInstancePermissions({\n      course_id: '1',\n      user_id: instructorId,\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Viewer',\n      authn_user_id: '2',\n    });\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_uid=student@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('instructor (student data editor) can emulate student', async () => {\n    await updateCourseInstancePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Editor',\n      authn_user_id: '2',\n    });\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_uid=student@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('instructor can emulate student and override date in range (expect success)', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_requested_date=1900-01-19T00:00:01; pl2_requested_uid=student@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step(\n    'instructor can emulate student and override date out of range (expect failure)',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_requested_date=1700-01-19T00:00:01; pl2_requested_uid=student@example.com',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n      assert.equal(res.status, 403);\n    },\n  );\n\n  step(\n    'instructor can emulate student and be denied access to instructor page (course instance route)',\n    async () => {\n      const headers = {\n        cookie: 'pl_test_user=test_instructor; pl2_requested_uid=student@example.com',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n      assert.equal(res.status, 403);\n    },\n  );\n\n  step(\n    'instructor can emulate student and be denied access to instructor page (course route)',\n    async () => {\n      const headers = {\n        cookie: 'pl_test_user=test_instructor; pl2_requested_uid=student@example.com',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlTestCourse, { headers });\n      assert.equal(res.status, 403);\n    },\n  );\n\n  step('cannot request invalid date', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_date=garbage',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('cannot request invalid uid', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_uid=garbage',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('cannot request uid of administrator when not administrator', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_uid=dev@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('can request uid of administrator when administrator', async () => {\n    await sqldb.queryAsync(sql.insert_administrator, { user_id: instructorId });\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_uid=dev@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('cannot request uid of administrator when administrator access is inactive', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=dev@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('can request uid of course editor as course owner', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=staff@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('cannot request uid of course editor as course viewer', async () => {\n    await updateCoursePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_role: 'Viewer',\n      authn_user_id: '1',\n    });\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=staff@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('can request uid of student data viewer as student data editor', async () => {\n    await updateCoursePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_role: 'Owner',\n      authn_user_id: '1',\n    });\n    await insertCourseInstancePermissions({\n      course_id: '1',\n      user_id: staffId,\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Viewer',\n      authn_user_id: '2',\n    });\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=staff@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('cannot request uid of student data editor as student data viewer', async () => {\n    await updateCourseInstancePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Viewer',\n      authn_user_id: '2',\n    });\n    await updateCourseInstancePermissionsRole({\n      course_id: '1',\n      user_id: staffId,\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Editor',\n      authn_user_id: '2',\n    });\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=staff@example.com',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('instructor can request lower course role', async () => {\n    await updateCoursePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_role: 'Viewer',\n      authn_user_id: '1',\n    });\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_course_role=Previewer',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('instructor cannot request higher course role', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_course_role=Editor',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('instructor can request lower course instance role', async () => {\n    await updateCourseInstancePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Editor',\n      authn_user_id: '2',\n    });\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_course_instance_role=Student Data Viewer',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step('instructor cannot request higher course instance role', async () => {\n    updateCourseInstancePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Viewer',\n      authn_user_id: '2',\n    });\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_course_instance_role=Student Data Editor',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n    assert.equal(res.status, 403);\n  });\n\n  step('instructor can request no role and be granted access to student page', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_course_role=None; pl2_requested_course_instance_role=None',\n    };\n    const res = await helperClient.fetchCheerio(context.pageUrlStudent, { headers });\n    assert.equal(res.status, 200);\n  });\n\n  step(\n    'instructor can request no role and be denied access to instructor page (course instance route)',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_course_role=None; pl2_requested_course_instance_role=None',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n      assert.equal(res.status, 403);\n    },\n  );\n\n  step(\n    'instructor can request no course role and be denied access to instructor page (course route)',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_course_role=None',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlTestCourse, { headers });\n      assert.equal(res.status, 403);\n    },\n  );\n\n  step(\n    'instructor can request no course role and be granted access to instructor page (course instance route)',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_course_role=None',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n      assert.equal(res.status, 200);\n    },\n  );\n\n  step(\n    'less-privileged instructor cannot request access as institution administrator',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=institution-admin@example.com',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlTestCourse, { headers });\n      assert.equal(res.status, 403);\n    },\n  );\n\n  step('reset instructor course role to maximum permissions', async () => {\n    await updateCoursePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_role: 'Owner',\n      authn_user_id: '1',\n    });\n    await updateCourseInstancePermissionsRole({\n      course_id: '1',\n      user_id: instructorId,\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Editor',\n      authn_user_id: '2',\n    });\n  });\n\n  step(\n    'instructor can access their own course when requesting access as institution administrator',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=institution-admin@example.com',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlTestCourse, { headers });\n      assert.equal(res.status, 200);\n    },\n  );\n\n  step(\n    'instructor can access their own course instance when requesting access as institution administrator',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=institution-admin@example.com',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlTestCourseInstance, { headers });\n      assert.equal(res.status, 200);\n    },\n  );\n\n  step(\n    'instructor cannot access other courses when requesting access as institution administrator',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=institution-admin@example.com',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlExampleCourse, { headers });\n      assert.equal(res.status, 403);\n    },\n  );\n\n  step(\n    'instructor cannot access other course instances when requesting access as institution administrator',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_access_as_administrator=inactive; pl2_requested_uid=institution-admin@example.com',\n      };\n      const res = await helperClient.fetchCheerio(context.pageUrlExampleCourseInstance, {\n        headers,\n      });\n      assert.equal(res.status, 403);\n    },\n  );\n});\n"]}