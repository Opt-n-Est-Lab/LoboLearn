{"version":3,"file":"institutionAdminAccess.test.js","sourceRoot":"","sources":["../../../src/tests/permissions/institutionAdminAccess.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\n\nimport { queryAsync, queryRow } from '@prairielearn/postgres';\n\nimport { ensureInstitutionAdministrator } from '../../ee/models/institution-administrator.js';\nimport { config } from '../../lib/config.js';\nimport { UserSchema } from '../../lib/db-types.js';\nimport { selectOptionalUserByUid } from '../../models/user.js';\nimport * as helperServer from '../helperServer.js';\nimport { withUser } from '../utils/auth.js';\n\nconst SITE_URL = `http://localhost:${config.serverPort}`;\nconst INSTITUTION_ADMIN_COURSES = `${SITE_URL}/pl/institution/1/admin/courses`;\nconst COURSE_URL = `${SITE_URL}/pl/course/1/course_admin/instances`;\nconst COURSE_INSTANCE_URL = `${SITE_URL}/pl/course_instance/1/instructor/instance_admin/assessments`;\nconst ASSESSMENT_INSTANCES_URL = `${SITE_URL}/pl/course_instance/1/instructor/assessment/1/instances`;\n\ninterface AuthUser {\n  name: string;\n  uid: string;\n  uin?: string;\n  isAdministrator?: boolean;\n}\n\nconst ADMIN_USER = {\n  name: 'Admin',\n  uid: 'admin@example.com',\n  uin: 'admin',\n  email: 'admin@example.com',\n  isAdministrator: true,\n};\n\nconst INSTITUTION_ADMIN_USER = {\n  name: 'Institution Admin',\n  uid: 'institution-admin@example.com',\n  uin: 'institution-admin',\n  email: 'institution-admin@example.com',\n};\n\nasync function insertUser(user: AuthUser) {\n  const newUser = await queryRow(\n    'INSERT INTO users (name, uid) VALUES ($name, $uid) RETURNING *;',\n    {\n      name: user.name,\n      uid: user.uid,\n    },\n    UserSchema,\n  );\n\n  if (user.isAdministrator) {\n    await queryAsync('INSERT INTO administrators (user_id) VALUES ($user_id);', {\n      user_id: newUser.user_id,\n    });\n  }\n}\n\ndescribe('institution administrators', () => {\n  before(() => (config.isEnterprise = true));\n  after(() => (config.isEnterprise = false));\n\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  before(async () => {\n    await insertUser(ADMIN_USER);\n    await insertUser(INSTITUTION_ADMIN_USER);\n  });\n\n  step('global admin can access institution admin courses', async () => {\n    const res = await withUser(ADMIN_USER, () => fetch(INSTITUTION_ADMIN_COURSES));\n    assert.equal(res.status, 200);\n  });\n\n  step('global admin can access course', async () => {\n    const res = await withUser(ADMIN_USER, () => fetch(COURSE_URL));\n    assert.equal(res.status, 200);\n  });\n\n  step('global admin can access course instance', async () => {\n    const res = await withUser(ADMIN_USER, () => fetch(COURSE_INSTANCE_URL));\n    assert.equal(res.status, 200);\n  });\n\n  step('institution admin (no permissions) cannot access institution admin courses', async () => {\n    const res = await withUser(INSTITUTION_ADMIN_USER, () => fetch(INSTITUTION_ADMIN_COURSES));\n    assert.equal(res.status, 403);\n  });\n\n  step('institution admin (no permissions) cannot access course', async () => {\n    const res = await withUser(INSTITUTION_ADMIN_USER, () => fetch(COURSE_URL));\n    assert.equal(res.status, 403);\n  });\n\n  step('institution admin (no permissions) cannot access course instance', async () => {\n    const res = await withUser(INSTITUTION_ADMIN_USER, () => fetch(COURSE_INSTANCE_URL));\n    assert.equal(res.status, 403);\n  });\n\n  step('institution admin (no permissions) can access assessment instances', async () => {\n    const res = await withUser(INSTITUTION_ADMIN_USER, () => fetch(ASSESSMENT_INSTANCES_URL));\n    assert.equal(res.status, 403);\n  });\n\n  step('grant institution admin permissions', async () => {\n    const user = await selectOptionalUserByUid(INSTITUTION_ADMIN_USER.uid);\n    assert(user);\n    await ensureInstitutionAdministrator({\n      institution_id: '1',\n      user_id: user.user_id,\n      authn_user_id: '1',\n    });\n  });\n\n  step('institution admin can access institution admin courses', async () => {\n    const res = await withUser(INSTITUTION_ADMIN_USER, () => fetch(INSTITUTION_ADMIN_COURSES));\n    assert.equal(res.status, 200);\n  });\n\n  step('institution admin can access course', async () => {\n    const res = await withUser(INSTITUTION_ADMIN_USER, () => fetch(COURSE_URL));\n    assert.equal(res.status, 200);\n  });\n\n  step('institution admin can access course instance', async () => {\n    const res = await withUser(INSTITUTION_ADMIN_USER, () => fetch(COURSE_INSTANCE_URL));\n    assert.equal(res.status, 200);\n  });\n\n  step('institution admin can access assessment instances', async () => {\n    const res = await withUser(INSTITUTION_ADMIN_USER, () => fetch(ASSESSMENT_INSTANCES_URL));\n    assert.equal(res.status, 200);\n  });\n});\n"]}