{"version":3,"file":"studentData.test.js","sourceRoot":"","sources":["../../../src/tests/permissions/studentData.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../../lib/config.js';\nimport {\n  insertCourseInstancePermissions,\n  insertCoursePermissionsByUserUid,\n  updateCourseInstancePermissionsRole,\n} from '../../models/course-permissions.js';\nimport { ensureEnrollment } from '../../models/enrollment.js';\nimport * as helperClient from '../helperClient.js';\nimport * as helperServer from '../helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('student data access', function () {\n  this.timeout(60000);\n\n  const context: Record<string, any> = {};\n  context.siteUrl = `http://localhost:${config.serverPort}`;\n  context.baseUrl = `${context.siteUrl}/pl`;\n  context.courseInstanceBaseUrl = `${context.baseUrl}/course_instance/1`;\n  context.userIdInstructor = 2;\n  context.userIdStudent = 2;\n\n  before('set up testing server', async function () {\n    await helperServer.before().call(this);\n    let result = await sqldb.queryOneRowAsync(sql.select_homework1, []);\n    context.homeworkAssessmentId = result.rows[0].id;\n    context.homeworkAssessmentUrl = `${context.courseInstanceBaseUrl}/assessment/${context.homeworkAssessmentId}/`;\n    result = await sqldb.queryOneRowAsync(sql.select_exam1, []);\n    context.examAssessmentId = result.rows[0].id;\n    context.examAssessmentUrl = `${context.courseInstanceBaseUrl}/assessment/${context.examAssessmentId}/`;\n  });\n\n  before('insert users', async function () {\n    await sqldb.callAsync('users_select_or_insert', [\n      'instructor@example.com',\n      'Instructor User',\n      '100000000',\n      'instructor@example.com',\n      'dev',\n    ]);\n    await sqldb.callAsync('users_select_or_insert', [\n      'student@example.com',\n      'Student User',\n      '000000001',\n      'student@example.com',\n      'dev',\n    ]);\n    await insertCoursePermissionsByUserUid({\n      course_id: '1',\n      uid: 'instructor@example.com',\n      course_role: 'Owner',\n      authn_user_id: '1',\n    });\n    await ensureEnrollment({\n      user_id: '3',\n      course_instance_id: '1',\n    });\n  });\n\n  after('shut down testing server', helperServer.after);\n\n  step('student can start HW1', async () => {\n    const headers = { cookie: 'pl_test_user=test_student' };\n    const response = await helperClient.fetchCheerio(context.homeworkAssessmentUrl, { headers });\n    assert.isTrue(response.ok);\n    const assessmentInstanceUrl = response.url;\n    assert.include(assessmentInstanceUrl, '/assessment_instance/');\n    context.homeworkAssessmentInstanceUrl = assessmentInstanceUrl;\n    const questionUrl = response.$('a:contains(\"Add two numbers\")').attr('href');\n    context.homeworkQuestionInstanceUrl = `${context.siteUrl}${questionUrl}`;\n  });\n\n  step('student can access HW1/Q1', async () => {\n    const headers = { cookie: 'pl_test_user=test_student' };\n    const response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n    const result = await sqldb.queryOneRowAsync(sql.select_variant, {\n      assessment_id: context.homeworkAssessmentId,\n    });\n    context.homeworkQuestionVariant = result.rows[0];\n  });\n\n  step('student can access E1 in exam mode', async () => {\n    const headers = { cookie: 'pl_test_user=test_student; pl_test_mode=Exam' };\n    const response = await helperClient.fetchCheerio(context.examAssessmentUrl, { headers });\n    assert.isTrue(response.ok);\n    assert.equal(response.$('#start-assessment').text().trim(), 'Start assessment');\n    helperClient.extractAndSaveCSRFToken(context, response.$, 'form');\n  });\n\n  step('student can start E1 in exam mode', async () => {\n    const headers = { cookie: 'pl_test_user=test_student; pl_test_mode=Exam' };\n    const response = await helperClient.fetchCheerio(context.examAssessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'new_instance',\n        __csrf_token: context.__csrf_token,\n      }),\n      headers,\n    });\n    assert.isTrue(response.ok);\n    const assessmentInstanceUrl = response.url;\n    assert.include(assessmentInstanceUrl, '/assessment_instance/');\n    context.examAssessmentInstanceUrl = assessmentInstanceUrl;\n    const result = await sqldb.queryOneRowAsync(sql.select_instance_question, {\n      qid: 'addNumbers',\n      assessment_id: context.examAssessmentId,\n    });\n    context.examQuestionInstanceUrl = `${context.courseInstanceBaseUrl}/instance_question/${result.rows[0].id}`;\n  });\n\n  step('student can access E1/Q* in exam mode', async () => {\n    const headers = { cookie: 'pl_test_user=test_student; pl_test_mode=Exam' };\n    const response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, { headers });\n    assert.isTrue(response.ok);\n    const result = await sqldb.queryOneRowAsync(sql.select_variant, {\n      assessment_id: context.examAssessmentId,\n    });\n    context.examQuestionVariant = result.rows[0];\n  });\n\n  step('instructor (no role) can view HW1', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.homeworkAssessmentUrl, { headers });\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (no role) can view E1', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.examAssessmentUrl, { headers });\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (no role) cannot view HW1 instance of student', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step('instructor (no role) cannot view HW1/Q1 instance of student', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step('instructor (no role) cannot view E1 instance of student', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.examAssessmentInstanceUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step('instructor (no role) cannot view E1/Q* instance of student', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, { headers });\n    assert.equal(response.status, 403);\n  });\n\n  step('instructor (student data viewer) can view HW1 instance of student', async () => {\n    await insertCourseInstancePermissions({\n      course_id: '1',\n      user_id: '2',\n      course_instance_id: '1',\n      course_instance_role: 'Student Data Viewer',\n      authn_user_id: '2',\n    });\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data viewer) can view HW1/Q1 instance of student', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data viewer) can view E1 instance of student', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.examAssessmentInstanceUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data viewer) can view E1/Q* instance of student', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, { headers });\n    assert.isTrue(response.ok);\n  });\n\n  step(\n    'instructor (student data viewer) cannot attach file to HW1 instance of student',\n    async () => {\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      let response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      const __csrf_token = response.$('span[id=test_csrf_token]').text();\n      assert.lengthOf(response.$('form[class=attach-text-form]'), 0);\n      response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'attach_text',\n          __csrf_token,\n          filename: 'notes.txt',\n          contents: 'This is a test.',\n        }),\n        headers,\n      });\n      assert.equal(response.status, 403);\n    },\n  );\n\n  step(\n    'instructor (student data viewer) cannot submit answer to HW1/Q1 instance of student',\n    async () => {\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      let response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      const __csrf_token = response.$('span[id=test_csrf_token]').text();\n      assert.lengthOf(response.$('button[name=__action][value=grade]'), 0);\n      response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token,\n          __variant_id: context.homeworkQuestionVariant.id,\n          c: context.homeworkQuestionVariant.true_answer.c,\n        }),\n        headers,\n      });\n      assert.equal(response.status, 403);\n    },\n  );\n\n  step(\n    'instructor (student data viewer) cannot attach file to E1 instance of student',\n    async () => {\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      let response = await helperClient.fetchCheerio(context.examAssessmentInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      const __csrf_token = response.$('span[id=test_csrf_token]').text();\n      assert.lengthOf(response.$('form[class=attach-text-form]'), 0);\n      response = await helperClient.fetchCheerio(context.examAssessmentInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'attach_text',\n          __csrf_token,\n          filename: 'notes.txt',\n          contents: 'This is a test.',\n        }),\n        headers,\n      });\n      assert.equal(response.status, 403);\n    },\n  );\n\n  step(\n    'instructor (student data viewer) cannot submit answer to E1/Q* instance of student',\n    async () => {\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      let response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, { headers });\n      assert.isTrue(response.ok);\n      const __csrf_token = response.$('span[id=test_csrf_token]').text();\n      assert.lengthOf(response.$('button[name=__action][value=grade]'), 0);\n      response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token,\n          __variant_id: context.examQuestionVariant.id,\n          c: context.examQuestionVariant.true_answer.c,\n        }),\n        headers,\n      });\n      assert.equal(response.status, 403);\n    },\n  );\n\n  step('instructor (student data viewer) cannot emulate student', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_uid=student@example.com',\n    };\n    const response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n  });\n\n  step(\n    'instructor (student data editor) cannot attach file to HW1 instance of student',\n    async () => {\n      await updateCourseInstancePermissionsRole({\n        course_id: '1',\n        course_instance_id: '1',\n        user_id: '2',\n        course_instance_role: 'Student Data Editor',\n        authn_user_id: '2',\n      });\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      let response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      const __csrf_token = response.$('span[id=test_csrf_token]').text();\n      assert.lengthOf(response.$('form[class=attach-text-form]'), 0);\n      response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'attach_text',\n          __csrf_token,\n          filename: 'notes.txt',\n          contents: 'This is a test.',\n        }),\n        headers,\n      });\n      assert.equal(response.status, 403);\n    },\n  );\n\n  step(\n    'instructor (student data editor) cannot submit answer to HW1/Q1 instance of student',\n    async () => {\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      let response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      const __csrf_token = response.$('span[id=test_csrf_token]').text();\n      assert.lengthOf(response.$('button[name=__action][value=grade]'), 0);\n      response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token,\n          __variant_id: context.homeworkQuestionVariant.id,\n          c: context.homeworkQuestionVariant.true_answer.c,\n        }),\n        headers,\n      });\n      assert.equal(response.status, 403);\n    },\n  );\n\n  step(\n    'instructor (student data editor) cannot attach file to E1 instance of student',\n    async () => {\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      let response = await helperClient.fetchCheerio(context.examAssessmentInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      const __csrf_token = response.$('span[id=test_csrf_token]').text();\n      assert.lengthOf(response.$('form[class=attach-text-form]'), 0);\n      response = await helperClient.fetchCheerio(context.examAssessmentInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'attach_text',\n          __csrf_token,\n          filename: 'notes.txt',\n          contents: 'This is a test.',\n        }),\n        headers,\n      });\n      assert.equal(response.status, 403);\n    },\n  );\n\n  step(\n    'instructor (student data editor) cannot submit answer to E1/Q* instance of student',\n    async () => {\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      let response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, { headers });\n      assert.isTrue(response.ok);\n      const __csrf_token = response.$('span[id=test_csrf_token]').text();\n      assert.lengthOf(response.$('button[name=__action][value=grade]'), 0);\n      response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token,\n          __variant_id: context.examQuestionVariant.id,\n          c: context.examQuestionVariant.true_answer.c,\n        }),\n        headers,\n      });\n      assert.equal(response.status, 403);\n    },\n  );\n\n  step(\n    'instructor (student data editor) can attach file to HW1 instance of emulated student',\n    async () => {\n      const headers = {\n        cookie: 'pl_test_user=test_instructor; pl2_requested_uid=student@example.com',\n      };\n      let response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      helperClient.extractAndSaveCSRFToken(context, response.$, 'form[class=attach-text-form]');\n      response = await helperClient.fetchCheerio(context.homeworkAssessmentInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'attach_text',\n          __csrf_token: context.__csrf_token,\n          filename: 'notes.txt',\n          contents: 'This is a test.',\n        }),\n        headers,\n      });\n      assert.isTrue(response.ok);\n    },\n  );\n\n  step(\n    'instructor (student data editor) can submit answer to HW1/Q1 instance of emulated student',\n    async () => {\n      const headers = {\n        cookie: 'pl_test_user=test_instructor; pl2_requested_uid=student@example.com',\n      };\n      let response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      helperClient.extractAndSaveCSRFToken(context, response.$, 'form[name=question-form]');\n      assert.lengthOf(response.$('button[name=__action][value=grade]'), 1);\n      response = await helperClient.fetchCheerio(context.homeworkQuestionInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token: context.__csrf_token,\n          __variant_id: context.homeworkQuestionVariant.id,\n          c: context.homeworkQuestionVariant.true_answer.c,\n        }),\n        headers,\n      });\n      assert.isTrue(response.ok);\n    },\n  );\n\n  step(\n    'instructor (student data editor) can attach file to E1 instance of emulated student',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_requested_uid=student@example.com; pl_test_mode=Exam',\n      };\n      let response = await helperClient.fetchCheerio(context.examAssessmentInstanceUrl, {\n        headers,\n      });\n      assert.isTrue(response.ok);\n      helperClient.extractAndSaveCSRFToken(context, response.$, 'form[class=attach-text-form]');\n      response = await helperClient.fetchCheerio(context.examAssessmentInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'attach_text',\n          __csrf_token: context.__csrf_token,\n          filename: 'notes.txt',\n          contents: 'This is a test.',\n        }),\n        headers,\n      });\n      assert.isTrue(response.ok);\n    },\n  );\n\n  step(\n    'instructor (student data editor) can submit answer to E1/Q* instance of emulated student',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_requested_uid=student@example.com; pl_test_mode=Exam',\n      };\n      let response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, { headers });\n      assert.isTrue(response.ok);\n      helperClient.extractAndSaveCSRFToken(context, response.$, 'form[name=question-form]');\n      assert.lengthOf(response.$('button[name=__action][value=grade]'), 1);\n      response = await helperClient.fetchCheerio(context.examQuestionInstanceUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'grade',\n          __csrf_token: context.__csrf_token,\n          __variant_id: context.examQuestionVariant.id,\n          c: context.examQuestionVariant.true_answer.c,\n        }),\n        headers,\n      });\n      assert.isTrue(response.ok);\n    },\n  );\n\n  step('instructor (student data editor) can view gradebook', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/instance_admin/gradebook`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data editor) can view gradebook raw data', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/instance_admin/gradebook/raw_data.json`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data editor) can view homework assessment instances', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.homeworkAssessmentId}/instances`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step(\n    'instructor (student data editor) can view homework assessment instances raw data',\n    async () => {\n      const headers = { cookie: 'pl_test_user=test_instructor' };\n      const response = await helperClient.fetchCheerio(\n        `${context.courseInstanceBaseUrl}/instructor/assessment/${context.homeworkAssessmentId}/instances/raw_data.json`,\n        { headers },\n      );\n      assert.isTrue(response.ok);\n    },\n  );\n\n  step('instructor (student data editor) can view exam assessment instances', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.examAssessmentId}/instances`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data editor) can view exam assessment instances raw data', async () => {\n    const headers = { cookie: 'pl_test_user=test_instructor' };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.examAssessmentId}/instances/raw_data.json`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data viewer) can view gradebook', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_requested_course_instance_role=Student Data Viewer',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/instance_admin/gradebook`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data viewer) can view gradebook raw data', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_requested_course_instance_role=Student Data Viewer',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/instance_admin/gradebook/raw_data.json`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data viewer) can view homework assessment instances', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_requested_course_instance_role=Student Data Viewer',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.homeworkAssessmentId}/instances`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step(\n    'instructor (student data viewer) can view homework assessment instances raw data',\n    async () => {\n      const headers = {\n        cookie:\n          'pl_test_user=test_instructor; pl2_requested_course_instance_role=Student Data Viewer',\n      };\n      const response = await helperClient.fetchCheerio(\n        `${context.courseInstanceBaseUrl}/instructor/assessment/${context.homeworkAssessmentId}/instances/raw_data.json`,\n        { headers },\n      );\n      assert.isTrue(response.ok);\n    },\n  );\n\n  step('instructor (student data viewer) can view exam assessment instances', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_requested_course_instance_role=Student Data Viewer',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.examAssessmentId}/instances`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (student data viewer) can view exam assessment instances raw data', async () => {\n    const headers = {\n      cookie:\n        'pl_test_user=test_instructor; pl2_requested_course_instance_role=Student Data Viewer',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.examAssessmentId}/instances/raw_data.json`,\n      { headers },\n    );\n    assert.isTrue(response.ok);\n  });\n\n  step('instructor (no role) can view gradebook', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_course_instance_role=None',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/instance_admin/gradebook`,\n      { headers },\n    );\n    // This page itself is visible even if the user doesn't have permissions to\n    // view student data, but it won't actually show student data, which is\n    // loaded asynchronously via the `raw_data.json` endpoint, which is tested\n    // below.\n    //\n    // This page should contain a warning that the user doesn't have access to\n    // student data, and a prompt to obtain access.\n    assert.lengthOf(response.$('table#gradebook-data'), 0);\n    assert.lengthOf(response.$('h2:contains(\"Insufficient permissions\")'), 1);\n  });\n\n  step('instructor (no role) cannot view gradebook raw data', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_course_instance_role=None',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/instance_admin/gradebook/raw_data.json`,\n      { headers },\n    );\n    assert.equal(response.status, 403);\n  });\n\n  step('instructor (no role) cannot view homework assessment instances', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_course_instance_role=None',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.homeworkAssessmentId}/instances`,\n      { headers },\n    );\n    assert.equal(response.status, 403);\n  });\n\n  step('instructor (no role) cannot view homework assessment instances raw data', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_course_instance_role=None',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.homeworkAssessmentId}/instances/raw_data.json`,\n      { headers },\n    );\n    assert.equal(response.status, 403);\n  });\n\n  step('instructor (no role) cannot view exam assessment instances', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_course_instance_role=None',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.examAssessmentId}/instances`,\n      { headers },\n    );\n    assert.equal(response.status, 403);\n  });\n\n  step('instructor (no role) cannot view exam assessment instances raw data', async () => {\n    const headers = {\n      cookie: 'pl_test_user=test_instructor; pl2_requested_course_instance_role=None',\n    };\n    const response = await helperClient.fetchCheerio(\n      `${context.courseInstanceBaseUrl}/instructor/assessment/${context.examAssessmentId}/instances/raw_data.json`,\n      { headers },\n    );\n    assert.equal(response.status, 403);\n  });\n});\n"]}