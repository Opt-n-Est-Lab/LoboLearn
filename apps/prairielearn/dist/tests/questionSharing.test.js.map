{"version":3,"file":"questionSharing.test.js","sourceRoot":"","sources":["../../src/tests/questionSharing.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'node:path';\n\nimport { assert } from 'chai';\nimport { execa } from 'execa';\nimport fs from 'fs-extra';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\nimport * as tmp from 'tmp';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { type Course, IdSchema } from '../lib/db-types.js';\nimport { features } from '../lib/features/index.js';\nimport { getCourseCommitHash, selectCourseById } from '../models/course.js';\nimport * as syncFromDisk from '../sync/syncFromDisk.js';\n\nimport { fetchCheerio } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\nimport { makeMockLogger } from './mockLogger.js';\nimport * as syncUtil from './sync/util.js';\nimport { getCsrfToken } from './utils/csrf.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst { logger } = makeMockLogger();\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\n\nconst UUID_REGEXP = /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/;\n\nconst SHARING_COURSE_SHARING_NAME = 'sharing-course';\nconst CONSUMING_COURSE_SHARING_NAME = 'consuming-course';\nconst SHARING_SET_NAME = 'share-set-example';\nconst SHARING_QUESTION_QID = 'shared-via-sharing-set';\nconst PUBLICLY_SHARED_QUESTION_QID = 'shared-publicly';\nconst DRAFT_QUESTION_QID = '__drafts__/draft_1';\n\nfunction sharingPageUrl(courseId) {\n  return `${baseUrl}/course/${courseId}/course_admin/sharing`;\n}\n\nasync function setSharingName(courseId: string, name: string) {\n  const sharingUrl = sharingPageUrl(courseId);\n  const token = await getCsrfToken(sharingUrl);\n\n  return await fetch(sharingUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'choose_sharing_name',\n      __csrf_token: token,\n      course_sharing_name: name,\n    }),\n  });\n}\n\nasync function accessSharedQuestionAssessment(course_id: string) {\n  const assessmentsUrl = `${baseUrl}/course_instance/${course_id}/instructor/instance_admin/assessments`;\n  const assessmentsPage = await fetchCheerio(assessmentsUrl);\n  const assessmentLink = assessmentsPage.$('a:contains(\"Test assessment\")');\n  assert.lengthOf(assessmentLink, 1);\n  const sharedQuestionAssessmentUrl = siteUrl + assessmentLink.attr('href');\n  const res = await fetchCheerio(sharedQuestionAssessmentUrl);\n  assert.equal(res.ok, true);\n  return res;\n}\n\n// Set up temporary writeable directories for shared content\nconst baseDir = tmp.dirSync().name;\nconst sharingCourseOriginDir = path.join(baseDir, 'courseOrigin');\nconst sharingCourseLiveDir = path.join(baseDir, 'courseLive');\nconst gitOptionsOrigin = {\n  cwd: sharingCourseOriginDir,\n  env: process.env,\n};\nconst gitOptionsLive = {\n  cwd: sharingCourseLiveDir,\n  env: process.env,\n};\nasync function commitAndPullSharingCourse() {\n  await execa('git', ['add', '-A'], gitOptionsOrigin);\n  await execa('git', ['commit', '-m', 'Add sharing set'], gitOptionsOrigin);\n  await execa('git', ['pull'], gitOptionsLive);\n  const syncResult = await syncUtil.syncCourseData(sharingCourseLiveDir);\n  assert.equal(syncResult.status, 'complete');\n  assert(syncResult.status === 'complete' && !syncResult.hadJsonErrorsOrWarnings);\n}\n\nasync function ensureInvalidSharingOperationFailsToSync() {\n  let syncResult = await syncUtil.syncCourseData(sharingCourseLiveDir);\n  assert.equal(syncResult.status, 'sharing_error');\n  await execa('git', ['clean', '-fdx'], gitOptionsLive);\n  await execa('git', ['reset', '--hard', 'HEAD'], gitOptionsLive);\n\n  syncResult = await syncFromDisk.syncOrCreateDiskToSql(sharingCourseLiveDir, logger);\n  assert.equal(syncResult.status, 'complete');\n  assert(syncResult.status === 'complete' && !syncResult.hadJsonErrorsOrWarnings);\n}\n\nasync function syncSharingCourse(course_id) {\n  const syncUrl = `${baseUrl}/course/${course_id}/course_admin/syncs`;\n  const token = await getCsrfToken(syncUrl);\n\n  await fetch(syncUrl, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __action: 'pull',\n      __csrf_token: token,\n    }),\n  });\n  const result = await sqldb.queryOneRowAsync(sql.select_last_job_sequence, []);\n  return result.rows[0].id;\n}\n\ndescribe('Question Sharing', function () {\n  this.timeout(80000);\n  before('set up testing server', helperServer.before());\n  after('shut down testing server', helperServer.after);\n\n  before('ensure question sharing is globally enabled', async () => {\n    await features.enable('question-sharing');\n  });\n\n  // Rather than using the example course and test course, we'll set up two courses\n  // from scratch. This is necessary because the example course has hardcoded behavior\n  // to prevent all question sharing features from working.\n  let sharingCourse: Course;\n  let consumingCourse: Course;\n  let sharingCourseData: syncUtil.CourseData;\n  before('construct and sync course', async () => {\n    sharingCourseData = syncUtil.getCourseData();\n    sharingCourseData.course.name = 'SHARING 101';\n    const privateQuestion = sharingCourseData.questions.private;\n    sharingCourseData.questions = {\n      private: privateQuestion,\n      [SHARING_QUESTION_QID]: {\n        uuid: '00000000-0000-0000-0000-000000000000',\n        type: 'v3',\n        title: 'Shared via sharing set',\n        topic: 'TOPIC HERE',\n      },\n      [PUBLICLY_SHARED_QUESTION_QID]: {\n        uuid: '11111111-1111-1111-1111-111111111111',\n        type: 'v3',\n        title: 'Shared publicly',\n        topic: 'TOPIC HERE',\n      },\n      [DRAFT_QUESTION_QID]: {\n        uuid: '22222222-2222-2222-2222-222222222222',\n        type: 'v3',\n        title: 'Draft question',\n        topic: 'TOPIC HERE',\n      },\n    };\n\n    await syncUtil.writeCourseToDirectory(sharingCourseData, sharingCourseOriginDir);\n\n    // Fill in empty `question.html` files for our two questions so that we can\n    // view them without errors. We don't actually need any contents.\n    await fs.writeFile(\n      path.join(sharingCourseOriginDir, 'questions', SHARING_QUESTION_QID, 'question.html'),\n      '',\n    );\n    await fs.writeFile(\n      path.join(sharingCourseOriginDir, 'questions', PUBLICLY_SHARED_QUESTION_QID, 'question.html'),\n      '',\n    );\n    await execa('git', ['-c', 'init.defaultBranch=master', 'init'], gitOptionsOrigin);\n    await execa('git', ['add', '-A'], gitOptionsOrigin);\n    await execa('git', ['commit', '-m', 'initial commit'], gitOptionsOrigin);\n    await execa('mkdir', [sharingCourseLiveDir]);\n    await execa('git', ['clone', sharingCourseOriginDir, sharingCourseLiveDir], {\n      cwd: '.',\n      env: process.env,\n    });\n    const syncResults = await syncUtil.syncCourseData(sharingCourseLiveDir);\n    sharingCourse = await selectCourseById(syncResults.courseId);\n\n    const consumingCourseData = syncUtil.getCourseData();\n    consumingCourseData.course.name = 'CONSUMING 101';\n    consumingCourseData.courseInstances[syncUtil.COURSE_INSTANCE_ID].assessments[\n      syncUtil.ASSESSMENT_ID\n    ].zones = [\n      {\n        questions: [\n          {\n            id: `@${SHARING_COURSE_SHARING_NAME}/${SHARING_QUESTION_QID}`,\n            points: 1,\n          },\n          {\n            id: `@${SHARING_COURSE_SHARING_NAME}/${PUBLICLY_SHARED_QUESTION_QID}`,\n            points: 1,\n          },\n        ],\n      },\n    ];\n    const consumingCourseResults = await syncUtil.writeAndSyncCourseData(consumingCourseData);\n    consumingCourse = await selectCourseById(consumingCourseResults.syncResults.courseId);\n  });\n\n  describe('Test syncing code to identify missing shared question', function () {\n    before('alter config to check sharing on sync', () => {\n      config.checkSharingOnSync = true;\n    });\n    after('reset config', () => {\n      config.checkSharingOnSync = false;\n    });\n\n    step('Fail to sync course when validating shared question paths', async () => {\n      const syncResult = await syncFromDisk.syncOrCreateDiskToSql(consumingCourse.path, logger);\n      if (syncResult.status === 'complete' && !syncResult?.hadJsonErrorsOrWarnings) {\n        throw new Error(\n          'Sync of consuming course succeeded when it should have failed due to unresolved shared question path.',\n        );\n      }\n    });\n  });\n\n  describe('Create a sharing set and add a question to it', () => {\n    let exampleCourseSharingToken;\n    let testCourseSharingToken;\n\n    step(\n      'Sync course with sharing enabled, disabling validating shared question paths',\n      async () => {\n        const syncResult = await syncFromDisk.syncOrCreateDiskToSql(consumingCourse.path, logger);\n        if (syncResult.status !== 'complete' || syncResult?.hadJsonErrorsOrWarnings) {\n          throw new Error('Errors or warnings found during sync of consuming course');\n        }\n      },\n    );\n\n    step(\n      'Fail to access shared question, because permission has not yet been granted',\n      async () => {\n        // Since permissions aren't yet granted, the shared question doesn't show up on the assessment page\n        const res = await accessSharedQuestionAssessment(consumingCourse.id);\n        assert(!(await res.text()).includes(SHARING_QUESTION_QID));\n\n        // Question can be accessed through the owning course\n        const questionId = (\n          await sqldb.queryOneRowAsync(sql.get_question_id, {\n            course_id: sharingCourse.id,\n            qid: SHARING_QUESTION_QID,\n          })\n        ).rows[0].id;\n        const sharedQuestionUrl = `${baseUrl}/course_instance/${sharingCourse.id}/instructor/question/${questionId}`;\n        const sharedQuestionPage = await fetchCheerio(sharedQuestionUrl);\n        assert(sharedQuestionPage.ok);\n\n        // Question cannot be accessed through the consuming course, sharing permissions not yet set\n        const sharedQuestionSharedUrl = `${baseUrl}/course_instance/${consumingCourse.id}/instructor/question/${questionId}/settings`;\n        const sharedQuestionSharedPage = await fetchCheerio(sharedQuestionSharedUrl);\n        assert(!sharedQuestionSharedPage.ok);\n      },\n    );\n\n    step('Fail if trying to set an invalid sharing name', async () => {\n      let res = await setSharingName(sharingCourse.id, 'invalid@sharingname');\n      assert.equal(res.status, 400);\n\n      res = await setSharingName(sharingCourse.id, 'invalid / sharingname');\n      assert.equal(res.status, 400);\n\n      res = await setSharingName(sharingCourse.id, '');\n      assert.equal(res.status, 400);\n    });\n\n    step('Set consuming course sharing name', async () => {\n      await setSharingName(consumingCourse.id, CONSUMING_COURSE_SHARING_NAME);\n      const sharingPage = await fetchCheerio(sharingPageUrl(consumingCourse.id));\n      assert(sharingPage.ok);\n      assert.include(\n        sharingPage.$('[data-testid=\"sharing-name\"]').text(),\n        CONSUMING_COURSE_SHARING_NAME,\n      );\n    });\n\n    step('Set sharing course sharing name', async () => {\n      await setSharingName(sharingCourse.id, SHARING_COURSE_SHARING_NAME);\n      const sharingPage = await fetchCheerio(sharingPageUrl(sharingCourse.id));\n      assert(sharingPage.ok);\n      assert.include(\n        sharingPage.$('[data-testid=\"sharing-name\"]').text(),\n        SHARING_COURSE_SHARING_NAME,\n      );\n    });\n\n    step('Successfully change the sharing name when no questions have been shared', async () => {\n      let res = await setSharingName(sharingCourse.id, 'Nothing shared yet');\n      assert.equal(res.status, 200);\n\n      res = await setSharingName(sharingCourse.id, SHARING_COURSE_SHARING_NAME);\n      assert.equal(res.status, 200);\n    });\n\n    step('Generate and get sharing token for sharing course', async () => {\n      const sharingUrl = sharingPageUrl(sharingCourse.id);\n      let response = await fetchCheerio(sharingUrl);\n      const token = response.$('#test_csrf_token').text();\n      await fetch(sharingUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'sharing_token_regenerate',\n          __csrf_token: token,\n        }),\n      });\n\n      response = await fetchCheerio(sharingUrl);\n      const result = UUID_REGEXP.exec(await response.text());\n      exampleCourseSharingToken = result ? result[0] : null;\n      assert(exampleCourseSharingToken != null);\n    });\n\n    step('Get default sharing token for consuming course', async () => {\n      const sharingUrl = sharingPageUrl(consumingCourse.id);\n      const response = await fetchCheerio(sharingUrl);\n      const result = UUID_REGEXP.exec(await response.text());\n      testCourseSharingToken = result ? result[0] : null;\n      assert(testCourseSharingToken != null);\n    });\n\n    step('Add sharing set to JSON', async () => {\n      sharingCourseData.course.sharingSets = [\n        { name: SHARING_SET_NAME, description: 'Sharing set for testing' },\n      ];\n      const courseInfoPath = path.join(sharingCourseOriginDir, 'infoCourse.json');\n      await fs.writeJSON(courseInfoPath, sharingCourseData.course);\n\n      sharingCourseData.questions[SHARING_QUESTION_QID].sharingSets = [SHARING_SET_NAME];\n      await fs.writeJSON(\n        path.join(sharingCourseOriginDir, 'questions', SHARING_QUESTION_QID, 'info.json'),\n        sharingCourseData.questions[SHARING_QUESTION_QID],\n      );\n\n      await commitAndPullSharingCourse();\n    });\n\n    step('Share sharing set with test course', async () => {\n      const sharingUrl = sharingPageUrl(sharingCourse.id);\n      const response = await fetchCheerio(sharingUrl);\n      const token = response.$('#test_csrf_token').text();\n      const sharingSetId = await sqldb.queryRow(\n        sql.select_sharing_set,\n        { sharing_set_name: SHARING_SET_NAME },\n        IdSchema,\n      );\n      const res = await fetch(sharingUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'course_sharing_set_add',\n          __csrf_token: token,\n          unsafe_sharing_set_id: sharingSetId,\n          unsafe_course_sharing_token: testCourseSharingToken,\n        }),\n      });\n      assert(res.ok);\n\n      const sharingPage = await fetchCheerio(sharingPageUrl(sharingCourse.id));\n      assert(sharingPage.ok);\n      assert.include(sharingPage.$('[data-testid=\"shared-with\"]').text(), 'CONSUMING 101');\n    });\n\n    step('Attempt to share sharing set with invalid course token', async () => {\n      const sharingUrl = sharingPageUrl(sharingCourse.id);\n      const response = await fetchCheerio(sharingUrl);\n      const token = response.$('#test_csrf_token').text();\n      const res = await fetch(sharingUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'course_sharing_set_add',\n          __csrf_token: token,\n          unsafe_sharing_set_id: '1',\n          unsafe_course_sharing_token: 'invalid sharing token',\n        }),\n      });\n      assert.equal(res.status, 400);\n    });\n\n    step('Attempt to share sharing set with own course', async () => {\n      const sharingUrl = sharingPageUrl(sharingCourse.id);\n      const response = await fetchCheerio(sharingUrl);\n      const token = response.$('#test_csrf_token').text();\n      const res = await fetch(sharingUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'course_sharing_set_add',\n          __csrf_token: token,\n          unsafe_sharing_set_id: '1',\n          unsafe_course_sharing_token: exampleCourseSharingToken,\n        }),\n      });\n      assert.equal(res.status, 400);\n    });\n\n    step('Attempt to share sharing set that does not belong to the course', async () => {\n      const sharingUrl = sharingPageUrl(consumingCourse.id);\n      const response = await fetchCheerio(sharingUrl);\n      const token = response.$('#test_csrf_token').text();\n      const res = await fetch(sharingUrl, {\n        method: 'POST',\n        body: new URLSearchParams({\n          __action: 'course_sharing_set_add',\n          __csrf_token: token,\n          unsafe_sharing_set_id: '1',\n          unsafe_course_sharing_token: exampleCourseSharingToken,\n        }),\n      });\n      assert.equal(res.status, 400);\n    });\n\n    step('Fail to change the sharing name when a question has been shared', async () => {\n      const res = await setSharingName(sharingCourse.id, 'Question shared');\n      assert.equal(res.status, 400);\n    });\n  });\n\n  describe('Test Sharing a Question Publicly', function () {\n    let publiclySharedQuestionId;\n\n    before('Get id for publicly shared question', async () => {\n      publiclySharedQuestionId = (\n        await sqldb.queryOneRowAsync(sql.get_question_id, {\n          course_id: sharingCourse.id,\n          qid: PUBLICLY_SHARED_QUESTION_QID,\n        })\n      ).rows[0].id;\n    });\n\n    step('Fail to Access Questions Not-yet shared publicly', async () => {\n      const sharedQuestionSharedUrl = `${baseUrl}/course_instance/${consumingCourse.id}/instructor/question/${publiclySharedQuestionId}`;\n      const sharedQuestionSharedPage = await fetchCheerio(sharedQuestionSharedUrl);\n      assert(!sharedQuestionSharedPage.ok);\n    });\n\n    step('Publicly share a question', async () => {\n      sharingCourseData.questions[PUBLICLY_SHARED_QUESTION_QID].sharePublicly = true;\n      await fs.writeJSON(\n        path.join(sharingCourseOriginDir, 'questions', PUBLICLY_SHARED_QUESTION_QID, 'info.json'),\n        sharingCourseData.questions[PUBLICLY_SHARED_QUESTION_QID],\n      );\n\n      await commitAndPullSharingCourse();\n    });\n\n    step('Successfully access publicly shared question through other course', async () => {\n      const sharedQuestionSharedUrl = `${baseUrl}/course_instance/${consumingCourse.id}/instructor/question/${publiclySharedQuestionId}`;\n      const sharedQuestionSharedPage = await fetchCheerio(sharedQuestionSharedUrl);\n      assert(sharedQuestionSharedPage.ok);\n    });\n  });\n\n  describe('Test syncing code succeeding once questions have been shared', function () {\n    before('alter config to check sharing on sync', () => {\n      config.checkSharingOnSync = true;\n    });\n    after('reset config', () => {\n      config.checkSharingOnSync = false;\n    });\n    step('Re-sync test course, validating shared questions', async () => {\n      const syncResult = await syncFromDisk.syncOrCreateDiskToSql(consumingCourse.path, logger);\n      if (syncResult?.status !== 'complete' || syncResult.hadJsonErrorsOrWarnings) {\n        throw new Error('Errors or warnings found during sync of consuming course');\n      }\n    });\n\n    step('Successfully access shared question', async () => {\n      const res = await accessSharedQuestionAssessment(consumingCourse.id);\n      const sharedQuestionLink = res.$('a:contains(\"Shared via sharing set\")');\n      assert.lengthOf(sharedQuestionLink, 1);\n      const sharedQuestionRes = await fetchCheerio(siteUrl + sharedQuestionLink.attr('href'));\n      assert(sharedQuestionRes.ok);\n\n      const publiclySharedQuestionLink = res.$('a:contains(\"Shared publicly\")');\n      assert.lengthOf(publiclySharedQuestionLink, 1);\n      const publiclySharedQuestionRes = await fetchCheerio(\n        siteUrl + publiclySharedQuestionLink.attr('href'),\n      );\n      assert(publiclySharedQuestionRes.ok);\n    });\n\n    step('Fail to sync if shared question is renamed', async () => {\n      const questionPath = path.join(sharingCourse.path, 'questions', SHARING_QUESTION_QID);\n      const questionTempPath = questionPath + '_temp';\n      await fs.rename(questionPath, questionTempPath);\n      const syncResult = await syncFromDisk.syncOrCreateDiskToSql(sharingCourse.path, logger);\n      assert.equal(\n        syncResult.status,\n        'sharing_error',\n        'sync should not complete when attempting sync after moving shared question',\n      );\n\n      const question_id = await sqldb.queryOptionalRow(\n        sql.get_question_id,\n        {\n          course_id: sharingCourse.id,\n          qid: SHARING_QUESTION_QID,\n        },\n        IdSchema,\n      );\n      assert(\n        question_id !== null,\n        'Sync of consuming course should not allow renaming a shared question.',\n      );\n      await fs.rename(questionTempPath, questionPath);\n    });\n\n    step('Ensure sync through sync page succeeds before renaming shared question', async () => {\n      await sqldb.queryAsync(sql.update_course_repository, {\n        course_path: sharingCourseLiveDir,\n        course_repository: sharingCourseOriginDir,\n      });\n\n      const job_sequence_id = await syncSharingCourse(sharingCourse.id);\n      await helperServer.waitForJobSequenceStatus(job_sequence_id, 'Success');\n    });\n\n    step('Rename shared question in origin, ensure live does not sync it', async () => {\n      const questionPath = path.join(sharingCourseOriginDir, 'questions', SHARING_QUESTION_QID);\n      const questionTempPath = questionPath + '_temp';\n      await fs.rename(questionPath, questionTempPath);\n      await execa('git', ['add', '-A'], gitOptionsOrigin);\n      await execa('git', ['commit', '-m', 'invalid sharing config edit'], gitOptionsOrigin);\n\n      const commitHash = await getCourseCommitHash(sharingCourseLiveDir);\n\n      const job_sequence_id = await syncSharingCourse(sharingCourse.id);\n      await helperServer.waitForJobSequenceStatus(job_sequence_id, 'Error');\n\n      assert.equal(\n        commitHash,\n        await getCourseCommitHash(sharingCourseLiveDir),\n        'Commit hash of sharing course should not change when attempting to sync breaking change.',\n      );\n\n      const sharedQuestionExists = await fs.pathExists(\n        path.join(sharingCourseLiveDir, 'questions', SHARING_QUESTION_QID),\n      );\n      assert(\n        sharedQuestionExists,\n        'When origin repo moves shared question, live should not sync that change.',\n      );\n\n      // remove breaking change in origin repo\n      await execa('git', ['reset', '--hard', 'HEAD~1'], gitOptionsOrigin);\n\n      const job_sequence_id_success = await syncSharingCourse(sharingCourse.id);\n      await helperServer.waitForJobSequenceStatus(job_sequence_id_success, 'Success');\n    });\n\n    step('Remove question from sharing set, ensure live does not sync it', async () => {\n      const saveSharingSets = sharingCourseData.questions[SHARING_QUESTION_QID].sharingSets || [];\n      sharingCourseData.questions[SHARING_QUESTION_QID].sharingSets = [];\n      await fs.writeJSON(\n        path.join(sharingCourseLiveDir, 'questions', SHARING_QUESTION_QID, 'info.json'),\n        sharingCourseData.questions[SHARING_QUESTION_QID],\n      );\n\n      await ensureInvalidSharingOperationFailsToSync();\n\n      sharingCourseData.questions[SHARING_QUESTION_QID].sharingSets = saveSharingSets;\n    });\n\n    step('Unshare a publicly shared question, ensure live does not sync it', async () => {\n      sharingCourseData.questions[PUBLICLY_SHARED_QUESTION_QID].sharePublicly = false;\n      await fs.writeJSON(\n        path.join(sharingCourseLiveDir, 'questions', PUBLICLY_SHARED_QUESTION_QID, 'info.json'),\n        sharingCourseData.questions[PUBLICLY_SHARED_QUESTION_QID],\n      );\n\n      await ensureInvalidSharingOperationFailsToSync();\n    });\n\n    step('Delete a sharing set, ensure live does not sync it', async () => {\n      const saveSharingSets = sharingCourseData.course.sharingSets || [];\n      sharingCourseData.course.sharingSets = [];\n      await fs.writeJSON(\n        path.join(sharingCourseLiveDir, 'infoCourse.json'),\n        sharingCourseData.course,\n      );\n\n      await ensureInvalidSharingOperationFailsToSync();\n\n      sharingCourseData.course.sharingSets = saveSharingSets;\n    });\n\n    step(\n      'Try adding question to sharing set that does not exist, ensure live does not sync it',\n      async () => {\n        const saveSharingSets = sharingCourseData.questions[SHARING_QUESTION_QID].sharingSets || [];\n        sharingCourseData.questions[SHARING_QUESTION_QID].sharingSets?.push(\n          'Fake Sharing Set Name',\n        );\n        await fs.writeJSON(\n          path.join(sharingCourseLiveDir, 'questions', SHARING_QUESTION_QID, 'info.json'),\n          sharingCourseData.questions[SHARING_QUESTION_QID],\n        );\n\n        await ensureInvalidSharingOperationFailsToSync();\n\n        sharingCourseData.questions[SHARING_QUESTION_QID].sharingSets = saveSharingSets;\n      },\n    );\n  });\n\n  describe('Test publicly sharing an assessment', function () {\n    before('alter config to check sharing on sync', () => {\n      config.checkSharingOnSync = true;\n    });\n    after('reset config', () => {\n      config.checkSharingOnSync = false;\n    });\n\n    step('Fail to sync a shared assessment containing a nonshared question', async () => {\n      sharingCourseData.courseInstances['Fa19'].assessments['test'].shareSourcePublicly = true;\n      sharingCourseData.courseInstances['Fa19'].assessments['test'].zones = [\n        {\n          questions: [\n            {\n              id: `${SHARING_QUESTION_QID}`,\n              points: 1,\n            },\n            {\n              id: `${PUBLICLY_SHARED_QUESTION_QID}`,\n              points: 1,\n            },\n          ],\n        },\n      ];\n\n      await fs.writeJSON(\n        path.join(\n          sharingCourseLiveDir,\n          'courseInstances/Fa19/assessments/test/infoAssessment.json',\n        ),\n        sharingCourseData.courseInstances['Fa19'].assessments['test'],\n      );\n\n      await ensureInvalidSharingOperationFailsToSync();\n    });\n\n    step('Successfully sync a shared assessment with a shared question', async () => {\n      sharingCourseData.courseInstances['Fa19'].assessments['test'].zones = [\n        {\n          questions: [\n            {\n              id: `${PUBLICLY_SHARED_QUESTION_QID}`,\n              points: 1,\n            },\n          ],\n        },\n      ];\n\n      await fs.writeJSON(\n        path.join(\n          sharingCourseLiveDir,\n          'courseInstances/Fa19/assessments/test/infoAssessment.json',\n        ),\n        sharingCourseData.courseInstances['Fa19'].assessments['test'],\n      );\n\n      const syncResult = await syncFromDisk.syncOrCreateDiskToSql(sharingCourse.path, logger);\n      if (syncResult.status !== 'complete' || syncResult?.hadJsonErrorsOrWarnings) {\n        throw new Error('Errors or warnings found during sync of sharing course');\n      }\n    });\n\n    step(\n      'Successfully access publicly shared assessment page for the shared assessment',\n      async () => {\n        const courseInstanceId = await sqldb.queryRow(\n          sql.select_course_instance,\n          { short_name: 'Fa19', sharing_course_id: sharingCourse.id },\n          IdSchema,\n        );\n        const sharedAssessmentId = await sqldb.queryRow(\n          sql.select_assessment,\n          { tid: 'test', course_instance_id: courseInstanceId },\n          IdSchema,\n        );\n        const sharedAssessmentUrl = `${baseUrl}/public/course_instance/${courseInstanceId}/assessment/${sharedAssessmentId}/questions`;\n        const sharedAssessmentPage = await fetchCheerio(sharedAssessmentUrl);\n\n        assert(sharedAssessmentPage.ok);\n      },\n    );\n\n    step('Try adding a draft question to a sharing set, ensure live does not sync it', async () => {\n      sharingCourseData.questions[DRAFT_QUESTION_QID].sharingSets = [SHARING_SET_NAME];\n\n      const questionDirectory = path.join(sharingCourseLiveDir, 'questions', DRAFT_QUESTION_QID);\n      await fs.ensureDir(questionDirectory);\n      await fs.writeJSON(\n        path.join(questionDirectory, 'info.json'),\n        sharingCourseData.questions[DRAFT_QUESTION_QID],\n      );\n\n      await ensureInvalidSharingOperationFailsToSync();\n    });\n\n    step('Try publicly sharing a draft question, ensure live does not sync it', async () => {\n      delete sharingCourseData.questions[DRAFT_QUESTION_QID].sharingSets;\n      sharingCourseData.questions[DRAFT_QUESTION_QID].sharePublicly = true;\n\n      const questionDirectory = path.join(sharingCourseLiveDir, 'questions', DRAFT_QUESTION_QID);\n      await fs.writeJSON(\n        path.join(questionDirectory, 'info.json'),\n        sharingCourseData.questions[DRAFT_QUESTION_QID],\n      );\n\n      await ensureInvalidSharingOperationFailsToSync();\n    });\n\n    step(\n      'Try publicly sharing the source of a draft question, ensure live does not sync it',\n      async () => {\n        delete sharingCourseData.questions[DRAFT_QUESTION_QID].sharePublicly;\n        sharingCourseData.questions[DRAFT_QUESTION_QID].shareSourcePublicly = true;\n\n        const questionDirectory = path.join(sharingCourseLiveDir, 'questions', DRAFT_QUESTION_QID);\n        await fs.writeJSON(\n          path.join(questionDirectory, 'info.json'),\n          sharingCourseData.questions[DRAFT_QUESTION_QID],\n        );\n\n        await ensureInvalidSharingOperationFailsToSync();\n      },\n    );\n  });\n});\n"]}