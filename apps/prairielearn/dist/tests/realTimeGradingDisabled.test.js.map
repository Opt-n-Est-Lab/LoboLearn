{"version":3,"file":"realTimeGradingDisabled.test.js","sourceRoot":"","sources":["../../src/tests/realTimeGradingDisabled.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\nimport fetch from 'node-fetch';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport * as helperClient from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('Exam assessment with real-time grading disabled', function () {\n  this.timeout(60000);\n\n  const context: Record<string, any> = {};\n  context.siteUrl = `http://localhost:${config.serverPort}`;\n  context.baseUrl = `${context.siteUrl}/pl`;\n  context.courseInstanceBaseUrl = `${context.baseUrl}/course_instance/1`;\n\n  before('set up testing server', async function () {\n    await helperServer.before().call(this);\n    const results = await sqldb.queryOneRowAsync(sql.select_exam8, []);\n    context.assessmentId = results.rows[0].id;\n    context.assessmentUrl = `${context.courseInstanceBaseUrl}/assessment/${context.assessmentId}/`;\n  });\n  after('shut down testing server', helperServer.after);\n\n  step('visit start exam page', async () => {\n    const response = await helperClient.fetchCheerio(context.assessmentUrl);\n    assert.isTrue(response.ok);\n\n    assert.equal(response.$('#start-assessment').text().trim(), 'Start assessment');\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, 'form');\n  });\n\n  step('start the exam', async () => {\n    const response = await helperClient.fetchCheerio(context.assessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'new_instance',\n        __csrf_token: context.__csrf_token,\n      }),\n    });\n    assert.isTrue(response.ok);\n\n    // We should have been redirected to the assessment instance\n    const assessmentInstanceUrl = response.url;\n    assert.include(assessmentInstanceUrl, '/assessment_instance/');\n    context.assessmentInstanceUrl = assessmentInstanceUrl;\n\n    const questionUrl = response.$('a:contains(\"Question 1\")').attr('href');\n    context.questionUrl = `${context.siteUrl}${questionUrl}`;\n  });\n\n  step('check for grade button on the assessment page', async () => {\n    const response = await helperClient.fetchCheerio(context.assessmentUrl);\n    assert.isTrue(response.ok);\n\n    assert.lengthOf(response.$('form[name=\"grade-form\"]'), 0);\n  });\n\n  step('check for grade button on a question page', async () => {\n    const response = await helperClient.fetchCheerio(context.questionUrl);\n    assert.isTrue(response.ok);\n\n    assert.lengthOf(response.$('button[name=\"__action\"][value=\"grade\"]'), 0);\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, '.question-form');\n  });\n\n  step('try to manually grade request on the question page', async () => {\n    const response = await fetch(context.assessmentInstanceUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'grade',\n        __csrf_token: context.__csrf_token,\n      }),\n    });\n\n    assert.isFalse(response.ok);\n    assert.equal(response.status, 403);\n  });\n});\n"]}