{"version":3,"file":"serverJobs.test.js","sourceRoot":"","sources":["../../src/tests/serverJobs.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport stripAnsi from 'strip-ansi';\n\nimport { logger } from '@prairielearn/logger';\n\nimport { createServerJob, getJobSequence } from '../lib/server-jobs.js';\n\nimport * as helperServer from './helperServer.js';\n\nfunction disableLoggingForTests() {\n  let originalSilent;\n  before(() => {\n    originalSilent = logger.silent;\n    logger.silent = true;\n  });\n  after(() => {\n    logger.silent = originalSilent;\n  });\n}\n\ndescribe('server-jobs', () => {\n  before(helperServer.before());\n  after(helperServer.after);\n\n  disableLoggingForTests();\n\n  describe('execute', () => {\n    it('runs a job', async () => {\n      const serverJob = await createServerJob({\n        type: 'test',\n        description: 'test server job',\n      });\n\n      await serverJob.execute(async (job) => {\n        job.info('testing info');\n        job.error('testing error');\n        job.data.foo = 'bar';\n      });\n\n      const finishedJobSequence = await getJobSequence(serverJob.jobSequenceId, null);\n\n      assert.equal(finishedJobSequence.type, 'test');\n      assert.equal(finishedJobSequence.description, 'test server job');\n      assert.equal(finishedJobSequence.status, 'Success');\n      assert.lengthOf(finishedJobSequence.jobs, 1);\n\n      const job = finishedJobSequence.jobs[0];\n      assert.equal(job.type, 'test');\n      assert.equal(job.description, 'test server job');\n      assert.equal(job.status, 'Success');\n      assert.equal(stripAnsi(job.output ?? ''), 'testing info\\ntesting error\\n');\n      assert.deepEqual(job.data.foo, 'bar');\n    });\n\n    it('runs a job with an error', async () => {\n      const serverJob = await createServerJob({\n        type: 'test',\n        description: 'test job sequence',\n      });\n\n      await assert.isFulfilled(\n        serverJob.execute(async (job) => {\n          job.info('testing info');\n          throw new Error('failing job');\n        }),\n        'failing job',\n      );\n\n      const finishedJobSequence = await getJobSequence(serverJob.jobSequenceId, null);\n\n      assert.equal(finishedJobSequence.status, 'Error');\n      assert.lengthOf(finishedJobSequence.jobs, 1);\n\n      const job = finishedJobSequence.jobs[0];\n      assert.equal(job.status, 'Error');\n      assert.match(stripAnsi(job.output ?? ''), /^testing info\\nError: failing job\\n\\s+at/);\n    });\n\n    it('fails the job when fail() is called', async () => {\n      const serverJob = await createServerJob({\n        type: 'test',\n        description: 'test job sequence',\n      });\n\n      await assert.isFulfilled(\n        serverJob.execute(async (job) => {\n          job.fail('failing job');\n        }),\n        'failing job',\n      );\n\n      const finishedJobSequence = await getJobSequence(serverJob.jobSequenceId, null);\n\n      assert.equal(finishedJobSequence.status, 'Error');\n      assert.lengthOf(finishedJobSequence.jobs, 1);\n\n      // The difference between this test and the previous one is that we assert\n      // that the output is exactly equal to the string passed to `fail()`. We\n      // don't expect there to be a stack trace.\n      const job = finishedJobSequence.jobs[0];\n      assert.equal(job.status, 'Error');\n      assert.equal(stripAnsi(job.output || ''), 'failing job\\n');\n    });\n  });\n\n  describe('executeUnsafe', () => {\n    it('propagates error to the caller', async () => {\n      const serverJob = await createServerJob({\n        type: 'test',\n        description: 'test job sequence',\n      });\n\n      await assert.isRejected(\n        serverJob.executeUnsafe(async (job) => {\n          job.info('testing info');\n          throw new Error('failing job');\n        }),\n      );\n\n      await helperServer.waitForJobSequence(serverJob.jobSequenceId);\n\n      const finishedJobSequence = await getJobSequence(serverJob.jobSequenceId, null);\n\n      assert.equal(finishedJobSequence.status, 'Error');\n      assert.lengthOf(finishedJobSequence.jobs, 1);\n\n      const job = finishedJobSequence.jobs[0];\n      assert.equal(job.status, 'Error');\n      assert.match(stripAnsi(job.output ?? ''), /^testing info\\nError: failing job\\n\\s+at/);\n    });\n  });\n});\n"]}