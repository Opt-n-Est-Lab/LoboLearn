{"version":3,"file":"showClosedAssessment.test.js","sourceRoot":"","sources":["../../src/tests/showClosedAssessment.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport * as helperClient from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('Exam assessment with showCloseAssessment access rule', function () {\n  this.timeout(60000);\n\n  const context: Record<string, any> = {};\n  context.siteUrl = `http://localhost:${config.serverPort}`;\n  context.baseUrl = `${context.siteUrl}/pl`;\n  context.courseInstanceBaseUrl = `${context.baseUrl}/course_instance/1`;\n\n  const headers = {\n    cookie: 'pl_test_user=test_student; pl_test_date=2000-01-19T00:00:01',\n    // need student mode to get a timed exam (instructor override bypasses this)\n  };\n\n  const headersTimeLimit = {\n    cookie: 'pl_test_user=test_student; pl_test_date=2000-01-19T12:00:01',\n  };\n\n  before('set up testing server', async function () {\n    await helperServer.before().call(this);\n    const results = await sqldb.queryOneRowAsync(sql.select_exam8, []);\n    context.assessmentId = results.rows[0].id;\n    context.assessmentUrl = `${context.courseInstanceBaseUrl}/assessment/${context.assessmentId}/`;\n  });\n  after('shut down testing server', helperServer.after);\n\n  // we need to access the homepage to create the test_student user in the DB\n  step('visit home page', async () => {\n    const response = await helperClient.fetchCheerio(context.baseUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n  });\n\n  step('enroll the test student user in the course', async () => {\n    await sqldb.queryOneRowAsync(sql.enroll_student_in_course, []);\n  });\n\n  step('visit start exam page', async () => {\n    const response = await helperClient.fetchCheerio(context.assessmentUrl, {\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    assert.equal(response.$('#start-assessment').text().trim(), 'Start assessment');\n\n    helperClient.extractAndSaveCSRFToken(context, response.$, 'form');\n  });\n\n  step('start the exam', async () => {\n    const response = await helperClient.fetchCheerio(context.assessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'new_instance',\n        __csrf_token: context.__csrf_token,\n      }),\n      headers,\n    });\n    assert.isTrue(response.ok);\n\n    // We should have been redirected to the assessment instance\n    const assessmentInstanceUrl = response.url;\n    assert.include(assessmentInstanceUrl, '/assessment_instance/');\n    context.assessmentInstanceUrl = assessmentInstanceUrl;\n\n    // save the questionUrl for later\n    const questionUrl = response.$('a:contains(\"Question 1\")').attr('href');\n    context.questionUrl = `${context.siteUrl}${questionUrl}`;\n\n    context.__csrf_token = response.$('span[id=test_csrf_token]').text();\n  });\n\n  step('simulate a time limit expiration', async () => {\n    const response = await helperClient.fetchCheerio(context.assessmentInstanceUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'timeLimitFinish',\n        __csrf_token: context.__csrf_token,\n      }),\n      headers: headersTimeLimit,\n    });\n    assert.equal(response.status, 403);\n\n    // We should have been redirected back to the same assessment instance\n    assert.equal(response.url, context.assessmentInstanceUrl + '?timeLimitExpired=true');\n\n    // we should not have any questions\n    assert.lengthOf(response.$('a:contains(\"Question 1\")'), 0);\n\n    // we should have the \"assessment closed\" message\n    const msg = response.$('[data-testid=\"assessment-closed-message\"]');\n    assert.lengthOf(msg, 1);\n    assert.match(msg.text(), /Assessment .* is no longer available/);\n  });\n\n  step('check the assessment instance is closed', async () => {\n    const results = await sqldb.queryAsync(sql.select_assessment_instances, []);\n    assert.equal(results.rowCount, 1);\n    assert.equal(results.rows[0].open, false);\n  });\n\n  step('check that accessing a question gives the \"assessment closed\" message', async () => {\n    const response = await helperClient.fetchCheerio(context.questionUrl, {\n      headers,\n    });\n    assert.equal(response.status, 403);\n\n    assert.lengthOf(response.$('[data-testid=\"assessment-closed-message\"]'), 1);\n    assert.lengthOf(response.$('div.progress'), 1); // score should be shown\n  });\n});\n"]}