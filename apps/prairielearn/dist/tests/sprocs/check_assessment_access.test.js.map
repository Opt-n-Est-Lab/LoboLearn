{"version":3,"file":"check_assessment_access.test.js","sourceRoot":"","sources":["../../../src/tests/sprocs/check_assessment_access.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAiB,MAAM,uBAAuB,CAAC;AACtD,OAAO,KAAK,QAAQ,MAAM,gBAAgB,CAAC;AAE3C,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,KAAK,UAAU,qBAAqB,CAAC,MAUpC;IACC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,OAAO,CAChC,yBAAyB,EACzB;QACE,MAAM,CAAC,aAAa;QACpB,MAAM,CAAC,UAAU;QACjB,MAAM,CAAC,iBAAiB;QACxB,MAAM,CAAC,WAAW;QAClB,MAAM,CAAC,oBAAoB;QAC3B,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,GAAG;QACV,MAAM,CAAC,IAAI;QACX,MAAM,CAAC,gBAAgB;KACxB,EACD,CAAC,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CACtC,CAAC;IACF,OAAO,MAAM,CAAC,UAAU,CAAC;AAC3B,CAAC;AAED,QAAQ,CAAC,sCAAsC,EAAE;IAC/C,MAAM,CAAC,uBAAuB,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IACjD,KAAK,CAAC,4BAA4B,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEpD,MAAM,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;YACpF,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;gBAC7C,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,QAAQ;gBACpB,WAAW,EAAE,MAAM;gBACnB,oBAAoB,EAAE,MAAM;gBAC5B,OAAO,EAAE,MAAM;gBACf,GAAG,EAAE,mBAAmB;gBACxB,IAAI,EAAE,wBAAwB;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;gBAC7C,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,MAAM;gBAClB,WAAW,EAAE,MAAM;gBACnB,oBAAoB,EAAE,MAAM;gBAC5B,OAAO,EAAE,MAAM;gBACf,GAAG,EAAE,mBAAmB;gBACxB,IAAI,EAAE,wBAAwB;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;gBAC7C,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,MAAM;gBAClB,WAAW,EAAE,MAAM;gBACnB,oBAAoB,EAAE,MAAM;gBAC5B,OAAO,EAAE,MAAM;gBACf,GAAG,EAAE,mBAAmB;gBACxB,IAAI,EAAE,wBAAwB;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;gBAC7C,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,MAAM;gBAClB,WAAW,EAAE,MAAM;gBACnB,oBAAoB,EAAE,MAAM;gBAC5B,OAAO,EAAE,MAAM;gBACf,GAAG,EAAE,qBAAqB;gBAC1B,IAAI,EAAE,wBAAwB;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC9E,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;gBAC7C,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,MAAM;gBAClB,WAAW,EAAE,MAAM;gBACnB,oBAAoB,EAAE,MAAM;gBAC5B,OAAO,EAAE,MAAM;gBACf,GAAG,EAAE,mBAAmB;gBACxB,IAAI,EAAE,wBAAwB;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;gBAC7C,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,MAAM;gBAClB,WAAW,EAAE,MAAM;gBACnB,oBAAoB,EAAE,MAAM;gBAC5B,OAAO,EAAE,MAAM;gBACf,GAAG,EAAE,mBAAmB;gBACxB,IAAI,EAAE,wBAAwB;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kFAAkF,EAAE,KAAK,IAAI,EAAE;YAChG,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;gBAC7C,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,QAAQ;gBACpB,WAAW,EAAE,MAAM;gBACnB,oBAAoB,EAAE,MAAM;gBAC5B,OAAO,EAAE,MAAM;gBACf,GAAG,EAAE,mBAAmB;gBACxB,IAAI,EAAE,wBAAwB;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;YAC9C,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;gBACpE,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;oBAC7C,aAAa,EAAE,IAAI;oBACnB,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,aAAa;oBAChC,WAAW,EAAE,MAAM;oBACnB,oBAAoB,EAAE,MAAM;oBAC5B,OAAO,EAAE,MAAM;oBACf,GAAG,EAAE,mBAAmB;oBACxB,IAAI,EAAE,wBAAwB;oBAC9B,gBAAgB,EAAE,YAAY;iBAC/B,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;gBACjE,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;oBAC7C,aAAa,EAAE,IAAI;oBACnB,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,aAAa;oBAChC,WAAW,EAAE,MAAM;oBACnB,oBAAoB,EAAE,MAAM;oBAC5B,OAAO,EAAE,MAAM;oBACf,GAAG,EAAE,mBAAmB;oBACxB,IAAI,EAAE,wBAAwB;oBAC9B,gBAAgB,EAAE,YAAY;iBAC/B,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;YAC3C,MAAM,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;gBAC7D,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;gBACpE,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;oBAC7C,aAAa,EAAE,IAAI;oBACnB,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,aAAa;oBAChC,WAAW,EAAE,MAAM;oBACnB,oBAAoB,EAAE,MAAM;oBAC5B,OAAO,EAAE,MAAM;oBACf,GAAG,EAAE,mBAAmB;oBACxB,IAAI,EAAE,wBAAwB;oBAC9B,gBAAgB,EAAE,YAAY;iBAC/B,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;gBACxE,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;oBAC7C,aAAa,EAAE,IAAI;oBACnB,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,aAAa;oBAChC,WAAW,EAAE,MAAM;oBACnB,oBAAoB,EAAE,MAAM;oBAC5B,OAAO,EAAE,MAAM;oBACf,GAAG,EAAE,mBAAmB;oBACxB,IAAI,EAAE,wBAAwB;oBAC9B,gBAAgB,EAAE,YAAY;iBAC/B,CAAC,CAAC;gBACH,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;gBAChF,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;oBAC7C,aAAa,EAAE,IAAI;oBACnB,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,aAAa;oBAChC,WAAW,EAAE,MAAM;oBACnB,oBAAoB,EAAE,MAAM;oBAC5B,OAAO,EAAE,MAAM;oBACf,GAAG,EAAE,mBAAmB;oBACxB,IAAI,EAAE,wBAAwB;oBAC9B,gBAAgB,EAAE,YAAY;iBAC/B,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6FAA6F,EAAE,KAAK,IAAI,EAAE;gBAC3G,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;oBAC7C,aAAa,EAAE,IAAI;oBACnB,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,aAAa;oBAChC,WAAW,EAAE,MAAM;oBACnB,oBAAoB,EAAE,MAAM;oBAC5B,OAAO,EAAE,MAAM;oBACf,GAAG,EAAE,mBAAmB;oBACxB,IAAI,EAAE,wBAAwB;oBAC9B,gBAAgB,EAAE,YAAY;iBAC/B,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,yFAAyF,EAAE,KAAK,IAAI,EAAE;gBACvG,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;oBAC7C,aAAa,EAAE,IAAI;oBACnB,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,aAAa;oBAChC,WAAW,EAAE,MAAM;oBACnB,oBAAoB,EAAE,MAAM;oBAC5B,OAAO,EAAE,MAAM;oBACf,GAAG,EAAE,mBAAmB;oBACxB,IAAI,EAAE,wBAAwB;oBAC9B,gBAAgB,EAAE,YAAY;iBAC/B,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC;gBAC7C,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,MAAM;gBAClB,iBAAiB,EAAE,SAAS;gBAC5B,WAAW,EAAE,MAAM;gBACnB,oBAAoB,EAAE,MAAM;gBAC5B,OAAO,EAAE,MAAM;gBACf,GAAG,EAAE,mBAAmB;gBACxB,IAAI,EAAE,wBAAwB;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { type EnumMode } from '../../lib/db-types.js';\nimport * as helperDb from '../helperDb.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nasync function checkAssessmentAccess(params: {\n  assessment_id: string;\n  authz_mode: EnumMode;\n  authz_mode_reason?: string;\n  course_role: string;\n  course_instance_role: string;\n  user_id: string;\n  uid: string;\n  date: string;\n  display_timezone: string;\n}): Promise<boolean> {\n  const result = await sqldb.callRow(\n    'check_assessment_access',\n    [\n      params.assessment_id,\n      params.authz_mode,\n      params.authz_mode_reason,\n      params.course_role,\n      params.course_instance_role,\n      params.user_id,\n      params.uid,\n      params.date,\n      params.display_timezone,\n    ],\n    z.object({ authorized: z.boolean() }),\n  );\n  return result.authorized;\n}\n\ndescribe('sproc check_assessment_access* tests', function () {\n  before('set up testing server', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  before('setup sample environment', async () => {\n    await sqldb.queryAsync(sql.setup_caa_scheduler_tests, {});\n  });\n\n  describe('without PrairieTest', () => {\n    it('should allow access when mode, uid, start_date, and end_date matches', async () => {\n      const authorized = await checkAssessmentAccess({\n        assessment_id: '50',\n        authz_mode: 'Public',\n        course_role: 'None',\n        course_instance_role: 'None',\n        user_id: '1000',\n        uid: 'valid@example.com',\n        date: '2010-07-07 06:06:06-00',\n        display_timezone: 'US/Central',\n      });\n      assert.isTrue(authorized);\n    });\n\n    it('show allow access in Exam mode without an exam_uuid', async () => {\n      const authorized = await checkAssessmentAccess({\n        assessment_id: '10',\n        authz_mode: 'Exam',\n        course_role: 'None',\n        course_instance_role: 'None',\n        user_id: '1000',\n        uid: 'valid@example.com',\n        date: '2010-07-07 06:06:06-00',\n        display_timezone: 'US/Central',\n      });\n      assert.isTrue(authorized);\n    });\n\n    it('should not allow access when mode does not match', async () => {\n      const authorized = await checkAssessmentAccess({\n        assessment_id: '50',\n        authz_mode: 'Exam',\n        course_role: 'None',\n        course_instance_role: 'None',\n        user_id: '1000',\n        uid: 'valid@example.com',\n        date: '2010-07-07 06:06:06-00',\n        display_timezone: 'US/Central',\n      });\n      assert.isFalse(authorized);\n    });\n\n    it('should not allow access when uid not in uids', async () => {\n      const authorized = await checkAssessmentAccess({\n        assessment_id: '50',\n        authz_mode: 'Exam',\n        course_role: 'None',\n        course_instance_role: 'None',\n        user_id: '1000',\n        uid: 'invalid@example.com',\n        date: '2010-07-07 06:06:06-00',\n        display_timezone: 'US/Central',\n      });\n      assert.isFalse(authorized);\n    });\n\n    it('should not allow access when attempt date is before start_date', async () => {\n      const authorized = await checkAssessmentAccess({\n        assessment_id: '50',\n        authz_mode: 'Exam',\n        course_role: 'None',\n        course_instance_role: 'None',\n        user_id: '1000',\n        uid: 'valid@example.com',\n        date: '2008-07-07 06:06:06-00',\n        display_timezone: 'US/Central',\n      });\n      assert.isFalse(authorized);\n    });\n\n    it('should not allow access when attempt date is after end_date', async () => {\n      const authorized = await checkAssessmentAccess({\n        assessment_id: '50',\n        authz_mode: 'Exam',\n        course_role: 'None',\n        course_instance_role: 'None',\n        user_id: '1000',\n        uid: 'valid@example.com',\n        date: '2012-07-07 06:06:06-00',\n        display_timezone: 'US/Central',\n      });\n      assert.isFalse(authorized);\n    });\n\n    it('should not allow access when access rule mode is Public and exam_uuid is present', async () => {\n      const authorized = await checkAssessmentAccess({\n        assessment_id: '52',\n        authz_mode: 'Public',\n        course_role: 'None',\n        course_instance_role: 'None',\n        user_id: '1000',\n        uid: 'valid@example.com',\n        date: '2010-07-07 06:06:06-00',\n        display_timezone: 'US/Central',\n      });\n      assert.isFalse(authorized);\n    });\n  });\n\n  describe('with PrairieTest', () => {\n    describe('without checked-in reservation', () => {\n      it('should not allow access to an exam without exam_uuid', async () => {\n        const authorized = await checkAssessmentAccess({\n          assessment_id: '10',\n          authz_mode: 'Exam',\n          authz_mode_reason: 'PrairieTest',\n          course_role: 'None',\n          course_instance_role: 'None',\n          user_id: '1000',\n          uid: 'valid@example.com',\n          date: '2010-07-07 06:06:06-00',\n          display_timezone: 'US/Central',\n        });\n        assert.isFalse(authorized);\n      });\n\n      it('should not allow access to an exam with exam_uuid', async () => {\n        const authorized = await checkAssessmentAccess({\n          assessment_id: '11',\n          authz_mode: 'Exam',\n          authz_mode_reason: 'PrairieTest',\n          course_role: 'None',\n          course_instance_role: 'None',\n          user_id: '1000',\n          uid: 'valid@example.com',\n          date: '2010-07-07 06:06:06-00',\n          display_timezone: 'US/Central',\n        });\n        assert.isFalse(authorized);\n      });\n    });\n\n    describe('with checked-in reservation', () => {\n      before('create checked-in reservation for student', async () => {\n        await sqldb.queryAsync(sql.insert_pt_reservation, { exam_id: 1 });\n      });\n      after('delete checked-in reservation for student', async () => {\n        await sqldb.queryAsync(sql.delete_pt_reservation, { exam_id: 1 });\n      });\n\n      it('should not allow access to an exam without exam_uuid', async () => {\n        const authorized = await checkAssessmentAccess({\n          assessment_id: '10',\n          authz_mode: 'Exam',\n          authz_mode_reason: 'PrairieTest',\n          course_role: 'None',\n          course_instance_role: 'None',\n          user_id: '1000',\n          uid: 'valid@example.com',\n          date: '2010-07-07 06:06:06-00',\n          display_timezone: 'US/Central',\n        });\n        assert.isFalse(authorized);\n      });\n\n      it('should allow access to an exam with a matching exam_uuid', async () => {\n        const authorized = await checkAssessmentAccess({\n          assessment_id: '11',\n          authz_mode: 'Exam',\n          authz_mode_reason: 'PrairieTest',\n          course_role: 'None',\n          course_instance_role: 'None',\n          user_id: '1000',\n          uid: 'valid@example.com',\n          date: '2010-07-07 06:06:06-00',\n          display_timezone: 'US/Central',\n        });\n        assert.isTrue(authorized);\n      });\n\n      it('should not allow access to an exam with a not matching exam_uuid', async () => {\n        const authorized = await checkAssessmentAccess({\n          assessment_id: '12',\n          authz_mode: 'Exam',\n          authz_mode_reason: 'PrairieTest',\n          course_role: 'None',\n          course_instance_role: 'None',\n          user_id: '1000',\n          uid: 'valid@example.com',\n          date: '2010-07-07 06:06:06-00',\n          display_timezone: 'US/Central',\n        });\n        assert.isFalse(authorized);\n      });\n\n      it('should not allow access in Exam mode when access rule mode is null and exam_uuid is present', async () => {\n        const authorized = await checkAssessmentAccess({\n          assessment_id: '53',\n          authz_mode: 'Exam',\n          authz_mode_reason: 'PrairieTest',\n          course_role: 'None',\n          course_instance_role: 'None',\n          user_id: '1000',\n          uid: 'valid@example.com',\n          date: '2010-07-07 06:06:06-00',\n          display_timezone: 'US/Central',\n        });\n        assert.isFalse(authorized);\n      });\n\n      it('should not allow access in Exam mode when access rule has no explicit mode or exam_uuid', async () => {\n        const authorized = await checkAssessmentAccess({\n          assessment_id: '54',\n          authz_mode: 'Exam',\n          authz_mode_reason: 'PrairieTest',\n          course_role: 'None',\n          course_instance_role: 'None',\n          user_id: '1000',\n          uid: 'valid@example.com',\n          date: '2010-07-07 06:06:06-00',\n          display_timezone: 'US/Central',\n        });\n        assert.isFalse(authorized);\n      });\n    });\n  });\n\n  describe('with other authz_mode_reason values', () => {\n    it('should not allow access if exam_uuid is set', async () => {\n      const authorized = await checkAssessmentAccess({\n        assessment_id: '11',\n        authz_mode: 'Exam',\n        authz_mode_reason: 'Network',\n        course_role: 'None',\n        course_instance_role: 'None',\n        user_id: '1000',\n        uid: 'valid@example.com',\n        date: '2010-07-07 06:06:06-00',\n        display_timezone: 'US/Central',\n      });\n      assert.isFalse(authorized);\n    });\n  });\n});\n"]}