{"version":3,"file":"ip_to_mode.test.js","sourceRoot":"","sources":["../../../src/tests/sprocs/ip_to_mode.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as helperDb from '../helperDb.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nlet user_id = null;\n\nasync function createCenterExamReservation() {\n  await sqldb.queryAsync(sql.create_center_exam_reservation, { user_id });\n}\n\nasync function createCourseExamReservation() {\n  await sqldb.queryAsync(sql.create_course_exam_reservation, { user_id });\n}\n\ndescribe('sproc ip_to_mode tests', function () {\n  before('set up testing server', async function () {\n    await helperDb.before.call(this);\n    const result = await sqldb.queryAsync(sql.setup, {});\n    user_id = result.rows[0].user_id;\n  });\n  after('tear down testing database', helperDb.after);\n\n  describe('No reservations', () => {\n    it('should return \"Public\"', async () => {\n      const result = await sqldb.callAsync('ip_to_mode', ['10.0.0.1', new Date(), user_id]);\n      assert.equal(result.rows[0].mode, 'Public');\n      assert.equal(result.rows[0].mode_reason, 'Default');\n    });\n  });\n\n  describe('Center exam with IP restrictions', () => {\n    describe('before check-in', () => {\n      it('should return \"Exam\" with a correct IP address when session is starting soon', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '10.0.0.1',\n            // 10 minutes ago.\n            new Date(Date.now() - 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Exam');\n          assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n        });\n      });\n\n      it('should return \"Exam\" with a correct IP address when session started recently', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '10.0.0.1',\n            // 10 minutes from now.\n            new Date(Date.now() + 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Exam');\n          assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n        });\n      });\n\n      it('should return \"Public\" with an incorrect IP address when session is starting soon', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '192.168.0.1',\n            // 10 minutes ago.\n            new Date(Date.now() - 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n\n      it('should return \"Public\" with an incorrect IP address when session started recently', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '192.168.0.1',\n            // 10 minutes from now.\n            new Date(Date.now() + 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n\n      it('should handle multiple reservations simultaneously', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          // Add another exam/session/location/reservation.\n          await sqldb.queryAsync(sql.insert_second_reservation, { user_id });\n\n          const firstSessionInLocation = await sqldb.callAsync('ip_to_mode', [\n            '10.0.0.1',\n            // 10 minutes ago.\n            new Date(Date.now() - 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(firstSessionInLocation.rows[0].mode, 'Exam');\n          assert.equal(firstSessionInLocation.rows[0].mode_reason, 'PrairieTest');\n\n          const secondSessionInLocation = await sqldb.callAsync('ip_to_mode', [\n            '10.1.1.1',\n            // 10 minutes ago.\n            new Date(Date.now() - 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(secondSessionInLocation.rows[0].mode, 'Exam');\n          assert.equal(secondSessionInLocation.rows[0].mode_reason, 'PrairieTest');\n\n          const notInLocation = await sqldb.callAsync('ip_to_mode', [\n            '192.168.0.1',\n            // 10 minutes ago.\n            new Date(Date.now() - 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(notInLocation.rows[0].mode, 'Public');\n          assert.equal(notInLocation.rows[0].mode_reason, 'Default');\n        });\n      });\n    });\n\n    describe('after check-in, before access start', () => {\n      it('should return \"Exam\" with the correct IP address', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n          await sqldb.queryAsync(sql.check_in_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', ['10.0.0.1', new Date(), user_id]);\n          assert.equal(result.rows[0].mode, 'Exam');\n          assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n        });\n      });\n\n      it('should return \"Public\" with a correct IP address a long time after check-in', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n          await sqldb.queryAsync(sql.check_in_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '10.0.0.1',\n            new Date(Date.now() + 2 * 60 * 60 * 1000),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n\n      it('should return \"Public\" with an incorrect IP address', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n          await sqldb.queryAsync(sql.check_in_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', ['192.168.0.1', new Date(), user_id]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n    });\n\n    describe('after access start', () => {\n      it('should return \"Exam\" with the right IP address, within the access date range', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n          await sqldb.queryAsync(sql.start_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', ['10.0.0.1', new Date(), user_id]);\n          assert.equal(result.rows[0].mode, 'Exam');\n          assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n        });\n      });\n\n      it('should return \"Exam\" with the right IP address, shortly after the access date range', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n          await sqldb.queryAsync(sql.start_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '10.0.0.1',\n            // 25 minutes from now (5 minutes after access end)\n            new Date(Date.now() + 1000 * 60 * 25),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Exam');\n          assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n        });\n      });\n\n      it('should return \"Public\" with the right IP address, a long time after the access date range', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n          await sqldb.queryAsync(sql.start_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '10.0.0.1',\n            // 60 minutes from now (40 minutes after access end)\n            new Date(Date.now() + 1000 * 60 * 60),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n\n      it('should return \"Public\" with the wrong IP address', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n          await sqldb.queryAsync(sql.start_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', ['192.168.0.1', new Date(), user_id]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n    });\n  });\n\n  describe('Center exam without IP restrictions', () => {\n    describe('before check-in', async () => {\n      it('should return \"Public\" for any IP address when session is starting soon', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          // Remove IP restriction.\n          await sqldb.queryAsync('UPDATE pt_locations SET filter_networks = FALSE;', {});\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '192.168.0.1',\n            // 10 minutes ago.\n            new Date(Date.now() - 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n\n      it('should return \"Public\" for any IP address when session started recently', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          // Remove IP restriction.\n          await sqldb.queryAsync('UPDATE pt_locations SET filter_networks = FALSE;', {});\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '192.168.0.1',\n            // 10 minutes from now.\n            new Date(Date.now() + 1000 * 60 * 10),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n    });\n\n    describe('after check-in, before access start', async () => {\n      it('should return \"Exam\" for any IP address', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          // Remove IP restriction.\n          await sqldb.queryAsync('UPDATE pt_locations SET filter_networks = FALSE;', {});\n\n          await sqldb.queryAsync(sql.check_in_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', ['192.168.0.1', new Date(), user_id]);\n          assert.equal(result.rows[0].mode, 'Exam');\n          assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n        });\n      });\n    });\n\n    describe('after access start', async () => {\n      it('should return \"Exam\" for any IP address, within the access date range', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          // Remove IP restriction.\n          await sqldb.queryAsync('UPDATE pt_locations SET filter_networks = FALSE;', {});\n\n          await sqldb.queryAsync(sql.start_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', ['192.168.0.01', new Date(), user_id]);\n          assert.equal(result.rows[0].mode, 'Exam');\n          assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n        });\n      });\n\n      it('should return \"Public\" for any IP address, outside the access date range', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          // Remove IP restriction.\n          await sqldb.queryAsync('UPDATE pt_locations SET filter_networks = FALSE;', {});\n\n          await sqldb.queryAsync(sql.start_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '192.168.0.01',\n            // 90 minutes from now.\n            new Date(Date.now() + 1000 * 60 * 90),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Public');\n          assert.equal(result.rows[0].mode_reason, 'Default');\n        });\n      });\n\n      it('should return \"Public\" for any IP address, outside the access date range but within an hour of check-in', async () => {\n        await helperDb.runInTransactionAndRollback(async () => {\n          await createCenterExamReservation();\n\n          // Remove IP restriction.\n          await sqldb.queryAsync('UPDATE pt_locations SET filter_networks = FALSE;', {});\n\n          await sqldb.queryAsync(sql.check_in_reservations, {});\n          await sqldb.queryAsync(sql.start_reservations, {});\n\n          const result = await sqldb.callAsync('ip_to_mode', [\n            '192.168.0.01',\n            // 50 minutes from now.\n            new Date(Date.now() + 1000 * 60 * 50),\n            user_id,\n          ]);\n          assert.equal(result.rows[0].mode, 'Public');\n        });\n      });\n    });\n  });\n\n  describe('Course exam', () => {\n    it('should return \"Exam\" after check-in and before access start', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await createCourseExamReservation();\n\n        await sqldb.queryAsync(sql.check_in_reservations, {});\n\n        const result = await sqldb.callAsync('ip_to_mode', ['192.168.0.1', new Date(), user_id]);\n        assert.equal(result.rows[0].mode, 'Exam');\n        assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n      });\n    });\n\n    it('should return \"Exam\" after access start with check-in', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await createCourseExamReservation();\n\n        await sqldb.queryAsync(sql.check_in_reservations, {});\n        await sqldb.queryAsync(sql.start_reservations, {});\n\n        const result = await sqldb.callAsync('ip_to_mode', ['192.168.0.1', new Date(), user_id]);\n        assert.equal(result.rows[0].mode, 'Exam');\n        assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n      });\n    });\n\n    it('should return \"Exam\" after access start without check-in', async () => {\n      await helperDb.runInTransactionAndRollback(async () => {\n        await createCourseExamReservation();\n\n        await sqldb.queryAsync(sql.start_reservations, {});\n\n        const result = await sqldb.callAsync('ip_to_mode', ['192.168.0.1', new Date(), user_id]);\n        assert.equal(result.rows[0].mode, 'Exam');\n        assert.equal(result.rows[0].mode_reason, 'PrairieTest');\n      });\n    });\n  });\n});\n"]}