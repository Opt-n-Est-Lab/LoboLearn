{"version":3,"file":"users_select_or_insert.test.js","sourceRoot":"","sources":["../../../src/tests/sprocs/users_select_or_insert.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as helperDb from '../helperDb.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\nasync function getUserParams(user_id) {\n  const query = 'SELECT uid, name, uin, institution_id FROM users WHERE user_id = $1;';\n  const result = await sqldb.queryOneRowAsync(query, [user_id]);\n\n  const { uid, name, uin, institution_id } = result.rows[0];\n  return { uid, name, uin, institution_id };\n}\n\nasync function usersSelectOrInsert(\n  user: { uid: string; name: string; uin?: string | null; email?: string | null },\n  authn_provider_name: string | null = null,\n  institution_id: string | null = null,\n) {\n  return sqldb.callAsync('users_select_or_insert', [\n    user.uid,\n    user.name,\n    user.uin,\n    user.email,\n    authn_provider_name,\n    institution_id,\n  ]);\n}\n\nconst baseUser = {\n  uid: 'user@host.com',\n  name: 'Joe User',\n  uin: null,\n  institution_id: '1',\n};\n\ndescribe('sproc users_select_or_insert tests', () => {\n  before('set up testing server', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  step('create new user', async () => {\n    const result = await usersSelectOrInsert(baseUser);\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 1);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(baseUser, fromdb);\n  });\n\n  step('create new user again, confirm info is the same', async () => {\n    const result = await usersSelectOrInsert(baseUser);\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 1);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(baseUser, fromdb);\n  });\n\n  step('user 1 updates name', async () => {\n    const user = {\n      ...baseUser,\n      name: 'J.R. User',\n    };\n\n    const result = await usersSelectOrInsert(user);\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 1);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('add an institution for host.com', async () => {\n    await sqldb.queryAsync(sql.insert_host_com_institution, []);\n  });\n\n  step('user 1 updates institution_id', async () => {\n    const user = {\n      ...baseUser,\n      name: 'J.R. User',\n      institution_id: '100',\n    };\n\n    const result = await usersSelectOrInsert(user, 'SAML', '100');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 1);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('user 1 updates uin when uin was null', async () => {\n    const user = {\n      ...baseUser,\n      name: 'J.R. User',\n      uin: '111122223',\n      institution_id: '100',\n    };\n\n    const result = await usersSelectOrInsert(user, 'SAML', '100');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 1);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('user 1 updates uin when uin was value', async () => {\n    const user = {\n      ...baseUser,\n      name: 'J.R. User',\n      uin: '111122224',\n      institution_id: '100',\n    };\n\n    const result = await usersSelectOrInsert(user, 'SAML', '100');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 1);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('user 1 updates uid with already present uin', async () => {\n    const user = {\n      ...baseUser,\n      name: 'J.R. User',\n      uid: 'newuid@host.com',\n      uin: '111122224',\n      institution_id: '100',\n    };\n\n    const result = await usersSelectOrInsert(user, 'SAML', '100');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 1);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('user 2 create under Shibboleth', async () => {\n    const user = {\n      uid: 'joe@example.com',\n      name: 'Joe Bob',\n      uin: '444444444',\n      institution_id: '1',\n    };\n\n    const result = await usersSelectOrInsert(user, 'Shibboleth');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 2);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('add an institution for example.com', async () => {\n    await sqldb.queryAsync(sql.insert_example_com_institution, []);\n  });\n\n  step('user 2 logs in via Google', async () => {\n    const user = {\n      uid: 'joe@example.com',\n      name: 'joe@example.com',\n      uin: null,\n      institution_id: '200',\n    };\n\n    const result = await usersSelectOrInsert(user, 'Google', '200');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 2);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(\n      {\n        ...user,\n        // The user should still have the same UIN.\n        uin: '444444444',\n      },\n      fromdb,\n    );\n  });\n\n  step('user 2 fails to log in via Azure', async () => {\n    const user = {\n      uid: 'joe@example.com',\n      name: 'joe@example.com',\n      uin: null,\n      institution_id: '200',\n    };\n\n    const userResult = await usersSelectOrInsert(user, 'Azure');\n    assert.equal(userResult.rows[0].result, 'invalid_authn_provider');\n    assert.isNull(userResult.rows[0].user_id);\n  });\n\n  step('user 3 create under Google', async () => {\n    const user = {\n      uid: 'sally@example.com',\n      name: 'sally@example.com',\n      uin: null,\n      institution_id: '200',\n    };\n\n    const result = await usersSelectOrInsert(user, 'Google', '200');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 3);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('user 3 logs in via SAML', async () => {\n    const user = {\n      uid: 'sally@example.com',\n      name: 'Sally Ann',\n      uin: '555566665',\n      institution_id: '200',\n    };\n\n    const result = await usersSelectOrInsert(user, 'SAML', '200');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 3);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('user 3 logs back in via Google', async () => {\n    const user = {\n      uid: 'sally@example.com',\n      name: 'sally@example.com',\n      uin: null,\n      institution_id: '200',\n    };\n\n    const result = await usersSelectOrInsert(user, 'Google', '200');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 3);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(\n      {\n        ...user,\n        // The user should still have the same UIN.\n        uin: '555566665',\n      },\n      fromdb,\n    );\n  });\n\n  step('user 4 created with wrong netid and correct UIN', async () => {\n    const user = {\n      uid: 'uin-888899990@example.com',\n      name: 'UIN 888899990',\n      uin: '888899990',\n      institution_id: '200',\n    };\n\n    const result = await usersSelectOrInsert(user, 'SAML', '200');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 4);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  step('user 4 logs in with full correct credentials', async () => {\n    const user = {\n      uid: 'newstudent',\n      name: 'Johnny New Student',\n      uin: '888899990',\n      institution_id: '1',\n    };\n\n    const result = await usersSelectOrInsert(user, 'Shibboleth');\n    const user_id = result.rows[0].user_id;\n    assert.equal(user_id, 4);\n\n    const fromdb = await getUserParams(user_id);\n    assert.deepEqual(user, fromdb);\n  });\n\n  // This test ensures that a malicious IDP cannot create a user with a UID\n  // that doesn't match the institution's UID regexp.\n  step('user 5 logs in with mismatched UID and institution', async () => {\n    const user = {\n      uid: 'jasmine@not-illinois.edu',\n      name: 'Jasmine H. Acker',\n      uin: '666666666',\n    };\n\n    await assert.isRejected(usersSelectOrInsert(user, 'SAML', '200'), /does not match policy/);\n  });\n\n  // This test ensures that users in separate institutions can have the same UIN.\n  step('users 6 and 7 log in with the same UIN', async () => {\n    const firstUser = {\n      uid: 'raj@host.com',\n      name: 'Raj Patel',\n      uin: '787878787',\n      institution_id: '100',\n    };\n\n    const secondUser = {\n      uid: 'alex@example.com',\n      name: 'Alex Wong',\n      uin: '787878787',\n      institution_id: '200',\n    };\n\n    const firstResult = await usersSelectOrInsert(firstUser, 'SAML', '100');\n    const firstUserId = firstResult.rows[0].user_id;\n    const secondResult = await usersSelectOrInsert(secondUser, 'SAML', '200');\n    const secondUserId = secondResult.rows[0].user_id;\n\n    // Ensure two distinct users were created.\n    assert.notEqual(firstUserId, secondUserId);\n\n    const firstFromDb = await getUserParams(firstUserId);\n    const secondFromDb = await getUserParams(secondUserId);\n\n    assert.deepEqual(firstUser, firstFromDb);\n    assert.deepEqual(secondUser, secondFromDb);\n  });\n});\n"]}