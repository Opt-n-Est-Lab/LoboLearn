{"version":3,"file":"assessmentModulesSync.test.js","sourceRoot":"","sources":["../../../src/tests/sync/assessmentModulesSync.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport {\n  type AssessmentModule,\n  AssessmentModuleSchema,\n  AssessmentSchema,\n  CourseSchema,\n} from '../../lib/db-types.js';\nimport * as helperDb from '../helperDb.js';\n\nimport * as util from './util.js';\n\n/**\n * Checks that the assessment set present in the database matches the data\n * from the original assessment set in `infoCourse.json`.\n *\n * @param syncedAssessmentModule - The assessment set from the database\n * @param assessmentModule - The assessment set from `infoCourse.json`.\n */\nfunction checkAssessmentModule(\n  syncedAssessmentModule: AssessmentModule | null | undefined,\n  assessmentModule: Partial<AssessmentModule>,\n) {\n  assert.isOk(syncedAssessmentModule);\n  for (const key of Object.keys(assessmentModule)) {\n    assert.equal(syncedAssessmentModule[key], assessmentModule[key]);\n  }\n}\n\ndescribe('Assessment modules syncing', () => {\n  before('set up testing database', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  beforeEach('reset testing database', helperDb.resetDatabase);\n\n  it('adds a new assessment module', async () => {\n    const { courseData, courseDir } = await util.createAndSyncCourseData();\n    const newAssessmentModule = {\n      name: 'New Module',\n      heading: 'This is a new module',\n    };\n    courseData.course.assessmentModules?.push(newAssessmentModule);\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedAssessmentModules = await util.dumpTableWithSchema(\n      'assessment_modules',\n      AssessmentModuleSchema,\n    );\n    const syncedAssessmentModule = syncedAssessmentModules.find(\n      (am) => am.name === newAssessmentModule.name,\n    );\n    checkAssessmentModule(syncedAssessmentModule, newAssessmentModule);\n  });\n\n  it('removes an assessment module', async () => {\n    const { courseData, courseDir } = await util.createAndSyncCourseData();\n    const newAssessmentModule = {\n      name: 'New Module',\n      heading: 'This is a new module',\n    };\n    courseData.course.assessmentModules?.push(newAssessmentModule);\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    courseData.course.assessmentModules?.pop();\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedAssessmentModules = await util.dumpTableWithSchema(\n      'assessment_modules',\n      AssessmentModuleSchema,\n    );\n    const syncedAssessmentModule = syncedAssessmentModules.find(\n      (am) => am.name === newAssessmentModule.name,\n    );\n    assert.isUndefined(syncedAssessmentModule);\n  });\n\n  it('records a warning if two assessment modules have the same name', async () => {\n    const courseData = util.getCourseData();\n    const newAssessmentModule1 = {\n      name: 'new assessment set',\n      heading: 'new assessment module 1',\n    };\n    const newAssessmentModule2 = {\n      name: 'new assessment set',\n      heading: 'new assessment module 2',\n    };\n    courseData.course.assessmentModules?.push(newAssessmentModule1);\n    courseData.course.assessmentModules?.push(newAssessmentModule2);\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessmentModules = await util.dumpTableWithSchema(\n      'assessment_modules',\n      AssessmentModuleSchema,\n    );\n    const syncedAssessmentModule = syncedAssessmentModules.find(\n      (as) => as.name === newAssessmentModule2.name,\n    );\n    checkAssessmentModule(syncedAssessmentModule, newAssessmentModule2);\n    const syncedCourses = await util.dumpTableWithSchema('pl_courses', CourseSchema);\n    const syncedCourse = syncedCourses.find((c) => c.short_name === courseData.course.name);\n    assert.match(syncedCourse?.sync_warnings ?? '', /Found duplicates in 'assessmentModules'/);\n  });\n\n  it('uses explicitly-created default assessment module', async () => {\n    const courseData = util.getCourseData();\n    const defaultAssessmentModule = {\n      name: 'Default',\n      heading: 'Default assessment module',\n    };\n    courseData.course.assessmentModules = [defaultAssessmentModule];\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedAssessmentModules = await util.dumpTableWithSchema(\n      'assessment_modules',\n      AssessmentModuleSchema,\n    );\n    assert.lengthOf(syncedAssessmentModules, 1);\n\n    const syncedAssessmentModule = syncedAssessmentModules.find(\n      (am) => am.name === defaultAssessmentModule.name,\n    );\n    checkAssessmentModule(syncedAssessmentModule, defaultAssessmentModule);\n\n    const syncedAssessments = await util.dumpTableWithSchema('assessments', AssessmentSchema);\n    assert.lengthOf(syncedAssessments, 1);\n\n    const syncedAssessment = syncedAssessments.find((a) => a.tid === 'test');\n    assert.isOk(syncedAssessment);\n    assert.equal(syncedAssessment?.assessment_module_id, syncedAssessmentModule?.id);\n  });\n\n  it('deletes all assessment modules when none are used', async () => {\n    const courseData = util.getCourseData();\n\n    // Perform an initial sync with the course's assessment modules.\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // Assert there are some assessment modules in the database.\n    const syncedAssessmentModules = await util.dumpTableWithSchema(\n      'assessment_modules',\n      AssessmentModuleSchema,\n    );\n    assert.isAtLeast(syncedAssessmentModules.length, 1);\n\n    // Remove all course-level assessment modules.\n    courseData.course.assessmentModules = [];\n\n    // Remove all course instances, thus removing all assessments that would\n    // have specified an assessment module.\n    courseData.courseInstances = {};\n\n    // Sync again.\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    // Note that unlike assessment sets, we unconditionally sync a \"Default\" assessment\n    // module, so we expect to have that single assessment modules in the database.\n    const remainingAssessmentModules = await util.dumpTableWithSchema(\n      'assessment_modules',\n      AssessmentModuleSchema,\n    );\n    assert.lengthOf(remainingAssessmentModules, 1);\n    assert.equal(remainingAssessmentModules[0].name, 'Default');\n  });\n\n  it('handles course with only a single implicit assessment module', async () => {\n    const courseData = util.getCourseData();\n    const courseInstance = courseData.courseInstances[util.COURSE_INSTANCE_ID];\n\n    // Remove all course assessment modules.\n    courseData.course.assessmentModules = [];\n\n    // Save a reference to the test assessment.\n    const testAssessment = courseInstance.assessments[util.ASSESSMENT_ID];\n\n    // Remove all assessments.\n    courseInstance.assessments = {};\n\n    // Add a single assessment that uses a module that isn't in the list of defaults.\n    courseInstance.assessments[util.ASSESSMENT_ID] = testAssessment;\n    testAssessment.module = 'X';\n\n    // Sync the course.\n    await util.writeAndSyncCourseData(courseData);\n\n    // Assert that the expected module is present and that it has the correct number.\n    const syncedAssessmentModules = await util.dumpTableWithSchema(\n      'assessment_modules',\n      AssessmentModuleSchema,\n    );\n\n    // Note that unlike assessment sets, we unconditionally sync a \"Default\" assessment\n    // module, so we expect to have two assessment modules in the database.\n    assert.equal(syncedAssessmentModules.length, 2);\n\n    const syncedAssessmentModule = syncedAssessmentModules.find((am) => am.name === 'X');\n    checkAssessmentModule(syncedAssessmentModule, {\n      name: 'X',\n      heading: 'X',\n      number: 1,\n    });\n  });\n});\n"]}