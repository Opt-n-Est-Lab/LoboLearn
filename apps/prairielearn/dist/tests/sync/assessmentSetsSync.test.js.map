{"version":3,"file":"assessmentSetsSync.test.js","sourceRoot":"","sources":["../../../src/tests/sync/assessmentSetsSync.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport { type AssessmentSet, AssessmentSetSchema, CourseSchema } from '../../lib/db-types.js';\nimport { type AssessmentJsonInput, type AssessmentSetJsonInput } from '../../schemas/index.js';\nimport * as helperDb from '../helperDb.js';\n\nimport * as util from './util.js';\n\n/**\n * Checks that the assessment set present in the database matches the data\n * from the original assessment set in `infoCourse.json`.\n *\n * @param syncedAssessmentSet - The assessment set from the database\n * @param assessmentSet - The assessment set from `infoCourse.json`.\n */\nfunction checkAssessmentSet(\n  syncedAssessmentSet: AssessmentSet | null | undefined,\n  assessmentSet: Partial<AssessmentSet>,\n) {\n  assert.isOk(syncedAssessmentSet);\n  for (const key of Object.keys(assessmentSet)) {\n    assert.equal(syncedAssessmentSet[key], assessmentSet[key]);\n  }\n}\n\n/**\n * Makes a new assessment.\n */\nfunction makeAssessmentSet() {\n  return {\n    name: 'new assessment set',\n    abbreviation: 'new',\n    heading: 'a new assessment set to sync',\n    color: 'red1',\n  } satisfies AssessmentSetJsonInput;\n}\n\ndescribe('Assessment set syncing', () => {\n  before('set up testing database', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  beforeEach('reset testing database', helperDb.resetDatabase);\n\n  it('adds a new assessment set', async () => {\n    const { courseData, courseDir } = await util.createAndSyncCourseData();\n    const newAssessmentSet = makeAssessmentSet();\n    courseData.course.assessmentSets.push(newAssessmentSet);\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedAssessmentSets = await util.dumpTableWithSchema(\n      'assessment_sets',\n      AssessmentSetSchema,\n    );\n    const syncedAssessmentSet = syncedAssessmentSets.find(\n      (as) => as.name === newAssessmentSet.name,\n    );\n    checkAssessmentSet(syncedAssessmentSet, newAssessmentSet);\n  });\n\n  it('removes an assessment set', async () => {\n    const courseData = util.getCourseData();\n    const oldAssessmentSet = makeAssessmentSet();\n    courseData.course.assessmentSets.unshift(oldAssessmentSet);\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    courseData.course.assessmentSets.splice(0, 1);\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedAssessmentSets = await util.dumpTableWithSchema(\n      'assessment_sets',\n      AssessmentSetSchema,\n    );\n    const syncedAssessmentSet = syncedAssessmentSets.find(\n      (as) => as.name === oldAssessmentSet.name,\n    );\n    assert.isUndefined(syncedAssessmentSet);\n  });\n\n  it('renames an assessment set', async () => {\n    const courseData = util.getCourseData();\n    const oldAssessmentSet = makeAssessmentSet();\n    courseData.course.assessmentSets.unshift(oldAssessmentSet);\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    const oldName = courseData.course.assessmentSets[0].name;\n    const newName = 'new name';\n    courseData.course.assessmentSets[0].name = newName;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const dbAssessmentSets = await util.dumpTableWithSchema('assessment_sets', AssessmentSetSchema);\n    assert.isUndefined(dbAssessmentSets.find((as) => as.name === oldName));\n    const dbAssessmentSet = dbAssessmentSets.find((as) => as.name === newName);\n    checkAssessmentSet(dbAssessmentSet, courseData.course.assessmentSets[0]);\n  });\n\n  it('records a warning if two assessment sets have the same name', async () => {\n    const courseData = util.getCourseData();\n    const newAssessmentSet1 = {\n      name: 'new assessment set',\n      abbreviation: 'new1',\n      heading: 'a new assessment set 1 to sync',\n      color: 'red1',\n    } satisfies AssessmentSetJsonInput;\n    const newAssessmentSet2 = {\n      name: 'new assessment set',\n      abbreviation: 'new2',\n      heading: 'a new assessment set 2 to sync',\n      color: 'red2',\n    } satisfies AssessmentSetJsonInput;\n    courseData.course.assessmentSets.push(newAssessmentSet1);\n    courseData.course.assessmentSets.push(newAssessmentSet2);\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessmentSets = await util.dumpTableWithSchema(\n      'assessment_sets',\n      AssessmentSetSchema,\n    );\n    const syncedAssessmentSet = syncedAssessmentSets.find(\n      (as) => as.name === newAssessmentSet1.name,\n    );\n    checkAssessmentSet(syncedAssessmentSet, newAssessmentSet2);\n    const syncedCourses = await util.dumpTableWithSchema('pl_courses', CourseSchema);\n    const syncedCourse = syncedCourses.find((c) => c.short_name === courseData.course.name);\n    assert.match(syncedCourse?.sync_warnings ?? '', /Found duplicates in 'assessmentSets'/);\n  });\n\n  it('adds default assessment sets if used by assessments but not specified in courseData', async () => {\n    const courseData = util.getCourseData();\n\n    // The Machine Problem set is in DEFAULT_ASSESSMENT_SETS but not in courseData\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments[util.ASSESSMENT_ID]['set'] =\n      'Machine Problem';\n\n    const newAssessment = {\n      uuid: '03f3b4d2-0264-48b7-bf42-107732142c01',\n      title: 'Test assessment 2',\n      type: 'Exam',\n      set: 'Worksheet', // The Worksheet set is in DEFAULT_ASSESSMENT_SETS but not in courseData\n      number: '101',\n    } satisfies AssessmentJsonInput;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['test1'] = newAssessment;\n\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedAssessmentSets = await util.dumpTableWithSchema(\n      'assessment_sets',\n      AssessmentSetSchema,\n    );\n    const syncedWorksheetSet = syncedAssessmentSets.find((as) => as.name === 'Worksheet');\n\n    // Ensure that the Worksheet set was added and matches the corresponding set in DEFAULT_ASSESSMENT_SETS\n    checkAssessmentSet(syncedWorksheetSet, {\n      abbreviation: 'WS',\n      name: 'Worksheet',\n      heading: 'Worksheets',\n      color: 'purple1',\n    });\n\n    const syncedMachineProblemSet = syncedAssessmentSets.find(\n      (as) => as.name === 'Machine Problem',\n    );\n\n    // Ensure that the Machine Problem set was added and matches the corresponding set in DEFAULT_ASSESSMENT_SETS\n    checkAssessmentSet(syncedMachineProblemSet, {\n      abbreviation: 'MP',\n      name: 'Machine Problem',\n      heading: 'Machine Problems',\n      color: 'turquoise1',\n    });\n  });\n\n  it('deletes all assessment sets when none are used', async () => {\n    const courseData = util.getCourseData();\n\n    // Perform an initial sync with the course's assessment sets.\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // Assert there are some assessment sets in the database.\n    const syncedAssessmentSets = await util.dumpTableWithSchema(\n      'assessment_sets',\n      AssessmentSetSchema,\n    );\n    assert.isAtLeast(syncedAssessmentSets.length, 1);\n\n    // Remove all course-level assessment sets.\n    courseData.course.assessmentSets = [];\n\n    // Remove all course instances, thus removing all assessments that would\n    // have specified an assessment set.\n    courseData.courseInstances = {};\n\n    // Sync again.\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    // Assert that there are no assessment sets in the database.\n    const remainingAssessmentSets = await util.dumpTableWithSchema(\n      'assessment_sets',\n      AssessmentSetSchema,\n    );\n    assert.isEmpty(remainingAssessmentSets);\n  });\n\n  it('handles course with only a single implicit assessment set', async () => {\n    const courseData = util.getCourseData();\n    const courseInstance = courseData.courseInstances[util.COURSE_INSTANCE_ID];\n\n    // Remove all course assessment sets.\n    courseData.course.assessmentSets = [];\n\n    // Save a reference to the test assessment.\n    const testAssessment = courseInstance.assessments[util.ASSESSMENT_ID];\n\n    // Remove all assessments.\n    courseInstance.assessments = {};\n\n    // Add a single assessment that uses a set that isn't in the list of defaults.\n    courseInstance.assessments[util.ASSESSMENT_ID] = testAssessment;\n    testAssessment.set = 'X';\n\n    // Sync the course.\n    await util.writeAndSyncCourseData(courseData);\n\n    // Assert that the expected set is present and that it has the correct number.\n    const syncedAssessmentSets = await util.dumpTableWithSchema(\n      'assessment_sets',\n      AssessmentSetSchema,\n    );\n    assert.equal(syncedAssessmentSets.length, 1);\n    checkAssessmentSet(syncedAssessmentSets[0], {\n      abbreviation: 'X',\n      name: 'X',\n      heading: 'X',\n      color: 'gray1',\n      number: 1,\n    });\n  });\n});\n"]}