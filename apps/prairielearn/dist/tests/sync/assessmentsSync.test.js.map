{"version":3,"file":"assessmentsSync.test.js","sourceRoot":"","sources":["../../../src/tests/sync/assessmentsSync.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../../lib/config.js';\nimport {\n  AlternativeGroupSchema,\n  AssessmentQuestionRolePermissionsSchema,\n  AssessmentQuestionSchema,\n  AssessmentSchema,\n  GroupRoleSchema,\n  QuestionSchema,\n  ZoneSchema,\n} from '../../lib/db-types.js';\nimport { features } from '../../lib/features/index.js';\nimport { idsEqual } from '../../lib/id.js';\nimport type {\n  AssessmentJsonInput,\n  AssessmentSetJsonInput,\n  GroupRoleJsonInput,\n} from '../../schemas/index.js';\nimport * as helperDb from '../helperDb.js';\n\nimport * as util from './util.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\n/**\n * Makes an empty assessment.\n */\nfunction makeAssessment(\n  courseData: util.CourseData,\n  type: 'Homework' | 'Exam' = 'Exam',\n): AssessmentJsonInput {\n  const assessmentSet = courseData.course.assessmentSets?.[0].name ?? '';\n  return {\n    uuid: uuidv4(),\n    type,\n    title: 'Test assessment',\n    set: assessmentSet,\n    number: '1',\n    zones: [],\n    allowAccess: [],\n  };\n}\n\n/**\n * Makes a new assessment.\n */\nfunction makeAssessmentSet() {\n  return {\n    name: 'new assessment set',\n    abbreviation: 'new',\n    heading: 'a new assessment set to sync',\n    color: 'red1',\n  } satisfies AssessmentSetJsonInput;\n}\n\nfunction getGroupRoles() {\n  return [\n    { name: 'Recorder', minimum: 1, maximum: 4, canAssignRoles: true },\n    { name: 'Contributor' },\n  ] satisfies GroupRoleJsonInput[];\n}\n\nfunction getPermission(permissions, groupRole, assessmentQuestion) {\n  return permissions.find(\n    (permission) =>\n      parseInt(permission.assessment_question_id) === parseInt(assessmentQuestion.id) &&\n      parseInt(permission.group_role_id) === parseInt(groupRole.id),\n  );\n}\n\nasync function getSyncedAssessmentData(tid: string) {\n  return await sqldb.queryRow(\n    sql.get_data_for_assessment,\n    { tid },\n    z.object({\n      assessment: AssessmentSchema,\n      zones: z.array(ZoneSchema),\n      alternative_groups: z.array(AlternativeGroupSchema),\n      assessment_questions: z.array(AssessmentQuestionSchema.extend({ question: QuestionSchema })),\n      group_roles: z.array(GroupRoleSchema),\n    }),\n  );\n}\n\nasync function findSyncedAssessment(tid) {\n  const syncedAssessments = await util.dumpTable('assessments');\n  return syncedAssessments.find((a) => a.tid === tid);\n}\n\nasync function findSyncedUndeletedAssessment(tid) {\n  const syncedAssessments = await util.dumpTable('assessments');\n  return syncedAssessments.find((a) => a.tid === tid && a.deleted_at == null);\n}\n\ndescribe('Assessment syncing', () => {\n  before('set up testing database', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  beforeEach('reset testing database', helperDb.resetDatabase);\n\n  it('allows nesting of assessments in subfolders', async () => {\n    const courseData = util.getCourseData();\n    const nestedAssessmentStructure = ['subfolder1', 'subfolder2', 'subfolder3', 'nestedQuestion'];\n    const assessmentId = nestedAssessmentStructure.join('/');\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments[assessmentId] =\n      makeAssessment(courseData);\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n\n    const syncedData = await findSyncedAssessment(assessmentId);\n    assert.isOk(syncedData);\n  });\n\n  it('adds a new zone to an assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.zones?.push({\n      title: 'zone 1',\n      questions: [{ id: util.QUESTION_ID, points: 5 }],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    assessment.zones?.push({\n      title: 'zone 2',\n      questions: [{ id: util.ALTERNATIVE_QUESTION_ID, points: 10 }],\n    });\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n\n    assert.lengthOf(syncedData.zones, 2);\n    assert.equal(syncedData.zones[0].title, 'zone 1');\n    assert.equal(syncedData.zones[1].title, 'zone 2');\n\n    assert.lengthOf(syncedData.alternative_groups, 2);\n\n    assert.lengthOf(syncedData.assessment_questions, 2);\n    assert.equal(syncedData.assessment_questions[0].question.qid, util.QUESTION_ID);\n    assert.equal(syncedData.assessment_questions[1].question.qid, util.ALTERNATIVE_QUESTION_ID);\n  });\n\n  it('defaults shuffleQuestions to true for an Exam-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n    assert.isTrue(syncedData.assessment.shuffle_questions);\n  });\n\n  it('allows shuffleQuestions to be set to false for an Exam-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    assessment.shuffleQuestions = false;\n\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n    assert.isFalse(syncedData.assessment.shuffle_questions);\n  });\n\n  it('defaults shuffleQuestions to false for a Homework-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newhomework'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newhomework');\n    assert.isFalse(syncedData.assessment.shuffle_questions);\n  });\n\n  it('allows shuffleQuestions to be set to true for a Homework-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.shuffleQuestions = true;\n\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newhomework'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newhomework');\n    assert.isTrue(syncedData.assessment.shuffle_questions);\n  });\n\n  it('syncs alternatives in an Exam zone', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    assessment.zones?.push({\n      title: 'zone 1',\n      questions: [\n        {\n          points: 10,\n          alternatives: [\n            {\n              id: util.QUESTION_ID,\n            },\n            {\n              id: util.ALTERNATIVE_QUESTION_ID,\n              points: 5,\n            },\n          ],\n        },\n        {\n          points: 7,\n          id: util.MANUAL_GRADING_QUESTION_ID,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n    assert.lengthOf(syncedData.zones, 1);\n    assert.lengthOf(syncedData.alternative_groups, 2);\n    assert.lengthOf(syncedData.assessment_questions, 3);\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(firstAssessmentQuestion);\n    assert.equal(firstAssessmentQuestion.max_points, 10);\n    assert.equal(firstAssessmentQuestion.max_auto_points, 10);\n    assert.deepEqual(firstAssessmentQuestion.points_list, [10]);\n    assert.equal(firstAssessmentQuestion.max_manual_points, 0);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(secondAssessmentQuestion);\n    assert.equal(secondAssessmentQuestion.max_points, 5);\n    assert.equal(secondAssessmentQuestion.max_auto_points, 5);\n    assert.deepEqual(secondAssessmentQuestion.points_list, [5]);\n    assert.equal(secondAssessmentQuestion.max_manual_points, 0);\n\n    const thirdAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.MANUAL_GRADING_QUESTION_ID,\n    );\n    assert.ok(thirdAssessmentQuestion);\n    assert.equal(thirdAssessmentQuestion.max_points, 7);\n    assert.equal(thirdAssessmentQuestion.max_auto_points, 0);\n    assert.deepEqual(thirdAssessmentQuestion.points_list, [7]);\n    assert.equal(thirdAssessmentQuestion.max_manual_points, 7);\n  });\n\n  it('syncs alternatives in a Homework zone', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'zone 1',\n      questions: [\n        {\n          maxPoints: 20,\n          points: 10,\n          alternatives: [\n            {\n              id: util.QUESTION_ID,\n            },\n            {\n              id: util.ALTERNATIVE_QUESTION_ID,\n              maxPoints: 15,\n              points: 5,\n            },\n          ],\n        },\n        {\n          points: 7,\n          id: util.MANUAL_GRADING_QUESTION_ID,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n    assert.lengthOf(syncedData.zones, 1);\n    assert.lengthOf(syncedData.alternative_groups, 2);\n    assert.lengthOf(syncedData.assessment_questions, 3);\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(firstAssessmentQuestion);\n    assert.equal(firstAssessmentQuestion.init_points, 10);\n    assert.equal(firstAssessmentQuestion.max_points, 20);\n    assert.equal(firstAssessmentQuestion.max_auto_points, 20);\n    assert.equal(firstAssessmentQuestion.max_manual_points, 0);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(secondAssessmentQuestion);\n    assert.equal(secondAssessmentQuestion.init_points, 5);\n    assert.equal(secondAssessmentQuestion.max_points, 15);\n    assert.equal(secondAssessmentQuestion.max_auto_points, 15);\n    assert.equal(secondAssessmentQuestion.max_manual_points, 0);\n\n    const thirdAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.MANUAL_GRADING_QUESTION_ID,\n    );\n    assert.ok(thirdAssessmentQuestion);\n    assert.equal(thirdAssessmentQuestion.init_points, 7);\n    assert.equal(thirdAssessmentQuestion.max_points, 7);\n    assert.equal(thirdAssessmentQuestion.max_auto_points, 0);\n    assert.equal(thirdAssessmentQuestion.max_manual_points, 7);\n  });\n\n  it('syncs auto and manual points in an Exam zone', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    assessment.zones?.push({\n      title: 'zone 1',\n      questions: [\n        {\n          autoPoints: 10,\n          manualPoints: 3,\n          alternatives: [\n            {\n              id: util.QUESTION_ID,\n            },\n            {\n              id: util.ALTERNATIVE_QUESTION_ID,\n              autoPoints: 5,\n            },\n          ],\n        },\n        {\n          autoPoints: 1,\n          manualPoints: 7,\n          id: util.MANUAL_GRADING_QUESTION_ID,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n    assert.lengthOf(syncedData.zones, 1);\n    assert.lengthOf(syncedData.alternative_groups, 2);\n    assert.lengthOf(syncedData.assessment_questions, 3);\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(firstAssessmentQuestion);\n    assert.equal(firstAssessmentQuestion.max_points, 13);\n    assert.equal(firstAssessmentQuestion.max_auto_points, 10);\n    assert.deepEqual(firstAssessmentQuestion.points_list, [13]);\n    assert.equal(firstAssessmentQuestion.max_manual_points, 3);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(secondAssessmentQuestion);\n    assert.equal(secondAssessmentQuestion.max_points, 8);\n    assert.equal(secondAssessmentQuestion.max_auto_points, 5);\n    assert.deepEqual(secondAssessmentQuestion.points_list, [8]);\n    assert.equal(secondAssessmentQuestion.max_manual_points, 3);\n\n    const thirdAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.MANUAL_GRADING_QUESTION_ID,\n    );\n    assert.ok(thirdAssessmentQuestion);\n    assert.equal(thirdAssessmentQuestion.max_points, 8);\n    assert.equal(thirdAssessmentQuestion.max_auto_points, 1);\n    assert.deepEqual(thirdAssessmentQuestion.points_list, [8]);\n    assert.equal(thirdAssessmentQuestion.max_manual_points, 7);\n  });\n\n  it('syncs auto and manual points in a Homework zone', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'zone 1',\n      questions: [\n        {\n          maxAutoPoints: 20,\n          autoPoints: 10,\n          manualPoints: 3,\n          alternatives: [\n            {\n              id: util.QUESTION_ID,\n            },\n            {\n              id: util.ALTERNATIVE_QUESTION_ID,\n              maxAutoPoints: 15,\n              autoPoints: 5,\n            },\n          ],\n        },\n        {\n          autoPoints: 1,\n          manualPoints: 7,\n          id: util.MANUAL_GRADING_QUESTION_ID,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['hwwithmanual1'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedData = await getSyncedAssessmentData('hwwithmanual1');\n    assert.lengthOf(syncedData.zones, 1);\n    assert.lengthOf(syncedData.alternative_groups, 2);\n    assert.lengthOf(syncedData.assessment_questions, 3);\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(firstAssessmentQuestion);\n    assert.equal(firstAssessmentQuestion.init_points, 13);\n    assert.equal(firstAssessmentQuestion.max_points, 23);\n    assert.equal(firstAssessmentQuestion.max_auto_points, 20);\n    assert.equal(firstAssessmentQuestion.max_manual_points, 3);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(secondAssessmentQuestion);\n    assert.equal(secondAssessmentQuestion.init_points, 8);\n    assert.equal(secondAssessmentQuestion.max_points, 18);\n    assert.equal(secondAssessmentQuestion.max_auto_points, 15);\n    assert.equal(secondAssessmentQuestion.max_manual_points, 3);\n\n    const thirdAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.MANUAL_GRADING_QUESTION_ID,\n    );\n    assert.ok(thirdAssessmentQuestion);\n    assert.equal(thirdAssessmentQuestion.init_points, 8);\n    assert.equal(thirdAssessmentQuestion.max_points, 8);\n    assert.equal(thirdAssessmentQuestion.max_auto_points, 1);\n    assert.equal(thirdAssessmentQuestion.max_manual_points, 7);\n  });\n\n  it('syncs point arrays in an Exam zone', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    assessment.zones?.push({\n      title: 'zone 1',\n      questions: [\n        {\n          points: [10, 7, 5, 2, 1],\n          alternatives: [\n            {\n              id: util.QUESTION_ID,\n            },\n            {\n              id: util.ALTERNATIVE_QUESTION_ID,\n              points: [5, 3],\n            },\n          ],\n        },\n        {\n          points: [7, 6, 5],\n          id: util.MANUAL_GRADING_QUESTION_ID,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n    assert.lengthOf(syncedData.zones, 1);\n    assert.lengthOf(syncedData.alternative_groups, 2);\n    assert.lengthOf(syncedData.assessment_questions, 3);\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(firstAssessmentQuestion);\n    assert.equal(firstAssessmentQuestion.max_points, 10);\n    assert.equal(firstAssessmentQuestion.max_auto_points, 10);\n    assert.deepEqual(firstAssessmentQuestion.points_list, [10, 7, 5, 2, 1]);\n    assert.equal(firstAssessmentQuestion.max_manual_points, 0);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(secondAssessmentQuestion);\n    assert.equal(secondAssessmentQuestion.max_points, 5);\n    assert.equal(secondAssessmentQuestion.max_auto_points, 5);\n    assert.deepEqual(secondAssessmentQuestion.points_list, [5, 3]);\n    assert.equal(secondAssessmentQuestion.max_manual_points, 0);\n\n    const thirdAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.MANUAL_GRADING_QUESTION_ID,\n    );\n    assert.ok(thirdAssessmentQuestion);\n    assert.equal(thirdAssessmentQuestion.max_points, 7);\n    assert.equal(thirdAssessmentQuestion.max_auto_points, 0);\n    assert.deepEqual(thirdAssessmentQuestion.points_list, [7, 6, 5]);\n    assert.equal(thirdAssessmentQuestion.max_manual_points, 7);\n  });\n\n  it('syncs autoPoint arrays in an Exam zone', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    assessment.zones?.push({\n      title: 'zone 1',\n      questions: [\n        {\n          autoPoints: [10, 7, 5, 2, 1],\n          manualPoints: 8,\n          alternatives: [\n            {\n              id: util.QUESTION_ID,\n            },\n            {\n              id: util.ALTERNATIVE_QUESTION_ID,\n              autoPoints: [5, 3],\n            },\n          ],\n        },\n        {\n          autoPoints: [7, 6, 5],\n          manualPoints: 3,\n          id: util.MANUAL_GRADING_QUESTION_ID,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n    assert.lengthOf(syncedData.zones, 1);\n    assert.lengthOf(syncedData.alternative_groups, 2);\n    assert.lengthOf(syncedData.assessment_questions, 3);\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(firstAssessmentQuestion);\n    assert.equal(firstAssessmentQuestion.max_points, 18);\n    assert.equal(firstAssessmentQuestion.max_auto_points, 10);\n    assert.deepEqual(firstAssessmentQuestion.points_list, [18, 15, 13, 10, 9]);\n    assert.equal(firstAssessmentQuestion.max_manual_points, 8);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(secondAssessmentQuestion);\n    assert.equal(secondAssessmentQuestion.max_points, 13);\n    assert.equal(secondAssessmentQuestion.max_auto_points, 5);\n    assert.deepEqual(secondAssessmentQuestion.points_list, [13, 11]);\n    assert.equal(secondAssessmentQuestion.max_manual_points, 8);\n\n    const thirdAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.MANUAL_GRADING_QUESTION_ID,\n    );\n    assert.ok(thirdAssessmentQuestion);\n    assert.equal(thirdAssessmentQuestion.max_points, 10);\n    assert.equal(thirdAssessmentQuestion.max_auto_points, 7);\n    assert.deepEqual(thirdAssessmentQuestion.points_list, [10, 9, 8]);\n    assert.equal(thirdAssessmentQuestion.max_manual_points, 3);\n  });\n\n  it('reuses assessment questions when questions are removed and added again', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.zones = [\n      {\n        title: 'zone 1',\n        questions: [\n          {\n            id: util.QUESTION_ID,\n            points: 5,\n          },\n          {\n            id: util.ALTERNATIVE_QUESTION_ID,\n            points: 10,\n          },\n        ],\n      },\n    ];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    let syncedData = await getSyncedAssessmentData('newexam');\n\n    const originalFirstSyncedAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(originalFirstSyncedAssessmentQuestion);\n\n    const originalSecondSyncedAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(originalSecondSyncedAssessmentQuestion);\n\n    const removedQuestion = assessment.zones[0].questions?.shift();\n    if (!removedQuestion) throw new Error('removedQuestion is null');\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedData = await getSyncedAssessmentData('newexam');\n    const deletedFirstSyncedAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.isOk(deletedFirstSyncedAssessmentQuestion);\n    assert.isNotNull(deletedFirstSyncedAssessmentQuestion.deleted_at);\n\n    assessment.zones[0].questions?.push(removedQuestion);\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedData = await getSyncedAssessmentData('newexam');\n\n    const newFirstSyncedAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(newFirstSyncedAssessmentQuestion);\n    const newSecondSyncedAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(newSecondSyncedAssessmentQuestion);\n\n    // The questions were reordered, but they should still have the same assessment question IDs\n    assert.equal(newFirstSyncedAssessmentQuestion.id, originalSecondSyncedAssessmentQuestion.id);\n    assert.equal(newSecondSyncedAssessmentQuestion.id, originalFirstSyncedAssessmentQuestion.id);\n  });\n\n  it('removes a zone from an assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.zones?.push({\n      title: 'zone 1',\n      questions: [{ id: util.QUESTION_ID, points: 5 }],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    assessment.zones?.pop();\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    const syncedData = await getSyncedAssessmentData('newexam');\n\n    assert.lengthOf(syncedData.zones, 0);\n    assert.lengthOf(syncedData.alternative_groups, 0);\n    assert.lengthOf(syncedData.assessment_questions, 1);\n    assert.isNotNull(syncedData.assessment_questions[0].deleted_at);\n  });\n\n  it('removes an access rule from an exam', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowAccess?.push(\n      {\n        mode: 'Exam',\n      },\n      {\n        mode: 'Public',\n      },\n    );\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    const syncedAssessments = await util.dumpTable('assessments');\n    const originalSyncedAssessment = syncedAssessments.find((a) => a.tid === 'newexam');\n\n    assessment.allowAccess?.shift();\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedAssessmentAccessRules = await util.dumpTable('assessment_access_rules');\n    const rulesForAssessment = syncedAssessmentAccessRules.filter((aar) =>\n      idsEqual(aar.assessment_id, originalSyncedAssessment?.id),\n    );\n    assert.lengthOf(rulesForAssessment, 1);\n    assert.equal(rulesForAssessment[0].mode, 'Public');\n  });\n\n  it('sets mode to Exam if an access rule specifies an examUuid but not mode=Exam', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowAccess?.push({\n      examUuid: 'f593a8c9-ccd4-449c-936c-c26c96ea089b',\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['implicitexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('implicitexam');\n    const syncedAssessmentAccessRules = await util.dumpTable('assessment_access_rules');\n    const rulesForAssessment = syncedAssessmentAccessRules.filter((aar) =>\n      idsEqual(aar.assessment_id, syncedAssessment?.id),\n    );\n    assert.lengthOf(rulesForAssessment, 1);\n    assert.equal(rulesForAssessment[0].mode, 'Exam');\n    assert.equal(rulesForAssessment[0].exam_uuid, 'f593a8c9-ccd4-449c-936c-c26c96ea089b');\n  });\n\n  it('syncs empty arrays correctly', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    // NOTE: our JSON schema explicitly prohibits a zone question from having\n    // an empty points array, so we can't test that here as it's impossible\n    // for it to ever be written to the database.\n    assessment.allowAccess?.push({\n      mode: 'Exam',\n      uids: [],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newexam'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessments = await util.dumpTable('assessments');\n    const syncedAssessment = syncedAssessments.find((a) => a.tid === 'newexam');\n\n    const assessmentAccessRules = await util.dumpTable('assessment_access_rules');\n    const assessmentAccessRule = assessmentAccessRules.find((aar) =>\n      idsEqual(aar.assessment_id, syncedAssessment?.id),\n    );\n    assert.isArray(assessmentAccessRule?.uids, 'uids should be an array');\n    assert.isEmpty(assessmentAccessRule?.uids, 'uids should be empty');\n  });\n\n  it('syncs group roles correctly', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = getGroupRoles();\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessment'] =\n      groupAssessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedRoles = await util.dumpTable('group_roles');\n    assert.equal(syncedRoles.length, 2);\n\n    const recorder = syncedRoles.find((role) => role.role_name === 'Recorder');\n    assert.isDefined(recorder);\n    assert.equal(recorder?.minimum, 1);\n    assert.equal(recorder?.maximum, 4);\n    assert.isTrue(recorder?.can_assign_roles);\n\n    const contributor = syncedRoles.find((role) => role.role_name === 'Contributor');\n    assert.isOk(contributor);\n    assert.equal(contributor?.minimum, 0);\n    assert.equal(contributor?.maximum, null);\n    assert.isFalse(contributor?.can_assign_roles);\n  });\n\n  it('syncs group roles and valid question-level permissions correctly', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = getGroupRoles();\n    groupAssessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Contributor'],\n          canSubmit: ['Recorder'],\n        },\n        {\n          id: util.ALTERNATIVE_QUESTION_ID,\n          points: 5,\n          canView: ['Recorder'],\n          canSubmit: ['Recorder'],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessment'] =\n      groupAssessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('groupAssessment');\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n\n    // Check group roles\n    const syncedRoles = await util.dumpTable('group_roles');\n    assert.isTrue(syncedRoles.length === 2);\n\n    const recorder = syncedRoles.find((role) => role.role_name === 'Recorder');\n    const contributor = syncedRoles.find((role) => role.role_name === 'Contributor');\n    assert.isDefined(recorder);\n    assert.isDefined(contributor);\n\n    // Check question role permissions\n    const syncedPermissions = await util.dumpTable('assessment_question_role_permissions');\n\n    const firstQuestionRecorderPermission = getPermission(\n      syncedPermissions,\n      recorder,\n      firstAssessmentQuestion,\n    );\n    assert.isDefined(firstQuestionRecorderPermission);\n    assert.isTrue(\n      firstQuestionRecorderPermission?.can_view && firstQuestionRecorderPermission?.can_submit,\n      'recorder should have permission to view and submit first question',\n    );\n\n    const firstQuestionContributorPermission = getPermission(\n      syncedPermissions,\n      contributor,\n      firstAssessmentQuestion,\n    );\n    assert.isDefined(firstQuestionContributorPermission);\n    assert.isTrue(\n      firstQuestionContributorPermission?.can_view &&\n        !firstQuestionContributorPermission?.can_submit,\n      'contributor should only have permission to view first question',\n    );\n\n    const secondQuestionRecorderPermission = getPermission(\n      syncedPermissions,\n      recorder,\n      secondAssessmentQuestion,\n    );\n    assert.isDefined(secondQuestionRecorderPermission);\n    assert.isTrue(\n      secondQuestionRecorderPermission?.can_view && secondQuestionRecorderPermission?.can_submit,\n      'recorder should have permission to view and submit second question',\n    );\n\n    const secondQuestionContributorPermission = getPermission(\n      syncedPermissions,\n      contributor,\n      secondAssessmentQuestion,\n    );\n    assert.isOk(secondQuestionContributorPermission);\n    assert.isTrue(\n      !secondQuestionContributorPermission?.can_view &&\n        !secondQuestionContributorPermission?.can_submit,\n      'contributor should not be able to view or submit second question',\n    );\n  });\n\n  it('syncs group roles and valid zone-level permissions correctly', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = getGroupRoles();\n    groupAssessment.zones?.push({\n      title: 'test zone',\n      canView: ['Recorder', 'Contributor'],\n      canSubmit: ['Recorder'],\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n        },\n        {\n          id: util.ALTERNATIVE_QUESTION_ID,\n          points: 5,\n          canView: ['Recorder'],\n          canSubmit: ['Recorder'],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessment'] =\n      groupAssessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('groupAssessment');\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n\n    // Check group roles\n    const syncedRoles = await util.dumpTable('group_roles');\n    assert.isTrue(syncedRoles.length === 2);\n\n    const recorder = syncedRoles.find((role) => role.role_name === 'Recorder');\n    const contributor = syncedRoles.find((role) => role.role_name === 'Contributor');\n    assert.isDefined(recorder);\n    assert.isDefined(contributor);\n\n    // Check question role permissions\n    const syncedPermissions = await util.dumpTable('assessment_question_role_permissions');\n\n    const firstQuestionRecorderPermission = getPermission(\n      syncedPermissions,\n      recorder,\n      firstAssessmentQuestion,\n    );\n    assert.isDefined(firstQuestionRecorderPermission);\n    assert.isTrue(\n      firstQuestionRecorderPermission?.can_view && firstQuestionRecorderPermission?.can_submit,\n      'recorder should have permission to view and submit first question',\n    );\n\n    const firstQuestionContributorPermission = getPermission(\n      syncedPermissions,\n      contributor,\n      firstAssessmentQuestion,\n    );\n    assert.isDefined(firstQuestionContributorPermission);\n    assert.isTrue(\n      firstQuestionContributorPermission?.can_view &&\n        !firstQuestionContributorPermission?.can_submit,\n      'contributor should only have permission to view first question',\n    );\n\n    const secondQuestionRecorderPermission = getPermission(\n      syncedPermissions,\n      recorder,\n      secondAssessmentQuestion,\n    );\n    assert.isDefined(secondQuestionRecorderPermission);\n    assert.isTrue(\n      secondQuestionRecorderPermission?.can_view && secondQuestionRecorderPermission?.can_submit,\n      'recorder should have permission to view and submit second question',\n    );\n\n    const secondQuestionContributorPermission = getPermission(\n      syncedPermissions,\n      contributor,\n      secondAssessmentQuestion,\n    );\n    assert.isOk(secondQuestionContributorPermission);\n    assert.isTrue(\n      !secondQuestionContributorPermission?.can_view &&\n        !secondQuestionContributorPermission?.can_submit,\n      'contributor should not be able to view or submit second question',\n    );\n  });\n\n  it('syncs group roles and valid assessment-level permissions correctly', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = getGroupRoles();\n    groupAssessment.canView = ['Recorder', 'Contributor'];\n    groupAssessment.canSubmit = ['Recorder'];\n    groupAssessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n        },\n        {\n          id: util.ALTERNATIVE_QUESTION_ID,\n          points: 5,\n          canView: ['Recorder'],\n          canSubmit: ['Recorder'],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessment'] =\n      groupAssessment;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('groupAssessment');\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n\n    // Check group roles\n    const syncedRoles = await util.dumpTable('group_roles');\n    assert.isTrue(syncedRoles.length === 2);\n\n    const recorder = syncedRoles.find((role) => role.role_name === 'Recorder');\n    const contributor = syncedRoles.find((role) => role.role_name === 'Contributor');\n    assert.isDefined(recorder);\n    assert.isDefined(contributor);\n\n    // Check question role permissions\n    const syncedPermissions = await util.dumpTable('assessment_question_role_permissions');\n\n    const firstQuestionRecorderPermission = getPermission(\n      syncedPermissions,\n      recorder,\n      firstAssessmentQuestion,\n    );\n    assert.isDefined(firstQuestionRecorderPermission);\n    assert.isTrue(\n      firstQuestionRecorderPermission?.can_view && firstQuestionRecorderPermission?.can_submit,\n      'recorder should have permission to view and submit first question',\n    );\n\n    const firstQuestionContributorPermission = getPermission(\n      syncedPermissions,\n      contributor,\n      firstAssessmentQuestion,\n    );\n    assert.isDefined(firstQuestionContributorPermission);\n    assert.isTrue(\n      firstQuestionContributorPermission?.can_view &&\n        !firstQuestionContributorPermission?.can_submit,\n      'contributor should only have permission to view first question',\n    );\n\n    const secondQuestionRecorderPermission = getPermission(\n      syncedPermissions,\n      recorder,\n      secondAssessmentQuestion,\n    );\n    assert.isDefined(secondQuestionRecorderPermission);\n    assert.isTrue(\n      secondQuestionRecorderPermission?.can_view && secondQuestionRecorderPermission?.can_submit,\n      'recorder should have permission to view and submit second question',\n    );\n\n    const secondQuestionContributorPermission = getPermission(\n      syncedPermissions,\n      contributor,\n      secondAssessmentQuestion,\n    );\n    assert.isOk(secondQuestionContributorPermission);\n    assert.isTrue(\n      !secondQuestionContributorPermission?.can_view &&\n        !secondQuestionContributorPermission?.can_submit,\n      'contributor should not be able to view or submit second question',\n    );\n  });\n\n  it('removes group roles and role permissions correctly upon re-sync', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = getGroupRoles();\n    groupAssessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Contributor'],\n          canSubmit: ['Recorder'],\n        },\n        {\n          id: util.ALTERNATIVE_QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Contributor'],\n          canSubmit: ['Recorder', 'Contributor'],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessment'] =\n      groupAssessment;\n\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // Check group roles\n    const syncedRoles = await util.dumpTable('group_roles');\n    assert.equal(syncedRoles.length, 2);\n    const foundRecorder = syncedRoles.find((role) => role.role_name === 'Recorder');\n    const foundContributor = syncedRoles.find((role) => role.role_name === 'Contributor');\n    assert.isDefined(foundRecorder);\n    assert.isDefined(foundContributor);\n\n    // Check permissions\n    const syncedPermissions = await util.dumpTable('assessment_question_role_permissions');\n    assert.equal(\n      syncedPermissions.filter((p) => parseInt(p.group_role_id) === parseInt(foundRecorder?.id))\n        .length,\n      2,\n    );\n    assert.equal(\n      syncedPermissions.filter((p) => parseInt(p.group_role_id) === parseInt(foundContributor?.id))\n        .length,\n      2,\n    );\n\n    // Remove the \"Contributor\" group role and re-sync\n    groupAssessment.groupRoles = [\n      { name: 'Recorder', minimum: 1, maximum: 4, canAssignRoles: true },\n    ];\n    const lastZone = groupAssessment?.zones?.[groupAssessment.zones.length - 1];\n    if (!lastZone) throw new Error('could not find last zone');\n    lastZone.questions = [\n      {\n        id: util.QUESTION_ID,\n        points: 5,\n        canView: ['Recorder'],\n        canSubmit: ['Recorder'],\n      },\n      {\n        id: util.ALTERNATIVE_QUESTION_ID,\n        points: 5,\n        canView: ['Recorder'],\n        canSubmit: ['Recorder'],\n      },\n    ];\n\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const newSyncedRoles = await util.dumpTable('group_roles');\n    assert.equal(newSyncedRoles.length, 1);\n    assert.notEqual(\n      newSyncedRoles.find((role) => role.role_name === 'Recorder'),\n      undefined,\n    );\n    assert.isUndefined(newSyncedRoles.find((role) => role.role_name === 'Contributor'));\n\n    const newSyncedPermissions = await util.dumpTable('assessment_question_role_permissions');\n    assert.equal(\n      newSyncedPermissions.filter((p) => parseInt(p.group_role_id) === parseInt(foundRecorder?.id))\n        .length,\n      2,\n    );\n    assert.equal(\n      newSyncedPermissions.filter(\n        (p) => parseInt(p.group_role_id) === parseInt(foundContributor?.id),\n      ).length,\n      0,\n    );\n  });\n\n  it('records an error if a question has permissions for non-existent group roles', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = getGroupRoles();\n    groupAssessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Invalid'],\n          canSubmit: ['Recorder'],\n        },\n        {\n          id: util.ALTERNATIVE_QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Contributor'],\n          canSubmit: ['Recorder', 'Contributor'],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessmentFail'] =\n      groupAssessment;\n\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('groupAssessmentFail');\n\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /The zone question's \"canView\" permission contains the non-existent group role name \"Invalid\"./,\n    );\n  });\n\n  it('records an error if a zone has permissions for non-existent group roles', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = getGroupRoles();\n    groupAssessment.zones?.push({\n      title: 'test zone',\n      canView: ['Recorder', 'Invalid'],\n      canSubmit: ['Recorder'],\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n        },\n        {\n          id: util.ALTERNATIVE_QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Contributor'],\n          canSubmit: ['Recorder', 'Contributor'],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessmentFail'] =\n      groupAssessment;\n\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('groupAssessmentFail');\n\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /The zone's \"canView\" permission contains the non-existent group role name \"Invalid\"./,\n    );\n  });\n\n  it('records an error if an assessment has permissions for non-existent group roles', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = getGroupRoles();\n    groupAssessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n        },\n        {\n          id: util.ALTERNATIVE_QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Contributor'],\n          canSubmit: ['Recorder', 'Contributor'],\n        },\n      ],\n    });\n    groupAssessment.canView = ['Recorder', 'Invalid'];\n    groupAssessment.canSubmit = ['Recorder'];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessmentFail'] =\n      groupAssessment;\n\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('groupAssessmentFail');\n\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /The assessment's \"canView\" permission contains the non-existent group role name \"Invalid\"./,\n    );\n  });\n\n  it('records an error if there is no group role with minimum > 0 that can reassign roles', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = [{ name: 'Recorder', canAssignRoles: false }];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessmentFail'] =\n      groupAssessment;\n\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('groupAssessmentFail');\n\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Could not find a role with minimum >= 1 and \"canAssignRoles\" set to \"true\"./,\n    );\n  });\n\n  it('records an error if group role max/min are greater than the group maximum', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupMaxSize = 4;\n    groupAssessment.groupRoles = [\n      { name: 'Manager', canAssignRoles: true, minimum: 10 },\n      { name: 'Reflector', maximum: 10 },\n    ];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessmentFail'] =\n      groupAssessment;\n\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('groupAssessmentFail');\n\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Group role \"Manager\" contains an invalid minimum. \\(Expected at most 4, found 10\\)./,\n    );\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Group role \"Reflector\" contains an invalid maximum. \\(Expected at most 4, found 10\\)./,\n    );\n  });\n\n  it('removes deleted question-level permissions correctly', async () => {\n    const courseData = util.getCourseData();\n    const groupAssessment = makeAssessment(courseData, 'Homework');\n    groupAssessment.groupWork = true;\n    groupAssessment.groupRoles = [\n      { name: 'Recorder', minimum: 1, maximum: 4, canAssignRoles: true },\n      { name: 'Contributor' },\n    ];\n    groupAssessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Contributor'],\n          canSubmit: ['Recorder'],\n        },\n        {\n          id: util.ALTERNATIVE_QUESTION_ID,\n          points: 5,\n          canView: ['Recorder', 'Contributor'],\n          canSubmit: ['Recorder', 'Contributor'],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['groupAssessment'] =\n      groupAssessment;\n\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    const syncedRoles = await util.dumpTable('group_roles');\n\n    // Ensure both roles are present\n    assert.equal(syncedRoles.length, 2);\n    const foundRecorder = syncedRoles.find((role) => role.role_name === 'Recorder');\n    const foundContributor = syncedRoles.find((role) => role.role_name === 'Contributor');\n    assert.isDefined(foundRecorder);\n    assert.isDefined(foundContributor);\n\n    // Modify question-level permissions\n    const lastZone = groupAssessment?.zones?.[groupAssessment.zones.length - 1];\n    if (!lastZone) throw new Error('could not find last zone');\n    lastZone.questions = [\n      {\n        id: util.QUESTION_ID,\n        points: 5,\n        canView: ['Recorder'],\n        canSubmit: ['Recorder'],\n      },\n      {\n        id: util.ALTERNATIVE_QUESTION_ID,\n        points: 5,\n        canView: ['Recorder', 'Contributor'],\n        canSubmit: ['Recorder'],\n      },\n    ];\n\n    // Overwrite and ensure that both roles are still present\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const newSyncedRoles = await util.dumpTable('group_roles');\n    assert.equal(newSyncedRoles.length, 2);\n\n    const syncedData = await getSyncedAssessmentData('groupAssessment');\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n\n    assert.ok(firstAssessmentQuestion);\n    assert.ok(secondAssessmentQuestion);\n\n    const newSyncedPermissions = await util.dumpTable('assessment_question_role_permissions');\n    // Contributor can no longer view QUESTION_ID\n    const firstQuestionContributorPermission = newSyncedPermissions.find(\n      (p) =>\n        parseInt(p.assessment_question_id) === parseInt(firstAssessmentQuestion.id) &&\n        parseInt(p.group_role_id) === parseInt(foundContributor?.id),\n    );\n    assert.isFalse(firstQuestionContributorPermission?.can_view);\n    assert.isFalse(firstQuestionContributorPermission?.can_submit);\n\n    // Contributor can view ALTERNATIVE_QUESTION_ID, but not submit\n    const secondQuestionContributorPermission = newSyncedPermissions.find(\n      (p) =>\n        parseInt(p.assessment_question_id) === parseInt(secondAssessmentQuestion.id) &&\n        parseInt(p.group_role_id) === parseInt(foundContributor?.id),\n    );\n    assert.isTrue(secondQuestionContributorPermission?.can_view);\n    assert.isFalse(secondQuestionContributorPermission?.can_submit);\n  });\n\n  // At one point we were missing a `WHERE` clause in the syncing code, which caused\n  // excess `assessment_question_role_permissions` to be created. This test ensures\n  // that this bug is fixed.\n  it('isolates roles/permissions to the assessment they are defined in', async () => {\n    const courseData = util.getCourseData();\n\n    const firstGroupAssessment = makeAssessment(courseData, 'Homework');\n    firstGroupAssessment.groupWork = true;\n    firstGroupAssessment.groupRoles = [{ name: 'Recorder', minimum: 1, canAssignRoles: true }];\n    firstGroupAssessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n          canView: ['Recorder'],\n          canSubmit: ['Recorder'],\n        },\n      ],\n    });\n\n    const secondGroupAssessment = makeAssessment(courseData, 'Homework');\n    secondGroupAssessment.groupWork = true;\n    secondGroupAssessment.groupRoles = [{ name: 'Recorder', minimum: 1, canAssignRoles: true }];\n    secondGroupAssessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n          canView: ['Recorder'],\n          canSubmit: ['Recorder'],\n        },\n      ],\n    });\n\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['firstGroupAssessment'] =\n      firstGroupAssessment;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['secondGroupAssessment'] =\n      secondGroupAssessment;\n\n    await util.writeAndSyncCourseData(courseData);\n\n    const firstSyncedAssessment = await getSyncedAssessmentData('firstGroupAssessment');\n    const secondSyncedAssessment = await getSyncedAssessmentData('secondGroupAssessment');\n    assert.lengthOf(firstSyncedAssessment.group_roles, 1);\n    assert.lengthOf(secondSyncedAssessment.group_roles, 1);\n\n    const syncedPermissions = await util.dumpTableWithSchema(\n      'assessment_question_role_permissions',\n      AssessmentQuestionRolePermissionsSchema,\n    );\n    assert.lengthOf(syncedPermissions, 2);\n\n    const firstAssessmentQuestion = firstSyncedAssessment.assessment_questions[0];\n    const firstGroupRole = firstSyncedAssessment.group_roles[0];\n    assert.ok(firstAssessmentQuestion);\n    assert.ok(firstGroupRole);\n\n    const secondAssessmentQuestion = secondSyncedAssessment.assessment_questions[0];\n    const secondGroupRole = secondSyncedAssessment.group_roles[0];\n    assert.ok(secondAssessmentQuestion);\n    assert.ok(secondGroupRole);\n\n    const firstQuestionPermission = syncedPermissions.find((p) => {\n      return (\n        p.assessment_question_id === firstAssessmentQuestion.id &&\n        p.group_role_id === firstGroupRole.id\n      );\n    });\n    assert.ok(firstQuestionPermission);\n\n    const secondQuestionPermission = syncedPermissions.find((p) => {\n      return (\n        p.assessment_question_id === secondAssessmentQuestion.id &&\n        p.group_role_id === secondGroupRole.id\n      );\n    });\n    assert.ok(secondQuestionPermission);\n  });\n\n  it('handles assessment sets that are not present in infoCourse.json', async () => {\n    // Missing assessment sets should be created\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    const missingAssessmentSetName = 'missing assessment set name';\n    assessment.set = missingAssessmentSetName;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['new'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    let syncedAssessmentSets = await util.dumpTable('assessment_sets');\n    let syncedAssessmentSet = syncedAssessmentSets.find(\n      (aset) => aset.name === missingAssessmentSetName,\n    );\n    assert.isOk(syncedAssessmentSet);\n    assert.isTrue(syncedAssessmentSet.implicit);\n    assert.isTrue(\n      syncedAssessmentSet?.heading && syncedAssessmentSet.heading.length > 0,\n      'assessment set should not have empty heading',\n    );\n\n    // When missing assessment sets are no longer used in any assessments, they should\n    // be removed from the DB\n    assessment.set = 'Homework';\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedAssessmentSets = await util.dumpTable('assessment_sets');\n    syncedAssessmentSet = syncedAssessmentSets.find(\n      (aset) => aset.name === missingAssessmentSetName,\n    );\n    assert.isUndefined(syncedAssessmentSet);\n  });\n\n  it('handles assessment modules that are not present in infoCourse.json', async () => {\n    // Missing assessment modules should be created\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    const missingAssessmentModuleName = 'missing assessment module name';\n    assessment.module = missingAssessmentModuleName;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['new'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    let syncedAssessmentModules = await util.dumpTable('assessment_modules');\n    let syncedAssessmentModule = syncedAssessmentModules.find(\n      (amod) => amod.name === missingAssessmentModuleName,\n    );\n    assert.isOk(syncedAssessmentModule);\n    assert.isTrue(syncedAssessmentModule.implicit);\n    assert.isTrue(\n      syncedAssessmentModule?.heading && syncedAssessmentModule.heading.length > 0,\n      'assessment module should not have empty heading',\n    );\n\n    // When missing assessment modules are no longer used in any assessments, they should\n    // be removed from the DB\n    delete assessment.module;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedAssessmentModules = await util.dumpTable('assessment_modules');\n    syncedAssessmentModule = syncedAssessmentModules.find(\n      (amod) => amod.name === missingAssessmentModuleName,\n    );\n    assert.isUndefined(syncedAssessmentModule);\n  });\n\n  it('records an error if an access rule end date is before the start date', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowAccess?.push({\n      startDate: '2020-01-01T11:11:11',\n      endDate: '2019-01-01T00:00:00',\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Invalid allowAccess rule: startDate \\(2020-01-01T11:11:11\\) must not be after endDate \\(2019-01-01T00:00:00\\)/,\n    );\n  });\n\n  it('records an error if an access rule start date is invalid', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowAccess?.push({\n      startDate: 'not a valid date',\n      endDate: '2019-01-01T00:00:00',\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Invalid allowAccess rule: startDate \\(not a valid date\\) is not valid/,\n    );\n  });\n\n  it('records an error if an access rule end date is invalid', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowAccess?.push({\n      startDate: '2020-01-01T11:11:11',\n      endDate: 'not a valid date',\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Invalid allowAccess rule: endDate \\(not a valid date\\) is not valid/,\n    );\n  });\n\n  it('records an error if an access rule sets active to false and has nonzero credit', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowAccess?.push({\n      credit: 100,\n      active: false,\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Invalid allowAccess rule: credit must be 0 if active is false/,\n    );\n  });\n\n  it('records an error if an access rule specifies an examUuid and mode=Public', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowAccess?.push({\n      mode: 'Public',\n      examUuid: 'f593a8c9-ccd4-449c-936c-c26c96ea089b',\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_warnings,\n      /Invalid allowAccess rule: examUuid cannot be used with \"mode\": \"Public\"/,\n    );\n  });\n\n  it('records an error if a question specifies neither an ID nor an alternative', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [{}],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Zone question must specify either \"alternatives\" or \"id\"/,\n    );\n  });\n\n  it('records an error if a question specifies maxPoints on an Exam-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          maxPoints: 5,\n          points: 5,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Cannot specify \"maxPoints\" or \"maxAutoPoints\" for a question in an \"Exam\" assessment/,\n    );\n  });\n\n  it('records an error if a question does not specify points on an Exam-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Must specify \"points\", \"autoPoints\" or \"manualPoints\" for a question/,\n    );\n  });\n\n  it('records an error if a question does not specify points on a Homework-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Must specify \"points\", \"autoPoints\" or \"manualPoints\" for a question/,\n    );\n  });\n\n  it('records an error if a question specifies points and autoPoints', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n          autoPoints: 5,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Cannot specify \"points\" for a question if \"autoPoints\", \"manualPoints\" or \"maxAutoPoints\" are specified/,\n    );\n  });\n\n  it('records an error if a question specifies points and manualPoints', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n          manualPoints: 5,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Cannot specify \"points\" for a question if \"autoPoints\", \"manualPoints\" or \"maxAutoPoints\" are specified/,\n    );\n  });\n\n  it('records an error if a question specifies maxPoints and autoPoints', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          maxPoints: 15,\n          autoPoints: 5,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Cannot specify \"maxPoints\" for a question if \"autoPoints\", \"manualPoints\" or \"maxAutoPoints\" are specified/,\n    );\n  });\n\n  it('records an error if a question specifies points as an array on a Homework-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          maxPoints: 10,\n          points: [1, 2, 3],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Cannot specify \"points\" or \"autoPoints\" as a list for a question in a \"Homework\" assessment/,\n    );\n  });\n\n  it('records a warning if a question has zero points and non-zero maxPoints on a Homework-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          maxPoints: 10,\n          points: 0,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(syncedAssessment?.sync_errors, /Cannot specify \"points\": 0 when \"maxPoints\" > 0/);\n  });\n\n  it('records a warning if a question has zero autoPoints and non-zero maxAutoPoints on a Homework-type assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          maxAutoPoints: 10,\n          autoPoints: 0,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Cannot specify \"autoPoints\": 0 when \"maxAutoPoints\" > 0/,\n    );\n  });\n\n  it('records an error if an assessment directory is missing an infoAssessment.json file', async () => {\n    const courseData = util.getCourseData();\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await fs.ensureDir(path.join(courseDir, 'courseInstances', 'Fa19', 'assessments', 'fail'));\n    await util.syncCourseData(courseDir);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.isOk(syncedAssessment);\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Missing JSON file: courseInstances\\/Fa19\\/assessments\\/fail\\/infoAssessment.json/,\n    );\n  });\n\n  it('records an error if a zone references an invalid QID', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: 'i do not exist ',\n          points: [1, 2, 3],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /The following questions do not exist in this course: \"i do not exist \"/,\n    );\n  });\n\n  describe('Test validating shared quesitons on sync', () => {\n    before('Temporarily enable validation of shared questions', () => {\n      config.checkSharingOnSync = true;\n    });\n    after('Disable again for other tests', () => {\n      config.checkSharingOnSync = false;\n    });\n\n    it('records an error if a zone references a QID from another course that does not exist or we do not have permissions for', async () => {\n      features.enable('question-sharing');\n      const courseData = util.getCourseData();\n      const assessment = makeAssessment(courseData);\n      assessment.zones?.push({\n        title: 'test zone',\n        questions: [\n          {\n            id: '@example-course/i do not exist',\n            points: [1, 2, 3],\n          },\n        ],\n      });\n      courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n      await util.writeAndSyncCourseData(courseData);\n      const syncedAssessment = await findSyncedAssessment('fail');\n      assert.match(\n        syncedAssessment?.sync_errors,\n        /For each of the following, either the course you are referencing does not exist, or the question does not exist within that course: @example-course\\/i do not exist/,\n      );\n    });\n  });\n\n  it('records an error if an assessment references a QID more than once', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n        },\n        {\n          id: util.QUESTION_ID,\n          points: 5,\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /The following questions are used more than once: \"test\"/,\n    );\n  });\n\n  it('records an error if real-time grading is disallowed on a homework assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.allowRealTimeGrading = false;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Real-time grading cannot be disabled for Homework-type assessments/,\n    );\n  });\n\n  it('records an error if multiple-element points array is specified for a question when real-time grading is disallowed', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowRealTimeGrading = false;\n    assessment.zones = [\n      {\n        title: 'zone 1',\n        questions: [\n          {\n            id: util.QUESTION_ID,\n            points: [5, 4, 3],\n          },\n          {\n            id: util.ALTERNATIVE_QUESTION_ID,\n            points: [10, 9, 8],\n          },\n        ],\n      },\n    ];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Cannot specify an array of multiple point values for a question/,\n    );\n  });\n\n  it('accepts a single-element points array being specified for a question when real-time grading is disallowed', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowRealTimeGrading = false;\n    assessment.zones = [\n      {\n        title: 'zone 1',\n        questions: [\n          {\n            id: util.QUESTION_ID,\n            points: [5],\n          },\n          {\n            id: util.ALTERNATIVE_QUESTION_ID,\n            points: [10],\n          },\n        ],\n      },\n    ];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['points_array_size_one'] =\n      assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedData = await getSyncedAssessmentData('points_array_size_one');\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(firstAssessmentQuestion);\n    assert.deepEqual(firstAssessmentQuestion.points_list, [5]);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(secondAssessmentQuestion);\n    assert.deepEqual(secondAssessmentQuestion.points_list, [10]);\n\n    const syncedAssessment = await findSyncedAssessment('points_array_size_one');\n    assert.equal(syncedAssessment?.sync_errors, null);\n  });\n\n  it('records an error if multiple-element points array is specified for an alternative when real-time grading is disallowed', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowRealTimeGrading = false;\n    assessment.zones = [\n      {\n        title: 'zone 1',\n        questions: [\n          {\n            points: [10, 9, 8],\n            alternatives: [\n              {\n                id: util.QUESTION_ID,\n              },\n              {\n                id: util.ALTERNATIVE_QUESTION_ID,\n                points: [5, 4, 3],\n              },\n            ],\n          },\n        ],\n      },\n    ];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(\n      syncedAssessment?.sync_errors,\n      /Cannot specify an array of multiple point values for an alternative/,\n    );\n  });\n\n  it('records an error if an increasing points array is specified for an alternative', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Exam');\n    assessment.zones = [\n      {\n        title: 'zone 1',\n        questions: [\n          {\n            points: [10, 10, 9, 10],\n            id: util.QUESTION_ID,\n          },\n        ],\n      },\n    ];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.match(syncedAssessment?.sync_errors, /Points for a question must be non-increasing/);\n  });\n\n  it('accepts a single-element points array being specified for an alternative when real-time grading is disallowed', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.allowRealTimeGrading = false;\n    assessment.zones = [\n      {\n        title: 'zone 1',\n        questions: [\n          {\n            points: [10],\n            alternatives: [\n              {\n                id: util.QUESTION_ID,\n              },\n              {\n                id: util.ALTERNATIVE_QUESTION_ID,\n                points: [5],\n              },\n            ],\n          },\n        ],\n      },\n    ];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['points_array_size_one'] =\n      assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedData = await getSyncedAssessmentData('points_array_size_one');\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.ok(firstAssessmentQuestion);\n    assert.deepEqual(firstAssessmentQuestion.points_list, [10]);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.ok(secondAssessmentQuestion);\n    assert.deepEqual(secondAssessmentQuestion.points_list, [5]);\n\n    const syncedAssessment = await findSyncedAssessment('points_array_size_one');\n    assert.equal(syncedAssessment?.sync_errors, null);\n  });\n\n  it('records a warning if the same UUID is used multiple times in one course instance', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail1'] = assessment;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail2'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment1 = await findSyncedAssessment('fail1');\n    assert.match(\n      syncedAssessment1?.sync_warnings,\n      /UUID \".*\" is used in other assessments in this course instance: fail2/,\n    );\n    const syncedAssessment2 = await findSyncedAssessment('fail2');\n    assert.match(\n      syncedAssessment2?.sync_warnings,\n      /UUID \".*\" is used in other assessments in this course instance: fail1/,\n    );\n  });\n\n  it('creates entry in the database in the case of invalid JSON', async () => {\n    const courseData = util.getCourseData();\n    // @ts-expect-error -- Deliberately invalid.\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = 'lol not valid json';\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessmentSets = await util.dumpTable('assessment_sets');\n    const unknownAssessmentSet = syncedAssessmentSets.find((as) => as.name === 'Unknown');\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.isOk(syncedAssessment);\n    assert.equal(syncedAssessment?.assessment_set_id, unknownAssessmentSet?.id);\n    assert.equal(syncedAssessment?.number, '0');\n  });\n\n  it('creates entry in database in the case of a missing UUID', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    // @ts-expect-error -- Breaking assessment by removing UUID.\n    delete assessment.uuid;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['missinguuid'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessmentSets = await util.dumpTable('assessment_sets');\n    const unknownAssessmentSet = syncedAssessmentSets.find((as) => as.name === 'Unknown');\n    const syncedAssessment = await findSyncedAssessment('missinguuid');\n    assert.isOk(syncedAssessment);\n    assert.equal(syncedAssessment?.assessment_set_id, unknownAssessmentSet?.id);\n    assert.equal(syncedAssessment?.number, '0');\n  });\n\n  it('updates old invalid data once a UUID is added', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    const oldUuid = assessment.uuid;\n    // @ts-expect-error -- Breaking assessment by removing UUID.\n    delete assessment.uuid;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['missinguuid'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    assessment.uuid = oldUuid;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedAssessment = await findSyncedAssessment('missinguuid');\n    assert.equal(syncedAssessment?.title, assessment.title);\n    assert.equal(syncedAssessment?.uuid, oldUuid);\n  });\n\n  it('maintains identity via UUID when assessment is renamed', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['originalname'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    const originalSyncedAssessment = await findSyncedAssessment('originalname');\n    delete courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['originalname'];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newname'] = assessment;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const newSyncedAssessment = await findSyncedAssessment('newname');\n    assert.equal(newSyncedAssessment?.id, originalSyncedAssessment?.id);\n  });\n\n  it('soft-deletes unused assessments', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['unused'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    delete courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['unused'];\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedAssessment = await findSyncedAssessment('unused');\n    assert.isNotNull(syncedAssessment?.deleted_at);\n  });\n\n  it('preserves assessment despite deletion of the assessment set', async () => {\n    const courseData = util.getCourseData();\n    const assessmentSet = makeAssessmentSet();\n    courseData.course.assessmentSets.push(assessmentSet);\n    const assessment = makeAssessment(courseData);\n    assessment.set = assessmentSet.name;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['testAssessment'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    const originalSyncedAssessment = await findSyncedAssessment('testAssessment');\n\n    // now delete the assessment set, but leave the assessment in place\n    courseData.course.assessmentSets.pop();\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const newSyncedAssessment = await findSyncedAssessment('testAssessment');\n    assert.equal(newSyncedAssessment?.id, originalSyncedAssessment?.id);\n\n    // check we have a valid auto-created assessment set\n    const syncedAssessmentSets = await util.dumpTable('assessment_sets');\n    const syncedAssessmentSet = syncedAssessmentSets.find((as) => as.name === assessmentSet.name);\n    assert.equal(newSyncedAssessment?.assessment_set_id, syncedAssessmentSet?.id);\n  });\n\n  it('correctly handles a new assessment with the same TID as a deleted assessment', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['testAssessment'] = assessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // now change the UUID of the assessment and re-sync\n    assessment.uuid = '98c427af-1216-47ad-b982-6e88974080e1';\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedAssessment = await findSyncedUndeletedAssessment('testAssessment');\n    assert.equal(syncedAssessment?.uuid, assessment.uuid);\n  });\n\n  it('does not add errors to deleted assessments', async () => {\n    const courseData = util.getCourseData();\n    const originalAssessment = makeAssessment(courseData);\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['repeatedAssessment'] =\n      originalAssessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // now change the UUID of the assessment, add an error and re-sync\n    const newAssessment = { ...originalAssessment };\n    newAssessment.uuid = '49c8b795-dfde-4c13-a040-0fd1ba711dc5';\n    // @ts-expect-error -- Breaking assessment by removing title.\n    delete newAssessment.title;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['repeatedAssessment'] =\n      newAssessment;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    // check that the newly-synced assessment has an error\n    const syncedAssessments = await util.dumpTable('assessments');\n    const syncedAssessment = syncedAssessments.find(\n      (a) => a.tid === 'repeatedAssessment' && a.deleted_at == null,\n    );\n    assert.equal(syncedAssessment?.uuid, newAssessment.uuid);\n    assert.match(syncedAssessment?.sync_errors, /must have required property 'title'/);\n\n    // check that the old deleted assessment does not have any errors\n    const deletedAssessment = syncedAssessments.find(\n      (a) => a.tid === 'repeatedAssessment' && a.deleted_at != null,\n    );\n    assert.equal(deletedAssessment?.uuid, originalAssessment.uuid);\n    assert.equal(deletedAssessment?.sync_errors, null);\n  });\n\n  it('records an error if a nested assessment directory does not eventually contain an infoAssessment.json file', async () => {\n    const courseData = util.getCourseData();\n    const nestedAssessmentStructure = [\n      'subfolder1',\n      'subfolder2',\n      'subfolder3',\n      'nestedAssessment',\n    ];\n    const assessmentId = nestedAssessmentStructure.join('/');\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await fs.ensureDir(\n      path.join(\n        courseDir,\n        'courseInstances',\n        util.COURSE_INSTANCE_ID,\n        'assessments',\n        ...nestedAssessmentStructure,\n      ),\n    );\n    await util.syncCourseData(courseDir);\n\n    const syncedAssessment = await findSyncedAssessment(assessmentId);\n    assert.isOk(syncedAssessment);\n    assert.match(\n      syncedAssessment?.sync_errors,\n      new RegExp(\n        `Missing JSON file: courseInstances/${util.COURSE_INSTANCE_ID}/assessments/subfolder1/subfolder2/subfolder3/nestedAssessment/infoAssessment.json`,\n      ),\n    );\n\n    // We should only record an error for the most deeply nested directories,\n    // not any of the intermediate ones.\n    for (let i = 0; i < nestedAssessmentStructure.length - 1; i++) {\n      const partialNestedAssessmentStructure = nestedAssessmentStructure.slice(0, i);\n      const partialAssessmentId = partialNestedAssessmentStructure.join('/');\n\n      const syncedAssessment = await findSyncedAssessment(partialAssessmentId);\n      assert.isUndefined(syncedAssessment);\n    }\n  });\n\n  it('records an error if multipleInstance is true for Homework-type assessments', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData);\n    assessment.type = 'Homework';\n    assessment.multipleInstance = true;\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedAssessment = await findSyncedAssessment('fail');\n    assert.equal(\n      syncedAssessment?.sync_errors,\n      '\"multipleInstance\" cannot be used for Homework-type assessments',\n    );\n  });\n\n  // https://github.com/PrairieLearn/PrairieLearn/issues/6539\n  it('handles unique sequence of renames and duplicate UUIDs', async () => {\n    const courseData = util.getCourseData();\n\n    // Start with a clean slate.\n    const courseInstanceData = courseData.courseInstances[util.COURSE_INSTANCE_ID];\n    courseInstanceData.assessments = {};\n\n    // Write and sync a single assessment.\n    const originalAssessment = makeAssessment(courseData);\n    originalAssessment.uuid = '0e8097aa-b554-4908-9eac-d46a78d6c249';\n    courseInstanceData.assessments['a'] = originalAssessment;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // Now \"move\" the above assessment to a new directory AND add another with the\n    // same UUID.\n    delete courseInstanceData.assessments['a'];\n    courseInstanceData.assessments['b'] = originalAssessment;\n    courseInstanceData.assessments['c'] = originalAssessment;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    // Now \"fix\" the duplicate UUID.\n    courseInstanceData.assessments['c'] = {\n      ...originalAssessment,\n      uuid: '0e3097ba-b554-4908-9eac-d46a78d6c249',\n    };\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    const assessments = await util.dumpTable('assessments');\n\n    // Original assessment should not exist.\n    const originalAssessmentRow = assessments.find((a) => a.tid === 'a');\n    assert.isUndefined(originalAssessmentRow);\n\n    // New assessments should exist and have the correct UUIDs.\n    const newAssessmentRow1 = assessments.find((a) => a.tid === 'b' && a.deleted_at === null);\n    assert.isNull(newAssessmentRow1?.deleted_at);\n    assert.equal(newAssessmentRow1?.uuid, '0e8097aa-b554-4908-9eac-d46a78d6c249');\n    const newAssessmentRow2 = assessments.find((a) => a.tid === 'c' && a.deleted_at === null);\n    assert.isNull(newAssessmentRow2?.deleted_at);\n    assert.equal(newAssessmentRow2?.uuid, '0e3097ba-b554-4908-9eac-d46a78d6c249');\n  });\n\n  it('forbids draft questions on assessments', async () => {\n    const courseData = util.getCourseData();\n\n    // \"Rename\" the default question such that it is a draft.\n    courseData.questions['__drafts__/draft_1'] = courseData.questions[util.QUESTION_ID];\n    delete courseData.questions[util.QUESTION_ID];\n\n    const assessment = makeAssessment(courseData);\n    assessment.zones?.push({\n      title: 'test zone',\n      questions: [{ id: '__drafts__/draft_1', points: 5 }],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedData = await getSyncedAssessmentData('fail');\n    assert.isOk(syncedData.assessment.sync_errors);\n    console.log(syncedData.assessment.sync_errors);\n    assert.match(\n      syncedData.assessment?.sync_errors,\n      /The following questions are marked as draft and therefore cannot be used in assessments: \"__drafts__\\/draft_1\"/,\n    );\n  });\n\n  describe('exam UUID validation', () => {\n    let originalCheckAccessRulesExamUuid: boolean;\n    before(() => {\n      originalCheckAccessRulesExamUuid = config.checkAccessRulesExamUuid;\n      config.checkAccessRulesExamUuid = true;\n    });\n    after(() => {\n      config.checkAccessRulesExamUuid = originalCheckAccessRulesExamUuid;\n    });\n\n    it('validates exam UUIDs for assessments in an accessible course instances', async () => {\n      const courseData = util.getCourseData();\n\n      // Ensure the course instance is accessible.\n      const courseInstanceData = courseData.courseInstances[util.COURSE_INSTANCE_ID];\n      const courseInstance = courseInstanceData.courseInstance;\n      if (!courseInstance) throw new Error('missing courseInstance');\n      courseInstance.allowAccess = [\n        {\n          startDate: '2000-01-01T00:00:00',\n          endDate: '3000-01-01T00:00:00',\n        },\n      ];\n\n      // This assessment has both valid and invalid exam UUIDs.\n      const assessment = makeAssessment(courseData);\n      assessment.allowAccess = [\n        {\n          mode: 'Exam',\n          examUuid: '00000000-0000-0000-0000-000000000000',\n        },\n        {\n          mode: 'Exam',\n          examUuid: '11111111-1111-1111-1111-111111111111',\n        },\n      ];\n      courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n\n      // Insert a `pt_exams` row for the valid exam UUID.\n      await sqldb.queryAsync(sql.insert_pt_exam, { uuid: '11111111-1111-1111-1111-111111111111' });\n\n      await util.writeAndSyncCourseData(courseData);\n      const syncedAssessment = await findSyncedAssessment('fail');\n      assert.match(\n        syncedAssessment?.sync_warnings,\n        /examUuid \"00000000-0000-0000-0000-000000000000\" not found./,\n      );\n      assert.notMatch(syncedAssessment?.sync_warnings, /11111111-1111-1111-1111-111111111111/);\n    });\n\n    it('does not validate exam UUIDs for assessments in an inaccessible course instance', async () => {\n      const courseData = util.getCourseData();\n\n      // Ensure the course instance is not accessible.\n      const courseInstanceData = courseData.courseInstances[util.COURSE_INSTANCE_ID];\n      const courseInstance = courseInstanceData.courseInstance;\n      if (!courseInstance) throw new Error('missing courseInstance');\n      courseInstance.allowAccess = [\n        {\n          startDate: '1000-01-01T00:00:00',\n          endDate: '2000-01-01T00:00:00',\n        },\n      ];\n\n      // Create an assessment with an invalid exam UUID.\n      const assessment = makeAssessment(courseData);\n      assessment.type = 'Exam';\n      assessment.allowAccess = [\n        {\n          mode: 'Exam',\n          examUuid: '00000000-0000-0000-0000-000000000000',\n        },\n      ];\n      courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['fail'] = assessment;\n\n      await util.writeAndSyncCourseData(courseData);\n      const syncedAssessment = await findSyncedAssessment('fail');\n      assert.isNotOk(syncedAssessment?.sync_warnings);\n    });\n  });\n  it('syncs JSON data for grade rate minutes correctly', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.gradeRateMinutes = 1;\n    assessment.zones?.push({\n      title: 'zone 1',\n      gradeRateMinutes: 2,\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 1,\n          gradeRateMinutes: 3,\n        },\n        {\n          points: 1,\n          gradeRateMinutes: 4,\n          alternatives: [\n            {\n              id: util.ALTERNATIVE_QUESTION_ID,\n              gradeRateMinutes: 5,\n            },\n            {\n              id: util.MANUAL_GRADING_QUESTION_ID,\n            },\n          ],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newhomework'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedData = await getSyncedAssessmentData('newhomework');\n    assert.equal(syncedData.assessment.json_grade_rate_minutes, 1);\n    assert.equal(syncedData.zones[0].json_grade_rate_minutes, 2);\n\n    const firstAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.QUESTION_ID,\n    );\n    assert.equal(firstAssessmentQuestion?.grade_rate_minutes, 3);\n    assert.equal(firstAssessmentQuestion?.json_grade_rate_minutes, 3);\n\n    const alternativeGroup = syncedData.alternative_groups.find((ag) => ag.number === 2);\n    assert.equal(alternativeGroup?.json_grade_rate_minutes, 4);\n\n    const secondAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.ALTERNATIVE_QUESTION_ID,\n    );\n    assert.equal(secondAssessmentQuestion?.grade_rate_minutes, 5);\n    assert.equal(secondAssessmentQuestion?.json_grade_rate_minutes, 5);\n\n    const thirdAssessmentQuestion = syncedData.assessment_questions.find(\n      (aq) => aq.question.qid === util.MANUAL_GRADING_QUESTION_ID,\n    );\n    assert.equal(thirdAssessmentQuestion?.grade_rate_minutes, 4);\n    assert.equal(thirdAssessmentQuestion?.json_grade_rate_minutes, null);\n  });\n\n  it('syncs JSON data for group role permissions correctly', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.groupWork = true;\n    assessment.groupRoles = [\n      {\n        name: 'Manager',\n        minimum: 1,\n        maximum: 1,\n        canAssignRoles: true,\n      },\n      {\n        name: 'Recorder',\n        minimum: 1,\n        maximum: 1,\n      },\n      {\n        name: 'Reflector',\n        minimum: 1,\n        maximum: 1,\n      },\n      {\n        name: 'Contributor',\n      },\n    ];\n    assessment.canView = ['Manager'];\n    assessment.canSubmit = ['Recorder'];\n    assessment.zones?.push({\n      title: 'zone 1',\n      canView: ['Manager', 'Recorder', 'Contributor'],\n      canSubmit: ['Recorder', 'Contributor'],\n      questions: [\n        {\n          id: util.QUESTION_ID,\n          points: 1,\n          canView: ['Contributor'],\n          canSubmit: ['Contributor'],\n        },\n        {\n          points: 1,\n          canView: ['Manager'],\n          canSubmit: ['Recorder'],\n          alternatives: [\n            {\n              id: util.ALTERNATIVE_QUESTION_ID,\n            },\n            {\n              id: util.MANUAL_GRADING_QUESTION_ID,\n            },\n          ],\n        },\n      ],\n    });\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newhomework'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedData = await getSyncedAssessmentData('newhomework');\n    assert.deepEqual(syncedData.assessment.json_can_view, ['Manager']);\n    assert.deepEqual(syncedData.assessment.json_can_submit, ['Recorder']);\n    assert.deepEqual(syncedData.zones[0].json_can_view, ['Manager', 'Recorder', 'Contributor']);\n    assert.deepEqual(syncedData.zones[0].json_can_submit, ['Recorder', 'Contributor']);\n    assert.deepEqual(syncedData.alternative_groups[0].json_can_view, ['Contributor']);\n    assert.deepEqual(syncedData.alternative_groups[0].json_can_submit, ['Contributor']);\n    assert.equal(syncedData.alternative_groups[0].json_has_alternatives, false);\n    assert.equal(syncedData.alternative_groups[1].json_has_alternatives, true);\n  });\n\n  it('syncs advanceScorePerc correctly', async () => {\n    const courseData = util.getCourseData();\n    const assessment = makeAssessment(courseData, 'Homework');\n    assessment.advanceScorePerc = 50;\n    assessment.zones = [\n      {\n        title: 'zone 1',\n        questions: [\n          {\n            id: util.QUESTION_ID,\n            points: 1,\n          },\n        ],\n      },\n      {\n        title: 'zone 2',\n        advanceScorePerc: 60,\n        questions: [\n          {\n            id: util.ALTERNATIVE_QUESTION_ID,\n            points: 1,\n            advanceScorePerc: 70,\n          },\n          {\n            advanceScorePerc: 80,\n            alternatives: [\n              {\n                id: util.MANUAL_GRADING_QUESTION_ID,\n                points: 1,\n              },\n              {\n                id: util.WORKSPACE_QUESTION_ID,\n                points: 1,\n                advanceScorePerc: 90,\n              },\n            ],\n          },\n        ],\n      },\n    ];\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].assessments['newhomework'] = assessment;\n    await util.writeAndSyncCourseData(courseData);\n    const syncedData = await getSyncedAssessmentData('newhomework');\n    assert.equal(syncedData.assessment.advance_score_perc, 50);\n    assert.equal(syncedData.zones[0].advance_score_perc, null);\n    assert.equal(syncedData.assessment_questions[0].advance_score_perc, null);\n    assert.equal(syncedData.assessment_questions[0].effective_advance_score_perc, 50);\n    assert.equal(syncedData.zones[1].advance_score_perc, 60);\n    assert.equal(syncedData.assessment_questions[1].advance_score_perc, 70);\n    assert.equal(syncedData.assessment_questions[1].effective_advance_score_perc, 70);\n    assert.equal(syncedData.alternative_groups[2].advance_score_perc, 80);\n    assert.equal(syncedData.assessment_questions[2].advance_score_perc, null);\n    assert.equal(syncedData.assessment_questions[2].effective_advance_score_perc, 80);\n    assert.equal(syncedData.assessment_questions[3].advance_score_perc, 90);\n    assert.equal(syncedData.assessment_questions[3].effective_advance_score_perc, 90);\n  });\n});\n"]}