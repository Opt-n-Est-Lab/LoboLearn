{"version":3,"file":"courseDb.test.js","sourceRoot":"","sources":["../../../src/tests/sync/courseDb.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport fs from 'fs-extra';\nimport * as tmp from 'tmp-promise';\n\nimport { type QuestionJsonInput } from '../../schemas/index.js';\nimport * as courseDb from '../../sync/course-db.js';\nimport * as infofile from '../../sync/infofile.js';\n\nasync function withTempDirectory(callback: (dir: string) => Promise<void>) {\n  const dir = await tmp.dir({ unsafeCleanup: true });\n  try {\n    await callback(dir.path);\n  } finally {\n    await dir.cleanup();\n  }\n}\n\nasync function withTempFile(\n  callback: (info: { path: string; dirname: string; basename: string }) => Promise<void>,\n) {\n  const file = await tmp.file();\n  const dirname = path.dirname(file.path);\n  const basename = path.basename(file.path);\n  try {\n    await callback({ path: file.path, dirname, basename });\n  } finally {\n    await file.cleanup();\n  }\n}\n\nasync function writeQuestion(courseDir: string, qid: string, question: QuestionJsonInput) {\n  await fs.mkdirs(path.join(courseDir, 'questions', qid));\n  await fs.writeJSON(path.join(courseDir, 'questions', qid, 'info.json'), question);\n}\n\nfunction getQuestion() {\n  return {\n    uuid: 'f4ff2429-926e-4358-9e1f-d2f377e2036a',\n    title: 'Test question',\n    topic: 'Test',\n    tags: ['test'],\n    type: 'v3',\n  } satisfies QuestionJsonInput;\n}\n\nfunction getAlternativeQuestion() {\n  return {\n    uuid: '697a6188-8215-4806-92a1-592987342b9e',\n    title: 'Another test question',\n    topic: 'Test',\n    tags: ['test'],\n    type: 'Calculation',\n  } satisfies QuestionJsonInput;\n}\n\nconst UUID = '1c811569-6d28-4ee5-a2c7-39591bf7cb40';\n\ndescribe('course database', () => {\n  describe('JSON file loading', () => {\n    it('loads a valid json file', async () => {\n      await withTempFile(async (file) => {\n        const json = {\n          uuid: UUID,\n          foo: 'bar',\n        };\n        await fs.writeJson(file.path, json);\n        const result = await courseDb.loadInfoFile({\n          coursePath: file.dirname,\n          filePath: file.basename,\n        });\n        assert(result !== null);\n        assert.isFalse(infofile.hasErrors(result));\n        assert.isFalse(infofile.hasWarnings(result));\n        assert.equal(result.uuid, UUID);\n        assert.deepEqual(result.data, json);\n      });\n    });\n\n    it('errors if UUID is missing from valid file', async () => {\n      await withTempFile(async (file) => {\n        const json = { foo: 'bar' };\n        await fs.writeJson(file.path, json);\n        const result = await courseDb.loadInfoFile({\n          coursePath: file.dirname,\n          filePath: file.basename,\n        });\n        assert(result !== null);\n        assert.isTrue(infofile.hasErrors(result));\n      });\n    });\n\n    it('errors if UUID is not valid v4 UUID', async () => {\n      await withTempFile(async (file) => {\n        const json = { uuid: 'bar' };\n        await fs.writeJson(file.path, json);\n        const result = await courseDb.loadInfoFile({\n          coursePath: file.dirname,\n          filePath: file.basename,\n        });\n        assert(result !== null);\n        assert.isTrue(infofile.hasErrors(result));\n      });\n    });\n\n    it('finds a UUID in a malformed file', async () => {\n      await withTempFile(async (file) => {\n        const json = `{{malformed, \"uuid\":\"${UUID}\"`;\n        await fs.writeFile(file.path, json);\n        const result = await courseDb.loadInfoFile({\n          coursePath: file.dirname,\n          filePath: file.basename,\n        });\n        assert(result !== null);\n        assert.isTrue(infofile.hasErrors(result));\n        assert.isFalse(infofile.hasWarnings(result));\n        assert.isUndefined(result.data);\n        assert.equal(result.uuid, UUID);\n      });\n    });\n\n    it('errors if no UUID is found in malformed file', async () => {\n      await withTempFile(async (file) => {\n        const json = `{{malformed, \"uid\":\"${UUID}\"`;\n        await fs.writeFile(file.path, json);\n        const result = await courseDb.loadInfoFile({\n          coursePath: file.dirname,\n          filePath: file.basename,\n        });\n        assert(result !== null);\n        assert.isTrue(infofile.hasErrors(result));\n        assert.isFalse(infofile.hasWarnings(result));\n        assert.isUndefined(result.data);\n        assert.isUndefined(result.uuid);\n      });\n    });\n\n    it('errors if two UUIDs are found in malformed file', async () => {\n      await withTempFile(async (file) => {\n        const json = `{{malformed, \"uuid\":\"${UUID}\",\"uuid\": \"${UUID}\"}`;\n        await fs.writeJson(file.path, json);\n        const result = await courseDb.loadInfoFile({\n          coursePath: file.dirname,\n          filePath: file.basename,\n        });\n        assert(result !== null);\n        assert.isTrue(infofile.hasErrors(result));\n        assert.isFalse(infofile.hasWarnings(result));\n        assert.isUndefined(result.data);\n        assert.isUndefined(result.uuid);\n      });\n    });\n  });\n\n  describe('questions loading', () => {\n    it('loads some questions successfully', async () => {\n      await withTempDirectory(async (dir) => {\n        const question1 = getQuestion();\n        const question2 = getAlternativeQuestion();\n        await writeQuestion(dir, 'question1', getQuestion());\n        await writeQuestion(dir, 'question2', getAlternativeQuestion());\n        const result = await courseDb.loadQuestions(dir);\n        assert.equal(Object.keys(result).length, 2);\n        assert.isFalse(infofile.hasErrors(result['question1']));\n        assert.isFalse(infofile.hasWarnings(result['question1']));\n        assert.isFalse(infofile.hasErrors(result['question2']));\n        assert.isFalse(infofile.hasWarnings(result['question2']));\n        assert.equal(result['question1'].data?.uuid, question1.uuid);\n        assert.equal(result['question2'].data?.uuid, question2.uuid);\n      });\n    });\n\n    it('errors if two questions share a UUID', async () => {\n      await withTempDirectory(async (dir) => {\n        await writeQuestion(dir, 'question1', getQuestion());\n        await writeQuestion(dir, 'question2', getQuestion());\n        await writeQuestion(dir, 'question3', getAlternativeQuestion());\n        const result = await courseDb.loadQuestions(dir);\n        assert.equal(Object.keys(result).length, 3);\n        assert.match(\n          infofile.stringifyWarnings(result['question1']),\n          /UUID.*is used in other questions/,\n        );\n        assert.isFalse(infofile.hasErrors(result['question1']));\n        assert.match(\n          infofile.stringifyWarnings(result['question2']),\n          /UUID.*is used in other questions/,\n        );\n        assert.isFalse(infofile.hasErrors(result['question2']));\n        assert.isFalse(infofile.hasErrors(result['question3']));\n        assert.isFalse(infofile.hasWarnings(result['question3']));\n      });\n    });\n  });\n});\n"]}