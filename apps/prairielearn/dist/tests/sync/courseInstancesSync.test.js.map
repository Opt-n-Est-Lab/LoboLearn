{"version":3,"file":"courseInstancesSync.test.js","sourceRoot":"","sources":["../../../src/tests/sync/courseInstancesSync.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { idsEqual } from '../../lib/id.js';\nimport * as helperDb from '../helperDb.js';\n\nimport * as util from './util.js';\n\n/**\n * Makes an empty course instance.\n */\nfunction makeCourseInstance(): util.CourseInstanceData {\n  return {\n    courseInstance: {\n      uuid: uuidv4(),\n      longName: 'Test course instance',\n    },\n    assessments: {},\n  };\n}\n\ndescribe('Course instance syncing', () => {\n  before('set up testing database', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  beforeEach('reset testing database', helperDb.resetDatabase);\n\n  it('allows nesting of course instances in subfolders', async () => {\n    const courseData = util.getCourseData();\n    const nestedCourseInstanceStructure = [\n      'subfolder1',\n      'subfolder2',\n      'subfolder3',\n      'nestedQuestion',\n    ];\n    const courseInstanceId = nestedCourseInstanceStructure.join('/');\n    courseData.courseInstances[courseInstanceId] = makeCourseInstance();\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === courseInstanceId,\n    );\n    assert.isOk(syncedCourseInstance);\n  });\n\n  it('syncs access rules', async () => {\n    const courseData = util.getCourseData();\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].courseInstance.allowAccess = [\n      {\n        startDate: '2024-01-01T00:00:00',\n        endDate: '2024-01-31T00:00:00',\n        uids: ['student@example.com'],\n      },\n      {\n        startDate: '2024-02-01T00:00:00',\n        endDate: '2024-02-28T00:00:00',\n        institution: 'Any',\n      },\n    ];\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    const syncedAccessRules = await util.dumpTable('course_instance_access_rules');\n    assert.equal(\n      syncedAccessRules.length,\n      courseData.courseInstances[util.COURSE_INSTANCE_ID].courseInstance.allowAccess?.length,\n    );\n\n    // Ensure that the access rules are correctly synced.\n    const firstRule = syncedAccessRules.find((ar) => ar.number === 1);\n    assert.isOk(firstRule);\n    assert.equal(firstRule.start_date.getTime(), new Date('2024-01-01T06:00:00.000Z').getTime());\n    assert.equal(firstRule.end_date.getTime(), new Date('2024-01-31T06:00:00.000Z').getTime());\n    assert.deepEqual(firstRule.uids, ['student@example.com']);\n    assert.isNull(firstRule.institution);\n\n    const secondRule = syncedAccessRules.find((ar) => ar.number === 2);\n    assert.isOk(secondRule);\n    assert.equal(secondRule.start_date.getTime(), new Date('2024-02-01T06:00:00.000Z').getTime());\n    assert.equal(secondRule.end_date.getTime(), new Date('2024-02-28T06:00:00.000Z').getTime());\n    assert.isNull(secondRule.uids);\n    assert.equal(secondRule.institution, 'Any');\n\n    // Ensure that excess access rules are deleted. Delete the first one and sync again.\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].courseInstance.allowAccess.shift();\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const newSyncedAccessRule = await util.dumpTable('course_instance_access_rules');\n    assert.equal(newSyncedAccessRule.length, 1);\n\n    // Ensure the remaining access rule is the correct one.\n    const remainingRule = newSyncedAccessRule[0];\n    assert.equal(\n      remainingRule.start_date.getTime(),\n      new Date('2024-02-01T06:00:00.000Z').getTime(),\n    );\n    assert.equal(remainingRule.end_date.getTime(), new Date('2024-02-28T06:00:00.000Z').getTime());\n    assert.isNull(remainingRule.uids);\n    assert.equal(remainingRule.institution, 'Any');\n  });\n\n  it('soft-deletes and restores course instances', async () => {\n    const { courseData, courseDir } = await util.createAndSyncCourseData();\n    const originalCourseInstance = courseData.courseInstances[util.COURSE_INSTANCE_ID];\n    let syncedCourseInstances = await util.dumpTable('course_instances');\n    const originalSyncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === util.COURSE_INSTANCE_ID,\n    );\n    assert.isOk(originalSyncedCourseInstance);\n\n    delete courseData.courseInstances[util.COURSE_INSTANCE_ID];\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedCourseInstances = await util.dumpTable('course_instances');\n    const deletedSyncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === util.COURSE_INSTANCE_ID,\n    );\n    assert.isOk(deletedSyncedCourseInstance);\n    assert.isNotNull(deletedSyncedCourseInstance?.deleted_at);\n\n    courseData.courseInstances[util.COURSE_INSTANCE_ID] = originalCourseInstance;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedCourseInstances = await util.dumpTable('course_instances');\n    const newSyncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === util.COURSE_INSTANCE_ID,\n    );\n    assert.isOk(newSyncedCourseInstance);\n    assert.isNull(newSyncedCourseInstance?.deleted_at);\n    assert.deepEqual(newSyncedCourseInstance, originalSyncedCourseInstance);\n  });\n\n  it('gracefully handles a missing assessments directory', async () => {\n    const courseData = util.getCourseData();\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await fs.remove(\n      path.join(courseDir, 'courseInstances', util.COURSE_INSTANCE_ID, 'assessments'),\n    );\n    await util.syncCourseData(courseDir);\n  });\n\n  it('syncs empty arrays correctly', async () => {\n    // Note that we want the database to contain empty arrays, not NULL\n    const courseData = util.getCourseData();\n    const courseInstanceAllowAccessRule =\n      courseData.courseInstances[util.COURSE_INSTANCE_ID].courseInstance.allowAccess?.[0];\n    if (!courseInstanceAllowAccessRule) {\n      throw new Error('Could not find course instance allowAccess rule');\n    }\n    courseInstanceAllowAccessRule.uids = [];\n    await util.writeAndSyncCourseData(courseData);\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === util.COURSE_INSTANCE_ID,\n    );\n    const syncedAccessRules = (await util.dumpTable('course_instance_access_rules')).filter((ar) =>\n      idsEqual(ar.course_instance_id, syncedCourseInstance?.id),\n    );\n    assert.lengthOf(syncedAccessRules, 1);\n    const [syncedAccessRule] = syncedAccessRules;\n    const { uids } = syncedAccessRule;\n    assert.isArray(uids, 'uids should be an array');\n    assert.isEmpty(uids, 'uids should be empty');\n  });\n\n  it('records a warning if the same UUID is used in multiple course instances', async () => {\n    const courseData = util.getCourseData();\n    courseData.courseInstances['newinstance'] = courseData.courseInstances[util.COURSE_INSTANCE_ID];\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const firstCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === util.COURSE_INSTANCE_ID,\n    );\n    assert.match(\n      firstCourseInstance?.sync_warnings,\n      /UUID \"a17b1abd-eaf6-45dc-99bc-9890a7fb345e\" is used in other course instances: newinstance/,\n    );\n    const secondCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === 'newinstance',\n    );\n    assert.match(\n      secondCourseInstance?.sync_warnings,\n      new RegExp(\n        `UUID \"a17b1abd-eaf6-45dc-99bc-9890a7fb345e\" is used in other course instances: ${util.COURSE_INSTANCE_ID}`,\n      ),\n    );\n  });\n\n  it('records an error if an allowAccess rule has a start date after the end date', async () => {\n    const courseData = util.getCourseData();\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].courseInstance.allowAccess?.push({\n      startDate: '2020-01-01T11:11:11',\n      endDate: '2019-01-01T00:00:00',\n    });\n    await util.writeAndSyncCourseData(courseData);\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === util.COURSE_INSTANCE_ID,\n    );\n    assert.match(\n      syncedCourseInstance?.sync_errors,\n      /Invalid allowAccess rule: startDate \\(2020-01-01T11:11:11\\) must not be after endDate \\(2019-01-01T00:00:00\\)/,\n    );\n  });\n\n  it('records an error if an allowAccess rule has an invalid start date', async () => {\n    const courseData = util.getCourseData();\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].courseInstance.allowAccess?.push({\n      startDate: 'not a valid date',\n      endDate: '2019-01-01T00:00:00',\n    });\n    await util.writeAndSyncCourseData(courseData);\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === util.COURSE_INSTANCE_ID,\n    );\n    assert.match(\n      syncedCourseInstance?.sync_errors,\n      /Invalid allowAccess rule: startDate \\(not a valid date\\) is not valid/,\n    );\n  });\n\n  it('records an error if an allowAccess rule has an invalid end date', async () => {\n    const courseData = util.getCourseData();\n    courseData.courseInstances[util.COURSE_INSTANCE_ID].courseInstance.allowAccess?.push({\n      startDate: '2020-01-01T11:11:11',\n      endDate: 'not a valid date',\n    });\n    await util.writeAndSyncCourseData(courseData);\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === util.COURSE_INSTANCE_ID,\n    );\n    assert.match(\n      syncedCourseInstance?.sync_errors,\n      /Invalid allowAccess rule: endDate \\(not a valid date\\) is not valid/,\n    );\n  });\n\n  it('records an error if a course instance directory is missing an infoCourseInstance.json file', async () => {\n    const courseData = util.getCourseData();\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await fs.ensureDir(path.join(courseDir, 'courseInstances', 'badCourseInstance'));\n    await util.syncCourseData(courseDir);\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === 'badCourseInstance',\n    );\n    assert.isOk(syncedCourseInstance);\n    assert.match(\n      syncedCourseInstance?.sync_errors,\n      /Missing JSON file: courseInstances\\/badCourseInstance\\/infoCourseInstance.json/,\n    );\n  });\n\n  it('records an error if a nested course instance directory does not eventually contain an infoCourseInstance.json file', async () => {\n    const courseData = util.getCourseData();\n    const nestedCourseInstanceStructure = [\n      'subfolder1',\n      'subfolder2',\n      'subfolder3',\n      'nestedCourseInstance',\n    ];\n    const courseInstanceId = nestedCourseInstanceStructure.join('/');\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await fs.ensureDir(path.join(courseDir, 'courseInstances', ...nestedCourseInstanceStructure));\n    await util.syncCourseData(courseDir);\n\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === courseInstanceId,\n    );\n    assert.isOk(syncedCourseInstance);\n    assert.match(\n      syncedCourseInstance?.sync_errors,\n      /Missing JSON file: courseInstances\\/subfolder1\\/subfolder2\\/subfolder3\\/nestedCourseInstance\\/infoCourseInstance.json/,\n    );\n\n    // We should only record an error for the most deeply nested directories,\n    // not any of the intermediate ones.\n    for (let i = 0; i < nestedCourseInstanceStructure.length - 1; i++) {\n      const partialNestedCourseInstanceStructure = nestedCourseInstanceStructure.slice(0, i);\n      const partialCourseInstanceId = partialNestedCourseInstanceStructure.join('/');\n      const syncedCourseInstance = syncedCourseInstances.find(\n        (ci) => ci.short_name === partialCourseInstanceId,\n      );\n      assert.isUndefined(syncedCourseInstance);\n    }\n  });\n\n  it('correctly handles a new course instance with the same short name as a deleted course instance', async () => {\n    const courseData = util.getCourseData();\n    const courseInstance = makeCourseInstance();\n    courseData.courseInstances['repeatedCourseInstance'] = courseInstance;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // now change the UUID of the course instance and re-sync\n    courseInstance.courseInstance.uuid = '276eeddb-74e1-44e5-bfc5-3c39d79afa85';\n    courseInstance.courseInstance.longName = 'test new long name';\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === 'repeatedCourseInstance' && ci.deleted_at == null,\n    );\n    assert.equal(syncedCourseInstance?.uuid, courseInstance.courseInstance.uuid);\n    assert.equal(syncedCourseInstance?.long_name, courseInstance.courseInstance.longName);\n  });\n\n  it('does not modify deleted course instance long names', async () => {\n    const courseData = util.getCourseData();\n    const originalCourseInstance = makeCourseInstance();\n    courseData.courseInstances['repeatedCourseInstance'] = originalCourseInstance;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // now change the UUID and long name of the course instance and re-sync\n    const newCourseInstance = JSON.parse(JSON.stringify(originalCourseInstance));\n    newCourseInstance.courseInstance.uuid = '49c8b795-dfde-4c13-a040-0fd1ba711dc5';\n    newCourseInstance.courseInstance.longName = 'changed long name';\n    courseData.courseInstances['repeatedCourseInstance'] = newCourseInstance;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const deletedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === 'repeatedCourseInstance' && ci.deleted_at != null,\n    );\n    assert.equal(deletedCourseInstance?.uuid, originalCourseInstance.courseInstance.uuid);\n    assert.equal(deletedCourseInstance?.long_name, originalCourseInstance.courseInstance.longName);\n  });\n\n  it('does not add errors to deleted course instances', async () => {\n    const courseData = util.getCourseData();\n    const originalCourseInstance = makeCourseInstance();\n    courseData.courseInstances['repeatedCourseInstance'] = originalCourseInstance;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // now change the UUID of the course instance, add an error and re-sync\n    const newCourseInstance = JSON.parse(JSON.stringify(originalCourseInstance));\n    newCourseInstance.courseInstance.uuid = '7902a94b-b025-4a33-9987-3b8196581bd2';\n    delete newCourseInstance.courseInstance.longName; // will make the course instance broken\n    courseData.courseInstances['repeatedCourseInstance'] = newCourseInstance;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    // check that the newly-synced course instance has an error\n    const syncedCourseInstances = await util.dumpTable('course_instances');\n    const syncedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === 'repeatedCourseInstance' && ci.deleted_at == null,\n    );\n    assert.equal(syncedCourseInstance?.uuid, newCourseInstance.courseInstance.uuid);\n    assert.match(syncedCourseInstance?.sync_errors, /must have required property 'longName'/);\n\n    // check that the old deleted course instance does not have any errors\n    const deletedCourseInstance = syncedCourseInstances.find(\n      (ci) => ci.short_name === 'repeatedCourseInstance' && ci.deleted_at != null,\n    );\n    assert.equal(deletedCourseInstance?.uuid, originalCourseInstance.courseInstance.uuid);\n    assert.equal(deletedCourseInstance?.sync_errors, null);\n  });\n\n  // https://github.com/PrairieLearn/PrairieLearn/issues/6539\n  it('handles unique sequence of renames and duplicate UUIDs', async () => {\n    const courseData = util.getCourseData();\n\n    // Start with a clean slate.\n    courseData.courseInstances = {};\n\n    // Write and sync a single course instance.\n    const originalCourseInstance = makeCourseInstance();\n    originalCourseInstance.courseInstance.uuid = '0e8097aa-b554-4908-9eac-d46a78d6c249';\n    courseData.courseInstances['a'] = originalCourseInstance;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // Now \"move\" the above course instance to a new directory AND add another with the\n    // same UUID.\n    delete courseData.courseInstances['a'];\n    courseData.courseInstances['b'] = originalCourseInstance;\n    courseData.courseInstances['c'] = originalCourseInstance;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    // Now \"fix\" the duplicate UUID.\n    courseData.courseInstances['c'] = {\n      ...originalCourseInstance,\n      courseInstance: {\n        ...originalCourseInstance.courseInstance,\n        uuid: '0e3097ba-b554-4908-9eac-d46a78d6c249',\n      },\n    };\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    const courseInstances = await util.dumpTable('course_instances');\n\n    // Original course instance should not exist.\n    const originalCourseInstanceRow = courseInstances.find((ci) => ci.short_name === 'a');\n    assert.isUndefined(originalCourseInstanceRow);\n\n    // New course instances should exist and have the correct UUIDs.\n    const newCourseInstanceRow1 = courseInstances.find(\n      (ci) => ci.short_name === 'b' && ci.deleted_at === null,\n    );\n    assert.isNull(newCourseInstanceRow1?.deleted_at);\n    assert.equal(newCourseInstanceRow1?.uuid, '0e8097aa-b554-4908-9eac-d46a78d6c249');\n    const newCourseInstanceRow2 = courseInstances.find(\n      (q) => q.short_name === 'c' && q.deleted_at === null,\n    );\n    assert.isNull(newCourseInstanceRow2?.deleted_at);\n    assert.equal(newCourseInstanceRow2?.uuid, '0e3097ba-b554-4908-9eac-d46a78d6c249');\n  });\n});\n"]}