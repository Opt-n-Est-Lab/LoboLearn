{"version":3,"file":"initialSync.test.js","sourceRoot":"","sources":["../../../src/tests/sync/initialSync.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport * as helperDb from '../helperDb.js';\n\nimport * as util from './util.js';\n\ndescribe('Initial Sync', () => {\n  before('set up testing database', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  beforeEach('reset testing database', helperDb.resetDatabase);\n\n  it('correctly syncs content from disk to the database', async () => {\n    const { courseData, courseDir } = await util.createAndSyncCourseData();\n\n    const courses = await util.dumpTable('pl_courses');\n    assert.lengthOf(courses, 1);\n    const [course] = courses;\n    assert.equal(course.short_name, courseData.course.name);\n    assert.equal(course.path, courseDir);\n    assert.isNull(course.deleted_at);\n\n    const questions = await util.dumpTable('questions');\n    assert.lengthOf(questions, Object.keys(courseData.questions).length);\n    for (const qid of Object.keys(courseData.questions)) {\n      const question = courseData.questions[qid];\n      const syncedQuestion = questions.find((q) => q.qid === qid);\n      assert.isOk(syncedQuestion);\n      assert.equal(syncedQuestion?.uuid, question.uuid);\n      assert.equal(syncedQuestion?.qid, qid);\n      assert.equal(syncedQuestion?.directory, qid);\n      const expectedType = question.type === 'v3' ? 'Freeform' : question.type;\n      assert.equal(syncedQuestion?.type, expectedType);\n      assert.equal(syncedQuestion?.title, question.title);\n    }\n\n    const topics = await util.dumpTable('topics');\n    // Cannot precisely assert the length of the topics array given that we'll\n    // have additional default topics added for us\n    assert(topics.length >= courseData.course.topics.length);\n    for (const topic of courseData.course.topics) {\n      const syncedTopic = topics.find((t) => t.name === topic.name);\n      assert.isOk(syncedTopic);\n      assert.equal(syncedTopic?.name, topic.name);\n      assert.equal(syncedTopic?.color, topic.color);\n      assert.equal(syncedTopic?.description, topic.description);\n    }\n\n    const tags = await util.dumpTable('tags');\n    // As above, we don't know exactly how many tags there will be\n    assert(tags.length >= courseData.course.tags.length);\n    for (const tag of courseData.course.tags) {\n      const syncedTag = tags.find((t) => t.name === tag.name);\n      assert.isOk(syncedTag);\n      assert.equal(syncedTag?.name, tag.name);\n      assert.equal(syncedTag?.color, tag.color);\n      assert.equal(syncedTag?.description, tag.description);\n    }\n  });\n\n  it('is idempotent when syncing the exact same course twice', async () => {\n    const courseData = util.getCourseData();\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    const snapshot = await util.captureDatabaseSnapshot();\n    await util.syncCourseData(courseDir);\n    const newSnapshot = await util.captureDatabaseSnapshot();\n    util.assertSnapshotsMatch(newSnapshot, snapshot);\n  });\n\n  it('does not modify one course when syncing another', async () => {\n    const courseData = util.getCourseData();\n    await util.writeAndSyncCourseData(courseData);\n    const firstSnapshot = await util.captureDatabaseSnapshot();\n    await util.writeAndSyncCourseData(courseData);\n    const secondSnapshot = await util.captureDatabaseSnapshot();\n    util.assertSnapshotSubset(firstSnapshot, secondSnapshot);\n  });\n});\n"]}