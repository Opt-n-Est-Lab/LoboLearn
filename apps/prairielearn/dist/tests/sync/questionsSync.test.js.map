{"version":3,"file":"questionsSync.test.js","sourceRoot":"","sources":["../../../src/tests/sync/questionsSync.test.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,MAAM,UAAU,CAAC;AAC1B,OAAO,EAAE,EAAE,IAAI,MAAM,EAAE,MAAM,MAAM,CAAC;AAEpC,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAIN,MAAM,wBAAwB,CAAC;AAChC,OAAO,KAAK,QAAQ,MAAM,gBAAgB,CAAC;AAE3C,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC;;GAEG;AACH,SAAS,YAAY,CAAC,UAA2B;IAC/C,OAAO;QACL,IAAI,EAAE,MAAM,EAAE;QACd,KAAK,EAAE,eAAe;QACtB,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI;KACxC,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,kBAAkB,CAAC,GAAG;IACnC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC1D,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AACpD,CAAC;AAED,KAAK,UAAU,2BAA2B,CAAC,GAAG;IAC5C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC1D,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC;AAC5E,CAAC;AAED,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,MAAM,CAAC,yBAAyB,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IACnD,KAAK,CAAC,4BAA4B,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEpD,UAAU,CAAC,wBAAwB,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;IAE7D,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,uBAAuB,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,CAAC,CAAC;QAC7F,MAAM,UAAU,GAAG,uBAAuB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrD,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACpE,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAErC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC;QACzE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACvE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC7D,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QAErF,MAAM,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3D,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC7D,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QACrF,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/B,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;QAEhD,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC;QACrD,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC7D,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QACrF,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,iCAAiC;QACjC,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,cAAc,GAAG,kBAAkB,CAAC;QAC1C,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAClE,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC;QACtE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,WAAW,EAAE,uCAAuC,CAAC,CAAC;QAEnF,6DAA6D;QAC7D,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC1C,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC;QAClE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAElC,qEAAqE;QACrE,yBAAyB;QACzB,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;QACnD,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC1C,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC;QAClE,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,mCAAmC;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;QAC9C,MAAM,iBAAiB,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;QACvE,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,GAAG,gBAAgB,CAAC;QAChE,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC;QAChF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACzB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,WAAW,EAAE,yCAAyC,CAAC,CAAC;QAEvF,6DAA6D;QAC7D,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC9C,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC;QAC5E,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACzB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAEpC,uEAAuE;QACvE,yBAAyB;QACzB,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,GAAG,iBAAiB,CAAC;QACjE,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC9C,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC;QAC5E,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,mEAAmE;QACnE,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,WAAW,GAAG,EAAE,CAAC;QACxD,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,sBAAsB,GAAG;YAC9D,KAAK,EAAE,cAAc;YACrB,UAAU,EAAE,YAAY;YACxB,iBAAiB,EAAE,EAAE;SACtB,CAAC;QACF,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/E,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,YAAY,EAAE,iCAAiC,CAAC,CAAC;QAChF,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,YAAY,EAAE,8BAA8B,CAAC,CAAC;QAC7E,MAAM,CAAC,OAAO,CACZ,cAAc,EAAE,sBAAsB,EACtC,2CAA2C,CAC5C,CAAC;QACF,MAAM,CAAC,OAAO,CACZ,cAAc,EAAE,sBAAsB,EACtC,wCAAwC,CACzC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,sBAAsB,GAAG;YAC9D,KAAK,EAAE,cAAc;YACrB,UAAU,EAAE,CAAC,YAAY,EAAE,iBAAiB,CAAC;SAC9C,CAAC;QACF,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/E,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,2BAA2B,EAAE,8BAA8B,CAAC,CAAC;IAC5F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,gBAAgB,GAAG;YACxD,KAAK,EAAE,cAAc;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,CAAC,OAAO,EAAE,iBAAiB,CAAC;SACnC,CAAC;QACF,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/E,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,kEAAkE;QAClE,kEAAkE;QAClE,oBAAoB;QACpB,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACzE,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QAC1E,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QAC3C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5E,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC1E,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,QAAQ,GAAmB;YAC/B,IAAI,EAAE,YAAY;YAClB,KAAK,EAAE,QAAQ;YACf,WAAW,EAAE,wBAAwB;SACtC,CAAC;QACF,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC7D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACpE,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACrC,MAAM,sBAAsB,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1E,yDAAyD;QACzD,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QAC/B,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,MAAM,iBAAiB,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrE,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAC;QAEhE,gDAAgD;QAChD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvE,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,QAAQ,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,MAAM,GAAiB;YAC3B,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,QAAQ;YACf,WAAW,EAAE,sBAAsB;SACpC,CAAC;QACF,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC/D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACpE,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACrC,MAAM,sBAAsB,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1E,uDAAuD;QACvD,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,MAAM,iBAAiB,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrE,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAC;QAEhE,8CAA8C;QAC9C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAChD,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QACjE,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAC/C,CAAC,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,iBAAiB,EAAE,EAAE,CAAC,IAAI,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAC9F,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACnC,MAAM,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,YAAY,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5D,YAAY,CAAC,IAAI,GAAG,UAAU,CAAC;QAC/B,2CAA2C;QAC3C,YAAY,CAAC,OAAO,GAAG;YACrB,IAAI,EAAE,yBAAyB;YAC/B,cAAc,EAAE,CAAC,KAAK,CAAC;SACxB,CAAC;QACF,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACpE,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACrC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/E,MAAM,CAAC,KAAK,CACV,cAAc,EAAE,WAAW,EAC3B,qDAAqD,CACtD,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC5E,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACvE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACpE,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACrC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,mBAAmB,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,CAAC,KAAK,CACV,mBAAmB,EAAE,aAAa,EAClC,+EAA+E,CAChF,CAAC;QACF,MAAM,oBAAoB,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;QACrF,MAAM,CAAC,KAAK,CACV,oBAAoB,EAAE,aAAa,EACnC,IAAI,MAAM,CACR,2EAA2E,IAAI,CAAC,WAAW,EAAE,CAC9F,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;QACrF,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACpE,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;QACrE,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAErC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,aAAa,CAAC,CAAC;QAC5E,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CACV,cAAc,EAAE,WAAW,EAC3B,sDAAsD,CACvD,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+FAA+F,EAAE,KAAK,IAAI,EAAE;QAC7G,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,uBAAuB,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,CAAC,CAAC;QAC7F,MAAM,UAAU,GAAG,uBAAuB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACpE,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,GAAG,uBAAuB,CAAC,CAAC,CAAC;QAClF,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAErC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC;QACzE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CACV,cAAc,EAAE,WAAW,EAC3B,6FAA6F,CAC9F,CAAC;QAEF,yEAAyE;QACzE,oCAAoC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,uBAAuB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5D,MAAM,8BAA8B,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,MAAM,iBAAiB,GAAG,8BAA8B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnE,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,iBAAiB,CAAC,CAAC;YAChF,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACrC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;QACxF,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,QAAQ,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QAC1C,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,GAAG,QAAQ,CAAC;QACpD,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAEpE,kDAAkD;QAClD,QAAQ,CAAC,IAAI,GAAG,sCAAsC,CAAC;QACvD,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,MAAM,cAAc,GAAG,MAAM,2BAA2B,CAAC,kBAAkB,CAAC,CAAC;QAC7E,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,gBAAgB,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QAClD,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,GAAG,gBAAgB,CAAC;QAC5D,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAEpE,4DAA4D;QAC5D,MAAM,WAAW,GAAG,EAAE,GAAG,gBAAgB,EAAE,CAAC;QAC5C,WAAW,CAAC,IAAI,GAAG,sCAAsC,CAAC;QAC1D,WAAW,CAAC,KAAK,GAAG,eAAe,CAAC;QACpC,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,GAAG,WAAW,CAAC;QACvD,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,eAAe,GAAG,eAAe,CAAC,IAAI,CAC1C,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,kBAAkB,IAAI,CAAC,CAAC,UAAU,IAAI,IAAI,CAC5D,CAAC;QACF,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC3D,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,gBAAgB,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QAClD,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,GAAG,gBAAgB,CAAC;QAC5D,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAEpE,gEAAgE;QAChE,MAAM,WAAW,GAAG,EAAE,GAAG,gBAAgB,EAAE,CAAC;QAC5C,WAAW,CAAC,IAAI,GAAG,sCAAsC,CAAC;QAC1D,0DAA0D;QAC1D,OAAO,WAAW,CAAC,KAAK,CAAC;QACzB,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,GAAG,WAAW,CAAC;QACvD,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAE7D,oDAAoD;QACpD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CACzC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,kBAAkB,IAAI,CAAC,CAAC,UAAU,IAAI,IAAI,CAC5D,CAAC;QACF,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,WAAW,EAAE,qCAAqC,CAAC,CAAC;QAEjF,+DAA+D;QAC/D,MAAM,eAAe,GAAG,eAAe,CAAC,IAAI,CAC1C,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,kBAAkB,IAAI,CAAC,CAAC,UAAU,IAAI,IAAI,CAC5D,CAAC;QACF,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC3D,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,2DAA2D;IAC3D,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAExC,4BAA4B;QAC5B,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC;QAE1B,oCAAoC;QACpC,MAAM,gBAAgB,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QAClD,gBAAgB,CAAC,IAAI,GAAG,sCAAsC,CAAC;QAC/D,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC;QAC7C,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAEpE,4EAA4E;QAC5E,aAAa;QACb,OAAO,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACjC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC;QAC7C,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC;QAC7C,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAE7D,gCAAgC;QAChC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG;YAC1B,GAAG,gBAAgB;YACnB,IAAI,EAAE,sCAAsC;SAC7C,CAAC;QACF,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAE7D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAEpD,sCAAsC;QACtC,MAAM,mBAAmB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;QACjE,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;QAExC,yDAAyD;QACzD,MAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC;QACtF,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,sCAAsC,CAAC,CAAC;QAC5E,MAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC;QACtF,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,sCAAsC,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,QAAQ,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QAC1C,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC;QAClC,QAAQ,CAAC,IAAI,GAAG,sCAAsC,CAAC;QACvD,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,GAAG,QAAQ,CAAC;QACtD,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAE9C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,oBAAoB,CAAC,CAAC;QACnF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5B,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { idsEqual } from '../../lib/id.js';\nimport {\n  type QuestionJsonInput,\n  type TagJsonInput,\n  type TopicJsonInput,\n} from '../../schemas/index.js';\nimport * as helperDb from '../helperDb.js';\n\nimport * as util from './util.js';\n\n/**\n * Makes an empty question.\n */\nfunction makeQuestion(courseData: util.CourseData): QuestionJsonInput {\n  return {\n    uuid: uuidv4(),\n    title: 'Test question',\n    type: 'v3',\n    topic: courseData.course.topics[0].name,\n  };\n}\n\nasync function findSyncedQuestion(qid) {\n  const syncedQuestions = await util.dumpTable('questions');\n  return syncedQuestions.find((q) => q.qid === qid);\n}\n\nasync function findSyncedUndeletedQuestion(qid) {\n  const syncedQuestions = await util.dumpTable('questions');\n  return syncedQuestions.find((q) => q.qid === qid && q.deleted_at == null);\n}\n\ndescribe('Question syncing', () => {\n  before('set up testing database', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  beforeEach('reset testing database', helperDb.resetDatabase);\n\n  it('allows nesting of questions in subfolders', async () => {\n    const courseData = util.getCourseData();\n    const nestedQuestionStructure = ['subfolder1', 'subfolder2', 'subfolder3', 'nestedQuestion'];\n    const questionId = nestedQuestionStructure.join('/');\n    courseData.questions[questionId] = makeQuestion(courseData);\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find((q) => q.qid === questionId);\n    assert.isOk(syncedQuestion);\n  });\n\n  it('soft-deletes and restores questions', async () => {\n    const { courseData, courseDir } = await util.createAndSyncCourseData();\n    const oldSyncedQuestions = await util.dumpTable('questions');\n    const oldSyncedQuestion = oldSyncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n\n    const oldQuestion = courseData.questions[util.QUESTION_ID];\n    delete courseData.questions[util.QUESTION_ID];\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const midSyncedQuestions = await util.dumpTable('questions');\n    const midSyncedQuestion = midSyncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n    assert.isOk(midSyncedQuestion);\n    assert.isNotNull(midSyncedQuestion?.deleted_at);\n\n    courseData.questions[util.QUESTION_ID] = oldQuestion;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const newSyncedQuestions = await util.dumpTable('questions');\n    const newSyncedQuestion = newSyncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n    assert.deepEqual(newSyncedQuestion, oldSyncedQuestion);\n  });\n\n  it('handles tags that are not present in infoCourse.json', async () => {\n    // Missing tags should be created\n    const courseData = util.getCourseData();\n    const missingTagName = 'missing tag name';\n    courseData.questions[util.QUESTION_ID].tags?.push(missingTagName);\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    let syncedTags = await util.dumpTable('tags');\n    let syncedTag = syncedTags.find((tag) => tag.name === missingTagName);\n    assert.isOk(syncedTag);\n    assert.isTrue(syncedTag.implicit);\n    assert.isNotEmpty(syncedTag?.description, 'tag should not have empty description');\n\n    // Subsequent syncs with the same data should succeed as well\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedTags = await util.dumpTable('tags');\n    syncedTag = syncedTags.find((tag) => tag.name === missingTagName);\n    assert.isOk(syncedTag);\n    assert.isTrue(syncedTag.implicit);\n\n    // When missing tags are no longer used in any questions, they should\n    // be removed from the DB\n    courseData.questions[util.QUESTION_ID].tags?.pop();\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedTags = await util.dumpTable('tags');\n    syncedTag = syncedTags.find((tag) => tag.name === missingTagName);\n    assert.isUndefined(syncedTag);\n  });\n\n  it('handles topics that are not present in infoCourse.json', async () => {\n    // Missing topics should be created\n    const courseData = util.getCourseData();\n    const missingTopicName = 'missing topic name';\n    const originalTopicName = courseData.questions[util.QUESTION_ID].topic;\n    courseData.questions[util.QUESTION_ID].topic = missingTopicName;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n    let syncedTopics = await util.dumpTable('topics');\n    let syncedTopic = syncedTopics.find((topic) => topic.name === missingTopicName);\n    assert.isOk(syncedTopic);\n    assert.isTrue(syncedTopic.implicit);\n    assert.isNotEmpty(syncedTopic?.description, 'topic should not have empty description');\n\n    // Subsequent syncs with the same data should succeed as well\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedTopics = await util.dumpTable('topics');\n    syncedTopic = syncedTopics.find((topic) => topic.name === missingTopicName);\n    assert.isOk(syncedTopic);\n    assert.isTrue(syncedTopic.implicit);\n\n    // When missing topics are no longer used in any questions, they should\n    // be removed from the DB\n    courseData.questions[util.QUESTION_ID].topic = originalTopicName;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    syncedTopics = await util.dumpTable('topics');\n    syncedTopic = syncedTopics.find((topic) => topic.name === missingTopicName);\n    assert.isUndefined(syncedTopic);\n  });\n\n  it('syncs empty arrays correctly', async () => {\n    // Note that we want the database to contain empty arrays, not NULL\n    const courseData = util.getCourseData();\n    courseData.questions[util.QUESTION_ID].clientFiles = [];\n    courseData.questions[util.QUESTION_ID].externalGradingOptions = {\n      image: 'docker-image',\n      entrypoint: 'entrypoint',\n      serverFilesCourse: [],\n    };\n    await util.writeAndSyncCourseData(courseData);\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n    assert.isArray(syncedQuestion?.client_files, 'client_files should be an array');\n    assert.isEmpty(syncedQuestion?.client_files, 'client_files should be empty');\n    assert.isArray(\n      syncedQuestion?.external_grading_files,\n      'external_grading_files should be an array',\n    );\n    assert.isEmpty(\n      syncedQuestion?.external_grading_files,\n      'external_grading_files should be empty',\n    );\n  });\n\n  it('syncs entrypoint as an array', async () => {\n    const courseData = util.getCourseData();\n    courseData.questions[util.QUESTION_ID].externalGradingOptions = {\n      image: 'docker-image',\n      entrypoint: ['entrypoint', 'second argument'],\n    };\n    await util.writeAndSyncCourseData(courseData);\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n    assert.equal(syncedQuestion?.external_grading_entrypoint, \"entrypoint 'second argument'\");\n  });\n\n  it('syncs workspace args as an array', async () => {\n    const courseData = util.getCourseData();\n    courseData.questions[util.QUESTION_ID].workspaceOptions = {\n      image: 'docker-image',\n      port: 8080,\n      home: '/home/user',\n      args: ['first', 'second argument'],\n    };\n    await util.writeAndSyncCourseData(courseData);\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n    assert.equal(syncedQuestion?.workspace_args, \"first 'second argument'\");\n  });\n\n  it('allows the same UUID to be used in different courses', async () => {\n    // We'll just sync the same course from two different directories.\n    // Since courses are identified by directory, this will create two\n    // separate courses.\n    const courseData = util.getCourseData();\n    const firstDirectory = await util.writeCourseToTempDirectory(courseData);\n    const secondDirectory = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(firstDirectory);\n    await util.syncCourseData(secondDirectory);\n    const syncedQuestions = await util.dumpTable('questions');\n    const questions = syncedQuestions.filter((q) => q.qid === util.QUESTION_ID);\n    assert.equal(questions.length, 2);\n  });\n\n  it('preserves question topic even if question topic is deleted', async () => {\n    const courseData = util.getCourseData();\n    const newTopic: TopicJsonInput = {\n      name: 'test topic',\n      color: 'green1',\n      description: 'test topic description',\n    };\n    courseData.course.topics.push(newTopic);\n    courseData.questions[util.QUESTION_ID].topic = newTopic.name;\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    const originalSyncedQuestion = await findSyncedQuestion(util.QUESTION_ID);\n\n    // Now delete the topic, but leave the question in place.\n    courseData.course.topics.pop();\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const newSyncedQuestion = await findSyncedQuestion(util.QUESTION_ID);\n    assert.equal(newSyncedQuestion?.id, originalSyncedQuestion?.id);\n\n    // Check that we have a valid auto-created topic\n    const syncedTopics = await util.dumpTable('topics');\n    const syncedTopic = syncedTopics.find((t) => t.name === newTopic.name);\n    assert.equal(newSyncedQuestion?.topic_id, syncedTopic?.id);\n    assert.isTrue(syncedTopic?.implicit);\n  });\n\n  it('preserves question tag even if question tag is deleted', async () => {\n    const courseData = util.getCourseData();\n    const newTag: TagJsonInput = {\n      name: 'test tag',\n      color: 'green1',\n      description: 'test tag description',\n    };\n    courseData.course.tags.push(newTag);\n    courseData.questions[util.QUESTION_ID].tags?.push(newTag.name);\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    const originalSyncedQuestion = await findSyncedQuestion(util.QUESTION_ID);\n\n    // Now delete the tag, but leave the question in place.\n    courseData.course.tags.pop();\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const newSyncedQuestion = await findSyncedQuestion(util.QUESTION_ID);\n    assert.equal(newSyncedQuestion?.id, originalSyncedQuestion?.id);\n\n    // Check that we have a valid auto-created tag\n    const syncedTags = await util.dumpTable('tags');\n    const syncedTag = syncedTags.find((t) => t.name === newTag.name);\n    const syncedQuestionTags = await util.dumpTable('question_tags');\n    const syncedQuestionTag = syncedQuestionTags.find(\n      (qt) => idsEqual(qt.question_id, newSyncedQuestion?.id) && idsEqual(qt.tag_id, syncedTag?.id),\n    );\n    assert.isTrue(syncedTag?.implicit);\n    assert.ok(syncedQuestionTag);\n  });\n\n  it('records an error if \"options\" object is invalid', async () => {\n    const courseData = util.getCourseData();\n    const testQuestion = courseData.questions[util.QUESTION_ID];\n    testQuestion.type = 'Checkbox';\n    // Bad options - missing `incorrectAnswers`\n    testQuestion.options = {\n      text: 'is this a bad question?',\n      correctAnswers: ['yes'],\n    };\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n    assert.match(\n      syncedQuestion?.sync_errors,\n      /data must have required property 'incorrectAnswers'/,\n    );\n  });\n\n  it('records a warning if same UUID is used in multiple questions', async () => {\n    const courseData = util.getCourseData();\n    courseData.questions['test2'] = courseData.questions[util.QUESTION_ID];\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await util.syncCourseData(courseDir);\n    const syncedQuestions = await util.dumpTable('questions');\n    const firstSyncedQuestion = syncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n    assert.match(\n      firstSyncedQuestion?.sync_warnings,\n      /UUID \"f4ff2429-926e-4358-9e1f-d2f377e2036a\" is used in other questions: test2/,\n    );\n    const secondSyncedQuestion = syncedQuestions.find((q) => q.qid === util.QUESTION_ID);\n    assert.match(\n      secondSyncedQuestion?.sync_warnings,\n      new RegExp(\n        `UUID \"f4ff2429-926e-4358-9e1f-d2f377e2036a\" is used in other questions: ${util.QUESTION_ID}`,\n      ),\n    );\n  });\n\n  it('records an error if a question directory is missing an info.json file', async () => {\n    const courseData = util.getCourseData();\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await fs.ensureDir(path.join(courseDir, 'questions', 'badQuestion'));\n    await util.syncCourseData(courseDir);\n\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find((q) => q.qid === 'badQuestion');\n    assert.isOk(syncedQuestion);\n    assert.match(\n      syncedQuestion?.sync_errors,\n      /Missing JSON file: questions\\/badQuestion\\/info.json/,\n    );\n  });\n\n  it('records an error if a nested question directory does not eventually contain an info.json file', async () => {\n    const courseData = util.getCourseData();\n    const nestedQuestionStructure = ['subfolder1', 'subfolder2', 'subfolder3', 'nestedQuestion'];\n    const questionId = nestedQuestionStructure.join('/');\n    const courseDir = await util.writeCourseToTempDirectory(courseData);\n    await fs.ensureDir(path.join(courseDir, 'questions', ...nestedQuestionStructure));\n    await util.syncCourseData(courseDir);\n\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find((q) => q.qid === questionId);\n    assert.isOk(syncedQuestion);\n    assert.match(\n      syncedQuestion?.sync_errors,\n      /Missing JSON file: questions\\/subfolder1\\/subfolder2\\/subfolder3\\/nestedQuestion\\/info.json/,\n    );\n\n    // We should only record an error for the most deeply nested directories,\n    // not any of the intermediate ones.\n    for (let i = 0; i < nestedQuestionStructure.length - 1; i++) {\n      const partialNestedQuestionStructure = nestedQuestionStructure.slice(0, i);\n      const partialQuestionId = partialNestedQuestionStructure.join('/');\n      const syncedQuestion = syncedQuestions.find((q) => q.qid === partialQuestionId);\n      assert.isUndefined(syncedQuestion);\n    }\n  });\n\n  it('correctly handles a new question with the same QID as a deleted question', async () => {\n    const courseData = util.getCourseData();\n    const question = makeQuestion(courseData);\n    courseData.questions['repeatedQuestion'] = question;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // now change the UUID of the question and re-sync\n    question.uuid = '49c8b795-dfde-4c13-a040-0fd1ba711dc5';\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedQuestion = await findSyncedUndeletedQuestion('repeatedQuestion');\n    assert.equal(syncedQuestion?.uuid, question.uuid);\n  });\n\n  it('does not modify deleted questions', async () => {\n    const courseData = util.getCourseData();\n    const originalQuestion = makeQuestion(courseData);\n    courseData.questions['repeatedQuestion'] = originalQuestion;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // now change the UUID and title of the question and re-sync\n    const newQuestion = { ...originalQuestion };\n    newQuestion.uuid = '49c8b795-dfde-4c13-a040-0fd1ba711dc5';\n    newQuestion.title = 'Changed title';\n    courseData.questions['repeatedQuestion'] = newQuestion;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n    const syncedQuestions = await util.dumpTable('questions');\n    const deletedQuestion = syncedQuestions.find(\n      (q) => q.qid === 'repeatedQuestion' && q.deleted_at != null,\n    );\n    assert.equal(deletedQuestion?.uuid, originalQuestion.uuid);\n    assert.equal(deletedQuestion?.title, originalQuestion.title);\n  });\n\n  it('does not add errors to deleted questions', async () => {\n    const courseData = util.getCourseData();\n    const originalQuestion = makeQuestion(courseData);\n    courseData.questions['repeatedQuestion'] = originalQuestion;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // now change the UUID of the question, add an error and re-sync\n    const newQuestion = { ...originalQuestion };\n    newQuestion.uuid = '49c8b795-dfde-4c13-a040-0fd1ba711dc5';\n    // @ts-expect-error -- intentionally breaking the question\n    delete newQuestion.title;\n    courseData.questions['repeatedQuestion'] = newQuestion;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    // check that the newly-synced question has an error\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find(\n      (q) => q.qid === 'repeatedQuestion' && q.deleted_at == null,\n    );\n    assert.equal(syncedQuestion?.uuid, newQuestion.uuid);\n    assert.match(syncedQuestion?.sync_errors, /must have required property 'title'/);\n\n    // check that the old deleted question does not have any errors\n    const deletedQuestion = syncedQuestions.find(\n      (q) => q.qid === 'repeatedQuestion' && q.deleted_at != null,\n    );\n    assert.equal(deletedQuestion?.uuid, originalQuestion.uuid);\n    assert.equal(deletedQuestion?.sync_errors, null);\n  });\n\n  // https://github.com/PrairieLearn/PrairieLearn/issues/6539\n  it('handles unique sequence of renames and duplicate UUIDs', async () => {\n    const courseData = util.getCourseData();\n\n    // Start with a clean slate.\n    courseData.questions = {};\n\n    // Write and sync a single question.\n    const originalQuestion = makeQuestion(courseData);\n    originalQuestion.uuid = '0e8097aa-b554-4908-9eac-d46a78d6c249';\n    courseData.questions['a'] = originalQuestion;\n    const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n    // Now \"move\" the above question to a new directory AND add another with the\n    // same UUID.\n    delete courseData.questions['a'];\n    courseData.questions['b'] = originalQuestion;\n    courseData.questions['c'] = originalQuestion;\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    // Now \"fix\" the duplicate UUID.\n    courseData.questions['c'] = {\n      ...originalQuestion,\n      uuid: '0e3097ba-b554-4908-9eac-d46a78d6c249',\n    };\n    await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n    const questions = await util.dumpTable('questions');\n\n    // Original question should not exist.\n    const originalQuestionRow = questions.find((q) => q.qid === 'a');\n    assert.isUndefined(originalQuestionRow);\n\n    // New questions should exist and have the correct UUIDs.\n    const newQuestionRow1 = questions.find((q) => q.qid === 'b' && q.deleted_at === null);\n    assert.isNull(newQuestionRow1?.deleted_at);\n    assert.equal(newQuestionRow1?.uuid, '0e8097aa-b554-4908-9eac-d46a78d6c249');\n    const newQuestionRow2 = questions.find((q) => q.qid === 'c' && q.deleted_at === null);\n    assert.isNull(newQuestionRow2?.deleted_at);\n    assert.equal(newQuestionRow2?.uuid, '0e3097ba-b554-4908-9eac-d46a78d6c249');\n  });\n\n  it('syncs draft questions', async () => {\n    const courseData = util.getCourseData();\n    const question = makeQuestion(courseData);\n    question.title = 'Draft question';\n    question.uuid = '0e8097aa-b554-4908-9eac-d46a78d6c249';\n    courseData.questions['__drafts__/draft_1'] = question;\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedQuestions = await util.dumpTable('questions');\n    const syncedQuestion = syncedQuestions.find((q) => q.qid === '__drafts__/draft_1');\n    assert.isOk(syncedQuestion);\n    assert.isTrue(syncedQuestion.draft);\n  });\n});\n"]}