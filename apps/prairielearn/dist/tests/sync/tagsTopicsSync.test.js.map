{"version":3,"file":"tagsTopicsSync.test.js","sourceRoot":"","sources":["../../../src/tests/sync/tagsTopicsSync.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport type { TagJsonInput, TopicJsonInput } from '../../schemas/infoCourse.js';\nimport * as helperDb from '../helperDb.js';\n\nimport * as util from './util.js';\n\n/**\n * Topics and tags are currently almost identical, so we test them together\n * with a set of helper functions.\n */\n\n/**\n * Makes a new tag/topic to test with.\n */\nfunction makeEntity(): TagJsonInput | TopicJsonInput {\n  return {\n    name: 'a new entity',\n    color: 'green1',\n    description: 'description for a new entity',\n  };\n}\n\n/**\n * Checks that the entity present in the database matches the data\n * from the original entity in `infoCourse.json`.\n *\n * @param syncedEntity - The entity from the database.\n * @param entity - The entity from `infoCourse.json`.\n */\nfunction checkEntity(syncedEntity: any, entity: any) {\n  assert.isOk(syncedEntity);\n  assert.equal(syncedEntity.name, entity.name);\n  assert.equal(syncedEntity.color, entity.color);\n  assert.equal(syncedEntity.description, entity.description);\n}\n\nfunction checkEntityOrder(entityName, syncedEntities, courseData) {\n  courseData.course[entityName].forEach((entity, index) => {\n    assert.equal(syncedEntities.find((e) => e.name === entity.name).number, index + 1);\n  });\n}\n\nasync function testAdd(entityName: 'tags' | 'topics') {\n  const { courseData, courseDir } = await util.createAndSyncCourseData();\n  const newEntity = makeEntity();\n  courseData.course[entityName].push(newEntity);\n  await util.overwriteAndSyncCourseData(courseData, courseDir);\n  const syncedEntities = await util.dumpTable(entityName);\n  const syncedEntity = syncedEntities.find((e) => e.name === newEntity.name);\n  checkEntity(syncedEntity, newEntity);\n  checkEntityOrder(entityName, syncedEntities, courseData);\n}\n\nasync function testAddMissingDescription(entityName: 'tags' | 'topics') {\n  const { courseData, courseDir } = await util.createAndSyncCourseData();\n  const newEntity = makeEntity();\n  delete newEntity.description;\n  courseData.course[entityName].push(newEntity);\n  await util.overwriteAndSyncCourseData(courseData, courseDir);\n  const syncedEntities = await util.dumpTable(entityName);\n  const syncedEntity = syncedEntities.find((e) => e.name === newEntity.name);\n  checkEntity(syncedEntity, { ...newEntity, description: '' });\n  checkEntityOrder(entityName, syncedEntities, courseData);\n}\n\nasync function testRemove(entityName: 'tags' | 'topics') {\n  const courseData = util.getCourseData();\n  const oldEntity = makeEntity();\n  courseData.course[entityName].unshift(oldEntity);\n  const { courseDir } = await util.writeAndSyncCourseData(courseData);\n  courseData.course[entityName].splice(0, 1);\n  await util.overwriteAndSyncCourseData(courseData, courseDir);\n  const syncedEntities = await util.dumpTable(entityName);\n  const syncedEntity = syncedEntities.find((e) => e.name === oldEntity.name);\n  assert.isUndefined(syncedEntity);\n  checkEntityOrder(entityName, syncedEntities, courseData);\n}\n\nasync function testRemoveAll(entityName: 'tags' | 'topics') {\n  const courseData = util.getCourseData();\n  const { courseDir } = await util.writeAndSyncCourseData(courseData);\n\n  // Remove all questions that could reference the entity.\n  courseData.questions = {};\n\n  // Remove all entities.\n  courseData.course[entityName] = [];\n\n  // Sync the course.\n  await util.overwriteAndSyncCourseData(courseData, courseDir);\n\n  // Ensure that the entity table is empty.\n  const syncedEntities = await util.dumpTable(entityName);\n  assert.isEmpty(syncedEntities);\n}\n\nasync function testRename(entityName: 'tags' | 'topics') {\n  const courseData = util.getCourseData();\n  const oldEntity = makeEntity();\n  courseData.course[entityName].unshift(oldEntity);\n  const { courseDir } = await util.writeAndSyncCourseData(courseData);\n  const oldName = courseData.course[entityName][0].name;\n  const newName = 'new name';\n  courseData.course[entityName][0].name = newName;\n  await util.overwriteAndSyncCourseData(courseData, courseDir);\n  const syncedEntities = await util.dumpTable(entityName);\n  assert.isUndefined(syncedEntities.find((e) => e.name === oldName));\n  const syncedEntity = syncedEntities.find((as) => as.name === newName);\n  checkEntity(syncedEntity, oldEntity);\n  checkEntityOrder(entityName, syncedEntities, courseData);\n}\n\nasync function testDuplicate(entityName: 'tags' | 'topics') {\n  const courseData = util.getCourseData();\n  const newEntity1 = makeEntity();\n  const newEntity2 = makeEntity();\n  newEntity2.color = 'green2';\n  newEntity2.description = 'description for another new entity';\n  courseData.course[entityName].push(newEntity1);\n  courseData.course[entityName].push(newEntity2);\n  await util.writeAndSyncCourseData(courseData);\n  const syncedEntities = await util.dumpTable(entityName);\n  const syncedEntity = syncedEntities.find((as) => as.name === newEntity1.name);\n  checkEntity(syncedEntity, newEntity2);\n  const syncedCourses = await util.dumpTable('pl_courses');\n  const syncedCourse = syncedCourses.find((c) => c.short_name === courseData.course.name);\n  assert.match(syncedCourse?.sync_warnings, new RegExp(`Found duplicates in '${entityName}'`));\n}\n\nasync function testImplicit(entityName: 'tags' | 'topics') {\n  const courseData = util.getCourseData();\n  const question = courseData.questions[util.QUESTION_ID];\n  if (entityName === 'tags') {\n    question.tags = ['implicit'];\n  } else {\n    question.topic = 'implicit';\n  }\n  await util.writeAndSyncCourseData(courseData);\n  const syncedEntities = await util.dumpTable(entityName);\n  const syncedEntity = syncedEntities.find((as) => as.name === 'implicit');\n  checkEntity(syncedEntity, {\n    name: 'implicit',\n    color: 'gray1',\n    description: 'implicit',\n    implicit: true,\n    // Implicit entities should come last.\n    number: syncedEntities.length,\n  });\n}\n\ndescribe('Tag/topic syncing', () => {\n  before('set up testing database', helperDb.before);\n  after('tear down testing database', helperDb.after);\n\n  beforeEach('reset testing database', helperDb.resetDatabase);\n\n  it('adds a new tag', async () => {\n    await testAdd('tags');\n  });\n\n  it('adds a new topic', async () => {\n    await testAdd('topics');\n  });\n\n  it('adds a new tag with missing description', async () => {\n    await testAddMissingDescription('tags');\n  });\n\n  it('adds a new topic with missing description', async () => {\n    await testAddMissingDescription('topics');\n  });\n\n  it('removes a tag', async () => {\n    await testRemove('tags');\n  });\n\n  it('removes a topic', async () => {\n    await testRemove('topics');\n  });\n\n  it('removes all tags', async () => {\n    await testRemoveAll('tags');\n  });\n\n  it('removes all topics', async () => {\n    await testRemoveAll('topics');\n  });\n\n  it('renames a tag', async () => {\n    await testRename('tags');\n  });\n\n  it('renames a topic', async () => {\n    await testRename('topics');\n  });\n\n  it('records a warning if two tags have the same name', async () => {\n    await testDuplicate('tags');\n  });\n\n  it('records a warning if two topics have the same name', async () => {\n    await testDuplicate('topics');\n  });\n\n  it('syncs an implicit tag', async () => {\n    await testImplicit('tags');\n  });\n\n  it('syncs an implicit topic', async () => {\n    await testImplicit('topics');\n  });\n\n  it('adds corresponding default tags if used by questions but not specified in courseData', async () => {\n    const courseData = util.getCourseData();\n\n    // The symbolic tag is in DEFAULT_TAGS but not in courseData\n    courseData.questions[util.QUESTION_ID]?.tags?.push('symbolic');\n\n    // Similarly, the drawing tag is in DEFAULT_TAGS but not in courseData\n    courseData.questions[util.QUESTION_ID]?.tags?.push('drawing');\n\n    await util.writeAndSyncCourseData(courseData);\n\n    const syncedTags = await util.dumpTable('tags');\n\n    // Ensure that the symbolic tag was added and matches the corresponding tag in DEFAULT_TAGS\n    const syncedSymbolicTag = syncedTags.find((t) => t.name === 'symbolic');\n    checkEntity(syncedSymbolicTag, {\n      name: 'symbolic',\n      color: 'blue1',\n      description: 'The answer format is a symbolic expression.',\n    });\n\n    // Similarly, ensure that the drawing tag was added and matches the corresponding tag in DEFAULT_TAGS\n    const syncedDrawingTag = syncedTags.find((t) => t.name === 'drawing');\n    checkEntity(syncedDrawingTag, {\n      name: 'drawing',\n      color: 'yellow1',\n      description:\n        'The answer format requires drawing on a canvas to input a graphical representation of an answer.',\n    });\n  });\n\n  /**\n   * This tests a specific case that at one point we didn't handle correctly: a\n   * course without any explicit topics and with a question that uses a\n   * topic that isn't in the list of defaults.\n   */\n  it('handles course with only a single implicit topic', async () => {\n    const courseData = util.getCourseData();\n\n    // Remove all course topics.\n    courseData.course.topics = [];\n\n    // Remove all course instances.\n    courseData.courseInstances = {};\n\n    // Save a reference to the test question.\n    const testQuestion = courseData.questions[util.QUESTION_ID];\n\n    // Remove all questions.\n    courseData.questions = {};\n\n    // Add a single question that uses a topic that isn't in the list of defaults.\n    courseData.questions[util.QUESTION_ID] = testQuestion;\n    testQuestion.topic = 'X';\n\n    // Sync the course.\n    await util.writeAndSyncCourseData(courseData);\n\n    // Assert that the expected topic is present and that it has the correct number.\n    const syncedTopics = await util.dumpTable('topics');\n    assert.lengthOf(syncedTopics, 1);\n    assert.equal(syncedTopics[0].name, 'X');\n    assert.equal(syncedTopics[0].number, 1);\n  });\n\n  it('handles course with only a single implicit tag', async () => {\n    const courseData = util.getCourseData();\n\n    // Remove all course tags.\n    courseData.course.tags = [];\n\n    // Remove all course instances.\n    courseData.courseInstances = {};\n\n    // Save a reference to the test question.\n    const testQuestion = courseData.questions[util.QUESTION_ID];\n\n    // Remove all questions.\n    courseData.questions = {};\n\n    // Add a single question that uses a tag that isn't in the list of defaults.\n    courseData.questions[util.QUESTION_ID] = testQuestion;\n    testQuestion.tags = ['X'];\n\n    // Sync the course.\n    await util.writeAndSyncCourseData(courseData);\n\n    // Assert that the expected tag is present and that it has the correct number.\n    const syncedTags = await util.dumpTable('tags');\n    assert.lengthOf(syncedTags, 1);\n    assert.equal(syncedTags[0].name, 'X');\n    assert.equal(syncedTags[0].number, 1);\n  });\n});\n"]}