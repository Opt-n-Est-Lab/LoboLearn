{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/tests/sync/util.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { assert } from 'chai';\nimport stringify from 'fast-json-stable-stringify';\nimport fs from 'fs-extra';\nimport * as tmp from 'tmp-promise';\nimport { type z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport type {\n  AssessmentJsonInput,\n  CourseInstanceJsonInput,\n  CourseJsonInput,\n  CourseOptionsJson,\n  QuestionJsonInput,\n  TagJsonInput,\n  TopicJsonInput,\n} from '../../schemas/index.js';\nimport * as syncFromDisk from '../../sync/syncFromDisk.js';\n\nexport interface CourseInstanceData {\n  assessments: Record<string, AssessmentJsonInput>;\n  courseInstance: CourseInstanceJsonInput;\n}\n\nexport interface CourseData {\n  course: CourseJsonInput;\n  questions: Record<string, QuestionJsonInput>;\n  courseInstances: Record<string, CourseInstanceData>;\n}\n\n/**\n * Accepts a CourseData object and creates a PrairieLearn course directory\n * structure from it. Returns the path to the newly-created directory.\n *\n * @param courseData - The course data to write to disk\n * @returns The path to the directory containing the course data\n */\nexport async function writeCourseToTempDirectory(courseData: CourseData): Promise<string> {\n  const { path: coursePath } = await tmp.dir({ unsafeCleanup: true });\n  await writeCourseToDirectory(courseData, coursePath);\n  return coursePath;\n}\n\n/**\n * Accepts a CourseData object and writes it as a PrairieLearn course\n * into the given directory. Removes any existing content from the\n * directory.\n *\n * @param courseData - The course data to write to disk\n * @param coursePath - The path to the directory to write to\n */\nexport async function writeCourseToDirectory(courseData: CourseData, coursePath: string) {\n  await fs.emptyDir(coursePath);\n\n  // infoCourse.json\n  const courseInfoPath = path.join(coursePath, 'infoCourse.json');\n  await fs.writeJSON(courseInfoPath, courseData.course);\n\n  // Write all questions\n  const questionsPath = path.join(coursePath, 'questions');\n  await fs.ensureDir(questionsPath);\n  for (const qid of Object.keys(courseData.questions)) {\n    // Handle nested questions - split on '/' and use components to construct\n    // the nested directory structure.\n    const questionPath = path.join(questionsPath, ...qid.split('/'));\n    await fs.ensureDir(questionPath);\n    const questionInfoPath = path.join(questionPath, 'info.json');\n    await fs.writeJSON(questionInfoPath, courseData.questions[qid]);\n  }\n\n  // Write all course instances\n  const courseInstancesPath = path.join(coursePath, 'courseInstances');\n  await fs.ensureDir(courseInstancesPath);\n  for (const shortName of Object.keys(courseData.courseInstances)) {\n    const courseInstance = courseData.courseInstances[shortName];\n    // Handle nested course instances - split on '/' and use components to construct\n    // the nested directory structure.\n    const courseInstancePath = path.join(courseInstancesPath, ...shortName.split('/'));\n    await fs.ensureDir(courseInstancePath);\n    const courseInstanceInfoPath = path.join(courseInstancePath, 'infoCourseInstance.json');\n    await fs.writeJSON(courseInstanceInfoPath, courseInstance.courseInstance);\n\n    // Write all assessments for this course instance\n    const assessmentsPath = path.join(courseInstancePath, 'assessments');\n    await fs.ensureDir(assessmentsPath);\n    for (const assessmentName of Object.keys(courseInstance.assessments)) {\n      // Handle nested assessments - split on '/' and use components to construct\n      // the nested directory structure.\n      const assessmentPath = path.join(assessmentsPath, ...assessmentName.split('/'));\n      await fs.ensureDir(assessmentPath);\n      const assessmentInfoPath = path.join(assessmentPath, 'infoAssessment.json');\n      await fs.writeJSON(assessmentInfoPath, courseInstance.assessments[assessmentName]);\n    }\n  }\n}\n\nexport const QUESTION_ID = 'test';\nexport const ALTERNATIVE_QUESTION_ID = 'test2';\nexport const MANUAL_GRADING_QUESTION_ID = 'test_manual';\nexport const WORKSPACE_QUESTION_ID = 'workspace';\nexport const COURSE_INSTANCE_ID = 'Fa19';\nexport const ASSESSMENT_ID = 'test';\n\nconst course = {\n  uuid: '5d14d80e-b0b8-494e-afed-f5a47497f5cb',\n  name: 'TEST 101',\n  title: 'Test Course',\n  assessmentSets: [\n    {\n      name: 'TEST',\n      abbreviation: 'Test',\n      heading: 'Testing set',\n      color: 'red1',\n    },\n    {\n      name: 'ANOTHER TEST',\n      abbreviation: 'Another Test',\n      heading: 'Another testing set',\n      color: 'red2',\n    },\n    {\n      name: 'PRIVATE SET',\n      abbreviation: 'Private',\n      heading: 'Used by the default assessment, do not use in your own tests',\n      color: 'red2',\n    },\n  ],\n  assessmentModules: [\n    {\n      name: 'TEST',\n      heading: 'Test module',\n    },\n  ],\n  topics: [\n    {\n      name: 'Test',\n      color: 'gray1',\n      description: 'A test topic',\n    },\n    {\n      name: 'Another test',\n      color: 'gray2',\n      description: 'Another test topic',\n    },\n  ] as TopicJsonInput[],\n  tags: [\n    {\n      name: 'test',\n      color: 'blue1',\n      description: 'A test tag',\n    },\n    {\n      name: 'another test',\n      color: 'blue2',\n      description: 'Another test tag',\n    },\n  ] as TagJsonInput[],\n  options: undefined as CourseOptionsJson | undefined,\n} satisfies CourseJsonInput;\n\nconst questions: Record<string, QuestionJsonInput> = {\n  private: {\n    uuid: 'aff9236d-4f40-41fb-8c34-f97aed016535',\n    title: 'Test question',\n    topic: 'Test',\n    tags: ['test'],\n    type: 'v3',\n  },\n  [QUESTION_ID]: {\n    uuid: 'f4ff2429-926e-4358-9e1f-d2f377e2036a',\n    title: 'Test question',\n    topic: 'Test',\n    tags: ['test'],\n    type: 'v3',\n  },\n  [ALTERNATIVE_QUESTION_ID]: {\n    uuid: '697a6188-8215-4806-92a1-592987342b9e',\n    title: 'Another test question',\n    topic: 'Test',\n    tags: ['test'],\n    type: 'Calculation',\n  },\n  [MANUAL_GRADING_QUESTION_ID]: {\n    uuid: '2798b1ba-06e0-4ddf-9e5d-765fcca08a46',\n    title: 'Test question',\n    topic: 'Test',\n    gradingMethod: 'Manual',\n    tags: ['test'],\n    type: 'v3',\n  },\n  [WORKSPACE_QUESTION_ID]: {\n    uuid: '894927f7-19b3-451d-8ad1-75974ad2ffb7',\n    title: 'Workspace test question',\n    topic: 'Workspace',\n    tags: ['test'],\n    type: 'v3',\n    workspaceOptions: {\n      image: 'prairielearn/workspace-vscode-python',\n      port: 8080,\n      home: '/home/coder/workspace',\n      gradedFiles: ['fibonacci.py'],\n    },\n  },\n};\n\nconst courseInstances: Record<string, CourseInstanceData> = {\n  [COURSE_INSTANCE_ID]: {\n    assessments: {\n      [ASSESSMENT_ID]: {\n        uuid: '73432669-2663-444e-ade5-43f689a50dea',\n        title: 'Test assessment',\n        type: 'Exam',\n        set: 'PRIVATE SET',\n        number: '100',\n        allowAccess: [\n          {\n            mode: 'Exam',\n          },\n        ],\n        zones: [\n          {\n            title: 'zone 1',\n            questions: [\n              {\n                points: 10,\n                alternatives: [{ id: 'private' }],\n              },\n            ],\n          },\n        ],\n      },\n    },\n    courseInstance: {\n      uuid: 'a17b1abd-eaf6-45dc-99bc-9890a7fb345e',\n      longName: 'Testing instance',\n      allowAccess: [\n        {\n          startDate: '2000-01-01T00:00:00',\n          endDate: '3000-01-01T00:00:00',\n        },\n      ],\n    },\n  },\n};\n\n/**\n * @returns The base course data for syncing testing\n */\nexport function getCourseData() {\n  // Copy all data with `structuredClone` to ensure that mutations to nested\n  // objects aren't reflected in the original objects.\n  return structuredClone({\n    course,\n    questions,\n    courseInstances,\n  });\n}\n\nexport function getFakeLogger() {\n  return {\n    verbose: () => {},\n    debug: () => {},\n    info: () => {},\n    warn: () => {},\n    error: () => {},\n  };\n}\n\n/**\n * Async wrapper for syncing course data from a directory. Also stubs out the\n * logger interface.\n *\n * @param courseDir - The path to the course directory\n */\nexport async function syncCourseData(courseDir: string) {\n  const logger = getFakeLogger();\n  return await syncFromDisk.syncOrCreateDiskToSql(courseDir, logger);\n}\n\nexport async function createAndSyncCourseData() {\n  const courseData = getCourseData();\n  const courseDir = await writeCourseToTempDirectory(courseData);\n  const syncResults = await syncCourseData(courseDir);\n\n  return {\n    courseData,\n    courseDir,\n    syncResults,\n  };\n}\n\n/**\n * Writes the given course data to a new temporary directory and returns the\n * path to the directory.\n *\n * @param courseData - The course data to write and sync\n * @returns The path to the new temp directory and the sync results\n */\nexport async function writeAndSyncCourseData(courseData: CourseData): Promise<{\n  courseDir: string;\n  syncResults: syncFromDisk.SyncResults;\n}> {\n  const courseDir = await writeCourseToTempDirectory(courseData);\n  const syncResults = await syncCourseData(courseDir);\n  return { courseDir, syncResults };\n}\n\n/**\n * Overwrites the course data in the given directory and\n *\n * @param courseData - The course data write and sync\n * @param courseDir - The path to write the course data to\n */\nexport async function overwriteAndSyncCourseData(courseData: CourseData, courseDir: string) {\n  await writeCourseToDirectory(courseData, courseDir);\n  await syncCourseData(courseDir);\n}\n\n/**\n * Returns an array of all records in a particular database table.\n *\n * @param tableName - The name of the table to query\n * @return The rows of the given table\n */\nexport async function dumpTable(tableName: string): Promise<Record<string, any>[]> {\n  const res = await sqldb.queryAsync(`SELECT * FROM ${tableName};`, {});\n  return res.rows;\n}\n\nexport async function dumpTableWithSchema<Schema extends z.ZodTypeAny>(\n  tableName: string,\n  schema: Schema,\n): Promise<z.infer<Schema>[]> {\n  return await sqldb.queryRows(`SELECT * FROM ${tableName};`, schema);\n}\n\nexport async function captureDatabaseSnapshot() {\n  return {\n    courseInstances: await dumpTable('course_instances'),\n    assessments: await dumpTable('assessments'),\n    assessmentSets: await dumpTable('assessment_sets'),\n    topics: await dumpTable('topics'),\n    tags: await dumpTable('tags'),\n    courseInstanceAccessRules: await dumpTable('course_instance_access_rules'),\n    assessmentAccessRules: await dumpTable('assessment_access_rules'),\n    zones: await dumpTable('zones'),\n    alternativeGroups: await dumpTable('alternative_groups'),\n    assessmentQuestions: await dumpTable('assessment_questions'),\n    questions: await dumpTable('questions'),\n    questionTags: await dumpTable('question_tags'),\n    users: await dumpTable('users'),\n    enrollments: await dumpTable('enrollments'),\n  };\n}\n\n/**\n * Computes setA U setB.\n *\n * @returns The union of setA and setB\n */\nfunction setUnion<T>(setA: Set<T>, setB: Set<T>) {\n  return new Set([...setA, ...setB]);\n}\n\n/**\n * Checks if two sets contain the same elements.\n *\n * @returns Whether or not the sets contain the same elements.\n */\nfunction checkSetsSame<T>(setA: Set<T>, setB: Set<T>) {\n  const union = setUnion(setA, setB);\n  return setA.size === setB.size && union.size === setA.size;\n}\n\n/**\n * Asserts that two snapshots match each other. Two snapshots are defined as\n * matching if they both contain the same keys and if for each key, the array\n * of values contains the same elements. Elements may be in different orders.\n * Optionally, a subset of the keys in the snapshot can be ignored.\n *\n * @param snapshotA - The first snapshot\n * @param snapshotB - The second snapshot\n * @param ignoredKeys - An optional list of keys to ignore\n */\nexport function assertSnapshotsMatch(\n  snapshotA: Record<string, any[]>,\n  snapshotB: Record<string, any[]>,\n  ignoredKeys: string[] = [],\n) {\n  // Sanity check - make sure both snapshots have the same keys\n  assert(\n    checkSetsSame(new Set(Object.keys(snapshotA)), new Set(Object.keys(snapshotB))),\n    'snapshots contained different keys',\n  );\n  for (const key of Object.keys(snapshotA)) {\n    if (ignoredKeys.indexOf(key) !== -1) continue;\n    // Build a set of deterministically-stringified rows for each snapshot\n    const setA = new Set(snapshotA[key].map((s) => stringify(s)));\n    const setB = new Set(snapshotB[key].map((s) => stringify(s)));\n    assert(checkSetsSame(setA, setB), `Snapshot of ${key} did not match`);\n  }\n}\n\n/**\n * Asserts that `snapshotA` is a subset of `snapshotB` using the same algorithm\n * from `assertSnapshotsMatch`.\n *\n * @param snapshotA - The first snapshot\n * @param snapshotB - The second snapshot\n * @param ignoredKeys - An optional list of keys to ignore\n */\nexport function assertSnapshotSubset(\n  snapshotA: Record<string, any[]>,\n  snapshotB: Record<string, any>,\n  ignoredKeys: string[] = [],\n) {\n  // Sanity check - make sure both snapshots have the same keys\n  assert(\n    checkSetsSame(new Set(Object.keys(snapshotA)), new Set(Object.keys(snapshotB))),\n    'snapshots contained different keys',\n  );\n  for (const key of Object.keys(snapshotA)) {\n    if (ignoredKeys.indexOf(key) !== -1) continue;\n    // Build a set of deterministically-stringified rows for each snapshot\n    const setA = new Set(snapshotA[key].map((s) => stringify(s)));\n    const setB = new Set(snapshotB[key].map((s) => stringify(s)));\n    assert(\n      [...setA].every((entry) => setB.has(entry)),\n      `Snapshot of ${key} is not a subset`,\n    );\n  }\n}\n"]}