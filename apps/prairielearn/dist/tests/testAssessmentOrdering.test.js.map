{"version":3,"file":"testAssessmentOrdering.test.js","sourceRoot":"","sources":["../../src/tests/testAssessmentOrdering.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\nimport { v4 as uuid } from 'uuid';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport * as helperClient from './helperClient.js';\nimport * as helperServer from './helperServer.js';\nimport {\n  COURSE_INSTANCE_ID,\n  getCourseData,\n  overwriteAndSyncCourseData,\n  writeCourseToTempDirectory,\n} from './sync/util.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('Course with assessments grouped by Set vs Module', function () {\n  this.timeout(60000);\n\n  let courseDir;\n  let courseInstanceId = null;\n  let assessmentBadges;\n\n  const course = getCourseData();\n  course.course.assessmentSets = [\n    {\n      name: 'Homeworks',\n      abbreviation: 'HW',\n      heading: 'Homeworks',\n      color: 'red1',\n    },\n    {\n      name: 'Exams',\n      abbreviation: 'E',\n      heading: 'Exams',\n      color: 'red2',\n    },\n  ];\n  course.course.assessmentModules = [\n    {\n      name: 'Module 1',\n      heading: 'Module 1',\n    },\n    {\n      name: 'Module 2',\n      heading: 'Module 2',\n    },\n  ];\n  course.courseInstances[COURSE_INSTANCE_ID].assessments = {\n    'homework-1': {\n      uuid: uuid(),\n      title: 'Homework 1',\n      type: 'Homework',\n      set: 'Homeworks',\n      module: 'Module 1',\n      number: '1',\n    },\n    'exam-1': {\n      uuid: uuid(),\n      title: 'Exam 1',\n      type: 'Exam',\n      set: 'Exams',\n      module: 'Module 1',\n      number: '1',\n    },\n    'homework-2': {\n      uuid: uuid(),\n      title: 'Homework 2',\n      type: 'Homework',\n      set: 'Homeworks',\n      module: 'Module 2',\n      number: '2',\n    },\n    'exam-2': {\n      uuid: uuid(),\n      title: 'Exam 2',\n      type: 'Exam',\n      set: 'Exams',\n      module: 'Module 2',\n      number: '2',\n    },\n  };\n\n  async function fetchAssessmentsPage() {\n    const assessmentsUrl = `http://localhost:${config.serverPort}/pl/course_instance/${courseInstanceId}/assessments`;\n    const response = await helperClient.fetchCheerio(assessmentsUrl);\n    assert.isTrue(response.ok);\n    return response;\n  }\n\n  function testHeadingOrder(response, assessmentHeadings) {\n    const headings = response.$('table th[data-testid=\"assessment-group-heading\"]');\n    assert.lengthOf(headings, assessmentHeadings.length);\n    headings.each((i, heading) => {\n      const headingText = response.$(heading).text();\n      assert.equal(headingText.trim(), assessmentHeadings[i]);\n    });\n  }\n\n  function extractAssessmentSetBadgeText(response) {\n    const badgeText: string[] = [];\n    response.$('table [data-testid=\"assessment-set-badge\"]').each((i, badge) => {\n      badgeText.push(response.$(badge).text().trim());\n    });\n    return badgeText;\n  }\n\n  before('set up testing server', async function () {\n    courseDir = await writeCourseToTempDirectory(course);\n    await helperServer.before(courseDir).call(this);\n    const courseInstanceResult = await sqldb.queryOneRowAsync(sql.get_test_course, {});\n    courseInstanceId = courseInstanceResult.rows[0].id;\n  });\n  after('shut down testing server', helperServer.after);\n\n  step('should default to grouping by Set', async function () {\n    const result = await sqldb.queryOneRowAsync(sql.get_test_course, []);\n    assert.equal(result.rows[0].assessments_group_by, 'Set');\n  });\n\n  step('should use correct order when grouping by Set', async function () {\n    const response = await fetchAssessmentsPage();\n    testHeadingOrder(response, ['Homeworks', 'Exams']);\n\n    // save list of assessment badges to compare to future values\n    assessmentBadges = extractAssessmentSetBadgeText(response);\n  });\n\n  step('should use correct order when grouping by Module', async function () {\n    // Update course to group by Module\n    course.courseInstances[COURSE_INSTANCE_ID].courseInstance.groupAssessmentsBy = 'Module';\n    await overwriteAndSyncCourseData(course, courseDir);\n\n    const response = await fetchAssessmentsPage();\n    testHeadingOrder(response, ['Module 1', 'Module 2']);\n\n    const badges = extractAssessmentSetBadgeText(response);\n    assert.sameOrderedMembers(badges, [\n      // Module 1\n      'HW1',\n      'E1',\n      // Module 2\n      'HW2',\n      'E2',\n    ]);\n\n    // compare this new set of badges with the old one\n    assert.sameMembers(badges, assessmentBadges);\n  });\n});\n"]}