{"version":3,"file":"testSequentialQuestions.test.js","sourceRoot":"","sources":["../../src/tests/testSequentialQuestions.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AAEnC,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,KAAK,YAAY,MAAM,mBAAmB,CAAC;AAClD,OAAO,KAAK,YAAY,MAAM,mBAAmB,CAAC;AAElD,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEhD,QAAQ,CAAC,gEAAgE,EAAE;IACzE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEpB,MAAM,OAAO,GAAwB,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,GAAG,oBAAoB,MAAM,CAAC,UAAU,EAAE,CAAC;IAC1D,OAAO,CAAC,OAAO,GAAG,GAAG,OAAO,CAAC,OAAO,KAAK,CAAC;IAC1C,OAAO,CAAC,qBAAqB,GAAG,GAAG,OAAO,CAAC,OAAO,oBAAoB,CAAC;IAEvE,MAAM,CAAC,uBAAuB,EAAE,KAAK;QACnC,MAAM,YAAY,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAAC;QAC7E,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1C,OAAO,CAAC,aAAa,GAAG,GAAG,OAAO,CAAC,qBAAqB,eAAe,OAAO,CAAC,YAAY,GAAG,CAAC;QAC/F,OAAO,CAAC,gCAAgC,GAAG,GAAG,OAAO,CAAC,qBAAqB,0BAA0B,OAAO,CAAC,YAAY,aAAa,CAAC;IACzI,CAAC,CAAC,CAAC;IACH,KAAK,CAAC,0BAA0B,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;IAEtD,IAAI,CAAC,mEAAmE,EAAE,KAAK;QAC7E,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,gCAAgC,EAAE;YACzF,MAAM,EAAE,KAAK;SACd,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAE3B,OAAO,CAAC,mBAAmB,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QACtD,MAAM,mBAAmB,GAAG,QAAQ;aACjC,CAAC,CAAC,oCAAoC,CAAC;aACvC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;YACf,iCAAiC;YACjC,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC;aACD,GAAG,EAAE,CAAC;QACT,MAAM,CAAC,SAAS,CAAC,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,KAAK,UAAU,uBAAuB;QACpC,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACxF,OAAO,CAAC,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YACjD,OAAO;gBACL,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,oBAAoB,CAAC;gBAClC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;gBAClC,GAAG,EAAE,GAAG,OAAO,CAAC,qBAAqB,sBAAsB,CAAC,CAAC,oBAAoB,GAAG;aACrF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,mEAAmE,EAAE,KAAK;QAC7E,+BAA+B;QAC/B,MAAM,wBAAwB,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACxF,YAAY,CAAC,uBAAuB,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QAClF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE;YACtE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,eAAe,CAAC;gBACxB,QAAQ,EAAE,cAAc;gBACxB,YAAY,EAAE,OAAO,CAAC,YAAY;aACnC,CAAC;SACH,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAE3B,4DAA4D;QAC5D,OAAO,CAAC,qBAAqB,GAAG,QAAQ,CAAC,GAAG,CAAC;QAC7C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,EAAE,uBAAuB,CAAC,CAAC;QAEvE,MAAM,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1D,OAAO,CAAC,oBAAoB,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC7D,MAAM,uBAAuB,EAAE,CAAC;QAEhC,MAAM,oBAAoB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAEpE,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,CAAC,SAAS,CACd,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;gBAClC,OAAO,CAAC,CAAC,MAAM,CAAC;YAClB,CAAC,CAAC,EACF,oBAAoB,CACrB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE,GAAG,EAAE;YAClF,MAAM,aAAa,GAAG,QAAQ;iBAC3B,CAAC,CAAC,oDAAoD,CAAC;iBACvD,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;gBACf,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;YACzD,CAAC,CAAC;iBACD,GAAG,EAAE,CAAC;YACT,MAAM,CAAC,SAAS,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,CAAC,OAAO,CACZ,QAAQ,CAAC,CAAC,CAAC,iEAAiE,CAAC,CAAC,IAAI,EAAE,EACpF,mBAAmB,CACpB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK;QAC9C,OAAO,CAAC,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC7E,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4DAA4D,EAAE,KAAK;QACtE,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,8BAA8B,OAAO,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAClG,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kEAAkE,EAAE,KAAK;QAC5E,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QACpF,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAE3B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uEAAuE,EAAE,KAAK;QACjF,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,EAAE,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACzE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,KAAK,UAAU,cAAc,CAAC,KAAK,EAAE,QAAQ;QAC3C,MAAM,qBAAqB,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC5E,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;QACxC,YAAY,CAAC,uBAAuB,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;QACzF,OAAO,CAAC,YAAY,GAAG,qBAAqB;aACzC,CAAC,CAAC,2CAA2C,CAAC;aAC9C,IAAI,CAAC,OAAO,CAAC,CAAC;QACjB,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC7D,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,eAAe,CAAC;gBACxB,QAAQ,EAAE,OAAO;gBACjB,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC;gBAChB,YAAY,EAAE,OAAO,CAAC,YAAY;aACnC,CAAC;SACH,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAE3B,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,IAAI,CAAC,yDAAyD,EAAE,KAAK;QACnE,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,EAAE,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACzE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iDAAiD,EAAE,KAAK;QAC3D,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,EAAE,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACzE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,wDAAwD,EAAE,KAAK;QAClE,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,CAAC,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACxE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uEAAuE,EAAE,KAAK;QACjF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC7E,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sEAAsE,EAAE,KAAK;QAChF,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK;QACvD,MAAM,uBAAuB,EAAE,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qDAAqD,EAAE,KAAK;QAC/D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\nimport { step } from 'mocha-steps';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\n\nimport * as helperClient from './helperClient.js';\nimport * as helperServer from './helperServer.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\n\ndescribe('Assessment that forces students to complete questions in-order', function () {\n  this.timeout(60000);\n\n  const context: Record<string, any> = {};\n  context.siteUrl = `http://localhost:${config.serverPort}`;\n  context.baseUrl = `${context.siteUrl}/pl`;\n  context.courseInstanceBaseUrl = `${context.baseUrl}/course_instance/1`;\n\n  before('set up testing server', async function () {\n    await helperServer.before().call(this);\n    const results = await sqldb.queryOneRowAsync(sql.select_sequential_exam, []);\n    context.assessmentId = results.rows[0].id;\n    context.assessmentUrl = `${context.courseInstanceBaseUrl}/assessment/${context.assessmentId}/`;\n    context.instructorAssessmentQuestionsUrl = `${context.courseInstanceBaseUrl}/instructor/assessment/${context.assessmentId}/questions/`;\n  });\n  after('shut down testing server', helperServer.after);\n\n  step('Minimum advancement score is computed correctly for each question', async function () {\n    const response = await helperClient.fetchCheerio(context.instructorAssessmentQuestionsUrl, {\n      method: 'GET',\n    });\n    assert.isTrue(response.ok);\n\n    context.expectedPercentages = [0, 60, 75, 0, 30, 100];\n    const computedPercentages = response\n      .$('[data-testid=\"advance-score-perc\"]')\n      .map((i, elem) => {\n        // turn string \"25%\" -> number 25\n        return Number(response.$(elem).text().trim().slice(0, -1));\n      })\n      .get();\n    assert.deepEqual(computedPercentages, context.expectedPercentages);\n  });\n\n  /**\n   * Updates context.instanceQuestions to the current state of the assessment instance\n   */\n  async function refreshContextQuestions() {\n    const results = await sqldb.callAsync('question_order', [context.assessmentInstanceId]);\n    context.instanceQuestions = results.rows.map((e) => {\n      return {\n        id: Number(e.instance_question_id),\n        locked: Boolean(e.sequence_locked),\n        url: `${context.courseInstanceBaseUrl}/instance_question/${e.instance_question_id}/`,\n      };\n    });\n  }\n\n  step('Questions are locked/unlocked properly on student assessment page', async function () {\n    // Generate assessment instance\n    const assessmentCreateResponse = await helperClient.fetchCheerio(context.assessmentUrl);\n    helperClient.extractAndSaveCSRFToken(context, assessmentCreateResponse.$, 'form');\n    const response = await helperClient.fetchCheerio(context.assessmentUrl, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'new_instance',\n        __csrf_token: context.__csrf_token,\n      }),\n    });\n    assert.isTrue(response.ok);\n\n    // We should have been redirected to the assessment instance\n    context.assessmentInstanceUrl = response.url;\n    assert.include(context.assessmentInstanceUrl, '/assessment_instance/');\n\n    const urlParts = context.assessmentInstanceUrl.split('/');\n    context.assessmentInstanceId = urlParts[urlParts.length - 1];\n    await refreshContextQuestions();\n\n    const initialExpectedLocks = [false, false, true, true, true, true];\n\n    it('Locks in database should match assessment configuration', () => {\n      assert.deepEqual(\n        context.instanceQuestions.map((e) => {\n          return e.locked;\n        }),\n        initialExpectedLocks,\n      );\n    });\n\n    it('Locks in student assessment instance page should match those in database', () => {\n      const computedLocks = response\n        .$('table[data-testid=\"assessment-questions\"] tbody tr')\n        .map((i, elem) => {\n          return response.$(elem).hasClass('pl-sequence-locked');\n        })\n        .get();\n      assert.deepEqual(computedLocks, initialExpectedLocks);\n    });\n\n    it('Question 3 should require 60% on Question 2 to unlock', () => {\n      assert.include(\n        response.$('table[data-testid=\"assessment-questions\"] tbody tr:nth-child(3)').html(),\n        '60% on Question 2',\n      );\n    });\n  });\n\n  step('Accessing Question 3 returns a 403', async function () {\n    context.lockedQuestion = context.instanceQuestions[2];\n    const response = await helperClient.fetchCheerio(context.lockedQuestion.url);\n    assert.isTrue(!response.ok);\n    assert.equal(response.status, 403);\n  });\n\n  step('Question 3 URL is not exposed from student assessment page', async function () {\n    const response = await helperClient.fetchCheerio(context.assessmentUrl);\n    assert.isTrue(response.ok);\n    assert.equal(response.$(`a[href*=\"instance_question/${context.lockedQuestion.id}\"]`).length, 0);\n  });\n\n  step('Question 2 \"next question\" link is locked before any submissions', async function () {\n    context.firstUnlockedQuestion = context.instanceQuestions[1];\n    const response = await helperClient.fetchCheerio(context.firstUnlockedQuestion.url);\n    assert.isTrue(response.ok);\n\n    assert.isTrue(response.$('#question-nav-next').hasClass('pl-sequence-locked'));\n  });\n\n  step('Question 2 \"next question\" link contains the correct advanceScorePerc', async function () {\n    const response = await submitQuestion(50, context.firstUnlockedQuestion);\n    assert.include(response.$('#question-nav-next').attr('data-bs-content'), '60%');\n  });\n\n  async function submitQuestion(score, question) {\n    const preSubmissionResponse = await helperClient.fetchCheerio(question.url);\n    assert.isTrue(preSubmissionResponse.ok);\n    helperClient.extractAndSaveCSRFToken(context, preSubmissionResponse.$, '.question-form');\n    context.__variant_id = preSubmissionResponse\n      .$('.question-form input[name=\"__variant_id\"]')\n      .attr('value');\n    const response = await helperClient.fetchCheerio(question.url, {\n      method: 'POST',\n      body: new URLSearchParams({\n        __action: 'grade',\n        __variant_id: context.__variant_id,\n        s: String(score),\n        __csrf_token: context.__csrf_token,\n      }),\n    });\n    assert.isTrue(response.ok);\n\n    return response;\n  }\n\n  step('Submitting 50% on Question 2 does not unlock Question 3', async function () {\n    const response = await submitQuestion(50, context.firstUnlockedQuestion);\n    assert.isTrue(response.$('#question-nav-next').hasClass('pl-sequence-locked'));\n  });\n\n  step('Submitting 75% on Question 2 unlocks Question 3', async function () {\n    const response = await submitQuestion(75, context.firstUnlockedQuestion);\n    assert.isFalse(response.$('#question-nav-next').hasClass('pl-sequence-locked'));\n  });\n\n  step('Submitting 0% on Question 2 leaves Question 3 unlocked', async function () {\n    const response = await submitQuestion(0, context.firstUnlockedQuestion);\n    assert.isFalse(response.$('#question-nav-next').hasClass('pl-sequence-locked'));\n  });\n\n  step('Accessing Question 3 no longer returns a 403 and Question 4 is locked', async function () {\n    const response = await helperClient.fetchCheerio(context.lockedQuestion.url);\n    assert.isTrue(response.ok);\n    assert.isTrue(response.$('#question-nav-next').hasClass('pl-sequence-locked'));\n  });\n\n  step('Submitting 0% on Question 3 unlocks Question 4 (run out of attempts)', async function () {\n    const response = await submitQuestion(0, context.lockedQuestion);\n    assert.isTrue(response.ok);\n    assert.isFalse(response.$('#question-nav-next').hasClass('pl-sequence-locked'));\n  });\n\n  step('Unlocking question 4 cascades to question 5', async function () {\n    await refreshContextQuestions();\n    assert.isFalse(context.instanceQuestions[4].locked);\n  });\n\n  step('Unlocking question 4 does NOT cascade to question 6', async function () {\n    assert.isTrue(context.instanceQuestions[5].locked);\n  });\n});\n"]}