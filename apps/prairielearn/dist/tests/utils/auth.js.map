{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../src/tests/utils/auth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAE3D,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAa,UAAU,EAAE,MAAM,uBAAuB,CAAC;AASxE,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAI,IAAc,EAAE,EAAoB;IACpE,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC;IACrC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC;IACnC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC;IACnC,MAAM,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC;IAEvC,IAAI,CAAC;QACH,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;QAC1B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;QAC1B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;QAEtC,OAAO,MAAM,EAAE,EAAE,CAAC;IACpB,CAAC;YAAS,CAAC;QACT,MAAM,CAAC,QAAQ,GAAG,YAAY,CAAC;QAC/B,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC;QAC7B,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC;QAC7B,MAAM,CAAC,SAAS,GAAG,aAAa,CAAC;IACnC,CAAC;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB;IACrC,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QAChF,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IAED,OAAO,MAAM,eAAe,CAAC;QAC3B,GAAG,EAAE,MAAM,CAAC,OAAO;QACnB,IAAI,EAAE,MAAM,CAAC,QAAQ;QACrB,GAAG,EAAE,MAAM,CAAC,OAAO;QACnB,KAAK,EAAE,MAAM,CAAC,SAAS;KACxB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,QAAkB;IACtD,MAAM,IAAI,GAAG,MAAM,OAAO,CACxB,wBAAwB,EACxB,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC;IAClE,8DAA8D;IAC9D,CAAC,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAChC,CAAC;IACF,OAAO,MAAM,QAAQ,CACnB,yCAAyC,EACzC,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EACpB,UAAU,CACX,CAAC;AACJ,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { callRow, queryRow } from '@prairielearn/postgres';\n\nimport { config } from '../../lib/config.js';\nimport { IdSchema, type User, UserSchema } from '../../lib/db-types.js';\n\nexport interface AuthUser {\n  name: string | null;\n  uid: string;\n  uin: string | null;\n  email?: string | null;\n}\n\nexport async function withUser<T>(user: AuthUser, fn: () => Promise<T>): Promise<T> {\n  const originalName = config.authName;\n  const originalUid = config.authUid;\n  const originalUin = config.authUin;\n  const originalEmail = config.authEmail;\n\n  try {\n    config.authName = user.name;\n    config.authUid = user.uid;\n    config.authUin = user.uin;\n    config.authEmail = user.email ?? null;\n\n    return await fn();\n  } finally {\n    config.authName = originalName;\n    config.authUid = originalUid;\n    config.authUin = originalUin;\n    config.authEmail = originalEmail;\n  }\n}\n\nexport async function getConfiguredUser(): Promise<User> {\n  if (!config.authUid || !config.authName || !config.authUin || !config.authEmail) {\n    throw new Error('No configured user');\n  }\n\n  return await getOrCreateUser({\n    uid: config.authUid,\n    name: config.authName,\n    uin: config.authUin,\n    email: config.authEmail,\n  });\n}\n\nexport async function getOrCreateUser(authUser: AuthUser): Promise<User> {\n  const user = await callRow(\n    'users_select_or_insert',\n    [authUser.uid, authUser.name, authUser.uin, authUser.email, 'dev'],\n    // The sproc returns multiple columns, but we only use the ID.\n    z.object({ user_id: IdSchema }),\n  );\n  return await queryRow(\n    'SELECT * FROM users WHERE user_id = $id',\n    { id: user.user_id },\n    UserSchema,\n  );\n}\n"]}