{"version":3,"file":"enrollments.js","sourceRoot":"","sources":["../../../src/tests/utils/enrollments.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,KAAK,MAAM,YAAY,CAAC;AAC/B,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD,uDAAuD;AACvD,OAAO,iBAAiB,CAAC;AACzB,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAE7C,OAAO,EAAiB,QAAQ,EAAE,MAAM,WAAW,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAEzC,MAAM,OAAO,GAAG,mBAAmB,GAAG,MAAM,CAAC,UAAU,CAAC;AACxD,MAAM,OAAO,GAAG,OAAO,GAAG,KAAK,CAAC;AAEhC,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,gBAAwB,EAAE,IAAc;IACvE,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,GAAG,GAAG,OAAO,GAAG,SAAS,CAAC;QAChC,OAAO,MAAM,KAAK,CAAC,GAAG,EAAE;YACtB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,eAAe,CAAC;gBACxB,kBAAkB,EAAE,gBAAgB;gBACpC,QAAQ,EAAE,QAAQ;gBAClB,YAAY,EAAE,MAAM,YAAY,CAAC,GAAG,CAAC;aACtC,CAAC;SACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,gBAAwB,EAAE,IAAc;IACzE,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,GAAG,GAAG,OAAO,GAAG,SAAS,CAAC;QAChC,OAAO,MAAM,KAAK,CAAC,GAAG,EAAE;YACtB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,eAAe,CAAC;gBACxB,kBAAkB,EAAE,gBAAgB;gBACpC,QAAQ,EAAE,UAAU;gBACpB,YAAY,EAAE,MAAM,YAAY,CAAC,GAAG,CAAC;aACtC,CAAC;SACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,gBAAwB,EAAE,KAAa;IAC7E,2CAA2C;IAC3C,MAAM,YAAY,GAAG,MAAM,QAAQ,CACjC,0EAA0E,EAC1E,EAAE,EAAE,EAAE,gBAAgB,EAAE,EACxB,CAAC,CAAC,MAAM,EAAE,CACX,CAAC;IACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/B,MAAM,MAAM,GAAG,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,gBAAgB,EAAE;YAC7C,IAAI,EAAE,WAAW,CAAC,EAAE;YACpB,GAAG,EAAE,UAAU,MAAM,cAAc;YACnC,GAAG,EAAE,WAAW,CAAC,EAAE;YACnB,KAAK,EAAE,UAAU,MAAM,cAAc;SACtC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACtB,CAAC;AACH,CAAC","sourcesContent":["import { assert } from 'chai';\nimport fetch from 'node-fetch';\nimport { z } from 'zod';\n\nimport { queryRow } from '@prairielearn/postgres';\n\n// Must be imported so that `config.serverPort` is set.\nimport '../helperServer';\nimport { config } from '../../lib/config.js';\n\nimport { type AuthUser, withUser } from './auth.js';\nimport { getCsrfToken } from './csrf.js';\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\nconst baseUrl = siteUrl + '/pl';\n\nexport async function enrollUser(courseInstanceId: string, user: AuthUser) {\n  return await withUser(user, async () => {\n    const url = baseUrl + '/enroll';\n    return await fetch(url, {\n      method: 'POST',\n      body: new URLSearchParams({\n        course_instance_id: courseInstanceId,\n        __action: 'enroll',\n        __csrf_token: await getCsrfToken(url),\n      }),\n    });\n  });\n}\n\nexport async function unenrollUser(courseInstanceId: string, user: AuthUser) {\n  return await withUser(user, async () => {\n    const url = baseUrl + '/enroll';\n    return await fetch(url, {\n      method: 'POST',\n      body: new URLSearchParams({\n        course_instance_id: courseInstanceId,\n        __action: 'unenroll',\n        __csrf_token: await getCsrfToken(url),\n      }),\n    });\n  });\n}\n\nexport async function enrollRandomUsers(courseInstanceId: string, count: number) {\n  // Get current number of enrolled students.\n  const currentCount = await queryRow(\n    'SELECT COUNT(*)::integer FROM enrollments WHERE course_instance_id = $id',\n    { id: courseInstanceId },\n    z.number(),\n  );\n  for (let i = 0; i < count; i++) {\n    const number = currentCount + i + 1;\n    const res = await enrollUser(courseInstanceId, {\n      name: `Student ${i}`,\n      uid: `student${number}@example.com`,\n      uin: `student-${i}`,\n      email: `student${number}@example.com`,\n    });\n    assert.isOk(res.ok);\n  }\n}\n"]}