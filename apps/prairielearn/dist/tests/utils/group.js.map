{"version":3,"file":"group.js","sourceRoot":"","sources":["../../../src/tests/utils/group.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAEnC,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAG7C;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAC/C,WAAiB,EACjB,aAAqB,EACrB,QAAuB,EACvB,aAAa,GAAG,MAAM;IAEtB,cAAc;IACd,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC;IACjC,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC;IACnC,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC;IAEjC,kBAAkB;IAClB,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,aAAa,CAAC,CAAC;IACvC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACpB,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;IAC9B,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE7B,0CAA0C;IAC1C,gCAAgC;IAChC,mCAAmC;IACnC,6CAA6C;IAC7C,MAAM,IAAI,GACR,CAAC,CAAC,cAAc,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAE1C,uCAAuC;IACvC,MAAM,gBAAgB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IACpE,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;IAC5D,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAChD,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAW,CAAC,CAAC,uCAAuC;IAEnG,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC;AAC1B,CAAC","sourcesContent":["import { assert } from 'chai';\nimport * as cheerio from 'cheerio';\n\nimport { config } from '../../lib/config.js';\nimport type { User } from '../../lib/db-types.js';\n\n/**\n * Switches active user and loads assessment, returning the user's CSRF\n * token value from a form on the page\n */\nexport async function switchUserAndLoadAssessment(\n  studentUser: User,\n  assessmentUrl: string,\n  formName: string | null,\n  formContainer = 'body',\n): Promise<{ $: cheerio.CheerioAPI; csrfToken: string }> {\n  // Load config\n  config.authUid = studentUser.uid;\n  config.authName = studentUser.name;\n  config.authUin = studentUser.uin;\n\n  // Load assessment\n  const res = await fetch(assessmentUrl);\n  assert.isOk(res.ok);\n  const page = await res.text();\n  const $ = cheerio.load(page);\n\n  // Find the form. We look in three places:\n  // - A form with the given name.\n  // - A form in the given container.\n  // - The closest form to the given container.\n  const form =\n    $(`form[name=\"${formName}\"]`).get(0) ??\n    $(formContainer).find('form').get(0) ??\n    $(formContainer).closest('form').get(0);\n\n  // Extract the CSRF token from the form\n  const csrfTokenElement = $(form).find('input[name=\"__csrf_token\"]');\n  assert.nestedProperty(csrfTokenElement[0], 'attribs.value');\n  assert.isString(csrfTokenElement.attr('value'));\n  const csrfToken = csrfTokenElement.attr('value') as string; // guaranteed to be string by assertion\n\n  return { $, csrfToken };\n}\n"]}