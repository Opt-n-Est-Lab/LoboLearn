{"version":3,"file":"variantAccess.test.js","sourceRoot":"","sources":["../../src/tests/variantAccess.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport type { CheerioAPI } from 'cheerio';\nimport { step } from 'mocha-steps';\n\nimport { queryRow } from '@prairielearn/postgres';\n\nimport { config } from '../lib/config.js';\nimport { type Assessment, AssessmentSchema, type Question } from '../lib/db-types.js';\nimport { features } from '../lib/features/index.js';\nimport {\n  insertCourseInstancePermissions,\n  insertCoursePermissionsByUserUid,\n} from '../models/course-permissions.js';\nimport { updateCourseSharingName } from '../models/course.js';\nimport { selectQuestionByQid } from '../models/question.js';\n\nimport { fetchCheerio } from './helperClient.js';\nimport * as helperServer from './helperServer.js';\nimport { type AuthUser, getConfiguredUser, getOrCreateUser, withUser } from './utils/auth.js';\n\nconst siteUrl = 'http://localhost:' + config.serverPort;\n\nconst PUBLIC_USER: AuthUser = {\n  name: 'Public User',\n  uid: 'public-user@example.com',\n  uin: 'public-user',\n};\n\nconst OTHER_PUBLIC_USER: AuthUser = {\n  name: 'Other Public User',\n  uid: 'other-public-user@example.com',\n  uin: 'other-public-user',\n};\n\nconst INSTRUCTOR_USER: AuthUser = {\n  name: 'Instructor User',\n  uid: 'instructor@example.com',\n  uin: 'instructor',\n};\n\nconst COURSE_ASSISTANT_USER: AuthUser = {\n  name: 'Course Assistant User',\n  uid: 'course-assistant@example.com',\n  uin: 'course-assistant',\n};\n\nconst STUDENT_USER: AuthUser = {\n  name: 'Student User',\n  uid: 'student@example.com',\n  uin: 'student',\n};\n\nconst OTHER_STUDENT_USER: AuthUser = {\n  name: 'Other Student User',\n  uid: 'other-student@example.com',\n  uin: 'other-student',\n};\n\nfunction getVariantId(cheerio: CheerioAPI): string {\n  const variantId = cheerio('.question-container').attr('data-variant-id');\n  assert(variantId);\n  assert.isString(variantId);\n  return variantId;\n}\n\nfunction getWorkspaceUrl(cheerio: CheerioAPI): string {\n  const workspaceUrl = cheerio('a:contains(\"Open workspace\")').attr('href');\n  assert(workspaceUrl);\n  assert.isString(workspaceUrl);\n  return workspaceUrl;\n}\n\n/**\n * Makes an empty submission to the specified URL. Returns the submission ID.\n */\nasync function makeSubmission(url: string, cheerio: CheerioAPI): Promise<string> {\n  const form = cheerio('form.question-form');\n  const res = await fetchCheerio(url, {\n    method: 'POST',\n    body: new URLSearchParams({\n      __csrf_token: form.find('input[name=\"__csrf_token\"]').val() as string,\n      __action: 'save',\n      __variant_id: form.find('input[name=\"__variant_id\"]').val() as string,\n    }),\n  });\n  assert.equal(res.status, 200);\n\n  const submission = res.$('[data-testid=\"submission-with-feedback\"]');\n  assert.lengthOf(submission, 1);\n  const submissionId = submission.find('.js-submission-body').attr('data-submission-id');\n  assert(submissionId);\n  assert.isString(submissionId);\n  return submissionId;\n}\n\nasync function assertVariantAccess({\n  questionBasePath,\n  variantId,\n  submissionId,\n  workspaceUrl,\n  expectedAccess,\n}: {\n  questionBasePath: string;\n  variantId: string;\n  submissionId: string;\n  workspaceUrl: string;\n  expectedAccess: boolean;\n}) {\n  // Remove trailing slash if present.\n  questionBasePath = questionBasePath.replace(/\\/$/, '');\n\n  const isStudentRoute = !!questionBasePath.match(/course_instance\\/\\d+\\/instance_question\\//);\n\n  // Test access to the rendered variant.\n  const variantUrl = `${siteUrl}${questionBasePath}${isStudentRoute ? '' : '/preview'}?variant_id=${variantId}`;\n  const variantRes = await fetchCheerio(variantUrl);\n  assert.equal(variantRes.status, expectedAccess ? 200 : 403);\n\n  // Test access to a generated file for the variant.\n  const generatedFileUrl = `${siteUrl}${questionBasePath}/generatedFilesQuestion/variant/${variantId}/file.txt`;\n  const generatedFileRes = await fetch(generatedFileUrl);\n  assert.equal(generatedFileRes.status, expectedAccess ? 200 : 403);\n  if (expectedAccess) {\n    assert.equal(await generatedFileRes.text(), 'This data is generated by code.');\n  }\n\n  // Test access to a submission file.\n  const submissionFileUrl = `${siteUrl}${questionBasePath}/submission/${submissionId}/file/submission.txt`;\n  const submissionFileRes = await fetch(submissionFileUrl);\n  assert.include(expectedAccess ? [200] : [403, 404], submissionFileRes.status);\n  const submissionFileText = await submissionFileRes.text();\n  if (expectedAccess) {\n    assert.equal(submissionFileText, 'Submitted data.');\n  } else if (submissionFileRes.status === 404) {\n    // Ensure that we got a 404 from the submission file route, which will give\n    // us an empty file. We want to error if for some reason it's a 404 because\n    // the route couldn't be found.\n    assert.equal(submissionFileText, '');\n  }\n\n  // Test access to a rendered submission.\n  const submissionUrl = `${siteUrl}${questionBasePath}${isStudentRoute ? '' : '/preview'}/variant/${variantId}/submission/${submissionId}`;\n  const submissionRes = await fetch(submissionUrl);\n  assert.equal(submissionRes.status, expectedAccess ? 200 : 403);\n  if (expectedAccess) {\n    const data = await submissionRes.json();\n    assert.property(data, 'submissionPanel');\n  }\n\n  // Test access to the variant's workspace.\n  const workspaceRes = await fetchCheerio(siteUrl + workspaceUrl);\n  assert.equal(workspaceRes.status, expectedAccess ? 200 : 403);\n}\n\ndescribe('Variant access', () => {\n  before(helperServer.before());\n  after(helperServer.after);\n\n  let question: Question;\n  let assessment: Assessment;\n  let publicVariantId: string;\n  let publicVariantWorkspaceUrl: string;\n  let publicVariantSubmissionId: string;\n  let otherPublicVariantId: string;\n  let otherPublicVariantWorkspaceUrl: string;\n  let otherPublicVariantSubmissionId: string;\n  let studentInstanceQuestionPath: string;\n  let studentVariantId: string;\n  let studentVariantWorkspaceUrl: string;\n  let studentVariantSubmissionId: string;\n  let otherStudentInstanceQuestionPath: string;\n  let otherStudentVariantId: string;\n  let otherStudentVariantWorkspaceUrl: string;\n  let otherStudentVariantSubmissionId: string;\n  let instructorVariantId: string;\n  let instructorVariantWorkspaceUrl: string;\n  let instructorVariantSubmissionId: string;\n\n  step('select relevant entities', async () => {\n    question = await selectQuestionByQid({\n      course_id: '1',\n      qid: 'variantAccess',\n    });\n\n    assessment = await queryRow(\n      'SELECT * FROM assessments WHERE tid = $tid',\n      { tid: 'hw11-variantAccess' },\n      AssessmentSchema,\n    );\n  });\n\n  step('configure instructor permissions', async () => {\n    const adminUser = await getConfiguredUser();\n    const instructorUser = await getOrCreateUser(INSTRUCTOR_USER);\n    await insertCoursePermissionsByUserUid({\n      course_id: '1',\n      uid: instructorUser.uid,\n      course_role: 'Owner',\n      authn_user_id: adminUser.user_id,\n    });\n    await insertCourseInstancePermissions({\n      course_id: '1',\n      course_instance_id: '1',\n      user_id: instructorUser.user_id,\n      course_instance_role: 'Student Data Viewer',\n      authn_user_id: adminUser.user_id,\n    });\n  });\n\n  step('configure course assistant permissions', async () => {\n    const adminUser = await getConfiguredUser();\n    const courseAssistantUser = await getOrCreateUser(COURSE_ASSISTANT_USER);\n    await insertCoursePermissionsByUserUid({\n      course_id: '1',\n      uid: courseAssistantUser.uid,\n      course_role: 'Editor',\n      authn_user_id: adminUser.user_id,\n    });\n  });\n\n  step('enable question sharing', async () => {\n    await features.enable('question-sharing', { institution_id: '1', course_id: '1' });\n    await updateCourseSharingName({\n      course_id: '1',\n      sharing_name: 'test-course',\n    });\n  });\n\n  step('create variant from public question preview', async () => {\n    await withUser(PUBLIC_USER, async () => {\n      const url = `${siteUrl}/pl/public/course/1/question/${question.id}/preview`;\n      const res = await fetchCheerio(url);\n      assert.equal(res.status, 200);\n      publicVariantId = getVariantId(res.$);\n      publicVariantWorkspaceUrl = getWorkspaceUrl(res.$);\n      publicVariantSubmissionId = await makeSubmission(url, res.$);\n    });\n  });\n\n  step('create other variant from public question preview', async () => {\n    await withUser(OTHER_PUBLIC_USER, async () => {\n      const url = `${siteUrl}/pl/public/course/1/question/${question.id}/preview`;\n      const res = await fetchCheerio(url);\n      assert.equal(res.status, 200);\n      otherPublicVariantId = getVariantId(res.$);\n      otherPublicVariantWorkspaceUrl = getWorkspaceUrl(res.$);\n      otherPublicVariantSubmissionId = await makeSubmission(url, res.$);\n    });\n  });\n\n  step('create variant from instructor question preview', async () => {\n    await withUser(INSTRUCTOR_USER, async () => {\n      const url = `${siteUrl}/pl/course/1/question/${question.id}/preview`;\n      const res = await fetchCheerio(url);\n      assert.equal(res.status, 200);\n      instructorVariantId = getVariantId(res.$);\n      instructorVariantWorkspaceUrl = getWorkspaceUrl(res.$);\n      instructorVariantSubmissionId = await makeSubmission(url, res.$);\n    });\n  });\n\n  step('create variant from student assessment instance', async () => {\n    await withUser(STUDENT_USER, async () => {\n      const assessmentUrl = `${siteUrl}/pl/course_instance/1/assessment/${assessment.id}`;\n      const assessmentRes = await fetchCheerio(assessmentUrl);\n      assert.equal(assessmentRes.status, 200);\n\n      const instanceQuestionPath = assessmentRes\n        .$('a:contains(\"Test access to a variant and its resources\")')\n        .attr('href');\n      assert(instanceQuestionPath);\n      assert.isString(instanceQuestionPath);\n      studentInstanceQuestionPath = instanceQuestionPath;\n\n      const instanceQuestionUrl = siteUrl + studentInstanceQuestionPath;\n      const addVectorsQuestionRes = await fetchCheerio(instanceQuestionUrl);\n      assert.equal(addVectorsQuestionRes.status, 200);\n      studentVariantId = getVariantId(addVectorsQuestionRes.$);\n      studentVariantWorkspaceUrl = getWorkspaceUrl(addVectorsQuestionRes.$);\n      studentVariantSubmissionId = await makeSubmission(\n        instanceQuestionUrl,\n        addVectorsQuestionRes.$,\n      );\n    });\n  });\n\n  step('create variant from other student assessment instance', async () => {\n    await withUser(OTHER_STUDENT_USER, async () => {\n      const assessmentUrl = `${siteUrl}/pl/course_instance/1/assessment/${assessment.id}`;\n      const assessmentRes = await fetchCheerio(assessmentUrl);\n      assert.equal(assessmentRes.status, 200);\n\n      const instanceQuestionPath = assessmentRes\n        .$('a:contains(\"Test access to a variant and its resources\")')\n        .attr('href');\n      assert(instanceQuestionPath);\n      assert.isString(instanceQuestionPath);\n      otherStudentInstanceQuestionPath = instanceQuestionPath;\n\n      const instanceQuestionUrl = siteUrl + otherStudentInstanceQuestionPath;\n      const addVectorsQuestionRes = await fetchCheerio(instanceQuestionUrl);\n      assert.equal(addVectorsQuestionRes.status, 200);\n      otherStudentVariantId = getVariantId(addVectorsQuestionRes.$);\n      otherStudentVariantWorkspaceUrl = getWorkspaceUrl(addVectorsQuestionRes.$);\n      otherStudentVariantSubmissionId = await makeSubmission(\n        instanceQuestionUrl,\n        addVectorsQuestionRes.$,\n      );\n    });\n  });\n\n  step('public preview does not show variant for different user', async () => {\n    await withUser(PUBLIC_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: `/pl/public/course/1/question/${question.id}`,\n        variantId: otherPublicVariantId,\n        workspaceUrl: otherPublicVariantWorkspaceUrl,\n        submissionId: otherPublicVariantSubmissionId,\n        expectedAccess: false,\n      });\n    });\n  });\n\n  step('public preview does not show variant created by instructor', async () => {\n    await withUser(PUBLIC_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: `/pl/public/course/1/question/${question.id}`,\n        variantId: instructorVariantId,\n        workspaceUrl: instructorVariantWorkspaceUrl,\n        submissionId: instructorVariantSubmissionId,\n        expectedAccess: false,\n      });\n    });\n  });\n\n  step('public preview does not show variant created by student', async () => {\n    await withUser(PUBLIC_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: `/pl/public/course/1/question/${question.id}`,\n        variantId: studentVariantId,\n        workspaceUrl: studentVariantWorkspaceUrl,\n        submissionId: studentVariantSubmissionId,\n        expectedAccess: false,\n      });\n    });\n  });\n\n  step('instructor preview shows variant created in public preview', async () => {\n    await withUser(INSTRUCTOR_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: `/pl/course/1/question/${question.id}`,\n        variantId: publicVariantId,\n        workspaceUrl: publicVariantWorkspaceUrl,\n        submissionId: publicVariantSubmissionId,\n        // TODO: Once we make the necessary changes, this should 403. We'll have to\n        // update the name of this test too.\n        expectedAccess: true,\n      });\n    });\n  });\n\n  step('instructor preview shows variant created by student', async () => {\n    await withUser(INSTRUCTOR_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: `/pl/course/1/question/${question.id}`,\n        variantId: studentVariantId,\n        workspaceUrl: studentVariantWorkspaceUrl,\n        submissionId: studentVariantSubmissionId,\n        expectedAccess: true,\n      });\n    });\n  });\n\n  step('course assistant preview does not show variant created by student', async () => {\n    await withUser(COURSE_ASSISTANT_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: `/pl/course/1/question/${question.id}`,\n        variantId: studentVariantId,\n        workspaceUrl: studentVariantWorkspaceUrl,\n        submissionId: studentVariantSubmissionId,\n        expectedAccess: false,\n      });\n    });\n  });\n\n  step('student instance question does not show variant created by other student', async () => {\n    await withUser(STUDENT_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: studentInstanceQuestionPath,\n        variantId: otherStudentVariantId,\n        workspaceUrl: otherStudentVariantWorkspaceUrl,\n        submissionId: otherStudentVariantSubmissionId,\n        expectedAccess: false,\n      });\n    });\n  });\n\n  step('student instance question does not show variant created by instructor', async () => {\n    await withUser(STUDENT_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: studentInstanceQuestionPath,\n        variantId: instructorVariantId,\n        workspaceUrl: instructorVariantWorkspaceUrl,\n        submissionId: instructorVariantSubmissionId,\n        expectedAccess: false,\n      });\n    });\n  });\n\n  step('student instance question does not show variant created in public preview', async () => {\n    await withUser(STUDENT_USER, async () => {\n      await assertVariantAccess({\n        questionBasePath: studentInstanceQuestionPath,\n        variantId: publicVariantId,\n        workspaceUrl: publicVariantWorkspaceUrl,\n        submissionId: publicVariantSubmissionId,\n        expectedAccess: false,\n      });\n    });\n  });\n});\n"]}