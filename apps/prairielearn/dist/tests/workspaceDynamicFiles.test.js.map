{"version":3,"file":"workspaceDynamicFiles.test.js","sourceRoot":"","sources":["../../src/tests/workspaceDynamicFiles.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'node:fs/promises';\nimport { join } from 'node:path';\n\nimport { assert } from 'chai';\nimport * as tmp from 'tmp-promise';\n\nimport { TEST_COURSE_PATH } from '../lib/paths.js';\nimport { generateWorkspaceFiles } from '../lib/workspace.js';\n\nasync function checkFileContents(targetPath: string, filename: string, expectedContents: string) {\n  const fileContents = await fs.readFile(join(targetPath, filename), 'binary');\n  assert.equal(fileContents, expectedContents);\n}\n\ndescribe('Workspace dynamic files', function () {\n  it('succeeds with valid dynamic files', async () => {\n    const targetPath = await tmp.dir({ unsafeCleanup: true });\n    const { fileGenerationErrors } = await generateWorkspaceFiles({\n      serverFilesCoursePath: join(TEST_COURSE_PATH, 'serverFilesCourse'),\n      questionBasePath: join(TEST_COURSE_PATH, 'questions', 'workspace'),\n      params: {\n        a: 'WORD',\n        _workspace_files: [\n          { name: 'first_dynamic_file.py', contents: 'a, b = b, a\\nprint(a, b)\\n' },\n          {\n            name: 'second_dynamic_file.bin',\n            contents: '000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f',\n            encoding: 'hex',\n          },\n          {\n            name: 'path/with/multiple/dynamic/components.bin',\n            contents: 'ABEiM0RVZneImaq7zN3u/w==',\n            encoding: 'base64',\n          },\n          { name: 'blank_file.txt', contents: null },\n          { name: 'template_and_dynamic.csv', contents: 'a,b\\n1,1\\n2,4\\n3,9' },\n          {\n            name: 'reference_file.txt',\n            questionFile: 'file_in_question_dir.txt',\n          },\n          {\n            name: 'reference_to_subdir.txt',\n            questionFile: 'path/with/another/file.txt',\n          },\n          {\n            name: 'server_file.txt',\n            serverFilesCourseFile: 'workspace_file.txt',\n          },\n          {\n            name: 'path/../not_normalized.txt',\n            contents: 'File identified by path that is not normalized\\n',\n          },\n        ],\n      },\n      correctAnswers: {\n        b: 35,\n      },\n      targetPath: targetPath.path,\n    });\n\n    assert.lengthOf(fileGenerationErrors, 0);\n\n    // Static files.\n    await checkFileContents(\n      targetPath.path,\n      'starter_code.c',\n      '// starter_code.c\\n\\n#include <stdio.h>\\n#include \"starter_code.h\"\\n\\nint main()\\n{\\n    // enter your code\\n}\\n',\n    );\n    await checkFileContents(targetPath.path, 'starter_code.h', '// starter_code.h\\n');\n    await checkFileContents(targetPath.path, 'subdir/other_file.txt', 'Content in subdirectory\\n');\n    await checkFileContents(\n      targetPath.path,\n      'binary.bin',\n      '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\x0E\\x0F',\n    );\n\n    // Template files.\n    await checkFileContents(targetPath.path, 'first_file.txt', 'A is WORD, while B is 35\\n');\n    await checkFileContents(targetPath.path, 'second_file.txt', 'The value of params.a is WORD.\\n');\n    await checkFileContents(\n      targetPath.path,\n      'path/with/multiple/components.py',\n      'b = \"WORD\"\\nprint(b)\\n',\n    );\n\n    // Dynamic files.\n    await checkFileContents(targetPath.path, 'first_dynamic_file.py', 'a, b = b, a\\nprint(a, b)\\n');\n    await checkFileContents(\n      targetPath.path,\n      'second_dynamic_file.bin',\n      '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F',\n    );\n    await checkFileContents(\n      targetPath.path,\n      'path/with/multiple/dynamic/components.bin',\n      '\\x00\\x11\\x22\\x33\\x44\\x55\\x66\\x77\\x88\\x99\\xAA\\xBB\\xCC\\xDD\\xEE\\xFF',\n    );\n    await checkFileContents(targetPath.path, 'blank_file.txt', '');\n    await checkFileContents(\n      targetPath.path,\n      'reference_file.txt',\n      'This is included in the workspace.\\n',\n    );\n    await checkFileContents(targetPath.path, 'reference_to_subdir.txt', 'Test file.\\n');\n    await checkFileContents(targetPath.path, 'server_file.txt', 'Content in server files\\n');\n    await checkFileContents(\n      targetPath.path,\n      'not_normalized.txt',\n      'File identified by path that is not normalized\\n',\n    );\n\n    // Ensure that template files override static files.\n    await checkFileContents(\n      targetPath.path,\n      'template_and_static.txt',\n      'The correct answer is 35.\\n',\n    );\n\n    // Ensure that dynamic files override template files.\n    await checkFileContents(targetPath.path, 'template_and_dynamic.csv', 'a,b\\n1,1\\n2,4\\n3,9');\n  });\n\n  it('fails with invalid dynamic files', async () => {\n    const targetPath = await tmp.dir({ unsafeCleanup: true });\n    const { fileGenerationErrors } = await generateWorkspaceFiles({\n      serverFilesCoursePath: join(TEST_COURSE_PATH, 'serverFilesCourse'),\n      questionBasePath: join(TEST_COURSE_PATH, 'questions', 'workspaceInvalidDynamicFiles'),\n      params: {\n        a: 'STRING',\n        _workspace_files: [\n          {\n            // Valid file\n            name: 'dynamic.txt',\n            contents: 'This is a dynamic file.\\n',\n          },\n          {\n            // File without a name\n            contents: '000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f',\n            encoding: 'hex',\n          },\n          {\n            // File with invalid encoding\n            name: 'invalid_encoding.bin',\n            contents: 'ABEiM0RVZneImaq7zN3u/w==',\n            encoding: 'utf-4',\n          },\n          {\n            // File that points outside the home directory in name\n            name: '../outside_home.txt',\n            contents: 'This file should not be created\\n',\n          },\n          {\n            // File whose normalized version points outside the home directory in name\n            name: 'path/../../outside_home.txt',\n            contents: 'This file should also not be created\\n',\n          },\n          {\n            // File with absolute path\n            name: '/home/prairie/absolute.txt',\n            contents: 'This file should also not be created\\n',\n          },\n          {\n            // File that points outside the question directory in questionFile\n            name: 'server.py',\n            questionFile: '../workspace/server.py',\n          },\n          {\n            // File that points outside the serverFilesCourse directory in serverFilesCourseFile\n            name: 'course.json',\n            serverFilesCourseFile: '../infoCourse.json',\n          },\n          {\n            // File without contents or questionFile\n            name: 'no_contents.txt',\n          },\n        ],\n      },\n      correctAnswers: {\n        b: 53,\n      },\n      targetPath: targetPath.path,\n    });\n\n    // Valid files should still have been created.\n    await checkFileContents(targetPath.path, 'static.txt', 'Static content\\n');\n    await checkFileContents(targetPath.path, 'template.txt', 'A is STRING, while B is 53\\n');\n    await checkFileContents(targetPath.path, 'dynamic.txt', 'This is a dynamic file.\\n');\n\n    const expectedErrors = [\n      { file: 'Dynamic file 1', msg: 'does not include a name' },\n      { file: 'invalid_encoding.bin', msg: 'unsupported file encoding' },\n      { file: '../outside_home.txt', msg: 'traverses outside the home directory' },\n      { file: 'path/../../outside_home.txt', msg: 'traverses outside the home directory' },\n      { file: '/home/prairie/absolute.txt', msg: 'has an absolute path' },\n      { file: 'server.py', msg: 'local file outside the question directory' },\n      { file: 'course.json', msg: 'local file outside the serverFilesCourse directory' },\n      {\n        file: 'no_contents.txt',\n        msg: 'has neither \"contents\" nor \"questionFile\" nor \"serverFilesCourseFile\"',\n        contents: '',\n      },\n    ];\n\n    for (const expectedError of expectedErrors) {\n      const issueError = fileGenerationErrors.find((error) => error.file === expectedError.file);\n      assert.isDefined(issueError, `Expected error not found: ${expectedError.file}`);\n      assert.include(issueError.msg, expectedError.msg);\n      if (expectedError.contents != null) {\n        await checkFileContents(targetPath.path, expectedError.file, expectedError.contents);\n      } else {\n        await fs.access(join(targetPath.path, expectedError.file)).then(\n          () => assert.fail(`File ${expectedError.file} should not exist`),\n          (err) => assert.equal(err.code, 'ENOENT'),\n        );\n      }\n    }\n\n    assert.lengthOf(fileGenerationErrors, 8);\n  });\n});\n"]}