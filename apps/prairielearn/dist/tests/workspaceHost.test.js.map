{"version":3,"file":"workspaceHost.test.js","sourceRoot":"","sources":["../../src/tests/workspaceHost.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { z } from 'zod';\n\nimport * as sqldb from '@prairielearn/postgres';\n\nimport * as workspaceHostUtils from '../lib/workspaceHost.js';\n\nimport * as helperDb from './helperDb.js';\n\nconst WorkspaceHostSchema = z.object({\n  id: z.string(),\n  instance_id: z.string(),\n  state: z.string(),\n});\n\nconst WorkspaceHostLogsSchema = z.object({\n  id: z.string(),\n  workspace_host_id: z.string(),\n  message: z.string(),\n  state: z.string(),\n});\n\nconst WorkspaceSchema = z.object({\n  id: z.string(),\n  state: z.string(),\n  workspace_host_id: z.string().nullable(),\n});\n\nconst WorkspaceLogsSchema = z.object({\n  id: z.string(),\n  workspace_id: z.string(),\n  state: z.string().nullable(),\n  message: z.string().nullable(),\n});\n\nasync function insertWorkspaceHost(id: string | number, state = 'launching') {\n  return sqldb.queryRow(\n    'INSERT INTO workspace_hosts (id, instance_id, state) VALUES ($id, $instance_id, $state) RETURNING *;',\n    {\n      id,\n      instance_id: uuidv4(),\n      state,\n    },\n    WorkspaceHostSchema,\n  );\n}\n\nasync function insertWorkspace(\n  id: string | number,\n  hostId: string | number | null | undefined = null,\n) {\n  return sqldb.queryRow(\n    'INSERT INTO workspaces (id, state, workspace_host_id) VALUES ($id, $state, $workspace_host_id) RETURNING *;',\n    {\n      id,\n      state: 'launching',\n      workspace_host_id: hostId,\n    },\n    WorkspaceSchema,\n  );\n}\n\nasync function selectWorkspaceHost(id) {\n  return sqldb.queryRow(\n    'SELECT * FROM workspace_hosts WHERE id = $id;',\n    { id },\n    WorkspaceHostSchema,\n  );\n}\n\nasync function selectWorkspace(id) {\n  return sqldb.queryRow('SELECT * FROM workspaces WHERE id = $id;', { id }, WorkspaceSchema);\n}\n\n/**\n * Returns the workspace host logs for the given host.\n */\nasync function getWorkspaceHostLogs(id: string | number) {\n  return sqldb.queryRows(\n    'SELECT * FROM workspace_host_logs WHERE workspace_host_id = $id;',\n    { id },\n    WorkspaceHostLogsSchema,\n  );\n}\n\nasync function getWorkspaceLogs(id: string | number) {\n  return sqldb.queryRows(\n    'SELECT * FROM workspace_logs WHERE workspace_id = $id;',\n    { id },\n    WorkspaceLogsSchema,\n  );\n}\n\ndescribe('workspaceHost utilities', function () {\n  before(async () => {\n    await helperDb.before.call(this);\n  });\n\n  after(async () => {\n    await helperDb.after.call(this);\n  });\n\n  beforeEach(async () => {\n    await sqldb.queryAsync('DELETE FROM workspaces;', {});\n    await sqldb.queryAsync('DELETE FROM workspace_hosts;', {});\n    await sqldb.queryAsync('DELETE FROM workspace_host_logs;', {});\n  });\n\n  describe('markWorkspaceHostUnhealthy()', () => {\n    it('should mark a host as unhealthy', async () => {\n      await insertWorkspaceHost(1);\n      await insertWorkspaceHost(2);\n\n      const host = await workspaceHostUtils.markWorkspaceHostUnhealthy('1', 'test');\n\n      // First host should be marked as unhealthy\n      assert.equal(host.state, 'unhealthy');\n\n      const logs = await getWorkspaceHostLogs(1);\n      assert.lengthOf(logs, 1);\n\n      const log = logs[0];\n      assert.equal(log.workspace_host_id, '1');\n      assert.equal(log.message, 'test');\n      assert.equal(log.state, 'unhealthy');\n\n      // Second workspace host should be unaffected\n      const secondHost = await selectWorkspaceHost(2);\n      assert.equal(secondHost.state, 'launching');\n\n      const secondLogs = await getWorkspaceHostLogs(2);\n      assert.lengthOf(secondLogs, 0);\n    });\n  });\n\n  describe('markAllWorkspaceHostsUnhealthy()', () => {\n    it('should mark all hosts as unhealthy', async () => {\n      await insertWorkspaceHost(1);\n      await insertWorkspaceHost(2);\n\n      const hosts = await workspaceHostUtils.markAllWorkspaceHostsUnhealthy('test');\n\n      assert.isTrue(hosts.every((host) => host.state === 'unhealthy'));\n\n      for (const id of ['1', '2']) {\n        const logs = await getWorkspaceHostLogs(id);\n        assert.lengthOf(logs, 1);\n\n        const log = logs[0];\n        assert.equal(log.workspace_host_id, id);\n        assert.equal(log.message, 'test');\n        assert.equal(log.state, 'unhealthy');\n      }\n    });\n  });\n\n  describe('assignWorkspaceToHost', () => {\n    it('should assign a workspace to a host', async () => {\n      await insertWorkspace(1);\n      await insertWorkspaceHost(1, 'ready');\n\n      const hostId = await workspaceHostUtils.assignWorkspaceToHost('1', 1);\n      assert.equal(hostId, '1');\n\n      const workspace = await selectWorkspace('1');\n      assert.equal(workspace.workspace_host_id, '1');\n\n      const workspaceLogs = await getWorkspaceLogs(1);\n      assert.lengthOf(workspaceLogs, 1);\n      assert.equal(workspaceLogs[0].state, 'launching');\n      assert.equal(workspaceLogs[0].message, 'Assigned to host 1');\n\n      const workspaceHostLogs = await getWorkspaceHostLogs(1);\n      assert.lengthOf(workspaceHostLogs, 1);\n      assert.equal(workspaceHostLogs[0].state, 'ready');\n      assert.equal(workspaceHostLogs[0].message, 'Assigned workspace 1');\n    });\n\n    it('should not assign a workspace to a host if it is unhealthy', async () => {\n      await insertWorkspace(1);\n      await insertWorkspaceHost(1, 'unhealthy');\n\n      const hostId = await workspaceHostUtils.assignWorkspaceToHost('1', 1);\n      assert.isNull(hostId);\n\n      const workspace = await selectWorkspace('1');\n      assert.isNull(workspace.workspace_host_id);\n\n      assert.isEmpty(await getWorkspaceHostLogs(1));\n      assert.isEmpty(await getWorkspaceLogs(1));\n    });\n\n    it('should not assign a workspace to a host if it is at capacity', async () => {\n      await insertWorkspace(1);\n      await insertWorkspaceHost(1, 'ready');\n\n      // Set capacity to zero to simulate a full host.\n      const hostId = await workspaceHostUtils.assignWorkspaceToHost('1', 0);\n      assert.isNull(hostId);\n\n      const workspace = await selectWorkspace('1');\n      assert.isNull(workspace.workspace_host_id);\n\n      assert.isEmpty(await getWorkspaceHostLogs(1));\n      assert.isEmpty(await getWorkspaceLogs(1));\n    });\n  });\n\n  describe('recaptureDrainingWorkspaceHosts', () => {\n    it('recaptures the specified number of draining hosts', async () => {\n      await insertWorkspaceHost(1, 'draining');\n      await insertWorkspaceHost(2, 'draining');\n      await insertWorkspaceHost(3, 'draining');\n      await insertWorkspaceHost(4, 'draining');\n\n      const recaptured = await workspaceHostUtils.recaptureDrainingWorkspaceHosts(2);\n      assert.equal(recaptured, 2);\n\n      const hostLogs1 = await getWorkspaceHostLogs(1);\n      assert.lengthOf(hostLogs1, 1);\n      assert.equal(hostLogs1[0].state, 'ready');\n      assert.equal(hostLogs1[0].message, 'Recaptured draining host');\n\n      const hostLogs2 = await getWorkspaceHostLogs(2);\n      assert.lengthOf(hostLogs2, 1);\n      assert.equal(hostLogs2[0].state, 'ready');\n      assert.equal(hostLogs2[0].message, 'Recaptured draining host');\n\n      const hostLogs3 = await getWorkspaceHostLogs(3);\n      assert.lengthOf(hostLogs3, 0);\n\n      const hostLogs4 = await getWorkspaceHostLogs(4);\n      assert.lengthOf(hostLogs4, 0);\n    });\n\n    it(\"doesn't recapture a host that is not draining\", async () => {\n      await insertWorkspaceHost(1, 'launching');\n      await insertWorkspaceHost(2, 'ready');\n      await insertWorkspaceHost(3, 'unhealthy');\n      await insertWorkspaceHost(4, 'terminating');\n      await insertWorkspaceHost(5, 'terminated');\n\n      const recaptured = await workspaceHostUtils.recaptureDrainingWorkspaceHosts(1);\n      assert.equal(recaptured, 0);\n    });\n  });\n\n  describe('drainExtraWorkspaceHosts', () => {\n    it('drains the specified number of hosts', async () => {\n      await insertWorkspaceHost(1, 'ready');\n      await insertWorkspaceHost(2, 'ready');\n      await insertWorkspaceHost(3, 'ready');\n      await insertWorkspaceHost(4, 'ready');\n\n      await workspaceHostUtils.drainExtraWorkspaceHosts(2);\n\n      const host1 = await selectWorkspaceHost('1');\n      const host2 = await selectWorkspaceHost('2');\n      const host3 = await selectWorkspaceHost('3');\n      const host4 = await selectWorkspaceHost('4');\n\n      // The oldest hosts should be marked as draining.\n      assert.equal(host1.state, 'draining');\n      assert.equal(host2.state, 'draining');\n      assert.equal(host3.state, 'ready');\n      assert.equal(host4.state, 'ready');\n\n      const hostLogs1 = await getWorkspaceHostLogs(1);\n      assert.lengthOf(hostLogs1, 1);\n      assert.equal(hostLogs1[0].message, 'Draining extra host');\n\n      const hostLogs2 = await getWorkspaceHostLogs(2);\n      assert.lengthOf(hostLogs2, 1);\n      assert.equal(hostLogs2[0].message, 'Draining extra host');\n\n      const hostLogs3 = await getWorkspaceHostLogs(3);\n      assert.lengthOf(hostLogs3, 0);\n\n      const hostLogs4 = await getWorkspaceHostLogs(4);\n      assert.lengthOf(hostLogs4, 0);\n    });\n  });\n\n  describe('findTerminableWorkspaceHosts', () => {\n    it('marks draining host with zero load as terminating', async () => {\n      const host = await insertWorkspaceHost(1, 'draining');\n\n      const hosts = await workspaceHostUtils.findTerminableWorkspaceHosts(0, 0);\n      const hostLogs = await getWorkspaceHostLogs(1);\n\n      assert.lengthOf(hosts, 1);\n      assert.isDefined(hosts.find((h) => h.instance_id === host.instance_id));\n\n      assert.lengthOf(hostLogs, 1);\n      assert.equal(hostLogs[0].message, 'Terminating host');\n    });\n\n    it('marks unhealthy host with zero load as terminating', async () => {\n      const host = await insertWorkspaceHost(1, 'unhealthy');\n\n      const hosts = await workspaceHostUtils.findTerminableWorkspaceHosts(0, 0);\n      assert.lengthOf(hosts, 1);\n      assert.isDefined(hosts.find((h) => h.instance_id === host.instance_id));\n\n      const hostLogs = await getWorkspaceHostLogs(1);\n      assert.lengthOf(hostLogs, 1);\n      assert.equal(hostLogs[0].message, 'Terminating host');\n    });\n\n    it('marks unhealthy host that exceeded timeout as terminating', async () => {\n      const host1 = await insertWorkspaceHost(1, 'unhealthy');\n      await sqldb.queryAsync(\n        \"UPDATE workspace_hosts SET unhealthy_at = NOW() - INTERVAL '1 hour', load_count = 5 WHERE id = $id;\",\n        { id: host1.id },\n      );\n\n      const host2 = await insertWorkspaceHost(2, 'unhealthy');\n      await sqldb.queryAsync(\n        \"UPDATE workspace_hosts SET unhealthy_at = NOW() - INTERVAL '10 seconds', load_count = 5 WHERE id = $id;\",\n        { id: host2.id },\n      );\n\n      // Only the first host should be terminated; the second one hasn't\n      // exceeded the unhealthy timeout yet.\n      const hosts = await workspaceHostUtils.findTerminableWorkspaceHosts(60, 0);\n      assert.lengthOf(hosts, 1);\n      assert.isDefined(hosts.find((h) => h.instance_id === host1.instance_id));\n      assert.isUndefined(hosts.find((h) => h.instance_id === host2.instance_id));\n\n      const hostLogs1 = await getWorkspaceHostLogs(1);\n      assert.lengthOf(hostLogs1, 1);\n      assert.equal(hostLogs1[0].message, 'Terminating host');\n\n      const hostLogs2 = await getWorkspaceHostLogs(2);\n      assert.lengthOf(hostLogs2, 0);\n    });\n\n    it('marks launching host that exceeded timeout as terminating', async () => {\n      const host1 = await insertWorkspaceHost(1, 'launching');\n      await sqldb.queryAsync(\n        \"UPDATE workspace_hosts SET launched_at = NOW() - INTERVAL '1 hour', load_count = 5 WHERE id = $id;\",\n        { id: host1.id },\n      );\n\n      const host2 = await insertWorkspaceHost(2, 'launching');\n      await sqldb.queryAsync(\n        \"UPDATE workspace_hosts SET launched_at = NOW() - INTERVAL '10 seconds', load_count = 5 WHERE id = $id;\",\n        { id: host2.id },\n      );\n\n      // Only the first host should be terminated; the second one hasn't\n      // exceeded the launching timeout yet.\n      const hosts = await workspaceHostUtils.findTerminableWorkspaceHosts(0, 60);\n      assert.lengthOf(hosts, 1);\n      assert.isDefined(hosts.find((h) => h.instance_id === host1.instance_id));\n      assert.isUndefined(hosts.find((h) => h.instance_id === host2.instance_id));\n\n      const hostLogs1 = await getWorkspaceHostLogs(1);\n      assert.lengthOf(hostLogs1, 1);\n      assert.equal(hostLogs1[0].message, 'Terminating host');\n\n      const hostLogs2 = await getWorkspaceHostLogs(2);\n      assert.lengthOf(hostLogs2, 0);\n    });\n\n    it('returns already-terminating hosts', async () => {\n      await insertWorkspaceHost(1, 'terminating');\n\n      const hosts = await workspaceHostUtils.findTerminableWorkspaceHosts(0, 0);\n      assert.lengthOf(hosts, 1);\n\n      // This host was already terminating, so there shouldn't be any logs.\n      const hostLogs = await getWorkspaceHostLogs(1);\n      assert.lengthOf(hostLogs, 0);\n    });\n  });\n\n  describe('terminateWorkspaceHostsIfNotLaunching', () => {\n    it('terminates hosts that are not launching', async () => {\n      const host1 = await insertWorkspaceHost(1, 'launching');\n      const host2 = await insertWorkspaceHost(2, 'ready');\n      const host3 = await insertWorkspaceHost(3, 'unhealthy');\n\n      // Place a workspace on each host.\n      const workspace1 = await insertWorkspace(1, 1);\n      const workspace2 = await insertWorkspace(2, 2);\n      const workspace3 = await insertWorkspace(3, 3);\n\n      const workspaces = await workspaceHostUtils.terminateWorkspaceHostsIfNotLaunching([\n        host1.instance_id,\n        host2.instance_id,\n        host3.instance_id,\n      ]);\n\n      // Only the workspaces on hosts 2 and 3 should have been stopped;\n      // host 1 is still launching.\n      assert.lengthOf(workspaces, 2);\n      assert.isUndefined(workspaces.find((w) => w.workspace_id === workspace1.id));\n      assert.isDefined(\n        workspaces.find((w) => w.workspace_id === workspace2.id && w.state === 'stopped'),\n      );\n      assert.isDefined(\n        workspaces.find((w) => w.workspace_id === workspace3.id && w.state === 'stopped'),\n      );\n\n      const hostLogs1 = await getWorkspaceHostLogs(1);\n      assert.lengthOf(hostLogs1, 0);\n\n      const hostLogs2 = await getWorkspaceHostLogs(2);\n      assert.lengthOf(hostLogs2, 1);\n      assert.equal(hostLogs2[0].message, 'Host instance was not found');\n\n      const hostLogs3 = await getWorkspaceHostLogs(3);\n      assert.lengthOf(hostLogs3, 1);\n      assert.equal(hostLogs3[0].message, 'Host instance was not found');\n\n      const workspaceLogs1 = await getWorkspaceLogs(1);\n      assert.lengthOf(workspaceLogs1, 0);\n\n      const workspaceLogs2 = await getWorkspaceLogs(2);\n      assert.lengthOf(workspaceLogs2, 1);\n      assert.equal(workspaceLogs2[0].message, 'Host instance was not found');\n\n      const workspaceLogs3 = await getWorkspaceLogs(3);\n      assert.lengthOf(workspaceLogs3, 1);\n      assert.equal(workspaceLogs3[0].message, 'Host instance was not found');\n    });\n  });\n});\n"]}