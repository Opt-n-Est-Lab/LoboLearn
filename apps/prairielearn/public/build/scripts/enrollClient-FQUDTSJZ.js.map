{
  "version": 3,
  "sources": ["../../../../../packages/browser-utils/src/on-document-ready.ts", "../../../../../packages/browser-utils/src/template-from-attributes.ts", "../../../assets/scripts/enrollClient.ts"],
  "sourcesContent": ["export function onDocumentReady(fn: () => void): void {\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', () => {\n      fn();\n    });\n  }\n}\n", "type AttributeMap = Record<string, string>;\n\n/**\n * For each key in `attributes`, copies that attribute's value from `source`\n * into all elements within `target` that match the corresponding value in\n * `attributes`.\n *\n * For `<input type=\"checkbox\">` elements it interprets the attribute as JSON\n * and uses the truthiness of it to set `checked`. For other `<input>` elements,\n * it sets the `value` attribute. For all others, it sets the `textContent`\n * attribute.\n *\n * @param source The element to copy attributes from\n * @param target The element to copy attributes into\n * @param attributes A map of attributes to copy from `source` to `target`\n * @param param.debug If true, logs debug information to the console\n */\nexport function templateFromAttributes(\n  source: HTMLElement,\n  target: HTMLElement,\n  attributes: AttributeMap,\n) {\n  Object.entries(attributes).forEach(([sourceAttribute, targetSelector]) => {\n    const attributeValue = source.getAttribute(sourceAttribute);\n    if (attributeValue == null) {\n      console.error(`Attribute \"${sourceAttribute}\" not found on source element`);\n      return;\n    }\n\n    const targets = target.querySelectorAll(targetSelector);\n    if (targets.length === 0) {\n      console.error(`No elements found matching selector \"${targetSelector}\"`);\n      return;\n    }\n\n    targets.forEach((targetElement) => {\n      if (targetElement instanceof HTMLInputElement) {\n        if (targetElement.type === 'checkbox') {\n          const attributeParsed = JSON.parse(attributeValue);\n          targetElement.checked = !!attributeParsed;\n          // Manually trigger a 'change' event. This does not trigger\n          // automatically when we change properties like 'checked'.\n          targetElement.dispatchEvent(new Event('change', { bubbles: true }));\n        } else {\n          targetElement.value = attributeValue;\n        }\n      } else if (targetElement instanceof HTMLSelectElement) {\n        const i = Array.from(targetElement.options).findIndex((o) => o.value === attributeValue);\n        if (i >= 0) {\n          targetElement.selectedIndex = i;\n          // Manually trigger a 'change' event. This does not trigger\n          // automatically when we change properties like 'checked'.\n          targetElement.dispatchEvent(new Event('change', { bubbles: true }));\n        } else {\n          console.error(`Could not find option with value \"${attributeValue}\"`);\n        }\n      } else {\n        targetElement.textContent = attributeValue;\n      }\n    });\n  });\n}\n", "import { onDocumentReady, templateFromAttributes } from '@prairielearn/browser-utils';\n\nonDocumentReady(() => {\n  $('#add-course-modal').on('show.bs.modal', (e) => {\n    const button = (e as any).relatedTarget as HTMLElement;\n    const modal = e.target as HTMLElement;\n\n    templateFromAttributes(button, modal, {\n      'data-course-instance-id': '.js-course-instance-id',\n      'data-course-instance-short-label': '.js-course-instance-short-label',\n    });\n  });\n\n  $('#remove-course-modal').on('show.bs.modal', (e) => {\n    const button = (e as any).relatedTarget as HTMLElement;\n    const modal = e.target as HTMLElement;\n\n    templateFromAttributes(button, modal, {\n      'data-course-instance-id': '.js-course-instance-id',\n      'data-course-instance-short-label': '.js-course-instance-short-label',\n    });\n  });\n});\n"],
  "mappings": "mBAAM,SAAUA,EAAgBC,EAAc,CACxC,SAAS,aAAe,eAAiB,SAAS,aAAe,WACnEA,EAAE,EAEF,SAAS,iBAAiB,mBAAoB,IAAK,CACjDA,EAAE,CACJ,CAAC,CAEL,CCSM,SAAUC,EACdC,EACAC,EACAC,EAAwB,CAExB,OAAO,QAAQA,CAAU,EAAE,QAAQ,CAAC,CAACC,EAAiBC,CAAc,IAAK,CACvE,IAAMC,EAAiBL,EAAO,aAAaG,CAAe,EAC1D,GAAIE,GAAkB,KAAM,CAC1B,QAAQ,MAAM,cAAcF,CAAe,+BAA+B,EAC1E,MACF,CAEA,IAAMG,EAAUL,EAAO,iBAAiBG,CAAc,EACtD,GAAIE,EAAQ,SAAW,EAAG,CACxB,QAAQ,MAAM,wCAAwCF,CAAc,GAAG,EACvE,MACF,CAEAE,EAAQ,QAASC,GAAiB,CAChC,GAAIA,aAAyB,iBAC3B,GAAIA,EAAc,OAAS,WAAY,CACrC,IAAMC,EAAkB,KAAK,MAAMH,CAAc,EACjDE,EAAc,QAAU,CAAC,CAACC,EAG1BD,EAAc,cAAc,IAAI,MAAM,SAAU,CAAE,QAAS,EAAI,CAAE,CAAC,CACpE,MACEA,EAAc,MAAQF,UAEfE,aAAyB,kBAAmB,CACrD,IAAME,EAAI,MAAM,KAAKF,EAAc,OAAO,EAAE,UAAWG,GAAMA,EAAE,QAAUL,CAAc,EACnFI,GAAK,GACPF,EAAc,cAAgBE,EAG9BF,EAAc,cAAc,IAAI,MAAM,SAAU,CAAE,QAAS,EAAI,CAAE,CAAC,GAElE,QAAQ,MAAM,qCAAqCF,CAAc,GAAG,CAExE,MACEE,EAAc,YAAcF,CAEhC,CAAC,CACH,CAAC,CACH,CC3DAM,EAAgB,IAAM,CACpB,EAAE,mBAAmB,EAAE,GAAG,gBAAkB,GAAM,CAChD,IAAMC,EAAU,EAAU,cACpBC,EAAQ,EAAE,OAEhBC,EAAuBF,EAAQC,EAAO,CACpC,0BAA2B,yBAC3B,mCAAoC,iCACtC,CAAC,CACH,CAAC,EAED,EAAE,sBAAsB,EAAE,GAAG,gBAAkB,GAAM,CACnD,IAAMD,EAAU,EAAU,cACpBC,EAAQ,EAAE,OAEhBC,EAAuBF,EAAQC,EAAO,CACpC,0BAA2B,yBAC3B,mCAAoC,iCACtC,CAAC,CACH,CAAC,CACH,CAAC",
  "names": ["onDocumentReady", "fn", "templateFromAttributes", "source", "target", "attributes", "sourceAttribute", "targetSelector", "attributeValue", "targets", "targetElement", "attributeParsed", "i", "o", "onDocumentReady", "button", "modal", "templateFromAttributes"]
}
