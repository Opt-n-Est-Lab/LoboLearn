{
  "version": 3,
  "sources": ["../../../../../packages/browser-utils/src/on-document-ready.ts", "../../../../../packages/browser-utils/src/parse-html.ts", "../../../../../node_modules/js-base64/base64.mjs", "../../../../../packages/html/src/index.ts", "../../../../../packages/browser-utils/src/encode-data.ts", "../../../assets/scripts/lib/confirmOnUnload.ts", "../../../assets/scripts/lib/countdown.ts", "../../../assets/scripts/examTimeLimitCountdown.ts"],
  "sourcesContent": ["export function onDocumentReady(fn: () => void): void {\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', () => {\n      fn();\n    });\n  }\n}\n", "import type { HtmlSafeString } from '@prairielearn/html';\n\nexport function parseHTML(document: Document, html: string | HtmlSafeString): DocumentFragment {\n  if (typeof html !== 'string') html = html.toString();\n  const template = document.createElement('template');\n  template.innerHTML = html;\n  return document.importNode(template.content, true);\n}\n\n/**\n * Like {@link parseHTML}, but returns an {@link Element} instead of a\n * {@link DocumentFragment}. If the HTML being parsed does not contain\n * exactly one element, an error is thrown.\n */\nexport function parseHTMLElement<T extends Element = Element>(\n  document: Document,\n  html: string | HtmlSafeString,\n): T {\n  const documentFragment = parseHTML(document, html);\n  if (documentFragment.childElementCount !== 1) {\n    throw new Error('Expected HTML to contain exactly one element');\n  }\n  return documentFragment.firstElementChild as T;\n}\n", "/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 \u00A75\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 \u00A75.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n", "const ENCODE_HTML_RULES: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&#34;',\n  \"'\": '&#39;',\n};\nconst MATCH_HTML = /[&<>'\"]/g;\n\nfunction encodeCharacter(c: string) {\n  return ENCODE_HTML_RULES[c] || c;\n}\n\n/**\n * Based on the `escapeXML` function from the `ejs` library.\n */\nfunction escapeHtmlRaw(value: string): string {\n  return value == null ? '' : String(value).replace(MATCH_HTML, encodeCharacter);\n}\n\nfunction escapeValue(value: unknown): string {\n  if (value instanceof HtmlSafeString) {\n    // Already escaped!\n    return value.toString();\n  } else if (Array.isArray(value)) {\n    return value.map((val) => escapeValue(val)).join('');\n  } else if (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'bigint' ||\n    typeof value === 'boolean'\n  ) {\n    return escapeHtmlRaw(String(value));\n  } else if (value == null) {\n    // undefined or null -- render nothing\n    return '';\n  } else if (typeof value === 'object') {\n    throw new Error(`Cannot interpolate object in template: ${JSON.stringify(value)}`);\n  } else {\n    // There shouldn't be any other types\n    throw new Error(\n      `Unexpected type in template: ${typeof value} for value ${JSON.stringify(value)}`,\n    );\n  }\n}\n\n// Based on https://github.com/Janpot/escape-html-template-tag\nexport class HtmlSafeString {\n  private readonly strings: readonly string[];\n  private readonly values: unknown[];\n\n  constructor(strings: readonly string[], values: unknown[]) {\n    this.strings = strings;\n    this.values = values;\n  }\n\n  toString(): string {\n    return this.values.reduce<string>((acc, val, i) => {\n      return acc + escapeValue(val) + this.strings[i + 1];\n    }, this.strings[0]);\n  }\n}\n\nexport type HtmlValue =\n  | string\n  | number\n  | boolean\n  | bigint\n  | HtmlSafeString\n  | undefined\n  | null\n  | HtmlValue[];\n\nexport function html(strings: TemplateStringsArray, ...values: HtmlValue[]): HtmlSafeString {\n  return new HtmlSafeString(strings, values);\n}\n\n/**\n * Pre-escapes the rendered HTML. Useful for when you want to inline the HTML\n * in something else, for instance in a `data-bs-content` attribute for a Bootstrap\n * popover.\n */\nexport function escapeHtml(html: HtmlSafeString): HtmlSafeString {\n  return unsafeHtml(escapeHtmlRaw(html.toString()));\n}\n\n/**\n * Will render the provided value without any additional escaping. Use carefully\n * with user-provided data.\n *\n * @param value The value to render.\n * @returns An {@link HtmlSafeString} representing the provided value.\n */\nexport function unsafeHtml(value: string): HtmlSafeString {\n  return new HtmlSafeString([value], []);\n}\n\n/**\n * Joins a list of HTML values with a separator.\n *\n * @param values The values to join.\n * @param separator The separator to use between values.\n */\nexport function joinHtml(values: HtmlValue[], separator: HtmlValue = ''): HtmlSafeString {\n  return unsafeHtml(values.map(escapeValue).join(escapeValue(separator)));\n}\n", "import { decode, encode } from 'js-base64';\n\nimport { type HtmlSafeString, html, unsafeHtml } from '@prairielearn/html';\n\n/**\n * Use this function as an HTML component encode data that will be passed to the client.\n *\n * @param data The data to encode.\n * @param elementId The element ID to use for the encoded data.\n *\n */\nexport function EncodedData<T = unknown>(data: T, elementId: string): HtmlSafeString {\n  const encodedData = unsafeHtml(encode(JSON.stringify(data)));\n  return html`<script id=\"${elementId}\" type=\"application/base64\">\n    ${encodedData}\n  </script>`;\n}\n\n/**\n * Decode data that was passed to the client from in HTML component using EncodeData().\n *\n * @param elementId The element ID that stores the encoded data, from from EncodedData().\n * @returns The decoded data.\n */\nexport function decodeData<T = any>(elementId: string): T {\n  const base64Data = document.getElementById(elementId)?.textContent;\n  if (base64Data == null) {\n    throw new Error(`No data found in element with ID \"${elementId}\"`);\n  }\n  const jsonData = decode(base64Data);\n  const data = JSON.parse(jsonData);\n  return data;\n}\n", "function getQuestionFormData(form: HTMLFormElement): string {\n  // Cast FormData since TS does not support this parameter,\n  // see https://github.com/microsoft/TypeScript/issues/30584\n  const formData = new URLSearchParams(new FormData(form) as any);\n  formData.delete('__csrf_token');\n  form.querySelectorAll<HTMLInputElement>('[data-skip-unload-check]').forEach((input) => {\n    if (input.name) formData.delete(input.name);\n  });\n  return formData.toString();\n}\n\nexport function saveQuestionFormData(form: HTMLFormElement | null) {\n  if (form) form.dataset.originalFormData = getQuestionFormData(form);\n}\n\nexport function confirmOnUnload(form: HTMLFormElement) {\n  // Set form state on load. Use timeout of zero to trigger this change in the\n  // next event cycle. This ensures any initialization code done by elements is\n  // executed before saving the data.\n  setTimeout(() => saveQuestionFormData(form), 0);\n\n  // Set form state on submit, since in this case the \"unsaved\" data is being saved\n  form.addEventListener('submit', () => saveQuestionFormData(form));\n\n  // Check form state on unload\n  window.addEventListener('beforeunload', (event) => {\n    const isSameForm = form.dataset.originalFormData === getQuestionFormData(form);\n\n    if (!isSameForm) {\n      // event.preventDefault() is used in Safari/Firefox, but not supported by Chrome/Edge/etc.\n      // Returning a string is supported in almost all browsers that support beforeunload.\n      // Newer versions of Chrome/Edge appear to no longer support returning a string,\n      // but they do seem to support setting `event.returnValue`.\n      // Safari on iOS does not support confirmation on beforeunload at all.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#compatibility_notes\n      // Note that per the spec, we must technically return a non-empty string,\n      // although the contents of the string should always be ignored.\n      // https://html.spec.whatwg.org/multipage/browsing-the-web.html#unloading-documents:event-beforeunload\n      event.preventDefault();\n      event.returnValue = 'prompt';\n      return 'prompt';\n    }\n  });\n}\n", "/*********************************************************************\n\nThis code makes a countdown timer UI to a server-determined final time. We assume that the server\nand client clocks are not synchronized, so we only use time differentials to relate server to client\ntimes. We also assume that the final time is relatively fixed, though occasional changes in the\nserver are supported. The key event times are:\n\nServer time:        process                       countdownEnd\n                       |                                |\nReal time: ------------|----d1----|----d2----|----d3----|------\n                                  |          |\nClient time:                clientStart     now\n\nprocess:      server time during response processing\nclientStart:  client time as soon as possible after last update\nnow:          client time when the countdown is rendered\ncountdownEnd: server time when the timer should expire\nd1, d2, d3:   time intervals between real event times\n\nTo find clientStart we use the current client time when the JS below first executes during page\nrender. We assume that d1 is small enough that this would not give the student any advantage,\nparticularly considering the student would presumably be unable to work on anything in this time\nperiod, since the page is still loading.\n\nWe want a tight upper bound on d3 = (countdownEnd - now), and we want to calculate it only using\ntime differentials computed either purely with server times or purely with client times.\n\nObserve that:\ncountdownEnd - process = d1 + d2 + d3\n                       < d2 + d3\n\nThus:\nd3 > (countdownEnd - process) - (now - clientStart)\n\nThis bound is fairly tight if d1 is small.\n\nWe assume that we have been passed the value of (countdownEnd - process) in milliseconds as the\nvariable \"serverRemainingMS\". Periodically (every one minute) we update this remaining time from the\nserver, and at this point we update clientStart as well.\n\n*********************************************************************/\n\nexport function setupCountdown(options: {\n  displaySelector: string;\n  progressSelector: string;\n  initialServerRemainingMS: number;\n  initialServerTimeLimitMS: number;\n  serverUpdateURL?: string;\n  onTimerOut?: () => void;\n  onRemainingTime?: Record<number, () => void>;\n  onServerUpdateFail?: (remainingMS: number) => void;\n  getBackgroundColor?: (remainingSec: number) => string;\n}) {\n  const countdownDisplay = document.querySelector<HTMLElement>(options.displaySelector);\n  const countdownProgress = document.querySelector<HTMLElement>(options.progressSelector);\n\n  if (!countdownDisplay || !countdownProgress) return;\n\n  let serverRemainingMS: number;\n  let serverTimeLimitMS: number;\n  let lastRemainingMS: number = options.initialServerRemainingMS;\n  let clientStart: number;\n  let updateServerIfExpired = true;\n  let nextCountdownDisplay: ReturnType<typeof setTimeout> | null = null;\n\n  countdownProgress.classList.add('progress');\n  countdownProgress.innerHTML = '<div class=\"progress-bar progress-bar-primary\"></div>';\n  const countdownProgressBar = countdownProgress.querySelector('div');\n\n  handleServerResponseRemainingMS({\n    serverRemainingMS: options.initialServerRemainingMS,\n    serverTimeLimitMS: options.initialServerTimeLimitMS,\n  });\n\n  if (options.serverUpdateURL) {\n    window.setInterval(updateServerRemainingMS, 60000);\n  }\n\n  function handleServerResponseRemainingMS(data: any) {\n    serverRemainingMS = data.serverRemainingMS;\n    serverTimeLimitMS = data.serverTimeLimitMS;\n    clientStart = Date.now();\n\n    console.log('Time remaining: ' + serverRemainingMS + ' ms');\n    if (serverRemainingMS <= 0) {\n      options.onTimerOut?.();\n      updateServerIfExpired = false;\n    } else {\n      displayCountdown();\n    }\n  }\n\n  function updateServerRemainingMS() {\n    if (options.serverUpdateURL) {\n      fetch(options.serverUpdateURL)\n        .then(async (response) => {\n          handleServerResponseRemainingMS(await response.json());\n        })\n        .catch((err) => {\n          console.log('Error retrieving remaining time', err);\n          const remainingMS = Math.max(0, serverRemainingMS - (Date.now() - clientStart));\n          options.onServerUpdateFail?.(remainingMS);\n          if (remainingMS <= 0) {\n            updateServerIfExpired = false;\n          }\n          displayCountdown();\n        });\n    }\n  }\n\n  function displayCountdown() {\n    if (!countdownProgressBar || !countdownDisplay) return;\n\n    const remainingMS = Math.max(0, serverRemainingMS - (Date.now() - clientStart));\n    const remainingSec = Math.floor(remainingMS / 1000);\n    const remainingMin = Math.floor(remainingSec / 60);\n    const perc = 100 - Math.max(0, Math.min(100, (remainingMS / serverTimeLimitMS) * 100));\n    const backgroundColor = options.getBackgroundColor?.(remainingSec) || 'bg-info';\n\n    countdownProgressBar.style.width = perc + '%';\n    countdownProgressBar.className = 'progress-bar ' + backgroundColor;\n    countdownDisplay.innerText = remainingSec >= 60 ? remainingMin + ' min' : remainingSec + ' sec';\n\n    if (remainingMS > 0) {\n      // Perform any timer-based callbacks falling between last and current tick\n      if (options.onRemainingTime) {\n        for (const time in options.onRemainingTime) {\n          if (remainingMS <= +time && +time < lastRemainingMS) {\n            options.onRemainingTime[time]();\n          }\n        }\n      }\n      lastRemainingMS = remainingMS;\n      // cancel any existing scheduled call to displayCountdown\n      if (nextCountdownDisplay != null) clearTimeout(nextCountdownDisplay);\n      // reschedule for the next half-second time\n      nextCountdownDisplay = setTimeout(displayCountdown, (remainingMS - 500) % 1000);\n    } else if (options.serverUpdateURL && updateServerIfExpired) {\n      // If the timer runs out, trigger a new server update to confirm before closing\n      updateServerRemainingMS();\n    } else {\n      options.onTimerOut?.();\n    }\n  }\n}\n", "import { decodeData, onDocumentReady, parseHTMLElement } from '@prairielearn/browser-utils';\nimport { html } from '@prairielearn/html';\n\nimport { saveQuestionFormData } from './lib/confirmOnUnload.js';\nimport { setupCountdown } from './lib/countdown.js';\n\nfunction showWarningPopup(id: string, message: string) {\n  let popup = document.querySelector('#warning-popup');\n  if (!popup) {\n    popup = parseHTMLElement<HTMLDivElement>(\n      document,\n      html`<div\n        id=\"warning-popup\"\n        class=\"fixed-bottom d-flex flex-column align-items-center mb-5\"\n      ></div>`,\n    );\n    document.body.append(popup);\n  }\n  // Only show one popup with the same ID at the same time\n  if (!document.querySelector('#popup-' + id)) {\n    popup.appendChild(\n      parseHTMLElement<HTMLDivElement>(\n        document,\n        html`<div\n          id=\"popup-${id}\"\n          class=\"show align-items-center alert alert-warning alert-dismissible pulse\"\n          role=\"alert\"\n          aria-live=\"assertive\"\n          aria-atomic=\"true\"\n        >\n          <div>${message}</div>\n          <button\n            type=\"button\"\n            class=\"btn-close\"\n            data-bs-dismiss=\"alert\"\n            aria-label=\"Close\"\n          ></button>\n        </div>`,\n      ),\n    );\n  }\n}\n\nonDocumentReady(() => {\n  const timeLimitData = decodeData<{\n    serverRemainingMS: number;\n    serverTimeLimitMS: number;\n    serverUpdateURL: string;\n    canTriggerFinish: boolean;\n    showsTimeoutWarning: boolean;\n    reloadOnFail: boolean;\n    csrfToken: string;\n  }>('time-limit-data');\n  setupCountdown({\n    displaySelector: '#countdownDisplay',\n    progressSelector: '#countdownProgress',\n    initialServerRemainingMS: timeLimitData.serverRemainingMS,\n    initialServerTimeLimitMS: timeLimitData.serverTimeLimitMS,\n    serverUpdateURL: timeLimitData.serverUpdateURL,\n    onTimerOut: () => {\n      const countdown = document.querySelector('#countdownDisplay');\n      if (countdown) countdown.innerHTML = 'expired';\n      // if viewing exam as a different effective user, do not trigger time limit finish\n      if (timeLimitData.canTriggerFinish) {\n        // do not trigger unsaved warning dialog\n        saveQuestionFormData(document.querySelector('form.question-form'));\n        const form = parseHTMLElement<HTMLFormElement>(\n          document,\n          html`<form method=\"POST\">\n            <input type=\"hidden\" name=\"__action\" value=\"timeLimitFinish\" />\n            <input type=\"hidden\" name=\"__csrf_token\" value=\"${timeLimitData.csrfToken}\" />\n          </form>`,\n        );\n        document.body.append(form);\n        form.submit();\n      }\n    },\n    onRemainingTime: {\n      60000: () => {\n        if (timeLimitData.showsTimeoutWarning) {\n          showWarningPopup(\n            'examTimeout',\n            'Your exam is ending soon. Please finish and submit your work.',\n          );\n        }\n      },\n    },\n    onServerUpdateFail: (remainingMS: number) => {\n      // On time limit fail, reload the page\n      if (timeLimitData.reloadOnFail) {\n        window.location.reload();\n      } else {\n        // Once the exam access period finishes, we expect updates of the remaining time\n        // to fail, so we only show a warning popup if time hasn't yet expired.\n        if (remainingMS > 0) {\n          showWarningPopup(\n            'updateFail',\n            'Failed to refresh exam timer. The displayed remaining time might be inaccurate.',\n          );\n        }\n      }\n    },\n    getBackgroundColor: (remainingSec) => {\n      if (remainingSec >= 180) {\n        return 'bg-primary';\n      } else if (remainingSec >= 60) {\n        return 'bg-warning';\n      } else {\n        return 'bg-danger';\n      }\n    },\n  });\n});\n"],
  "mappings": "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",
  "names": ["onDocumentReady", "fn", "parseHTML", "document", "html", "template", "parseHTMLElement", "documentFragment", "_hasBuffer", "_TD", "_TE", "b64ch", "b64chs", "b64tab", "a", "tab", "c", "i", "b64re", "_fromCC", "_U8Afrom", "it", "_tidyB64", "s", "re_btou", "cb_btou", "cccc", "cp", "offset", "_fromCC", "btou", "b", "atobPolyfill", "asc", "b64re", "u24", "bin", "r1", "r2", "i", "b64tab", "_atob", "_tidyB64", "_hasBuffer", "_toUint8Array", "a", "_U8Afrom", "c", "_decode", "_hasBuffer", "a", "_TD", "_toUint8Array", "btou", "_atob", "_unURI", "_tidyB64", "m0", "decode", "src", "ENCODE_HTML_RULES", "MATCH_HTML", "encodeCharacter", "c", "escapeHtmlRaw", "value", "escapeValue", "HtmlSafeString", "val", "strings", "values", "__publicField", "acc", "i", "html", "decodeData", "elementId", "_a", "base64Data", "jsonData", "decode", "getQuestionFormData", "form", "formData", "input", "saveQuestionFormData", "setupCountdown", "options", "countdownDisplay", "countdownProgress", "serverRemainingMS", "serverTimeLimitMS", "lastRemainingMS", "clientStart", "updateServerIfExpired", "nextCountdownDisplay", "countdownProgressBar", "handleServerResponseRemainingMS", "updateServerRemainingMS", "data", "_a", "displayCountdown", "response", "err", "remainingMS", "_b", "remainingSec", "remainingMin", "perc", "backgroundColor", "time", "showWarningPopup", "id", "message", "popup", "parseHTMLElement", "html", "onDocumentReady", "timeLimitData", "decodeData", "setupCountdown", "countdown", "saveQuestionFormData", "form", "remainingMS", "remainingSec"]
}
