{
  "version": 3,
  "sources": ["../../../../../packages/browser-utils/src/on-document-ready.ts", "../../../assets/scripts/instructorCourseAdminInstancesClient.ts"],
  "sourcesContent": ["export function onDocumentReady(fn: () => void): void {\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', () => {\n      fn();\n    });\n  }\n}\n", "import { onDocumentReady } from '@prairielearn/browser-utils';\n\nonDocumentReady(() => {\n  const startAccessDateInput = document.querySelector<HTMLInputElement>('#start_access_date');\n  const endAccessDateInput = document.querySelector<HTMLInputElement>('#end_access_date');\n  const createButton = document.querySelector<HTMLButtonElement>('#add_course_instance_button');\n\n  if (!startAccessDateInput || !endAccessDateInput || !createButton) return;\n\n  createButton.addEventListener('click', () => {\n    // Ensure that the end access date is after the start access date\n    const startAccessDate = new Date(startAccessDateInput.value);\n    const endAccessDate = new Date(endAccessDateInput.value);\n\n    if (startAccessDate >= endAccessDate) {\n      // Set custom validity only on the endAccessDateInput to trigger the error message\n      // on the last input of the form instead of the second to last (startAccessDateInput)\n      endAccessDateInput.setCustomValidity('End access date must be after start access date');\n    } else {\n      endAccessDateInput.setCustomValidity('');\n    }\n  });\n\n  const accessDatesEnabledInput = document.querySelector<HTMLInputElement>('#access_dates_enabled');\n  const accessDatesDiv = document.querySelector<HTMLDivElement>('#accessDates');\n  if (!accessDatesEnabledInput || !accessDatesDiv) return;\n\n  accessDatesEnabledInput.addEventListener('change', () => {\n    const accessDatesEnabled = accessDatesEnabledInput.checked;\n\n    // If access dates are not enabled, disable the inputs; otherwise, enable them\n    startAccessDateInput.disabled = !accessDatesEnabled;\n    endAccessDateInput.disabled = !accessDatesEnabled;\n\n    // If access dates are not enabled, hide the parent div of the access date inputs; otherwise, show it\n    accessDatesDiv.hidden = !accessDatesEnabled;\n  });\n});\n"],
  "mappings": "mBAAM,SAAUA,EAAgBC,EAAc,CACxC,SAAS,aAAe,eAAiB,SAAS,aAAe,WACnEA,EAAE,EAEF,SAAS,iBAAiB,mBAAoB,IAAK,CACjDA,EAAE,CACJ,CAAC,CAEL,CCNAC,EAAgB,IAAM,CACpB,IAAMC,EAAuB,SAAS,cAAgC,oBAAoB,EACpFC,EAAqB,SAAS,cAAgC,kBAAkB,EAChFC,EAAe,SAAS,cAAiC,6BAA6B,EAE5F,GAAI,CAACF,GAAwB,CAACC,GAAsB,CAACC,EAAc,OAEnEA,EAAa,iBAAiB,QAAS,IAAM,CAE3C,IAAMC,EAAkB,IAAI,KAAKH,EAAqB,KAAK,EACrDI,EAAgB,IAAI,KAAKH,EAAmB,KAAK,EAEnDE,GAAmBC,EAGrBH,EAAmB,kBAAkB,iDAAiD,EAEtFA,EAAmB,kBAAkB,EAAE,CAE3C,CAAC,EAED,IAAMI,EAA0B,SAAS,cAAgC,uBAAuB,EAC1FC,EAAiB,SAAS,cAA8B,cAAc,EACxE,CAACD,GAA2B,CAACC,GAEjCD,EAAwB,iBAAiB,SAAU,IAAM,CACvD,IAAME,EAAqBF,EAAwB,QAGnDL,EAAqB,SAAW,CAACO,EACjCN,EAAmB,SAAW,CAACM,EAG/BD,EAAe,OAAS,CAACC,CAC3B,CAAC,CACH,CAAC",
  "names": ["onDocumentReady", "fn", "onDocumentReady", "startAccessDateInput", "endAccessDateInput", "createButton", "startAccessDate", "endAccessDate", "accessDatesEnabledInput", "accessDatesDiv", "accessDatesEnabled"]
}
