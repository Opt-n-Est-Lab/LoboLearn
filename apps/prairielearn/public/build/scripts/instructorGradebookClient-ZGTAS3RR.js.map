{
  "version": 3,
  "sources": ["../../../../../packages/browser-utils/src/on-document-ready.ts", "../../../../../packages/browser-utils/src/parse-html.ts", "../../../../../node_modules/js-base64/base64.mjs", "../../../../../packages/html/src/index.ts", "../../../../../packages/browser-utils/src/encode-data.ts", "../../../src/components/AssessmentBadge.html.ts", "../../../assets/scripts/instructorGradebookClient.ts"],
  "sourcesContent": ["export function onDocumentReady(fn: () => void): void {\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', () => {\n      fn();\n    });\n  }\n}\n", "import type { HtmlSafeString } from '@prairielearn/html';\n\nexport function parseHTML(document: Document, html: string | HtmlSafeString): DocumentFragment {\n  if (typeof html !== 'string') html = html.toString();\n  const template = document.createElement('template');\n  template.innerHTML = html;\n  return document.importNode(template.content, true);\n}\n\n/**\n * Like {@link parseHTML}, but returns an {@link Element} instead of a\n * {@link DocumentFragment}. If the HTML being parsed does not contain\n * exactly one element, an error is thrown.\n */\nexport function parseHTMLElement<T extends Element = Element>(\n  document: Document,\n  html: string | HtmlSafeString,\n): T {\n  const documentFragment = parseHTML(document, html);\n  if (documentFragment.childElementCount !== 1) {\n    throw new Error('Expected HTML to contain exactly one element');\n  }\n  return documentFragment.firstElementChild as T;\n}\n", "/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 \u00A75\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 \u00A75.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n", "const ENCODE_HTML_RULES: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&#34;',\n  \"'\": '&#39;',\n};\nconst MATCH_HTML = /[&<>'\"]/g;\n\nfunction encodeCharacter(c: string) {\n  return ENCODE_HTML_RULES[c] || c;\n}\n\n/**\n * Based on the `escapeXML` function from the `ejs` library.\n */\nfunction escapeHtmlRaw(value: string): string {\n  return value == null ? '' : String(value).replace(MATCH_HTML, encodeCharacter);\n}\n\nfunction escapeValue(value: unknown): string {\n  if (value instanceof HtmlSafeString) {\n    // Already escaped!\n    return value.toString();\n  } else if (Array.isArray(value)) {\n    return value.map((val) => escapeValue(val)).join('');\n  } else if (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'bigint' ||\n    typeof value === 'boolean'\n  ) {\n    return escapeHtmlRaw(String(value));\n  } else if (value == null) {\n    // undefined or null -- render nothing\n    return '';\n  } else if (typeof value === 'object') {\n    throw new Error(`Cannot interpolate object in template: ${JSON.stringify(value)}`);\n  } else {\n    // There shouldn't be any other types\n    throw new Error(\n      `Unexpected type in template: ${typeof value} for value ${JSON.stringify(value)}`,\n    );\n  }\n}\n\n// Based on https://github.com/Janpot/escape-html-template-tag\nexport class HtmlSafeString {\n  private readonly strings: readonly string[];\n  private readonly values: unknown[];\n\n  constructor(strings: readonly string[], values: unknown[]) {\n    this.strings = strings;\n    this.values = values;\n  }\n\n  toString(): string {\n    return this.values.reduce<string>((acc, val, i) => {\n      return acc + escapeValue(val) + this.strings[i + 1];\n    }, this.strings[0]);\n  }\n}\n\nexport type HtmlValue =\n  | string\n  | number\n  | boolean\n  | bigint\n  | HtmlSafeString\n  | undefined\n  | null\n  | HtmlValue[];\n\nexport function html(strings: TemplateStringsArray, ...values: HtmlValue[]): HtmlSafeString {\n  return new HtmlSafeString(strings, values);\n}\n\n/**\n * Pre-escapes the rendered HTML. Useful for when you want to inline the HTML\n * in something else, for instance in a `data-bs-content` attribute for a Bootstrap\n * popover.\n */\nexport function escapeHtml(html: HtmlSafeString): HtmlSafeString {\n  return unsafeHtml(escapeHtmlRaw(html.toString()));\n}\n\n/**\n * Will render the provided value without any additional escaping. Use carefully\n * with user-provided data.\n *\n * @param value The value to render.\n * @returns An {@link HtmlSafeString} representing the provided value.\n */\nexport function unsafeHtml(value: string): HtmlSafeString {\n  return new HtmlSafeString([value], []);\n}\n\n/**\n * Joins a list of HTML values with a separator.\n *\n * @param values The values to join.\n * @param separator The separator to use between values.\n */\nexport function joinHtml(values: HtmlValue[], separator: HtmlValue = ''): HtmlSafeString {\n  return unsafeHtml(values.map(escapeValue).join(escapeValue(separator)));\n}\n", "import { decode, encode } from 'js-base64';\n\nimport { type HtmlSafeString, html, unsafeHtml } from '@prairielearn/html';\n\n/**\n * Use this function as an HTML component encode data that will be passed to the client.\n *\n * @param data The data to encode.\n * @param elementId The element ID to use for the encoded data.\n *\n */\nexport function EncodedData<T = unknown>(data: T, elementId: string): HtmlSafeString {\n  const encodedData = unsafeHtml(encode(JSON.stringify(data)));\n  return html`<script id=\"${elementId}\" type=\"application/base64\">\n    ${encodedData}\n  </script>`;\n}\n\n/**\n * Decode data that was passed to the client from in HTML component using EncodeData().\n *\n * @param elementId The element ID that stores the encoded data, from from EncodedData().\n * @returns The decoded data.\n */\nexport function decodeData<T = any>(elementId: string): T {\n  const base64Data = document.getElementById(elementId)?.textContent;\n  if (base64Data == null) {\n    throw new Error(`No data found in element with ID \"${elementId}\"`);\n  }\n  const jsonData = decode(base64Data);\n  const data = JSON.parse(jsonData);\n  return data;\n}\n", "import { html } from '@prairielearn/html';\n\nexport function AssessmentBadge({\n  assessment,\n  hideLink = false,\n  urlPrefix,\n  plainUrlPrefix,\n  course_instance_id,\n  publicURL = false,\n}: {\n  assessment: { assessment_id: string; color: string; label: string };\n  hideLink?: boolean;\n  publicURL?: boolean;\n} & ( // If urlPrefix is not provided, then plainUrlPrefix and course_instance_id must be provided and the appropriate URL prefix will be constructed\n  | {\n      urlPrefix: string;\n      plainUrlPrefix?: undefined;\n      course_instance_id?: undefined;\n    }\n  | { urlPrefix?: undefined; plainUrlPrefix: string; course_instance_id: string }\n)) {\n  if (hideLink) {\n    return html`<span class=\"badge color-${assessment.color}\">${assessment.label}</span>`;\n  }\n\n  if (publicURL) {\n    urlPrefix = `${plainUrlPrefix}/public/course_instance/${course_instance_id}`;\n  } else if (urlPrefix === undefined) {\n    // Construct the URL prefix with the appropriate course instance\n    urlPrefix = `${plainUrlPrefix}/course_instance/${course_instance_id}/instructor`;\n  }\n  return html`\n    <a\n      href=\"${urlPrefix}/assessment/${assessment.assessment_id}\"\n      class=\"btn btn-badge color-${assessment.color}\"\n    >\n      ${assessment.label}\n    </a>\n  `;\n}\n", "import { decodeData, onDocumentReady, parseHTMLElement } from '@prairielearn/browser-utils';\nimport { html } from '@prairielearn/html';\n\nimport { AssessmentBadge } from '../../src/components/AssessmentBadge.html.js';\nimport {\n  type AssessmentInstanceScoreResult,\n  type GradebookRow,\n  type InstructorGradebookData,\n} from '../../src/pages/instructorGradebook/instructorGradebook.types.js';\n\nonDocumentReady(() => {\n  const { urlPrefix, csvFilename, csrfToken, hasCourseInstancePermissionEdit, courseAssessments } =\n    decodeData<InstructorGradebookData>('gradebook-data');\n\n  // @ts-expect-error The BootstrapTableOptions type does not handle extensions properly\n  $('#gradebook-table').bootstrapTable({\n    // TODO: If we can pick up the following change, we can drop the `icons` config here:\n    // https://github.com/wenzhixin/bootstrap-table/pull/7190\n    iconsPrefix: 'fa',\n    icons: {\n      refresh: 'fa-sync',\n      columns: 'fa-table-list',\n    },\n\n    url: `${urlPrefix}/instance_admin/gradebook/raw_data.json`,\n    uniqueId: 'user_id',\n    classes: 'table table-sm table-hover table-bordered',\n    theadClasses: 'table-light',\n    showButtonText: true,\n    minimumCountColumns: 0,\n    search: true,\n    showColumns: true,\n    showColumnsToggleAll: true,\n    showRefresh: true,\n    pagination: true,\n    paginationVAlign: 'both',\n    paginationHAlign: 'left',\n    paginationDetailHAlign: 'right',\n    pageList: [10, 20, 50, 100, 200, 500, 'unlimited'],\n    pageSize: 50,\n    smartDisplay: false,\n    showExtendedPagination: true,\n    toolbar: '.fixed-table-pagination:nth(0)',\n    stickyHeader: true,\n    buttons: {\n      download: {\n        text: 'Download',\n        icon: 'fa-download',\n        attributes: { title: 'Download gradebook data in CSV format' },\n        event: () => {\n          window.location.href = `${urlPrefix}/instance_admin/gradebook/${csvFilename}`;\n        },\n      },\n      studentsOnly: {\n        text: 'Students Only',\n        icon: 'fa-user-graduate',\n        attributes: { title: 'List only enrolled students' },\n        event: () => {\n          const table = $('#gradebook-table');\n          const filterOn = !table.data('filter-student-only');\n          table.data('filter-student-only', filterOn);\n\n          $('.columns button[name=studentsOnly]').toggleClass('active', filterOn);\n          table.bootstrapTable('filterBy', filterOn ? { role: 'Student' } : {});\n        },\n      },\n    },\n    onPreBody() {\n      document\n        .querySelectorAll<HTMLElement>('.spinning-wheel')\n        .forEach((el) => (el.style.display = ''));\n      $('button.edit-score').popover('hide');\n    },\n    onResetView() {\n      setupEditScorePopovers(csrfToken);\n      document\n        .querySelectorAll<HTMLElement>('.spinning-wheel')\n        .forEach((el) => (el.style.display = 'none'));\n    },\n    columns: [\n      {\n        field: 'uid',\n        title: 'UID',\n        sortable: true,\n        class: 'text-nowrap sticky-column',\n        switchable: false,\n        escape: true,\n      },\n      {\n        field: 'uin',\n        title: 'UIN',\n        sortable: true,\n        class: 'text-nowrap gradebook-uin',\n        formatter: (uin: string | null) => html`${uin ?? ''}`.toString(),\n      },\n      {\n        field: 'user_name',\n        title: 'Name',\n        sortable: true,\n        class: 'text-nowrap',\n        formatter: (name: string | null) => html`${name ?? ''}`.toString(),\n      },\n      {\n        field: 'role',\n        title: html`Role\n          <button\n            class=\"btn btn-xs btn-ghost\"\n            type=\"button\"\n            aria-label=\"Roles help\"\n            data-bs-toggle=\"modal\"\n            data-bs-target=\"#role-help\"\n          >\n            <i class=\"bi-question-circle-fill\" aria-hidden=\"true\"></i>\n          </button>`.toString(),\n        sortable: true,\n        sortOrder: 'desc',\n      },\n      ...courseAssessments.map((assessment) => ({\n        field: `scores.${assessment.assessment_id}.score_perc`,\n        title: AssessmentBadge({ urlPrefix, assessment }).toString(),\n        class: 'text-nowrap',\n        searchable: false,\n        sortable: true,\n        sortOrder: 'desc',\n        formatter: (score: number | null, row: GradebookRow) => {\n          if (score == null) return '&mdash;';\n\n          const { assessment_instance_id, uid_other_users_group } =\n            row.scores[assessment.assessment_id] ?? {};\n          const editButton = hasCourseInstancePermissionEdit\n            ? html`\n                <button\n                  type=\"button\"\n                  class=\"btn btn-xs btn-secondary edit-score ms-1\"\n                  aria-label=\"Edit score\"\n                  data-assessment-instance-id=\"${assessment_instance_id}\"\n                  data-score=\"${score}\"\n                  data-other-users=\"${JSON.stringify(uid_other_users_group ?? [])}\"\n                >\n                  <i class=\"bi-pencil-square\" aria-hidden=\"true\"></i>\n                </button>\n              `\n            : '';\n          return html`\n            <a href=\"${urlPrefix}/assessment_instance/${assessment_instance_id}\">\n              ${Math.floor(score)}%\n            </a>\n            ${editButton}\n          `.toString();\n        },\n      })),\n    ],\n  });\n\n  document.addEventListener('keydown', (event) => {\n    if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'f') {\n      const searchInput = document.querySelector<HTMLInputElement>(\n        '.fixed-table-toolbar .search input',\n      );\n      if (searchInput != null && searchInput !== document.activeElement) {\n        searchInput.focus();\n        event.preventDefault();\n      }\n    }\n  });\n\n  $('[data-bs-toggle=\"modal\"]').click(function (e) {\n    e.stopPropagation(); // Keep click from changing sort\n    $($(e.currentTarget).data('bs-target')).modal('show');\n  });\n});\n\nfunction setupEditScorePopovers(csrfToken: string) {\n  $('button.edit-score')\n    .popover({\n      sanitize: false,\n      placement: 'auto',\n      container: 'body',\n      html: true,\n      content(this: Element) {\n        const popoverButton = this as HTMLButtonElement;\n        const { assessmentInstanceId, score, otherUsers } = popoverButton.dataset;\n        const parsedOtherUsers: string[] | undefined = JSON.parse(otherUsers || '[]');\n        const form = parseHTMLElement<HTMLFormElement>(\n          document,\n          html`\n            <form name=\"edit-total-score-perc-form\" method=\"POST\">\n              <input type=\"hidden\" name=\"__action\" value=\"edit_total_score_perc\" />\n              <input type=\"hidden\" name=\"__csrf_token\" value=\"${csrfToken}\" />\n              <input type=\"hidden\" name=\"assessment_instance_id\" value=\"${assessmentInstanceId}\" />\n              <div class=\"mb-3\">\n                <div class=\"input-group\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    name=\"score_perc\"\n                    value=\"${score}\"\n                    aria-label=\"Score percentage\"\n                  />\n                  <span class=\"input-group-text\">%</span>\n                </div>\n              </div>\n              ${parsedOtherUsers?.length\n                ? html`\n                    <div class=\"alert alert-info\">\n                      <small>\n                        This is a group assessment. Updating this grade will also update grades for:\n                      </small>\n                      <ul>\n                        ${parsedOtherUsers.map(\n                          (uid: string) => html`<li><small>${uid}</small></li>`,\n                        )}\n                      </ul>\n                    </div>\n                  `\n                : ''}\n              <p>\n                <small>\n                  This change will be overwritten if further questions are answered by the student.\n                </small>\n              </p>\n              <button type=\"button\" class=\"btn btn-secondary me-2 js-popover-cancel-button\">\n                Cancel\n              </button>\n              <button type=\"submit\" class=\"btn btn-primary\">Change</button>\n            </form>\n          `,\n        );\n\n        form.querySelector('.js-popover-cancel-button')?.addEventListener('click', () => {\n          $(popoverButton).popover('hide');\n        });\n\n        form.addEventListener('submit', function (event) {\n          event.preventDefault();\n          fetch(form.action, {\n            method: 'POST',\n            body: new URLSearchParams(new FormData(form, event.submitter) as any),\n          }).then(async (response) => {\n            const data: AssessmentInstanceScoreResult[] = await response.json();\n            data.forEach((score) => {\n              $('#gradebook-table').bootstrapTable('updateCellByUniqueId', {\n                id: score.user_id,\n                field: `scores.${score.assessment_id}.score_perc`,\n                value: score.score_perc,\n              });\n            });\n            $(popoverButton).popover('hide');\n          });\n        });\n        return form;\n      },\n      title: 'Change total percentage score',\n      trigger: 'click',\n    })\n    .on('show.bs.popover', function () {\n      $('button.edit-score').not(this).popover('hide');\n    });\n}\n"],
  "mappings": "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",
  "names": ["onDocumentReady", "fn", "parseHTML", "document", "html", "template", "parseHTMLElement", "documentFragment", "_hasBuffer", "_TD", "_TE", "b64ch", "b64chs", "b64tab", "a", "tab", "c", "i", "b64re", "_fromCC", "_U8Afrom", "it", "_tidyB64", "s", "re_btou", "cb_btou", "cccc", "cp", "offset", "_fromCC", "btou", "b", "atobPolyfill", "asc", "b64re", "u24", "bin", "r1", "r2", "i", "b64tab", "_atob", "_tidyB64", "_hasBuffer", "_toUint8Array", "a", "_U8Afrom", "c", "_decode", "_hasBuffer", "a", "_TD", "_toUint8Array", "btou", "_atob", "_unURI", "_tidyB64", "m0", "decode", "src", "ENCODE_HTML_RULES", "MATCH_HTML", "encodeCharacter", "c", "escapeHtmlRaw", "value", "escapeValue", "HtmlSafeString", "val", "strings", "values", "__publicField", "acc", "i", "html", "decodeData", "elementId", "_a", "base64Data", "jsonData", "decode", "AssessmentBadge", "assessment", "hideLink", "urlPrefix", "plainUrlPrefix", "course_instance_id", "publicURL", "html", "onDocumentReady", "urlPrefix", "csvFilename", "csrfToken", "hasCourseInstancePermissionEdit", "courseAssessments", "decodeData", "table", "filterOn", "el", "setupEditScorePopovers", "uin", "html", "name", "assessment", "AssessmentBadge", "score", "row", "_a", "assessment_instance_id", "uid_other_users_group", "editButton", "event", "searchInput", "e", "popoverButton", "assessmentInstanceId", "otherUsers", "parsedOtherUsers", "form", "parseHTMLElement", "uid", "response"]
}
