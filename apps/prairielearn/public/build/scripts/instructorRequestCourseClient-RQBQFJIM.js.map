{
  "version": 3,
  "sources": ["../../../../../packages/browser-utils/src/on-document-ready.ts", "../../../../../node_modules/js-base64/base64.mjs", "../../../../../packages/browser-utils/src/encode-data.ts", "../../../assets/scripts/instructorRequestCourseClient.ts"],
  "sourcesContent": ["export function onDocumentReady(fn: () => void): void {\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', () => {\n      fn();\n    });\n  }\n}\n", "/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 \u00A75\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 \u00A75.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n", "import { decode, encode } from 'js-base64';\n\nimport { type HtmlSafeString, html, unsafeHtml } from '@prairielearn/html';\n\n/**\n * Use this function as an HTML component encode data that will be passed to the client.\n *\n * @param data The data to encode.\n * @param elementId The element ID to use for the encoded data.\n *\n */\nexport function EncodedData<T = unknown>(data: T, elementId: string): HtmlSafeString {\n  const encodedData = unsafeHtml(encode(JSON.stringify(data)));\n  return html`<script id=\"${elementId}\" type=\"application/base64\">\n    ${encodedData}\n  </script>`;\n}\n\n/**\n * Decode data that was passed to the client from in HTML component using EncodeData().\n *\n * @param elementId The element ID that stores the encoded data, from from EncodedData().\n * @returns The decoded data.\n */\nexport function decodeData<T = any>(elementId: string): T {\n  const base64Data = document.getElementById(elementId)?.textContent;\n  if (base64Data == null) {\n    throw new Error(`No data found in element with ID \"${elementId}\"`);\n  }\n  const jsonData = decode(base64Data);\n  const data = JSON.parse(jsonData);\n  return data;\n}\n", "import { decodeData, onDocumentReady } from '@prairielearn/browser-utils';\n\nonDocumentReady(() => {\n  $('input[name=cr-role]').on('change', function () {\n    const role = (this as HTMLInputElement).value;\n    $('.question-form button').prop('disabled', role !== 'instructor');\n    $('.role-comment').hide();\n    $('.role-comment-' + role).show();\n  });\n\n  // Only show the \"other\" referral source input when \"other\" is selected.\n  $('#cr-referral-source').on('change', function () {\n    if ((this as HTMLInputElement).value === 'other') {\n      $('#cr-referral-source-other').removeClass('d-none').attr('required', 'required').focus();\n    } else {\n      $('#cr-referral-source-other').addClass('d-none').removeAttr('required');\n    }\n  });\n\n  const courseRequestLti13Info = decodeData('course-request-lti13-info');\n  if (courseRequestLti13Info !== null) {\n    $('#fill-course-request-lti13-modal').modal('show');\n\n    const autoFillLti13Button = document.getElementById('fill-course-request-lti13-info');\n\n    autoFillLti13Button?.addEventListener('click', () => {\n      const courseRequestForm = document.querySelector<HTMLFormElement>(\n        'form[name=\"course-request\"]',\n      );\n\n      if (!courseRequestForm) {\n        return;\n      }\n\n      const formElements = courseRequestForm.elements;\n      for (const elementName of Object.keys(courseRequestLti13Info)) {\n        const input = formElements.namedItem(elementName) as HTMLInputElement;\n        if (input) {\n          input.value = courseRequestLti13Info[elementName];\n        }\n      }\n\n      $('#fill-course-request-lti13-modal').modal('hide');\n    });\n  }\n});\n"],
  "mappings": "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",
  "names": ["onDocumentReady", "fn", "_hasBuffer", "_TD", "_TE", "b64ch", "b64chs", "b64tab", "a", "tab", "c", "i", "b64re", "_fromCC", "_U8Afrom", "it", "_tidyB64", "s", "re_btou", "cb_btou", "cccc", "cp", "offset", "_fromCC", "btou", "b", "atobPolyfill", "asc", "b64re", "u24", "bin", "r1", "r2", "i", "b64tab", "_atob", "_tidyB64", "_hasBuffer", "_toUint8Array", "a", "_U8Afrom", "c", "_decode", "_hasBuffer", "a", "_TD", "_toUint8Array", "btou", "_atob", "_unURI", "_tidyB64", "m0", "decode", "src", "decodeData", "elementId", "_a", "base64Data", "jsonData", "decode", "onDocumentReady", "role", "courseRequestLti13Info", "decodeData", "autoFillLti13Button", "courseRequestForm", "formElements", "elementName", "input"]
}
