{"version":3,"file":"interface.js","sourceRoot":"","sources":["../src/interface.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'node:fs/promises';\nimport * as http from 'node:http';\nimport * as net from 'node:net';\nimport * as path from 'node:path';\n\nimport { ECRClient } from '@aws-sdk/client-ecr';\nimport { S3 } from '@aws-sdk/client-s3';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport archiver from 'archiver';\nimport * as async from 'async';\nimport { Mutex } from 'async-mutex';\nimport bodyParser from 'body-parser';\nimport debugfn from 'debug';\nimport Docker from 'dockerode';\nimport express, { type Response } from 'express';\nimport asyncHandler from 'express-async-handler';\nimport { type Entry } from 'fast-glob';\nimport fetch from 'node-fetch';\nimport * as shlex from 'shlex';\nimport { v4 as uuidv4 } from 'uuid';\nimport yargsParser from 'yargs-parser';\nimport { z } from 'zod';\n\nimport { cache } from '@prairielearn/cache';\nimport { DockerName, setupDockerAuth } from '@prairielearn/docker-utils';\nimport { logger } from '@prairielearn/logger';\nimport * as sqldb from '@prairielearn/postgres';\nimport { run } from '@prairielearn/run';\nimport * as Sentry from '@prairielearn/sentry';\nimport * as workspaceUtils from '@prairielearn/workspace-utils';\n\nimport { makeAwsClientConfig, makeS3ClientConfig } from './lib/aws.js';\nimport { config, loadConfig } from './lib/config.js';\nimport { parseDockerLogs } from './lib/docker.js';\nimport { APP_ROOT_PATH, REPOSITORY_ROOT_PATH } from './lib/paths.js';\nimport * as socketServer from './lib/socket-server.js';\n\ninterface WorkspaceServerSettings {\n  instance_id?: string;\n  hostname?: string;\n  server_to_container_hostname?: string;\n  port?: number;\n}\n\ninterface WorkspaceSettings {\n  workspace_image: string;\n  workspace_port: number;\n  workspace_home: string;\n  workspace_graded_files: string[];\n  workspace_args: string;\n  workspace_enable_networking: boolean;\n  workspace_environment: string[];\n}\n\n/**\n * These types are somewhat duplicated from WorkspaceSchema in apps/prairielearn.\n * TODO: break out types into a shared package.\n */\ninterface Workspace {\n  local_name: string;\n  launch_uuid: string;\n  remote_name: string;\n  id: string | number;\n  version: string;\n  course_id: string;\n  institution_id: string;\n  launch_port: number;\n  settings: WorkspaceSettings;\n}\n\nlet server: http.Server | undefined;\nconst workspace_server_settings: WorkspaceServerSettings = {};\n\nconst sql = sqldb.loadSqlEquiv(import.meta.url);\nconst debug = debugfn('prairielearn:interface');\nconst docker = new Docker();\n\nconst app = express();\napp.use(Sentry.requestHandler());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.get(\n  '/status',\n  asyncHandler(async (req, res) => {\n    const containers = await docker.listContainers({ all: true }).catch(() => null);\n\n    let db_status: string | null | undefined;\n    try {\n      await sqldb.queryAsync(sql.update_load_count, {\n        instance_id: workspace_server_settings.instance_id,\n      });\n      db_status = 'ok';\n    } catch {\n      db_status = null;\n    }\n\n    if (!containers || !db_status) {\n      // We must have both Docker and database access in order to consider\n      // ourselves healthy.\n      res.status(500);\n    } else {\n      res.status(200);\n    }\n    res.json({\n      docker: containers,\n      postgres: db_status,\n    });\n  }),\n);\n\n// TODO: refactor into RESTful endpoints (https://github.com/PrairieLearn/PrairieLearn/pull/2841#discussion_r467245108)\napp.post(\n  '/',\n  asyncHandler(async (req, res) => {\n    const workspace_id = req.body.workspace_id;\n    const action = req.body.action;\n    if (workspace_id == null) {\n      res.status(500).send('Missing workspace_id');\n    } else if (action == null) {\n      res.status(500).send('Missing action');\n    } else if (action === 'init') {\n      const useInitialZip: boolean = req.body.options?.useInitialZip ?? false;\n      await initSequence(workspace_id, useInitialZip, res);\n    } else if (action === 'getGradedFiles') {\n      await sendGradedFilesArchive(workspace_id, res);\n    } else if (action === 'getLogs') {\n      await sendLogs(workspace_id, res);\n    } else {\n      res.status(500).send(`Action '${action}' undefined`);\n    }\n  }),\n);\n\napp.use(Sentry.expressErrorHandler());\n\nasync\n  .series([\n    async () => {\n      // For backwards compatibility, we'll default to trying to load config\n      // files from both the application and repository root.\n      //\n      // We'll put the app config file second so that it can override anything\n      // in the repository root config file.\n      let configPaths = [\n        path.join(REPOSITORY_ROOT_PATH, 'config.json'),\n        path.join(APP_ROOT_PATH, 'config.json'),\n      ];\n\n      // If a config file was specified on the command line, we'll use that\n      // instead of the default locations.\n\n      const argv = yargsParser(process.argv.slice(2));\n      if ('config' in argv) {\n        configPaths = [argv['config']];\n      }\n\n      await loadConfig(configPaths);\n      if (config.runningInEc2) {\n        // copy discovered variables into workspace_server_settings\n        workspace_server_settings.instance_id = config.instanceId;\n        workspace_server_settings.hostname = config.hostname;\n        workspace_server_settings.server_to_container_hostname = config.hostname;\n      } else {\n        // Otherwise, use the defaults in the config file\n        config.instanceId = config.workspaceDevHostInstanceId;\n        workspace_server_settings.instance_id = config.workspaceDevHostInstanceId;\n        workspace_server_settings.hostname = config.workspaceDevHostHostname;\n        workspace_server_settings.server_to_container_hostname =\n          config.workspaceDevContainerHostname;\n      }\n    },\n    async () => {\n      if (config.sentryDsn) {\n        await Sentry.init({\n          dsn: config.sentryDsn,\n          environment: config.sentryEnvironment,\n        });\n      }\n    },\n    async () => {\n      // Always grab the port from the config\n      workspace_server_settings.port = config.workspaceHostPort;\n    },\n    async () => {\n      const pgConfig = {\n        user: config.postgresqlUser,\n        database: config.postgresqlDatabase,\n        host: config.postgresqlHost,\n        password: config.postgresqlPassword ?? undefined,\n        max: config.postgresqlPoolSize,\n        idleTimeoutMillis: config.postgresqlIdleTimeoutMillis,\n      };\n      logger.verbose(\n        `Connecting to database ${pgConfig.user}@${pgConfig.host}:${pgConfig.database}`,\n      );\n      const idleErrorHandler = function (err) {\n        logger.error('idle client error', err);\n        // https://github.com/PrairieLearn/PrairieLearn/issues/2396\n        process.exit(1);\n      };\n      await sqldb.initAsync(pgConfig, idleErrorHandler);\n      logger.verbose('Successfully connected to database');\n    },\n    async () => {\n      server = http.createServer(app);\n      server.listen(workspace_server_settings.port);\n      logger.info(`Workspace server listening on port ${workspace_server_settings.port}`);\n    },\n    async () => socketServer.init(),\n    async () => workspaceUtils.init(socketServer.io),\n    async () => {\n      // Set up a periodic pruning of containers that shouldn't exist.\n      //\n      // Note that this updates the load count. The cron job that kills workspace\n      // hosts will only kill hosts that have a load count of 0. This should ensure\n      // that we never kill a host before its had a chance to spin down all its\n      // containers (and flush their logs and record their disk usage).\n      async function pruneContainersTimeout() {\n        try {\n          await pruneStoppedContainers();\n          await pruneRunawayContainers();\n          await sqldb.queryAsync(sql.update_load_count, {\n            instance_id: workspace_server_settings.instance_id,\n          });\n        } catch (err) {\n          logger.error('Error pruning containers', err);\n          Sentry.captureException(err);\n        }\n\n        setTimeout(pruneContainersTimeout, config.workspaceHostPruneContainersSec * 1000);\n      }\n      setTimeout(pruneContainersTimeout, config.workspaceHostPruneContainersSec * 1000);\n    },\n    async () => {\n      // Add ourselves to the workspace hosts directory. After we\n      // do this we will start receiving requests so everything else\n      // must be initialized before this.\n      await sqldb.queryAsync(sql.insert_workspace_hosts, {\n        hostname: workspace_server_settings.hostname + ':' + workspace_server_settings.port,\n        instance_id: workspace_server_settings.instance_id,\n      });\n    },\n    async () => {\n      // If we have any running workspaces, we're probably recovering from a\n      // crash and we should sync files to S3\n      const result = await sqldb.queryAsync(sql.recover_crash_workspaces, {\n        instance_id: workspace_server_settings.instance_id,\n      });\n      await async.eachSeries(result.rows, async (ws) => {\n        if (ws.state === 'launching') {\n          // We don't know what state the container is in, kill it and let the\n          // user retry initializing it.\n          await workspaceUtils.updateWorkspaceState(ws.id, 'stopped', 'Status unknown');\n          await sqldb.queryAsync(sql.clear_workspace_on_shutdown, {\n            workspace_id: ws.id,\n            instance_id: workspace_server_settings.instance_id,\n          });\n          try {\n            const container = await _getDockerContainerByLaunchUuid(ws.launch_uuid);\n            await killAndRemoveWorkspace(ws.id, container);\n          } catch (err) {\n            debug(`Couldn't find container: ${err}`);\n          }\n        }\n      });\n\n      // Especially in dev mode, there may be containers that are running but\n      // don't correspond to any known workspace. Clean them up.\n      const allContainers = await docker.listContainers({\n        all: true,\n        filters: JSON.stringify({ label: ['prairielearn.workspace-id'] }),\n      });\n      for (const container of allContainers) {\n        const containerWorkspaceId = container.Labels['prairielearn.workspace-id'];\n        if (result.rows.some((ws) => ws.id === containerWorkspaceId)) continue;\n\n        logger.info(\n          `Killing dangling container ${container.Id} for workspace ${containerWorkspaceId}`,\n        );\n        await killAndRemoveWorkspace(containerWorkspaceId, docker.getContainer(container.Id));\n      }\n    },\n    async () => {\n      await cache.init({\n        type: config.cacheType,\n        keyPrefix: config.cacheKeyPrefix,\n        redisUrl: config.redisUrl,\n      });\n    },\n  ])\n  .then(() => {\n    logger.info('Workspace host ready');\n  })\n  .catch(async function (err) {\n    Sentry.captureException(err);\n    logger.error('Error initializing workspace host:', err);\n    await markSelfUnhealthy(err);\n  });\n\n/**\n * Remove any recently stopped containers. These are identified by having a\n * non-null launch_uuid and launch_port, but are marked as stopped by the main\n * PrairieLearn instance.\n */\nasync function pruneStoppedContainers() {\n  const instance_id = workspace_server_settings.instance_id;\n  const recently_stopped = await sqldb.queryAsync(sql.get_stopped_workspaces, {\n    instance_id,\n  });\n  await async.each(recently_stopped.rows, async (ws) => {\n    let container;\n    try {\n      // Try to grab the container, but don't care if it doesn't exist\n      container = await _getDockerContainerByLaunchUuid(ws.launch_uuid);\n    } catch {\n      // No container\n      await sqldb.queryAsync(sql.clear_workspace_on_shutdown, {\n        workspace_id: ws.id,\n        instance_id: workspace_server_settings.instance_id,\n      });\n      return;\n    }\n    await sqldb.queryAsync(sql.clear_workspace_on_shutdown, {\n      workspace_id: ws.id,\n      instance_id: workspace_server_settings.instance_id,\n    });\n    await killAndRemoveWorkspace(ws.id, container);\n  });\n}\n\n/**\n * Remove any containers that are running but do not have a corresponding launch_uuid in the database.\n */\nasync function pruneRunawayContainers() {\n  const instance_id = workspace_server_settings.instance_id;\n  const db_workspaces = await sqldb.queryAsync(sql.get_running_workspaces, {\n    instance_id,\n  });\n\n  const db_workspaces_uuid_set = new Set(\n    db_workspaces.rows.map((ws) => `workspace-${ws.launch_uuid}`),\n  );\n  let running_workspaces: Docker.ContainerInfo[] | undefined;\n  try {\n    running_workspaces = await docker.listContainers({ all: true });\n  } catch {\n    // Nothing to do\n    return;\n  }\n\n  await async.each(running_workspaces, async (container_info) => {\n    if (container_info.Names.length !== 1) return;\n    // Remove the preceding forward slash\n    const name = container_info.Names[0].substring(1);\n    if (!name.startsWith('workspace-') || db_workspaces_uuid_set.has(name)) return;\n    const container = docker.getContainer(container_info.Id);\n    const containerWorkspaceId = container_info.Labels['prairielearn.workspace-id'];\n\n    await killAndRemoveWorkspace(containerWorkspaceId, container);\n  });\n}\n\n/**\n * Looks up a docker container by the UUID used to launch it.\n * Throws an exception if the container was not found or if there\n * are multiple containers with the same UUID (this shouldn't happen?)\n * @param launch_uuid UUID to search by\n */\nasync function _getDockerContainerByLaunchUuid(launch_uuid: string): Promise<Docker.Container> {\n  try {\n    const containers = await docker.listContainers({\n      filters: JSON.stringify({ name: [`workspace-${launch_uuid}`] }),\n    });\n    return docker.getContainer(containers[0].Id);\n  } catch (err) {\n    logger.error(`Error looking up container for launch_uuid ${launch_uuid}`, err);\n    throw err;\n  }\n}\n\n/**\n * Attempts to kill and remove a container. Will fail silently if the container\n * is already stopped or does not exist.\n *\n * After the container is removed, the workspace's disk usage will be updated.\n */\nasync function killAndRemoveWorkspace(workspace_id: string | number, container: Docker.Container) {\n  try {\n    await container.inspect();\n\n    try {\n      await container.kill();\n    } catch (err) {\n      logger.error('Error killing container', err);\n    }\n\n    // Flush all logs from this container to S3. We must do this before the\n    // container is removed, otherwise any remaining logs will be lost.\n    try {\n      await flushLogsToS3(container);\n    } catch (err) {\n      Sentry.captureException(err);\n      logger.error('Error flushing container logs to S3', err);\n    }\n\n    try {\n      await container.remove();\n    } catch (err) {\n      Sentry.captureException(err);\n      logger.error('Error removing stopped container', err);\n    }\n  } catch (err) {\n    // This container doesn't exist on this machine.\n    logger.error('Could not inspect container', err);\n    Sentry.captureException(err);\n  }\n\n  try {\n    await workspaceUtils.updateWorkspaceDiskUsage(\n      workspace_id.toString(),\n      config.workspaceHostHomeDirRoot,\n    );\n  } catch (err) {\n    logger.error('Error updating workspace disk usage', err);\n    Sentry.captureException(err);\n  }\n}\n\n/**\n * Marks the host as \"unhealthy\", we typically want to do this when we hit some unrecoverable error.\n * This will also set the \"unhealthy__at\" field if applicable.\n *\n * @param reason The reason that this host is unhealthy\n */\nasync function markSelfUnhealthy(reason: Error | string) {\n  try {\n    Sentry.captureException(reason);\n    const params = {\n      instance_id: workspace_server_settings.instance_id,\n      unhealthy_reason: reason,\n    };\n    await sqldb.queryAsync(sql.mark_host_unhealthy, params);\n    logger.warn('Marked self as unhealthy', reason);\n  } catch (err) {\n    // This could error if we don't even have a DB connection. In that case, we\n    // should let the main server mark us as unhealthy.\n    logger.error('Could not mark self as unhealthy', err);\n  }\n}\n\n/**\n * Looks up a workspace object by the workspace id.\n * This object contains all columns in the 'workspaces' table as well as:\n * - local_name (container name)\n * - remote_name (subdirectory name on disk)\n * @param workspace_id Workspace ID to search by.\n * @return Workspace object, as described above.\n */\nasync function _getWorkspace(workspace_id: string | number): Promise<Workspace> {\n  const result = await sqldb.queryOneRowAsync(sql.get_workspace, {\n    workspace_id,\n    instance_id: workspace_server_settings.instance_id,\n  });\n  const workspace = result.rows[0];\n  workspace.local_name = `workspace-${workspace.launch_uuid}`;\n  workspace.remote_name = `workspace-${workspace.id}-${workspace.version}`;\n\n  return workspace;\n}\n\nconst _allocateContainerPortMutex = new Mutex();\n\n/**\n * Allocates and returns an unused port for a workspace.  This will insert the new port into the workspace table.\n * @return Port that was allocated to the workspace.\n */\nasync function _allocateContainerPort(workspace_id: string | number): Promise<number> {\n  // Check if a port is considered free in the database\n  async function check_port_db(port: number) {\n    const params = {\n      instance_id: workspace_server_settings.instance_id,\n      port,\n    };\n    const result = await sqldb.queryOneRowAsync(sql.get_is_port_occupied, params);\n    return !result.rows[0].port_used;\n  }\n\n  // Spin up a server to check if a port is free\n  async function check_port_server(port: number) {\n    return new Promise((res) => {\n      const server = net.createServer();\n      server.listen(port, function () {\n        server.once('close', function () {\n          res(true);\n        });\n        server.close();\n      });\n      server.on('error', function (_) {\n        res(false);\n      });\n    });\n  }\n\n  return _allocateContainerPortMutex.runExclusive(async () => {\n    let port: number | undefined;\n    let done = false;\n    // Max attempts <= 0 means unlimited attempts, > 0 mean a finite number of attempts.\n    const max_attempts =\n      config.workspaceHostMaxPortAllocationAttempts > 0\n        ? config.workspaceHostMaxPortAllocationAttempts\n        : Infinity;\n    for (let i = 0; !done && i < max_attempts; i++) {\n      // Generate a random port from the ranges specified in config.\n      port =\n        config.workspaceHostMinPortRange +\n        Math.floor(\n          Math.random() * (config.workspaceHostMaxPortRange - config.workspaceHostMinPortRange),\n        );\n      if (!(await check_port_db(port))) continue;\n      if (!(await check_port_server(port))) continue;\n      done = true;\n    }\n    if (!done || !port) {\n      throw new Error(`Failed to allocate port after ${max_attempts} attempts!`);\n    }\n    await sqldb.queryAsync(sql.set_workspace_launch_port, {\n      workspace_id,\n      launch_port: port,\n      instance_id: workspace_server_settings.instance_id,\n    });\n    return port;\n  });\n}\n\nfunction _checkServer(workspace: Workspace): Promise<void> {\n  const startTimeout = config.workspaceStartTimeoutSec * 1000;\n  const healthCheckInterval = config.workspaceHealthCheckIntervalSec * 1000;\n  const healthCheckTimeout = config.workspaceHealthCheckTimeoutSec * 1000;\n\n  const startTime = performance.now();\n  return new Promise<void>((resolve, reject) => {\n    function checkWorkspace() {\n      const hostname = workspace_server_settings.server_to_container_hostname;\n      const port = workspace.launch_port;\n      fetch(`http://${hostname}:${port}/`, {\n        signal: AbortSignal.timeout(healthCheckTimeout),\n      })\n        .then(() => {\n          // We might get all sorts of strange status codes from the server.\n          // This is okay since it still means the server is running and we're\n          // getting responses. So we don't need to check the response status.\n          resolve();\n        })\n        .catch(() => {\n          // Do nothing, because errors are expected while the container is launching.\n          const endTime = performance.now();\n          if (endTime - startTime > startTimeout) {\n            const { id, version, launch_uuid } = workspace;\n            reject(\n              new Error(\n                `Max startup time exceeded for workspace ${id} (version ${version}, launch uuid ${launch_uuid})`,\n              ),\n            );\n          } else {\n            setTimeout(checkWorkspace, healthCheckInterval);\n          }\n        });\n    }\n    checkWorkspace();\n  });\n}\n\n/**\n * Looks up all the question-specific workspace launch settings associated with a workspace id.\n * @param workspace_id Workspace ID to search by.\n * @return Workspace launch settings.\n */\nasync function _getWorkspaceSettings(workspace_id: string | number): Promise<WorkspaceSettings> {\n  const result = await sqldb.queryOneRowAsync(sql.select_workspace_settings, {\n    workspace_id,\n  });\n  const workspace_environment = result.rows[0].workspace_environment || {};\n\n  // Set base URL needed by certain workspaces (e.g., jupyterlab, rstudio)\n  workspace_environment['WORKSPACE_BASE_URL'] = `/pl/workspace/${workspace_id}/container/`;\n\n  const settings = {\n    workspace_image: result.rows[0].workspace_image,\n    workspace_port: result.rows[0].workspace_port,\n    workspace_home: result.rows[0].workspace_home,\n    workspace_graded_files: result.rows[0].workspace_graded_files,\n    workspace_args: result.rows[0].workspace_args || '',\n    workspace_enable_networking: !!result.rows[0].workspace_enable_networking,\n    // Convert {key: 'value'} to ['key=value'] and {key: null} to ['key'] for Docker API\n    workspace_environment: Object.entries(workspace_environment).map(([k, v]) =>\n      v === null ? k : `${k}=${v}`,\n    ),\n  };\n\n  if (config.cacheImageRegistry) {\n    const repository = new DockerName(settings.workspace_image);\n    repository.setRegistry(config.cacheImageRegistry);\n    const newImage = repository.getCombined();\n    logger.info(`Using ${newImage} for ${settings.workspace_image}`);\n    settings.workspace_image = newImage;\n  }\n\n  return settings;\n}\n\nconst ProgressDetailsSchema = z.record(\n  z.object({\n    current: z.number(),\n    total: z.number(),\n  }),\n);\ntype ProgressDetails = z.infer<typeof ProgressDetailsSchema>;\n\nasync function _getCachedProgressDetails(workspace_image: string): Promise<ProgressDetails> {\n  const rawProgressDetails = await cache.get(`workspaceProgressInit:${workspace_image}`);\n\n  // Use Zod to validate the data. If it is invalid, we will set it to the empty object.\n  const validatedProgressDetails = ProgressDetailsSchema.safeParse(rawProgressDetails);\n  return validatedProgressDetails.success ? validatedProgressDetails.data : {};\n}\n\nasync function _pullImage(workspace: Workspace) {\n  if (!config.workspacePullImagesFromDockerHub) {\n    logger.info('Not pulling docker image');\n    return;\n  }\n\n  await workspaceUtils.updateWorkspaceMessage(workspace.id, 'Checking image');\n  const workspace_image = workspace.settings.workspace_image;\n  logger.info(`Pulling docker image: ${workspace_image}`);\n\n  // We only auth if a specific ECR registry is configured. Otherwise, we'll\n  // assume we're pulling from the public Docker Hub registry.\n  const ecr = new ECRClient(makeAwsClientConfig());\n  const auth = config.cacheImageRegistry ? await setupDockerAuth(ecr) : null;\n\n  let percentDisplayed = false;\n  let stream: NodeJS.ReadableStream | undefined;\n  try {\n    stream = await docker.pull(workspace_image, { authconfig: auth });\n  } catch (err) {\n    logger.error(\n      `Error pulling \"${workspace_image}\" image; attempting to fall back to cached version.`,\n      err,\n    );\n    return;\n  }\n\n  // We monitor the pull progress to calculate the\n  // percentage complete. This is roughly \"current / total\",\n  // but as docker pulls new layers the \"total\" can\n  // increase, which would cause the percentage to\n  // decrease. To avoid this, we track a \"base\" value for\n  // both \"current\" and \"total\" and compute the percentage\n  // as an increment above these values. This ensures that\n  // our percentage starts at 0, ends at 100, and never\n  // decreases. It has the disadvantage that the percentage\n  // will tend to go faster at the start (when we only know\n  // about a few layers) and slow down at the end (when we\n  // know about all layers). To allow for more accurate\n  // progress reporting, we cache the layer details after\n  // the first successful pull. This allows us to reference\n  // the previously pulled layers and provide a more accurate\n  // percentage calculation on any subsequent pulls.\n\n  const progressDetails = await _getCachedProgressDetails(workspace_image);\n\n  const progressDetailsInit = {};\n  let current = 0;\n  let total = 0;\n  let fraction = 0;\n  let currentBase: number;\n  let fractionBase: number;\n  let outputCount = 0;\n  let percentCache = -1;\n  let dateCache = Date.now() - 1e6;\n\n  await new Promise((resolve, reject) => {\n    docker.modem.followProgress(\n      stream,\n      (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        if (!percentDisplayed) {\n          resolve(null);\n          return;\n        }\n\n        const toDatabase = false;\n        cache.set(\n          `workspaceProgressInit:${workspace_image}`,\n          progressDetailsInit,\n          1000 * 60 * 60 * 24 * 30, // 30 days\n        );\n        workspaceUtils\n          .updateWorkspaceMessage(workspace.id, 'Pulling image (100%)', toDatabase)\n          .catch((err) => {\n            logger.error('Error updating workspace message', err);\n            Sentry.captureException(err);\n          })\n          .then(resolve);\n      },\n      (output) => {\n        debug('Docker pull output: ', output);\n        if ('progressDetail' in output && output.progressDetail.total) {\n          // track different states (Download/Extract)\n          // separately by making them separate keys\n          const key = `${output.id}/${output.status}`;\n          progressDetails[key] = output.progressDetail;\n          progressDetailsInit[key] = { ...output.progressDetail, current: 0 };\n        }\n        current = Object.values(progressDetails).reduce(\n          (current, detail) => detail.current + current,\n          0,\n        );\n        const newTotal = Object.values(progressDetails).reduce(\n          (total, detail) => detail.total + total,\n          0,\n        );\n        if (outputCount <= 200) {\n          // limit progress initially to wait for most layers to be seen\n          current = Math.min(current, (outputCount / 200) * newTotal);\n        }\n        if (newTotal > total) {\n          total = newTotal;\n          currentBase = current;\n          fractionBase = fraction;\n        }\n        if (total > 0) {\n          outputCount++;\n          const fractionIncrement =\n            total > currentBase ? (current - currentBase) / (total - currentBase) : 0;\n          fraction = fractionBase + (1 - fractionBase) * fractionIncrement;\n          const percent = Math.floor(fraction * 100);\n          const date = Date.now();\n          const percentDelta = percent - percentCache;\n          const dateDeltaSec = (date - dateCache) / 1000;\n          if (percentDelta > 0 && dateDeltaSec >= config.workspacePercentMessageRateLimitSec) {\n            percentCache = percent;\n            dateCache = date;\n            percentDisplayed = true;\n            const toDatabase = false;\n            workspaceUtils\n              .updateWorkspaceMessage(workspace.id, `Pulling image (${percent}%)`, toDatabase)\n              .catch((err) => {\n                logger.error('Error updating workspace message', err);\n                Sentry.captureException(err);\n              });\n          }\n        }\n      },\n    );\n  });\n}\n\nasync function _createContainer(workspace: Workspace): Promise<Docker.Container> {\n  const { local_name, remote_name, launch_port, settings } = workspace;\n\n  const jobDirectory = config.workspaceHostHomeDirRoot;\n  const workspaceDir = process.env.HOST_JOBS_DIR\n    ? path.join(process.env.HOST_JOBS_DIR, 'workspaces')\n    : jobDirectory;\n\n  // Where docker will see the jobs (host path outside docker container).\n  const workspacePath = path.join(workspaceDir, remote_name, 'current');\n  // Where we are putting the job files relative to the server (`/jobs` inside Docker container).\n  const workspaceJobPath = path.join(jobDirectory, remote_name, 'current');\n\n  const containerPath = settings.workspace_home;\n  const args = settings.workspace_args.trim();\n\n  let networkMode = 'bridge';\n  if (!settings.workspace_enable_networking) {\n    if (config.workspaceSupportNoInternet) {\n      networkMode = 'no-internet';\n    } else {\n      logger.verbose('Workspace requested unsupported feature enableNetworking:false');\n    }\n  }\n\n  debug(`Creating docker container for image=${settings.workspace_image}`);\n  debug(`Exposed port: ${settings.workspace_port}`);\n  debug(`Networking enabled: ${settings.workspace_enable_networking}`);\n  debug(`Network mode: ${networkMode}`);\n  debug(`Env vars: ${settings.workspace_environment}`);\n  debug(\n    `User binding: ${config.workspaceJobsDirectoryOwnerUid}:${config.workspaceJobsDirectoryOwnerGid}`,\n  );\n  debug(`Port binding: ${settings.workspace_port}:${launch_port}`);\n  debug(`Volume mount: ${workspacePath}:${containerPath}`);\n  debug(`Container name: ${local_name}`);\n\n  try {\n    await fs.access(workspaceJobPath);\n  } catch (err) {\n    throw Error('Could not access workspace files.', { cause: err });\n  }\n\n  debug(`Creating directory ${workspaceJobPath}`);\n  await fs.mkdir(workspaceJobPath, { recursive: true }).catch((err) => {\n    // Ignore the directory if it already exists. Otherwise, rethrow the error.\n    if (err && err.code !== 'EEXIST') throw err;\n  });\n\n  await fs.chown(\n    workspaceJobPath,\n    config.workspaceJobsDirectoryOwnerUid,\n    config.workspaceJobsDirectoryOwnerGid,\n  );\n  const container = await docker.createContainer({\n    Image: settings.workspace_image,\n    ExposedPorts: {\n      [`${settings.workspace_port}/tcp`]: {},\n    },\n    Env: settings.workspace_environment,\n    User: `${config.workspaceJobsDirectoryOwnerUid}:${config.workspaceJobsDirectoryOwnerGid}`,\n    HostConfig: {\n      PortBindings: {\n        [`${settings.workspace_port}/tcp`]: [{ HostPort: `${launch_port}` }],\n      },\n      Binds: [`${workspacePath}:${containerPath}`],\n      Memory: config.workspaceDockerMemory,\n      MemorySwap: config.workspaceDockerMemorySwap,\n      KernelMemory: config.workspaceDockerKernelMemory,\n      DiskQuota: config.workspaceDockerDiskQuota,\n      CpuPeriod: config.workspaceDockerCpuPeriod,\n      CpuQuota: config.workspaceDockerCpuQuota,\n      PidsLimit: config.workspaceDockerPidsLimit,\n      IpcMode: 'private',\n      NetworkMode: networkMode,\n      Ulimits: [\n        {\n          // Disable core dumps, which can get very large and bloat our storage.\n          Name: 'core',\n          Soft: 0,\n          Hard: 0,\n        },\n      ],\n    },\n    Labels: {\n      'prairielearn.workspace-id': String(workspace.id),\n      'prairielearn.workspace-version': String(workspace.version),\n      'prairielearn.course-id': String(workspace.course_id),\n      'prairielearn.institution-id': String(workspace.institution_id),\n    },\n    Cmd: args?.length ? shlex.split(args) : undefined,\n    name: local_name,\n    Volumes: {\n      [containerPath]: {},\n    },\n  });\n\n  await sqldb.queryAsync(sql.update_load_count, {\n    instance_id: workspace_server_settings.instance_id,\n  });\n\n  return container;\n}\n\nasync function _startContainer(workspace_id: string | number, container: Docker.Container) {\n  await workspaceUtils.updateWorkspaceMessage(workspace_id, 'Starting container');\n  await container.start();\n}\n\n/**\n * Wrapper around `updateWorkspaceState()` that will ensure any errors don't\n * propagate to the caller. Useful during the initialization sequence when we\n * would mark the host as unhealthy if an error occurred while updating the state.\n */\nfunction safeUpdateWorkspaceState(\n  workspaceId: string | number,\n  state: 'stopped',\n  message?: string,\n) {\n  workspaceUtils.updateWorkspaceState(workspaceId, state, message).catch((err) => {\n    logger.error('Error updating workspace state', err);\n    Sentry.captureException(err);\n  });\n}\n\n// Called by the main server the first time a workspace is used by a user\nasync function initSequence(workspace_id: string | number, useInitialZip: boolean, res: Response) {\n  // send 200 immediately to prevent socket hang up from _pullImage()\n  res.status(200).send(`Preparing container for workspace ${workspace_id}`);\n\n  const uuid = uuidv4();\n  const params = {\n    workspace_id,\n    launch_uuid: uuid,\n    instance_id: workspace_server_settings.instance_id,\n  };\n  await sqldb.queryAsync(sql.set_workspace_launch_uuid, params);\n\n  const { version, course_id, institution_id } = (\n    await sqldb.queryOneRowAsync(sql.select_workspace, { workspace_id })\n  ).rows[0];\n\n  logger.info(`Launching workspace-${workspace_id}-${version} (useInitialZip=${useInitialZip})`);\n  try {\n    // Only errors at this level will set host to unhealthy.\n\n    const workspace = await run(async () => {\n      try {\n        debug('init: configuring workspace');\n        return {\n          id: workspace_id,\n          course_id,\n          institution_id,\n          version,\n          launch_uuid: uuid,\n          local_name: `workspace-${uuid}`,\n          remote_name: `workspace-${workspace_id}-${version}`,\n          launch_port: await _allocateContainerPort(workspace_id),\n          settings: await _getWorkspaceSettings(workspace_id),\n        } satisfies Workspace;\n      } catch (err) {\n        logger.error(`Error configuring workspace ${workspace_id}`, err);\n        safeUpdateWorkspaceState(\n          workspace_id,\n          'stopped',\n          'Error configuring workspace. Click \"Reboot\" to try again.',\n        );\n      }\n    });\n\n    if (!workspace) return; // don't set host to unhealthy\n\n    try {\n      await _pullImage(workspace);\n    } catch (err) {\n      const image = workspace.settings.workspace_image;\n      logger.error(`Error pulling image ${image} for workspace ${workspace.id}`, err);\n      safeUpdateWorkspaceState(\n        workspace.id,\n        'stopped',\n        'Error pulling image. Click \"Reboot\" to try again.',\n      );\n      return; // don't set host to unhealthy\n    }\n\n    let container: Docker.Container | undefined;\n    try {\n      await workspaceUtils.updateWorkspaceMessage(workspace.id, 'Creating container');\n      container = await _createContainer(workspace);\n    } catch (err) {\n      logger.error(`Error creating container for workspace ${workspace.id}`, err);\n      safeUpdateWorkspaceState(\n        workspace.id,\n        'stopped',\n        'Error creating container. Click \"Reboot\" to try again.',\n      );\n      return; // don't set host to unhealthy\n    }\n\n    try {\n      await _startContainer(workspace.id, container);\n      await _checkServer(workspace);\n      debug(`init: container initialized for workspace_id=${workspace.id}`);\n\n      // Before we transition this workspace to running, check that the container\n      // we just launched is the same one that this workspace is still assigned to.\n      // To be more precise, we'll check that the container's launch_uuid matches\n      // the current launch_uuid for this workspace. If they don't match, then\n      // the workspace was relaunched while we were initializing it, and we should\n      // abandon it.\n      //\n      // We don't have to explicitly kill the container here - our usual\n      // background maintenance processes will soon notice that this container\n      // should not be running on this host and kill it.\n      const hostname = await sqldb.runInTransactionAsync(async () => {\n        const currentWorkspace = await sqldb.queryOneRowAsync(sql.select_and_lock_workspace, {\n          workspace_id: workspace.id,\n        });\n        const launch_uuid = currentWorkspace.rows[0].launch_uuid;\n        if (launch_uuid !== workspace.launch_uuid) {\n          logger.info(\n            `Abandoning container for workspace ${workspace.id}: relaunched with launch_uuid ${launch_uuid}`,\n          );\n          return null;\n        }\n\n        const hostname = `${workspace_server_settings.server_to_container_hostname}:${workspace.launch_port}`;\n        await sqldb.queryAsync(sql.update_workspace_hostname, {\n          workspace_id: workspace.id,\n          hostname,\n        });\n        return hostname;\n      });\n\n      // If we successfully updated the workspace's hostname, we can transition\n      // it to running. Note that this MUST be done outside of the above transaction,\n      // since this send a websocket message to the client to make it load the\n      // workspace. If we do this inside the transaction, there's a chance that the\n      // websocket message will reach the client before the state change is committed,\n      // which would cause the client to try to load the workspace before it's ready.\n      if (hostname) {\n        await workspaceUtils.updateWorkspaceState(workspace.id, 'running');\n      }\n    } catch (err) {\n      logger.error(`Error starting container for workspace ${workspace.id}`, err);\n      safeUpdateWorkspaceState(\n        workspace.id,\n        'stopped',\n        'Error starting container. Click \"Reboot\" to try again.',\n      );\n\n      // Immediately kill and remove the container, which will flush any\n      // logs to S3 for better debugging.\n      await killAndRemoveWorkspace(workspace.id, container);\n\n      // Don't set host to unhealthy.\n      return;\n    }\n  } catch (err) {\n    logger.error(`Error initializing workspace ${workspace_id}; marking self as unhealthy`);\n    await markSelfUnhealthy(err);\n  }\n}\n\nasync function sendGradedFilesArchive(workspace_id: string | number, res: Response) {\n  const workspace = await _getWorkspace(workspace_id);\n  const workspaceSettings = await _getWorkspaceSettings(workspace_id);\n  const timestamp = new Date().toISOString().replace(/[-T:.]/g, '-');\n  const zipName = `${workspace.remote_name}-${timestamp}.zip`;\n  const workspaceDir = path.join(config.workspaceHostHomeDirRoot, workspace.remote_name, 'current');\n\n  let gradedFiles: Entry[] | undefined;\n  try {\n    gradedFiles = await workspaceUtils.getWorkspaceGradedFiles(\n      workspaceDir,\n      workspaceSettings.workspace_graded_files,\n      {\n        maxFiles: config.workspaceMaxGradedFilesCount,\n        maxSize: config.workspaceMaxGradedFilesSize,\n      },\n    );\n  } catch (err) {\n    res.status(500).send(err.message);\n    return;\n  }\n\n  // Stream the archive back to the client as it's generated.\n  res.attachment(zipName).status(200);\n  const archive = archiver('zip');\n  archive.pipe(res);\n\n  archive.on('error', (err) => {\n    logger.error('Error creating archive', err);\n    Sentry.captureException(err);\n\n    // Since we've probably already sent some data to the client, we can't do\n    // anything to gracefully let them know that we encountered an error.\n    // Instead, we'll just destroy the socket so that they pick up an error\n    // and handle that however they want.\n    res.socket?.destroy();\n  });\n\n  for (const file of gradedFiles) {\n    try {\n      const filePath = path.join(workspaceDir, file.path);\n      archive.file(filePath, { name: file.path });\n      debug(`Sending ${file.path}`);\n    } catch {\n      logger.warn(`Graded file ${file.path} does not exist.`);\n      continue;\n    }\n  }\n\n  await archive.finalize();\n}\n\nasync function sendLogs(workspaceId: string | number, res: Response) {\n  try {\n    const workspace = await _getWorkspace(workspaceId);\n    const container = await _getDockerContainerByLaunchUuid(workspace.launch_uuid);\n    const logs = await container.logs({\n      stdout: true,\n      stderr: true,\n      timestamps: true,\n      // This should give us a reasonable bound on the worst-case performance.\n      tail: 50000,\n    });\n    const parsedLogs = parseDockerLogs(logs);\n    res.status(200).send(parsedLogs);\n  } catch (err) {\n    logger.error('Error getting container logs', err);\n    Sentry.captureException(err);\n    res.status(500).send();\n  }\n}\n\nasync function flushLogsToS3(container: Docker.Container) {\n  if (!config.workspaceLogsS3Bucket) return;\n\n  // Read all data from the container's labels instead of trying to look it up\n  // in the database, as some things (namely the version) may have changed.\n  const containerInfo = await container.inspect();\n\n  const workspaceId = containerInfo.Config.Labels['prairielearn.workspace-id'];\n  const courseId = containerInfo.Config.Labels['prairielearn.course-id'];\n  const institutionId = containerInfo.Config.Labels['prairielearn.institution-id'];\n  // We use the version recorded in the container labels instead of in the\n  // workspace row from the database. We might be flushing these logs sometime\n  // after the workspace has been relaunched in a new version, and we want to\n  // associate the logs with the correct (older) version.\n  const version = containerInfo.Config.Labels['prairielearn.workspace-version'];\n\n  // For any container versions A and B, if A < B, then the `StartedAt` date for A\n  // should be before the `StartedAt` date for B. This means that we can use the\n  // date for ordering of logs from different versions.\n  const startedAt = containerInfo.State.StartedAt;\n\n  const logs = await container.logs({\n    stdout: true,\n    stderr: true,\n    timestamps: true,\n    // This should give us a reasonable bound on the worst-case performance.\n    tail: 50000,\n  });\n  const parsedLogs = parseDockerLogs(logs);\n\n  const key = `${workspaceId}/${version}/${startedAt}.log`;\n  const tags = {\n    WorkspaceId: workspaceId,\n    CourseId: courseId,\n    InstitutionId: institutionId,\n  };\n\n  const s3 = new S3(makeS3ClientConfig({ maxAttempts: 3 }));\n  await new Upload({\n    client: s3,\n    params: {\n      Bucket: config.workspaceLogsS3Bucket,\n      Key: key,\n      Body: parsedLogs,\n      Tagging: new URLSearchParams(tags).toString(),\n    },\n  }).done();\n}\n"]}