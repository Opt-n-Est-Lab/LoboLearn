{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/lib/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nimport {\n  ConfigLoader,\n  makeFileConfigSource,\n  makeImdsConfigSource,\n  makeSecretsManagerConfigSource,\n} from '@prairielearn/config';\n\nconst ConfigSchema = z.object({\n  postgresqlUser: z.string().default('postgres'),\n  postgresqlPassword: z.string().nullable().default(null),\n  postgresqlDatabase: z.string().default('postgres'),\n  postgresqlHost: z.string().default('localhost'),\n  postgresqlPoolSize: z.number().default(100),\n  postgresqlIdleTimeoutMillis: z.number().default(30_000),\n  cacheType: z.enum(['none', 'redis', 'memory']).default('none'),\n  cacheKeyPrefix: z.string().default('workspace-host-cache:'),\n  redisUrl: z.string().optional().default('redis://localhost:6379/'),\n  runningInEc2: z.boolean().default(false),\n  cacheImageRegistry: z.string().nullable().default(null),\n  awsRegion: z.string().default('us-east-2'),\n  instanceId: z.string().default('server'),\n  hostname: z.string().default('localhost'),\n  sentryDsn: z.string().nullable().default(null),\n  sentryEnvironment: z.string().default('development'),\n  workspaceDevHostInstanceId: z.string().default('devWSHost1'),\n  workspaceDevHostHostname: z.string().default('localhost'),\n  workspaceDevContainerHostname: z.string().default('host.docker.internal'),\n  workspaceHostPort: z.number().default(8081),\n  workspaceHostPruneContainersSec: z.number().default(60),\n  workspaceHostMinPortRange: z.number().default(1024),\n  /**\n   * Docker on Windows doesn't support ports above 45000.\n   */\n  workspaceHostMaxPortRange: z.number().default(45000),\n  /**\n   * If set to a positive integer, this will limit the number of allocation attempts.\n   */\n  workspaceHostMaxPortAllocationAttempts: z.number().default(0),\n  workspacePullImagesFromDockerHub: z.boolean().default(true),\n  workspacePercentMessageRateLimitSec: z.number().default(1),\n  workspaceSupportNoInternet: z.boolean().default(false),\n  workspaceHostHomeDirRoot: z.string().default('/jobs/workspaces'),\n  workspaceJobsDirectoryOwnerUid: z.number().default(0),\n  workspaceJobsDirectoryOwnerGid: z.number().default(0),\n  workspaceDockerMemory: z.number().default(1 << 30), // 1GiB\n  workspaceDockerMemorySwap: z.number().default(1 << 30), // Same as memory, so no access to swap.\n  workspaceDockerKernelMemory: z.number().default(1 << 29), // 512 MiB\n  workspaceDockerDiskQuota: z.number().default(1 << 30), // 1 GiB\n  workspaceDockerCpuPeriod: z.number().default(100000), // microseconds\n  /**\n   * Allocates a portion of the `CpuPeriod` for this container.\n   */\n  workspaceDockerCpuQuota: z.number().default(90000),\n  workspaceDockerPidsLimit: z.number().default(1024),\n  /** Controls the maximum number of allowable graded files. */\n  workspaceMaxGradedFilesCount: z.number().default(100),\n  /** Controls the maximum size of all graded files in bytes. */\n  workspaceMaxGradedFilesSize: z.number().default(100 * 1024 * 1024),\n  workspaceLogsS3Bucket: z\n    .string()\n    .nullable()\n    .default(process.env.NODE_ENV !== 'production' ? 'workspace-logs' : null),\n  /**\n   * How long to wait for a workspace container to start. If the container\n   * doesn't complete a health check within this period, it is marked as\n   * unhealthy and killed.\n   */\n  workspaceStartTimeoutSec: z.number().default(30),\n  /**\n   * How long to wait between the end of one health check and the start of\n   * the next one.\n   */\n  workspaceHealthCheckIntervalSec: z.number().default(1),\n  /**\n   * How long a single run of the health check is allowed to take.\n   */\n  workspaceHealthCheckTimeoutSec: z.number().default(10),\n});\n\nconst loader = new ConfigLoader(ConfigSchema);\n\nexport const config = loader.config;\n\nexport async function loadConfig(paths: string[]) {\n  await loader.loadAndValidate([\n    ...paths.map((path) => makeFileConfigSource(path)),\n    makeImdsConfigSource(),\n    makeSecretsManagerConfigSource('ConfSecret'),\n  ]);\n}\n"]}