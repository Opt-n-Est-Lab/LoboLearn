{"version":3,"file":"docker.js","sourceRoot":"","sources":["../../src/lib/docker.ts"],"names":[],"mappings":"AAAA;;;;;;;;;GASG;AACH,MAAM,UAAU,eAAe,CAAC,MAAc;IAC5C,MAAM,YAAY,GAAa,EAAE,CAAC;IAElC,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACzB,4EAA4E;QAC5E,2DAA2D;QAC3D,MAAM,MAAM,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;YAAE,MAAM;QAE7B,yEAAyE;QACzE,yEAAyE;QACzE,8CAA8C;QAC9C,MAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAE1C,MAAM,OAAO,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;QACxC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAED,SAAS,WAAW,CAAC,GAAG;QACtB,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACpC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7C,OAAO,GAAG,CAAC;IACb,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AACrC,CAAC","sourcesContent":["/**\n * Converts Docker's custom multiplexed stream format into a normal string.\n * This essentially entails removing each 8-byte header.\n *\n * For more information about this format, see\n * https://docs.docker.com/engine/api/v1.41/#tag/Container/operation/ContainerAttach\n * https://github.com/apocas/dockerode/issues/456\n * https://github.com/moby/moby/issues/32794\n *\n */\nexport function parseDockerLogs(buffer: Buffer): Buffer {\n  const outputChunks: Buffer[] = [];\n\n  while (buffer.length > 0) {\n    // Ensure that we gracefully handle the case where we have a partial header.\n    // In that case, we'll just discard the rest of the buffer.\n    const header = bufferSlice(8);\n    if (header.length < 8) break;\n\n    // The header contains both the stream type (stdin/stdout/stderr) and the\n    // length of the data that follows. We won't differentiate between stdout\n    // and stderr, so we'll just ignore that byte.\n    const dataLength = header.readUInt32BE(4);\n\n    const content = bufferSlice(dataLength);\n    outputChunks.push(content);\n  }\n\n  function bufferSlice(end) {\n    const out = buffer.subarray(0, end);\n    buffer = buffer.subarray(end, buffer.length);\n    return out;\n  }\n\n  return Buffer.concat(outputChunks);\n}\n"]}