{"version":3,"file":"docker.test.js","sourceRoot":"","sources":["../../src/lib/docker.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAE9C,8DAA8D;AAC9D,oFAAoF;AACpF,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,iCAAiC;QACjC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAClC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B,KAAK,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3B,KAAK,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,gBAAgB,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,gCAAgC;QAChC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAClC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B,6CAA6C;QAC7C,KAAK,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3B,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,wDAAwD;QACxD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAClC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACxB,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3B,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport { parseDockerLogs } from './docker.js';\n\n// See \"Stream format\" docs on the Docker ContainerAttach API:\n// https://docs.docker.com/engine/api/v1.41/#tag/Container/operation/ContainerAttach\ndescribe('parseDockerLogs', () => {\n  it('handles empty case', () => {\n    assert.deepEqual(parseDockerLogs(Buffer.from([])), Buffer.from([]));\n  });\n\n  it('handles one line of stdout', () => {\n    // 8-byte header + 13-byte string\n    const input = Buffer.alloc(21, 0);\n    input.writeUInt32BE(1, 0);\n    input.writeUInt32BE(13, 4);\n    input.write('hello world!\\n', 8);\n    assert.deepEqual(parseDockerLogs(input).toString(), 'hello world!\\n');\n  });\n\n  it('handles missing bytes at the end', () => {\n    // 8-byte header + 5 byte string\n    const input = Buffer.alloc(13, 0);\n    input.writeUInt32BE(1, 0);\n    // Lie and claim that there are 13 bytes here\n    input.writeUInt32BE(13, 4);\n    input.write('hello', 8);\n    assert.deepEqual(parseDockerLogs(input).toString(), 'hello');\n  });\n\n  it('handles truncated header', () => {\n    // 8-byte header + 5 byte string + partial 4-byte header\n    const input = Buffer.alloc(17, 0);\n    input.writeUInt32BE(1, 0);\n    input.writeUInt32BE(5, 4);\n    input.write('hello', 8);\n    input.writeUInt32BE(1, 13);\n    assert.deepEqual(parseDockerLogs(input).toString(), 'hello');\n  });\n});\n"]}