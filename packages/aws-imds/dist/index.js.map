{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport { z } from 'zod';\n\nconst IMDS_URI = 'http://169.254.169.254';\nconst TOKEN_PATH = '/latest/api/token';\nconst TOKEN_TTL = 21_600; // 6 hours\n\nconst InstanceIdentitySchema = z.object({\n  availabilityZone: z.string(),\n  privateIp: z.string(),\n  version: z.string(),\n  instanceId: z.string(),\n  instanceType: z.string(),\n  accountId: z.string(),\n  imageId: z.string(),\n  pendingTime: z.string(),\n  architecture: z.string(),\n  region: z.string(),\n});\ntype InstanceIdentity = z.infer<typeof InstanceIdentitySchema>;\n\nlet cachedToken: string | null = null;\nlet cachedTokenExpiration = 0;\n\nasync function getToken(): Promise<string> {\n  if (cachedToken && Date.now() < cachedTokenExpiration) {\n    return cachedToken;\n  }\n\n  cachedTokenExpiration = Date.now() + TOKEN_TTL * 1000;\n  const tokenRes = await fetch(`${IMDS_URI}${TOKEN_PATH}`, {\n    method: 'PUT',\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': TOKEN_TTL.toString(),\n    },\n    signal: AbortSignal.timeout(5_000),\n  });\n  if (!tokenRes.ok) {\n    throw new Error(`Failed to get IMDS token: ${tokenRes.status} ${tokenRes.statusText}`);\n  }\n\n  cachedToken = await tokenRes.text();\n  return cachedToken;\n}\n\nexport async function fetchImdsText(path: string): Promise<string> {\n  const token = await getToken();\n\n  const res = await fetch(`${IMDS_URI}${path}`, {\n    headers: {\n      'X-aws-ec2-metadata-token': token,\n    },\n    signal: AbortSignal.timeout(5_000),\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch IMDS path ${path}: ${res.status} ${res.statusText}`);\n  }\n\n  return res.text();\n}\n\nexport async function fetchImdsJson(path: string): Promise<unknown> {\n  const json = await fetchImdsText(path);\n  return JSON.parse(json);\n}\n\nexport async function fetchInstanceHostname(): Promise<string> {\n  return fetchImdsText('/latest/meta-data/local-hostname');\n}\n\nexport async function fetchInstanceIdentity(): Promise<InstanceIdentity> {\n  const json = await fetchImdsJson('/latest/dynamic/instance-identity/document');\n  return InstanceIdentitySchema.parse(json);\n}\n"]}