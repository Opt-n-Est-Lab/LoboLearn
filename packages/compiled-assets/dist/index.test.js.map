{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { assert } from 'chai';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport getPort from 'get-port';\nimport fetch from 'node-fetch';\nimport tmp from 'tmp-promise';\n\nimport {\n  type CompiledAssetsOptions,\n  build,\n  close,\n  compiledScriptPath,\n  compiledStylesheetPath,\n  handler,\n  init,\n} from './index.js';\n\nasync function testProject(options: CompiledAssetsOptions) {\n  await tmp.withDir(\n    async (dir) => {\n      // macOS does weird things with symlinks in its tmp directories. Resolve\n      // the real path so that our asset-building machinery doesn't get confused.\n      const tmpDir = await fs.realpath(dir.path);\n\n      const scriptsRoot = path.join(tmpDir, 'assets', 'scripts');\n      await fs.ensureDir(scriptsRoot);\n\n      const stylesRoot = path.join(tmpDir, 'assets', 'stylesheets');\n      await fs.ensureDir(stylesRoot);\n\n      const jsScriptPath = path.join(scriptsRoot, 'foo.js');\n      await fs.writeFile(jsScriptPath, 'console.log(\"foo\")');\n\n      const tsScriptPath = path.join(scriptsRoot, 'bar.ts');\n      await fs.writeFile(tsScriptPath, 'interface Foo {};\\n\\nconsole.log(\"bar\")');\n\n      const stylesPath = path.join(stylesRoot, 'baz.css');\n      await fs.writeFile(stylesPath, 'body { color: red; }');\n\n      if (!options.dev) {\n        await build(path.join(tmpDir, 'assets'), path.join(tmpDir, 'public', 'build'));\n      }\n\n      await init({\n        sourceDirectory: path.join(tmpDir, 'assets'),\n        buildDirectory: path.join(tmpDir, 'public', 'build'),\n        publicPath: '/build',\n        ...options,\n      });\n\n      const port = await getPort();\n      const app = express();\n      app.use('/build', handler());\n      const server = app.listen(port);\n\n      try {\n        const jsRes = await fetch(`http://localhost:${port}${compiledScriptPath('foo.js')}`);\n        assert.isTrue(jsRes.ok);\n        assert.match(await jsRes.text(), /console\\.log\\(\"foo\"\\)/);\n\n        const cssRes = await fetch(`http://localhost:${port}${compiledStylesheetPath('baz.css')}`);\n        assert.isTrue(cssRes.ok);\n        const cssText = await cssRes.text();\n        assert.match(cssText, /body\\s*\\{/);\n        assert.match(cssText, /color:\\s*red/);\n\n        assert.throws(\n          () => compiledScriptPath('nonexistent.js'),\n          'Unknown scripts asset: nonexistent.js',\n        );\n        assert.throws(\n          () => compiledStylesheetPath('nonexistent.css'),\n          'Unknown stylesheets asset: nonexistent.css',\n        );\n      } finally {\n        server.close();\n      }\n    },\n    {\n      unsafeCleanup: true,\n    },\n  );\n}\n\ndescribe('compiled-assets', () => {\n  afterEach(async () => close());\n\n  it('works in dev mode', async () => {\n    await testProject({ dev: true });\n  });\n\n  it('works in prod mode', async () => {\n    await testProject({ dev: false });\n  });\n});\n"]}