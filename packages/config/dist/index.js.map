{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { DescribeTagsCommand, EC2Client } from '@aws-sdk/client-ec2';\nimport { GetSecretValueCommand, SecretsManagerClient } from '@aws-sdk/client-secrets-manager';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport { z } from 'zod';\n\nimport { fetchInstanceHostname, fetchInstanceIdentity } from '@prairielearn/aws-imds';\n\ntype AbstractConfig = Record<string, unknown>;\n\ninterface ConfigSource {\n  load: (existingConfig: AbstractConfig) => Promise<AbstractConfig>;\n}\n\nexport function makeLiteralConfigSource(config: AbstractConfig) {\n  return {\n    load: async () => config,\n  };\n}\n\nexport function makeFileConfigSource(path: string): ConfigSource {\n  return {\n    load: async () => {\n      if (!(await fs.pathExists(path))) return {};\n\n      const config = await fs.readJson(path);\n      return z.record(z.string(), z.any()).parse(config);\n    },\n  };\n}\n\nexport function makeSecretsManagerConfigSource(tagKey: string): ConfigSource {\n  return {\n    load: async (existingConfig) => {\n      if (!existingConfig.runningInEc2 && !process.env.CONFIG_LOAD_FROM_AWS) {\n        return {};\n      }\n\n      const identity = await fetchInstanceIdentity();\n\n      // We disable the ESLint rule here because we don't care about sharing\n      // configs between clients in this case. We only want to share configs\n      // to avoid spamming the IMDS API when creating lots of clients, but\n      // this client will only be used once, typically at application startup.\n      // eslint-disable-next-line @prairielearn/aws-client-shared-config\n      const ec2Client = new EC2Client({ region: identity.region });\n      const tags = await ec2Client.send(\n        new DescribeTagsCommand({\n          Filters: [{ Name: 'resource-id', Values: [identity.instanceId] }],\n        }),\n      );\n\n      const secretId = tags.Tags?.find((tag) => tag.Key === tagKey)?.Value;\n      if (!secretId) return {};\n\n      // As above, we don't care about sharing configs between clients.\n      // eslint-disable-next-line @prairielearn/aws-client-shared-config\n      const secretsManagerClient = new SecretsManagerClient({ region: identity.region });\n      const secretValue = await secretsManagerClient.send(\n        new GetSecretValueCommand({ SecretId: secretId }),\n      );\n      if (!secretValue.SecretString) return {};\n\n      const config = JSON.parse(secretValue.SecretString);\n      return z.record(z.string(), z.any()).parse(config);\n    },\n  };\n}\n\nexport function makeImdsConfigSource(): ConfigSource {\n  return {\n    load: async (existingConfig) => {\n      if (!existingConfig.runningInEc2 && !process.env.CONFIG_LOAD_FROM_AWS) {\n        return {};\n      }\n\n      const hostname = await fetchInstanceHostname();\n      const identity = await fetchInstanceIdentity();\n\n      return {\n        hostname,\n        instanceId: identity.instanceId,\n        awsRegion: identity.region,\n      };\n    },\n  };\n}\n\nexport class ConfigLoader<Schema extends z.ZodTypeAny> {\n  private readonly schema: Schema;\n  private readonly resolvedConfig: z.infer<Schema>;\n\n  constructor(schema: Schema) {\n    this.schema = schema;\n\n    // Get the default values from the schema. This ensures that all values\n    // have defaults, and also allows us to override nested defaults with\n    // `_.merge()` in `loadAndValidate()`.\n    this.resolvedConfig = schema.parse({});\n  }\n\n  async loadAndValidate(sources: ConfigSource[] = []) {\n    let config = this.schema.parse({});\n    // If the config setting is an array, override instead of merge\n    const mergeRule = (_obj: any, src: any) => (Array.isArray(src) ? src : undefined);\n\n    for (const source of sources) {\n      config = _.mergeWith(config, await source.load(config), mergeRule);\n    }\n\n    const parsedConfig = this.schema.parse(config);\n    _.mergeWith(this.resolvedConfig, parsedConfig, mergeRule);\n  }\n\n  get config() {\n    return this.resolvedConfig;\n  }\n}\n"]}