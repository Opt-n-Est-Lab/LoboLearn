{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type AuthorizationData,\n  type ECRClient,\n  GetAuthorizationTokenCommand,\n} from '@aws-sdk/client-ecr';\nimport { isFuture, subHours } from 'date-fns';\n\nimport { logger } from '@prairielearn/logger';\n\nexport interface DockerAuth {\n  username: string;\n  password: string;\n}\n\nlet dockerAuthData: DockerAuth | null = null;\nlet dockerAuthDataExpiresAt: Date | null | undefined = null;\n\nfunction authDataExtractLogin(data: AuthorizationData): DockerAuth {\n  const token = data.authorizationToken;\n  if (!token) {\n    throw new Error('No authorization token in ECR authorization data');\n  }\n  const buff = Buffer.from(token, 'base64');\n  const authString = buff.toString('ascii');\n  const authArray = authString.split(':');\n\n  return {\n    username: authArray[0],\n    password: authArray[1],\n  };\n}\n\nexport async function setupDockerAuth(ecr: ECRClient): Promise<DockerAuth> {\n  // If we have cached data that's not within an hour of expiring, use it.\n  if (dockerAuthData && dockerAuthDataExpiresAt && isFuture(subHours(dockerAuthDataExpiresAt, 1))) {\n    logger.info('Using cached ECR authorization token');\n    return dockerAuthData;\n  }\n\n  logger.info('Getting ECR authorization token');\n  const data = await ecr.send(new GetAuthorizationTokenCommand({}));\n  const authorizationData = data.authorizationData;\n  if (!authorizationData) {\n    throw new Error('No authorization data in ECR response');\n  }\n\n  dockerAuthData = authDataExtractLogin(authorizationData[0]);\n  dockerAuthDataExpiresAt = authorizationData[0].expiresAt;\n\n  return dockerAuthData;\n}\n\n/**\n * Borrowed from https://github.com/apocas/dockerode/blob/master/lib/util.js\n * but turned into a class to manipulate which part of the docker image name\n * we need.\n */\nexport class DockerName {\n  protected original: string;\n  protected registry: string | undefined;\n  protected repository: string;\n  protected tag: string | undefined;\n\n  constructor(name: string) {\n    this.original = name;\n    this.registry = undefined;\n    this.repository = name;\n    this.tag = undefined;\n\n    // Parse name into the object parts\n    const digestPos = name.indexOf('@');\n    const colonPos = name.lastIndexOf(':');\n\n    // @ symbol is more important\n    let separatorPos;\n    if (digestPos >= 0) {\n      separatorPos = digestPos;\n    } else if (colonPos >= 0) {\n      separatorPos = colonPos;\n    }\n\n    if (separatorPos) {\n      // last colon is either the tag (or part of a port designation)\n      const tag = name.slice(separatorPos + 1);\n\n      // if it contains a / its not a tag and is part of the url\n      if (tag.indexOf('/') === -1) {\n        this.repository = name.slice(0, separatorPos);\n        this.tag = tag;\n      }\n    }\n\n    const slashes = this.repository.split('/');\n    if (slashes.length > 2) {\n      this.registry = slashes.slice(0, -2).join('/');\n      this.repository = slashes.slice(-2).join('/');\n    }\n  }\n\n  setRegistry(registry: string | undefined) {\n    this.registry = registry;\n  }\n\n  getRepository() {\n    return this.repository;\n  }\n\n  getTag() {\n    return this.tag;\n  }\n\n  getRegistryRepo() {\n    let combined = '';\n    if (typeof this.registry !== 'undefined') {\n      combined = this.registry + '/';\n    }\n    combined += this.repository;\n    return combined;\n  }\n\n  getCombined(latestTag = false) {\n    let combined = '';\n    if (typeof this.registry !== 'undefined') {\n      combined = this.registry + '/';\n    }\n    combined += this.repository;\n    if (this.tag) {\n      combined += ':' + this.tag;\n    } else if (latestTag) {\n      combined += ':latest';\n    }\n    return combined;\n  }\n}\n"]}