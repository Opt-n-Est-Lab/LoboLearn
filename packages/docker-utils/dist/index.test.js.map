{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAExC,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,MAAM,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,MAAM,CAAC,CAAC;QAC7C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,kCAAkC,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAClE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,kCAAkC,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,0CAA0C,CAAC,CAAC;QACxE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,mCAAmC,CAAC,CAAC;QAC1E,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,0CAA0C,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,kCAAkC,CAAC,CAAC;QAChE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,0CAA0C,CAAC,CAAC;QAC7E,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,kCAAkC,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from 'chai';\n\nimport { DockerName } from './index.js';\n\ndescribe('DockerName', () => {\n  it('parses a simple repository', () => {\n    const name = new DockerName('node:latest');\n    assert.equal(name.getRepository(), 'node');\n    assert.equal(name.getTag(), 'latest');\n    assert.equal(name.getRegistryRepo(), 'node');\n    assert.equal(name.getCombined(), 'node:latest');\n  });\n\n  it('parses a scoped repository', () => {\n    const name = new DockerName('prairielearn/prairielearn:latest');\n    assert.equal(name.getRepository(), 'prairielearn/prairielearn');\n    assert.equal(name.getTag(), 'latest');\n    assert.equal(name.getRegistryRepo(), 'prairielearn/prairielearn');\n    assert.equal(name.getCombined(), 'prairielearn/prairielearn:latest');\n  });\n\n  it('parses a repository with a registry', () => {\n    const name = new DockerName('ghcr.io/prairielearn/prairielearn:latest');\n    assert.equal(name.getRepository(), 'prairielearn/prairielearn');\n    assert.equal(name.getTag(), 'latest');\n    assert.equal(name.getRegistryRepo(), 'ghcr.io/prairielearn/prairielearn');\n    assert.equal(name.getCombined(), 'ghcr.io/prairielearn/prairielearn:latest');\n  });\n\n  it('serializes after setting a new registry', () => {\n    const name = new DockerName('prairielearn/prairielearn:latest');\n    name.setRegistry('ghcr.io');\n    assert.equal(name.getCombined(), 'ghcr.io/prairielearn/prairielearn:latest');\n    name.setRegistry(undefined);\n    assert.equal(name.getCombined(), 'prairielearn/prairielearn:latest');\n  });\n});\n"]}