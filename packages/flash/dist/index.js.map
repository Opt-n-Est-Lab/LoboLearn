{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsyncLocalStorage } from 'node:async_hooks';\n\nimport type { NextFunction, Request, Response } from 'express';\n\nimport { type HtmlSafeString, html } from '@prairielearn/html';\n\nconst als = new AsyncLocalStorage<FlashStorage>();\n\nexport type FlashMessageType = 'notice' | 'success' | 'warning' | 'error';\n\nexport interface FlashMessage {\n  type: FlashMessageType;\n  message: string;\n}\n\nexport function flashMiddleware() {\n  return (req: Request, _res: Response, next: NextFunction) => {\n    const flashStorage = makeFlashStorage(req);\n    als.run(flashStorage, () => next());\n  };\n}\n\nexport function flash(type?: FlashMessageType | FlashMessageType[]): FlashMessage[];\nexport function flash(type: FlashMessageType, message: string | HtmlSafeString): void;\nexport function flash(\n  type?: FlashMessageType | FlashMessageType[],\n  message?: string | HtmlSafeString,\n) {\n  const flashStorage = als.getStore();\n  if (!flashStorage) {\n    throw new Error('flash() must be called within a request');\n  }\n\n  if (Array.isArray(type)) {\n    const messages = type.flatMap((type) => flashStorage.get(type));\n    type.forEach((t) => flashStorage.clear(t));\n    return messages;\n  }\n\n  if (type != null && message != null) {\n    flashStorage.add(type, message);\n    return;\n  }\n\n  if (type != null) {\n    const message = flashStorage.get(type);\n    flashStorage.clear(type);\n    return message;\n  }\n\n  const messages = flashStorage.getAll();\n  flashStorage.clearAll();\n  return messages;\n}\n\ninterface FlashStorage {\n  add(type: FlashMessageType, message: string | HtmlSafeString): void;\n  get(type: FlashMessageType): FlashMessage[] | null;\n  getAll(): FlashMessage[];\n  clear(type: FlashMessageType): void;\n  clearAll(): void;\n}\n\nfunction makeFlashStorage(req: Request): FlashStorage {\n  // The \"flash storage\" object will be stored in `AsyncLocalStorage` for the\n  // request. If we start some async I/O during a request (such as opening a\n  // database connection or a socket connection to Docker), that would by\n  // default keep the async context, and thus the request. This would prevent\n  // the request object (and any data associated with it) from being garbage\n  // collected. We use a `WeakRef` to fix this.\n  //\n  // This should always be safe, as the request object won't be garbage\n  // collected until the response has been sent, and we should never be reading\n  // or writing flash messages after the response has been sent.\n  const reqRef = new WeakRef(req);\n\n  function getSession() {\n    const req = reqRef.deref();\n    if (!req) throw new Error('Request has been garbage collected');\n    const session = (req as any).session;\n    if (!session) throw new Error('No session found on request');\n    return session;\n  }\n\n  return {\n    add(type: FlashMessageType, message: string | HtmlSafeString) {\n      const session = getSession();\n      session.flash ??= [];\n      session.flash.push({ type, message: html`${message}`.toString() });\n    },\n    get(type: FlashMessageType) {\n      const session = getSession();\n      const messages = session.flash ?? [];\n      return messages.filter((message: FlashMessage) => message.type === type);\n    },\n    getAll() {\n      const session = getSession();\n      return session.flash ?? [];\n    },\n    clear(type: FlashMessageType) {\n      const session = getSession();\n      session.flash = session.flash?.filter((message: FlashMessage) => message.type !== type) ?? [];\n    },\n    clearAll() {\n      const session = getSession();\n      session.flash = [];\n    },\n  } satisfies FlashStorage;\n}\n"]}