{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport * as markdown from './index.js';\n\nasync function testMarkdown(\n  original: string,\n  expected: string,\n  options: { inline?: boolean } = {},\n) {\n  const actual = await markdown.markdownToHtml(original, options);\n  assert.equal(actual.toString().trim(), expected);\n}\n\ndescribe('Markdown processing', () => {\n  it('renders basic markdown correctly', async () => {\n    const question = '# Hello, world!\\nThis **works**.';\n    const expected = '<h1>Hello, world!</h1>\\n<p>This <strong>works</strong>.</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles inline latex with underscores', async () => {\n    const question = '$a _{1_ 2}$';\n    const expected = '<p>$a _{1_ 2}$</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles inline latex', async () => {\n    const question = '$a_1 + a_2 = a_3$';\n    const expected = '<p>$a_1 + a_2 = a_3$</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles multiple lines of inline latex', async () => {\n    const question = '$a_{ 1 } = 3$ and\\n$a_{ 2 } = 4$';\n    const expected = '<p>$a_{ 1 } = 3$ and\\n$a_{ 2 } = 4$</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles block latex', async () => {\n    const question = '$$\\na^2 + b^2 = c^2\\n$$';\n    const expected = '$$\\na^2 + b^2 = c^2\\n$$';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles block latex with asterisks', async () => {\n    const question = '$$\\na **b** c\\n$$';\n    const expected = '$$\\na **b** c\\n$$';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles two consecutive latex blocks', async () => {\n    const question = '$$\\na **b** c\\n$$\\n$$\\na+b=c\\n$$';\n    const expected = '$$\\na **b** c\\n$$\\n$$\\na+b=c\\n$$';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles block latex with asterisks and surrounding text', async () => {\n    const question = 'testing\\n$$\\na **b** c\\n$$\\ntesting';\n    const expected = '<p>testing</p>\\n$$\\na **b** c\\n$$\\n<p>testing</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles GFM extension for tables', async () => {\n    const question = '| foo | bar |\\n| --- | --- |\\n| baz | bim |';\n    const expected =\n      '<table><thead><tr><th>foo</th><th>bar</th></tr></thead><tbody><tr><td>baz</td><td>bim</td></tr></tbody></table>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles HTML tags', async () => {\n    const question = 'testing with <strong>bold</strong> and <em>italics</em> words';\n    const expected = '<p>testing with <strong>bold</strong> and <em>italics</em> words</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles HTML tags that do not close properly', async () => {\n    const question = 'testing with <strong>bold</strong> and <em>italics words';\n    const expected = '<p>testing with <strong>bold</strong> and <em>italics words</em></p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles HTML paragraphs that do not close properly', async () => {\n    const question = 'first paragraph<p>second paragraph<p>third paragraph';\n    const expected = '<p>first paragraph</p><p>second paragraph</p><p>third paragraph</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles HTML closing tags that do not open properly', async () => {\n    const question = 'testing with </div><p>new line';\n    const expected = '<p>testing with </p><p>new line</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('handles HTML closing tags that do not open properly', async () => {\n    const question = 'testing with </div><p>new line';\n    const expected = '<p>testing with </p><p>new line</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('removes p tag if content fits a single paragraph', async () => {\n    const question = 'test with **bold** and *italic* words';\n    const expected = 'test with <strong>bold</strong> and <em>italic</em> words';\n    await testMarkdown(question, expected, { inline: true });\n  });\n\n  it('keeps p tag if content has more than one paragraph', async () => {\n    const question = 'test with **bold** and *italic* words\\n\\nand a new paragraph';\n    const expected =\n      '<p>test with <strong>bold</strong> and <em>italic</em> words</p>\\n<p>and a new paragraph</p>';\n    await testMarkdown(question, expected, { inline: true });\n  });\n\n  it('keeps external tag if it is not a paragraph', async () => {\n    const question = '* single item';\n    const expected = '<ul>\\n<li>single item</li>\\n</ul>';\n    await testMarkdown(question, expected, { inline: true });\n  });\n\n  it('sanitizes HTML script tags', async () => {\n    const question = 'testing<script>alert(\"XSS\")</script>';\n    const expected = '<p>testing</p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('sanitizes HTML javascript event tags', async () => {\n    const question = 'testing<img src=\"x\" onerror=\"alert(\\'XSS\\')\">';\n    const expected = '<p>testing<img src=\"x\"></p>';\n    await testMarkdown(question, expected);\n  });\n\n  it('sanitizes HTML javascript iframes', async () => {\n    const question = 'testing<iframe src=\"javascript:alert(\\'delta\\')\"></iframe>';\n    const expected = '<p>testing</p>';\n    await testMarkdown(question, expected);\n  });\n});\n"]}