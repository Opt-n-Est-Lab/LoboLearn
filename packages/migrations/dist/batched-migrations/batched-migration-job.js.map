{"version":3,"file":"batched-migration-job.js","sourceRoot":"","sources":["../../src/batched-migrations/batched-migration-job.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEjE,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAE/C,MAAM,CAAC,MAAM,+BAA+B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;AAG1F,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,CAAC,MAAM,CAAC;IACnD,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;IACd,oBAAoB,EAAE,CAAC,CAAC,MAAM,EAAE;IAChC,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IACrC,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IACrC,MAAM,EAAE,+BAA+B;IACvC,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE;IACpB,UAAU,EAAE,CAAC,CAAC,IAAI,EAAE;IACpB,UAAU,EAAE,CAAC,CAAC,IAAI,EAAE;IACpB,UAAU,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IAC/B,WAAW,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IAChC,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE;CAClB,CAAC,CAAC;AAGH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,kBAA0B,EAC1B,MAAiC,EACjC,KAAa;IAEb,OAAO,MAAM,SAAS,CACpB,GAAG,CAAC,8BAA8B,EAClC,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,MAAM,EAAE,KAAK,EAAE,EAC3D,4BAA4B,CAC7B,CAAC;AACJ,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport { loadSqlEquiv, queryRows } from '@prairielearn/postgres';\n\nconst sql = loadSqlEquiv(import.meta.filename);\n\nexport const BatchedMigrationJobStatusSchema = z.enum(['pending', 'failed', 'succeeded']);\nexport type BatchedMigrationJobStatus = z.infer<typeof BatchedMigrationJobStatusSchema>;\n\nexport const BatchedMigrationJobRowSchema = z.object({\n  id: z.string(),\n  batched_migration_id: z.string(),\n  min_value: z.bigint({ coerce: true }),\n  max_value: z.bigint({ coerce: true }),\n  status: BatchedMigrationJobStatusSchema,\n  attempts: z.number(),\n  created_at: z.date(),\n  updated_at: z.date(),\n  started_at: z.date().nullable(),\n  finished_at: z.date().nullable(),\n  data: z.unknown(),\n});\nexport type BatchedMigrationJobRow = z.infer<typeof BatchedMigrationJobRowSchema>;\n\nexport async function selectRecentJobsWithStatus(\n  batchedMigrationId: string,\n  status: BatchedMigrationJobStatus,\n  limit: number,\n): Promise<BatchedMigrationJobRow[]> {\n  return await queryRows(\n    sql.select_recent_jobs_with_status,\n    { batched_migration_id: batchedMigrationId, status, limit },\n    BatchedMigrationJobRowSchema,\n  );\n}\n"]}