{"version":3,"file":"batched-migrations-runner.js","sourceRoot":"","sources":["../../src/batched-migrations/batched-migrations-runner.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'node:events';\nimport path from 'node:path';\nimport { setTimeout as sleep } from 'node:timers/promises';\n\nimport { doWithLock } from '@prairielearn/named-locks';\nimport { loadSqlEquiv, queryOptionalRow } from '@prairielearn/postgres';\n\nimport {\n  type MigrationFile,\n  readAndValidateMigrationsFromDirectories,\n} from '../load-migrations.js';\n\nimport { BatchedMigrationRunner } from './batched-migration-runner.js';\nimport {\n  type BatchedMigrationImplementation,\n  type BatchedMigrationRow,\n  BatchedMigrationRowSchema,\n  type BatchedMigrationStatus,\n  insertBatchedMigration,\n  selectBatchedMigrationForTimestamp,\n  updateBatchedMigrationStatus,\n  validateBatchedMigrationImplementation,\n} from './batched-migration.js';\n\nconst sql = loadSqlEquiv(import.meta.filename);\n\nconst DEFAULT_MIN_VALUE = 1n;\nconst DEFAULT_BATCH_SIZE = 1_000;\nconst DEFAULT_WORK_DURATION_MS = 60_000;\nconst DEFAULT_SLEEP_DURATION_MS = 30_000;\nconst EXTENSIONS = ['.js', '.ts', '.mjs', '.mts'];\n\ninterface BatchedMigrationRunnerOptions {\n  project: string;\n  directories: string[];\n}\n\ninterface BatchedMigrationStartOptions {\n  workDurationMs?: number;\n  sleepDurationMs?: number;\n}\n\ninterface BatchedMigrationFinalizeOptions {\n  logProgress?: boolean;\n}\n\nexport class BatchedMigrationsRunner extends EventEmitter {\n  private readonly options: BatchedMigrationRunnerOptions;\n  private readonly lockName: string;\n  private running = false;\n  private migrationFiles: MigrationFile[] | null = null;\n  private abortController = new AbortController();\n\n  constructor(options: BatchedMigrationRunnerOptions) {\n    super();\n    this.options = options;\n    this.lockName = `batched-migrations:${this.options.project}`;\n  }\n\n  private lockNameForTimestamp(timestamp: string) {\n    return `${this.lockName}:${timestamp}`;\n  }\n\n  private getMigrationFiles = async () => {\n    if (!this.migrationFiles) {\n      this.migrationFiles = await readAndValidateMigrationsFromDirectories(\n        this.options.directories,\n        EXTENSIONS,\n      );\n    }\n    return this.migrationFiles;\n  };\n\n  private async getMigrationForIdentifier(identifier: string): Promise<MigrationFile | null> {\n    const timestamp = identifier.split('_')[0];\n\n    const migrationFiles = await this.getMigrationFiles();\n    const migrationFile = migrationFiles.find((m) => m.timestamp === timestamp);\n    return migrationFile ?? null;\n  }\n\n  /**\n   * Loads the implementation for the migration with the given identifier. The identifier\n   * must start with a 14-character timestamp. It may optionally be followed by\n   * an underscore with additional characters, which are ignored. These should\n   * typically be used to provide a human-readable name for the migration.\n   */\n  private async loadMigrationImplementation(migrationFile: MigrationFile) {\n    // We use dynamic imports to handle both CJS and ESM modules.\n    const migrationModulePath = path.join(migrationFile.directory, migrationFile.filename);\n    const migrationModule = await import(migrationModulePath);\n\n    const migrationImplementation = migrationModule.default as BatchedMigrationImplementation;\n    validateBatchedMigrationImplementation(migrationImplementation);\n    return migrationImplementation;\n  }\n\n  async enqueueBatchedMigration(identifier: string) {\n    const migrationFile = await this.getMigrationForIdentifier(identifier);\n    if (!migrationFile) {\n      throw new Error(`No migration found for identifier ${identifier}`);\n    }\n\n    const migrationImplementation = await this.loadMigrationImplementation(migrationFile);\n    const migrationParameters = await migrationImplementation.getParameters();\n\n    // If `max` is null, that implies that there are no rows to process, so\n    // we can immediately mark the migration as finished.\n    const status: BatchedMigrationStatus =\n      migrationParameters.max === null ? 'succeeded' : 'pending';\n\n    const minValue = BigInt(migrationParameters.min ?? DEFAULT_MIN_VALUE);\n    const maxValue = BigInt(migrationParameters.max ?? minValue);\n    const batchSize = migrationParameters.batchSize ?? DEFAULT_BATCH_SIZE;\n\n    await insertBatchedMigration({\n      project: this.options.project,\n      filename: migrationFile.filename,\n      timestamp: migrationFile.timestamp,\n      batch_size: batchSize,\n      min_value: minValue,\n      max_value: maxValue,\n      status,\n    });\n  }\n\n  async finalizeBatchedMigration(identifier: string, options?: BatchedMigrationFinalizeOptions) {\n    const timestamp = identifier.split('_')[0];\n\n    let migration = await selectBatchedMigrationForTimestamp(this.options.project, timestamp);\n\n    if (migration.status === 'succeeded') return;\n\n    // If the migration isn't already in the finalizing state, mark it as such.\n    if (migration.status !== 'finalizing') {\n      migration = await updateBatchedMigrationStatus(migration.id, 'finalizing');\n    }\n\n    await doWithLock(this.lockNameForTimestamp(timestamp), { autoRenew: true }, async () => {\n      const migrationFile = await this.getMigrationForIdentifier(identifier);\n      if (!migrationFile) {\n        throw new Error(`No migration found for identifier ${identifier}`);\n      }\n      const migrationImplementation = await this.loadMigrationImplementation(migrationFile);\n\n      const runner = new BatchedMigrationRunner(migration, migrationImplementation, {\n        // Always log progress unless explicitly disabled.\n        logProgress: options?.logProgress ?? true,\n      });\n\n      // Because we don't give any arguments to `run()`, it will run until it\n      // has attempted every job.\n      await runner.run();\n    });\n\n    migration = await selectBatchedMigrationForTimestamp(this.options.project, timestamp);\n\n    if (migration.status === 'succeeded') return;\n\n    throw new Error(\n      `Expected batched migration with identifier ${identifier} to be marked as 'succeeded', but it is '${migration.status}'.`,\n    );\n  }\n\n  start(options: BatchedMigrationStartOptions = {}) {\n    if (this.running) {\n      throw new Error('BatchedMigrationsRunner is already running');\n    }\n\n    this.loop(options);\n  }\n\n  async loop({ workDurationMs, sleepDurationMs }: BatchedMigrationStartOptions) {\n    workDurationMs ??= DEFAULT_WORK_DURATION_MS;\n    sleepDurationMs ??= DEFAULT_SLEEP_DURATION_MS;\n\n    this.running = true;\n    while (this.running) {\n      if (this.abortController.signal.aborted) {\n        // We assign this here so that `stop()` can tell when this loop is done\n        // processing jobs.\n        this.running = false;\n        return;\n      }\n\n      let didWork = false;\n      try {\n        didWork = await this.maybePerformWork(workDurationMs);\n      } catch (err) {\n        this.emit('error', err);\n      }\n\n      // If we did work, we'll immediately try again since there's probably more\n      // work to be done. If not, we'll sleep for a while - maybe some more work\n      // will become available!\n      if (!didWork) {\n        // We provide the signal here so that we can more quickly stop things\n        // when we're shutting down.\n        try {\n          await sleep(sleepDurationMs, null, { ref: false, signal: this.abortController.signal });\n        } catch {\n          // We don't care about errors here, they should only ever occur when\n          // the AbortController is aborted. Continue to the next iteration of\n          // the loop so we can shut down.\n          continue;\n        }\n      }\n    }\n  }\n\n  private async getOrStartMigration(): Promise<BatchedMigrationRow | null> {\n    return doWithLock(\n      this.lockName,\n      {\n        // Don't fail if the lock couldn't be acquired immediately.\n        onNotAcquired: () => null,\n      },\n      async () => {\n        let migration = await queryOptionalRow(\n          sql.select_running_migration,\n          { project: this.options.project },\n          BatchedMigrationRowSchema,\n        );\n\n        if (!migration) {\n          migration = await queryOptionalRow(\n            sql.start_next_pending_migration,\n            { project: this.options.project },\n            BatchedMigrationRowSchema,\n          );\n        }\n\n        return migration;\n      },\n    );\n  }\n\n  async maybePerformWork(durationMs: number): Promise<boolean> {\n    const migration = await this.getOrStartMigration();\n    if (!migration) {\n      // No work to do. Handle this case.\n      return false;\n    }\n\n    // This server may not yet know about the current running migration. If\n    // that's the case, we'll just skip it for now.\n    const migrationFile = await this.getMigrationForIdentifier(migration.timestamp);\n    if (!migrationFile) {\n      return false;\n    }\n\n    let didWork = false;\n    await doWithLock(\n      this.lockNameForTimestamp(migrationFile.timestamp),\n      {\n        autoRenew: true,\n        // Do nothing if the lock could not immediately be acquired.\n        onNotAcquired: () => null,\n      },\n      async () => {\n        didWork = true;\n        const migrationImplementation = await this.loadMigrationImplementation(migrationFile);\n\n        const runner = new BatchedMigrationRunner(migration, migrationImplementation);\n\n        try {\n          await runner.run({ signal: this.abortController.signal, durationMs });\n        } catch (err) {\n          this.emit('error', err);\n        }\n      },\n    );\n\n    return didWork;\n  }\n\n  async stop() {\n    this.abortController.abort();\n\n    // Spin until we're no longer running.\n    while (this.running) {\n      await sleep(1000);\n    }\n  }\n}\n\nlet runner: BatchedMigrationsRunner | null = null;\n\nfunction assertRunner(\n  runner: BatchedMigrationsRunner | null,\n): asserts runner is BatchedMigrationsRunner {\n  if (!runner) throw new Error('Batched migrations not initialized');\n}\n\nexport function initBatchedMigrations(options: BatchedMigrationRunnerOptions) {\n  if (runner) throw new Error('Batched migrations already initialized');\n  runner = new BatchedMigrationsRunner(options);\n  return runner;\n}\n\nexport function startBatchedMigrations(options: BatchedMigrationStartOptions = {}) {\n  assertRunner(runner);\n  runner.start(options);\n  return runner;\n}\n\nexport async function stopBatchedMigrations() {\n  assertRunner(runner);\n  await runner.stop();\n  runner = null;\n}\n\n/**\n * Given a batched migration identifier like `20230406184103_migration`,\n * enqueues it for execution by creating a row in the `batched_migrations`\n * table.\n *\n * Despite taking a full identifier, only the timestamp is used to uniquely\n * identify the batched migration. The remaining part is just used to make\n * calls more human-readable.\n *\n * @param identifier The identifier of the batched migration to enqueue.\n */\nexport async function enqueueBatchedMigration(identifier: string) {\n  assertRunner(runner);\n  await runner.enqueueBatchedMigration(identifier);\n}\n\n/**\n * Given a batched migration identifier like `20230406184103_migration`,\n * synchronously runs it to completion. An error will be thrown if the final\n * status of the migration is not `succeeded`.\n *\n * @param identifier The identifier of the batched migration to finalize.\n * @param options Options for finalizing the batched migration.\n */\nexport async function finalizeBatchedMigration(\n  identifier: string,\n  options?: BatchedMigrationFinalizeOptions,\n) {\n  assertRunner(runner);\n  await runner.finalizeBatchedMigration(identifier, options);\n}\n"]}