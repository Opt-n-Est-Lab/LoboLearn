{"version":3,"file":"load-migrations.js","sourceRoot":"","sources":["../src/load-migrations.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\n\n/**\n * Timestamp prefixes will be of the form `YYYYMMDDHHMMSS`, which will have 14 digits.\n * If this code is still around in the year 10000... good luck.\n */\nconst MIGRATION_FILENAME_REGEX = /^([0-9]{14})_.+\\.[a-z]+/;\n\n/**\n * Annotations are expressed via the following:\n *\n * -- prairielearn:migrations NO TRANSACTION\n *\n * Currently, `NO TRANSACTION` is the only supported annotation. This will run\n * the migration without a transaction. This is useful for migrations that use\n * features that can't be run in transactions, such as `CREATE INDEX CONCURRENTLY`.\n */\nconst ANNOTATION_PREFIX = '-- prairielearn:migrations';\nconst ALLOWED_ANNOTATIONS = new Set(['NO TRANSACTION']);\n\nexport interface MigrationFile {\n  directory: string;\n  filename: string;\n  timestamp: string;\n}\n\nexport async function readAndValidateMigrationsFromDirectory(\n  dir: string,\n  extensions: string[],\n): Promise<MigrationFile[]> {\n  const migrationFiles = (await fs.readdir(dir)).filter((m) =>\n    extensions.some((e) => m.endsWith(e)),\n  );\n\n  const migrations = migrationFiles.map((mf) => {\n    const match = mf.match(MIGRATION_FILENAME_REGEX);\n\n    if (!match) {\n      throw new Error(`Invalid migration filename: ${mf}`);\n    }\n\n    const timestamp = match[1] ?? null;\n\n    if (timestamp === null) {\n      throw new Error(`Migration ${mf} does not have a timestamp`);\n    }\n\n    return {\n      directory: dir,\n      filename: mf,\n      timestamp,\n    };\n  });\n\n  // First pass: validate that all migrations have a unique timestamp prefix.\n  // This will avoid data loss and conflicts in unexpected scenarios.\n  const seenTimestamps = new Set();\n  for (const migration of migrations) {\n    const { filename, timestamp } = migration;\n\n    if (timestamp !== null) {\n      if (seenTimestamps.has(timestamp)) {\n        throw new Error(`Duplicate migration timestamp: ${timestamp} (${filename})`);\n      }\n      seenTimestamps.add(timestamp);\n    }\n  }\n\n  return migrations;\n}\n\nexport async function readAndValidateMigrationsFromDirectories(\n  directories: string[],\n  extensions: string[],\n): Promise<MigrationFile[]> {\n  const allMigrations: MigrationFile[] = [];\n  for (const directory of directories) {\n    const migrations = await readAndValidateMigrationsFromDirectory(directory, extensions);\n    allMigrations.push(...migrations);\n  }\n  return allMigrations;\n}\n\nexport function sortMigrationFiles(migrationFiles: MigrationFile[]): MigrationFile[] {\n  return migrationFiles.sort((a, b) => {\n    return a.timestamp.localeCompare(b.timestamp);\n  });\n}\n\nexport function parseAnnotations(contents: string): Set<string> {\n  const lines = contents.split('\\n');\n  const annotations = new Set<string>();\n\n  lines.forEach((line) => {\n    if (line.startsWith(ANNOTATION_PREFIX)) {\n      const annotation = line.slice(ANNOTATION_PREFIX.length).trim();\n      if (!ALLOWED_ANNOTATIONS.has(annotation)) {\n        throw new Error(`Invalid annotation: ${annotation}`);\n      }\n      annotations.add(annotation);\n    }\n  });\n\n  return annotations;\n}\n"]}