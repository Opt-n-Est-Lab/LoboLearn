{"version":3,"file":"load-migrations.test.js","sourceRoot":"","sources":["../src/load-migrations.test.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { assert, use as chaiUse } from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport fs from 'fs-extra';\nimport tmp from 'tmp-promise';\n\nimport {\n  parseAnnotations,\n  readAndValidateMigrationsFromDirectory,\n  sortMigrationFiles,\n} from './load-migrations.js';\n\nchaiUse(chaiAsPromised);\n\nasync function withMigrationFiles(files: string[], fn: (tmpDir: string) => Promise<void>) {\n  await tmp.withDir(\n    async function (tmpDir) {\n      for (const file of files) {\n        await fs.writeFile(path.join(tmpDir.path, file), '');\n      }\n      await fn(tmpDir.path);\n    },\n    { unsafeCleanup: true },\n  );\n}\n\ndescribe('load-migrations', () => {\n  describe('readAndValidateMigrationsFromDirectory', () => {\n    it('handles migrations without a timestamp', async () => {\n      await withMigrationFiles(['001_testing.sql'], async (tmpDir) => {\n        await assert.isRejected(\n          readAndValidateMigrationsFromDirectory(tmpDir, ['.sql']),\n          'Invalid migration filename: 001_testing.sql',\n        );\n      });\n    });\n\n    it('handles duplicate timestamps', async () => {\n      await withMigrationFiles(\n        ['20220101010101_testing.sql', '20220101010101_testing_again.sql'],\n        async (tmpDir) => {\n          await assert.isRejected(\n            readAndValidateMigrationsFromDirectory(tmpDir, ['.sql']),\n            'Duplicate migration timestamp',\n          );\n        },\n      );\n    });\n  });\n\n  describe('sortMigrationFiles', () => {\n    it('sorts by timestamp', () => {\n      assert.deepEqual(\n        sortMigrationFiles([\n          {\n            directory: 'migrations',\n            filename: '20220101010103_testing_3.sql',\n            timestamp: '20220101010103',\n          },\n          {\n            directory: 'migrations',\n            filename: '20220101010101_testing_1.sql',\n            timestamp: '20220101010101',\n          },\n          {\n            directory: 'migrations',\n            filename: '20220101010102_testing_2.sql',\n            timestamp: '20220101010102',\n          },\n        ]),\n        [\n          {\n            directory: 'migrations',\n            filename: '20220101010101_testing_1.sql',\n            timestamp: '20220101010101',\n          },\n          {\n            directory: 'migrations',\n            filename: '20220101010102_testing_2.sql',\n            timestamp: '20220101010102',\n          },\n          {\n            directory: 'migrations',\n            filename: '20220101010103_testing_3.sql',\n            timestamp: '20220101010103',\n          },\n        ],\n      );\n    });\n  });\n\n  describe('parseAnnotations', () => {\n    it('parses a NO TRANSACTION annotation', () => {\n      const annotations = parseAnnotations('-- prairielearn:migrations NO TRANSACTION');\n      assert.deepEqual(annotations, new Set(['NO TRANSACTION']));\n    });\n\n    it('throws an error for an invalid annotation', () => {\n      assert.throws(() => {\n        parseAnnotations('-- prairielearn:migrations INVALID');\n      });\n    });\n  });\n});\n"]}