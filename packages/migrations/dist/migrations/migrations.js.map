{"version":3,"file":"migrations.js","sourceRoot":"","sources":["../../src/migrations/migrations.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,MAAM,UAAU,CAAC;AAE1B,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,KAAK,UAAU,MAAM,2BAA2B,CAAC;AACxD,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAEhD,OAAO,EAEL,gBAAgB,EAChB,wCAAwC,EACxC,kBAAkB,GACnB,MAAM,uBAAuB,CAAC;AAE/B,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAErD,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,WAA8B,EAAE,OAAe;IACxE,MAAM,oBAAoB,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;IACtF,MAAM,QAAQ,GAAG,YAAY,CAAC;IAC9B,MAAM,CAAC,OAAO,CAAC,oBAAoB,QAAQ,EAAE,CAAC,CAAC;IAC/C,MAAM,UAAU,CAAC,UAAU,CACzB,QAAQ,EACR;QACE,wEAAwE;QACxE,mEAAmE;QACnE,wBAAwB;QACxB,EAAE;QACF,qEAAqE;QACrE,kEAAkE;QAClE,0EAA0E;QAC1E,SAAS,EAAE,IAAI;KAChB,EACD,KAAK,IAAI,EAAE;QACT,MAAM,CAAC,OAAO,CAAC,iBAAiB,QAAQ,EAAE,CAAC,CAAC;QAC5C,MAAM,YAAY,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC,CACF,CAAC;IACF,MAAM,CAAC,OAAO,CAAC,iBAAiB,QAAQ,EAAE,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,cAA+B,EAC/B,kBAAkD;IAElD,qDAAqD;IACrD,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACpC,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,MAAM,2BAA2B,GAAG,IAAI,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;IACxF,OAAO,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;AACrF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,WAAqB,EAAE,OAAe;IACvE,MAAM,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;IAE/C,wCAAwC;IACxC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;IAExD,6DAA6D;IAC7D,IAAI,CAAC;QACH,MAAM,KAAK,CAAC,UAAU,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAC;IAChE,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,IAAI,GAAG,CAAC,OAAO,KAAK,oBAAoB,EAAE,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;YACzC,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QACtD,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,CAAC;QACZ,CAAC;IACH,CAAC;IACD,IAAI,CAAC;QACH,MAAM,KAAK,CAAC,UAAU,CAAC,mCAAmC,EAAE,EAAE,CAAC,CAAC;IAClE,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,IAAI,GAAG,CAAC,OAAO,KAAK,oBAAoB,EAAE,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YAC/C,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;QACvD,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,CAAC;QACZ,CAAC;IACH,CAAC;IAED,IAAI,aAAa,GAAG,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAE5E,MAAM,cAAc,GAAG,MAAM,wCAAwC,CAAC,WAAW,EAAE;QACjF,MAAM;QACN,KAAK;QACL,KAAK;QACL,MAAM;KACP,CAAC,CAAC;IAEH,4EAA4E;IAC5E,0EAA0E;IAC1E,kBAAkB;IAClB,MAAM,2BAA2B,GAAG,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IACnF,IAAI,2BAA2B,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3C,MAAM,IAAI,KAAK,CACb;YACE,kDAAkD;YAClD,2BAA2B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACzD,kEAAkE;YAClE,qCAAqC;YACrC,0EAA0E;SAC3E,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;IACJ,CAAC;IAED,oDAAoD;IACpD,aAAa,GAAG,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAExE,iDAAiD;IACjD,MAAM,oBAAoB,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC;IAEhE,kDAAkD;IAClD,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,oBAAoB,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;IAE7F,KAAK,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,mBAAmB,EAAE,CAAC;QACrE,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACpC,iEAAiE;YACjE,MAAM,CAAC,OAAO,CAAC,qBAAqB,QAAQ,EAAE,CAAC,CAAC;QAClD,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,qBAAqB,QAAQ,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACrD,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC9B,MAAM,YAAY,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YAC9D,MAAM,WAAW,GAAG,gBAAgB,CAAC,YAAY,CAAC,CAAC;YACnD,IAAI,CAAC;gBACH,IAAI,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,CAAC;oBACtC,MAAM,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;gBAC3C,CAAC;qBAAM,CAAC;oBACN,MAAM,KAAK,CAAC,qBAAqB,CAAC,KAAK,IAAI,EAAE;wBAC3C,MAAM,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;gBAC1C,MAAM,GAAG,CAAC;YACZ,CAAC;QACH,CAAC;aAAM,CAAC;YACN,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,CAAC;YACpD,MAAM,cAAc,GAAG,eAAe,CAAC,OAAO,CAAC;YAC/C,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE,CAAC;gBACzC,MAAM,IAAI,KAAK,CAAC,aAAa,QAAQ,qCAAqC,CAAC,CAAC;YAC9E,CAAC;YACD,MAAM,cAAc,EAAE,CAAC;QACzB,CAAC;QAED,wBAAwB;QACxB,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE;YAC3C,QAAQ;YACR,SAAS;YACT,OAAO;SACR,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["import path from 'path';\n\nimport fs from 'fs-extra';\n\nimport * as error from '@prairielearn/error';\nimport { logger } from '@prairielearn/logger';\nimport * as namedLocks from '@prairielearn/named-locks';\nimport * as sqldb from '@prairielearn/postgres';\n\nimport {\n  type MigrationFile,\n  parseAnnotations,\n  readAndValidateMigrationsFromDirectories,\n  sortMigrationFiles,\n} from '../load-migrations.js';\n\nconst sql = sqldb.loadSqlEquiv(import.meta.filename);\n\nexport async function init(directories: string | string[], project: string) {\n  const migrationDirectories = Array.isArray(directories) ? directories : [directories];\n  const lockName = 'migrations';\n  logger.verbose(`Waiting for lock ${lockName}`);\n  await namedLocks.doWithLock(\n    lockName,\n    {\n      // Migrations *might* take a long time to run, so we'll enable automatic\n      // lock renewal so that our lock doesn't get killed by the Postgres\n      // idle session timeout.\n      //\n      // That said, we should generally try to keep migrations executing as\n      // quickly as possible. A long-running migration likely means that\n      // Postgres is locking a whole table, which is unacceptable in production.\n      autoRenew: true,\n    },\n    async () => {\n      logger.verbose(`Acquired lock ${lockName}`);\n      await initWithLock(migrationDirectories, project);\n    },\n  );\n  logger.verbose(`Released lock ${lockName}`);\n}\n\nexport function getMigrationsToExecute(\n  migrationFiles: MigrationFile[],\n  executedMigrations: { timestamp: string | null }[],\n): MigrationFile[] {\n  // If no migrations have ever been run, run them all.\n  if (executedMigrations.length === 0) {\n    return migrationFiles;\n  }\n\n  const executedMigrationTimestamps = new Set(executedMigrations.map((m) => m.timestamp));\n  return migrationFiles.filter((m) => !executedMigrationTimestamps.has(m.timestamp));\n}\n\nexport async function initWithLock(directories: string[], project: string) {\n  logger.verbose('Starting DB schema migration');\n\n  // Create the migrations table if needed\n  await sqldb.queryAsync(sql.create_migrations_table, {});\n\n  // Apply necessary changes to the migrations table as needed.\n  try {\n    await sqldb.queryAsync('SELECT project FROM migrations;', {});\n  } catch (err: any) {\n    if (err.routine === 'errorMissingColumn') {\n      logger.info('Altering migrations table');\n      await sqldb.queryAsync(sql.add_projects_column, {});\n    } else {\n      throw err;\n    }\n  }\n  try {\n    await sqldb.queryAsync('SELECT timestamp FROM migrations;', {});\n  } catch (err: any) {\n    if (err.routine === 'errorMissingColumn') {\n      logger.info('Altering migrations table again');\n      await sqldb.queryAsync(sql.add_timestamp_column, {});\n    } else {\n      throw err;\n    }\n  }\n\n  let allMigrations = await sqldb.queryAsync(sql.get_migrations, { project });\n\n  const migrationFiles = await readAndValidateMigrationsFromDirectories(directories, [\n    '.sql',\n    '.js',\n    '.ts',\n    '.mjs',\n  ]);\n\n  // Validation: if we not all previously-executed migrations have timestamps,\n  // prompt the user to deploy an earlier version that includes both indexes\n  // and timestamps.\n  const migrationsMissingTimestamps = allMigrations.rows.filter((m) => !m.timestamp);\n  if (migrationsMissingTimestamps.length > 0) {\n    throw new Error(\n      [\n        'The following migrations are missing timestamps:',\n        migrationsMissingTimestamps.map((m) => `  ${m.filename}`),\n        // This revision was the most recent commit to `master` before the\n        // code handling indexes was removed.\n        'You must deploy revision 1aa43c7348fa24cf636413d720d06a2fa9e38ef2 first.',\n      ].join('\\n'),\n    );\n  }\n\n  // Refetch the list of migrations from the database.\n  allMigrations = await sqldb.queryAsync(sql.get_migrations, { project });\n\n  // Sort the migration files into execution order.\n  const sortedMigrationFiles = sortMigrationFiles(migrationFiles);\n\n  // Figure out which migrations have to be applied.\n  const migrationsToExecute = getMigrationsToExecute(sortedMigrationFiles, allMigrations.rows);\n\n  for (const { directory, filename, timestamp } of migrationsToExecute) {\n    if (allMigrations.rows.length === 0) {\n      // if we are running all the migrations then log at a lower level\n      logger.verbose(`Running migration ${filename}`);\n    } else {\n      logger.info(`Running migration ${filename}`);\n    }\n\n    const migrationPath = path.join(directory, filename);\n    if (filename.endsWith('.sql')) {\n      const migrationSql = await fs.readFile(migrationPath, 'utf8');\n      const annotations = parseAnnotations(migrationSql);\n      try {\n        if (annotations.has('NO TRANSACTION')) {\n          await sqldb.queryAsync(migrationSql, {});\n        } else {\n          await sqldb.runInTransactionAsync(async () => {\n            await sqldb.queryAsync(migrationSql, {});\n          });\n        }\n      } catch (err) {\n        error.addData(err, { sqlFile: filename });\n        throw err;\n      }\n    } else {\n      const migrationModule = await import(migrationPath);\n      const implementation = migrationModule.default;\n      if (typeof implementation !== 'function') {\n        throw new Error(`Migration ${filename} does not export a default function`);\n      }\n      await implementation();\n    }\n\n    // Record the migration.\n    await sqldb.queryAsync(sql.insert_migration, {\n      filename,\n      timestamp,\n      project,\n    });\n  }\n}\n"]}