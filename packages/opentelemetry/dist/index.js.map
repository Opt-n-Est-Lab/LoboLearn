{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,KAAK,EACL,OAAO,EACP,OAAO,EACP,cAAc,EACd,SAAS,EACT,UAAU,GASX,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,uBAAuB,EAAE,MAAM,WAAW,CAAC;AACpE,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EACL,uBAAuB,EACvB,UAAU,EACV,gBAAgB,EAChB,YAAY,EACZ,oBAAoB,EACpB,0BAA0B,EAC1B,kBAAkB,EAClB,2BAA2B,GAE5B,MAAM,cAAc,CAAC;AAEtB,mFAAmF;AACnF,mFAAmF;AACnF,0EAA0E;AAC1E,mFAAmF;AACnF,uEAAuE;AACvE,EAAE;AACF,2DAA2D;AAC3D,8EAA8E;AAC9E,2EAA2E;AAC3E,8BAA8B;AAC9B,OAAO,wBAAwB,CAAC","sourcesContent":["export {\n  trace,\n  metrics,\n  context,\n  SpanStatusCode,\n  ValueType,\n  TraceFlags,\n  type Meter,\n  type Counter,\n  type Histogram,\n  type UpDownCounter,\n  type ObservableCounter,\n  type ObservableUpDownCounter,\n  type ObservableGauge,\n  type ObservableResult,\n} from '@opentelemetry/api';\nexport { suppressTracing } from '@opentelemetry/core';\n\nexport { init, shutdown, disableInstrumentations } from './init.js';\nexport { instrumented } from './tracing.js';\nexport {\n  instrumentedWithMetrics,\n  getCounter,\n  getUpDownCounter,\n  getHistogram,\n  getObservableCounter,\n  getObservableUpDownCounter,\n  getObservableGauge,\n  createObservableValueGauges,\n  type CreateObservableValueGaugesOptions,\n} from './metrics.js';\n\n// Extremely stupid workaround for the fact that the OpenTelemetry instrumentations\n// don't currently have robust support for ESM. This hack ensures that instrumented\n// packages are loaded for the first time via CJS, which the OpenTelemetry\n// instrumentation can intercept and patch. Subsequent imports can be ESM, but that\n// doesn't matter because the instrumentation has already been applied.\n//\n// OpenTelemetry introduced experimental support for ESM in\n// https://github.com/open-telemetry/opentelemetry-js/pull/3698. This requires\n// the usage of `--experimental-loader` to load the instrumentations, which\n// we currently want to avoid.\nimport './commonjs-preloads.js';\n"]}