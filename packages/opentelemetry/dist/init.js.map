{"version":3,"file":"init.js","sourceRoot":"","sources":["../src/init.ts"],"names":[],"mappings":"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","sourcesContent":["import { Metadata, credentials } from '@grpc/grpc-js';\nimport { type ContextManager, metrics } from '@opentelemetry/api';\nimport { hrTimeToMilliseconds } from '@opentelemetry/core';\nimport { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-grpc';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-grpc';\nimport { OTLPTraceExporter as OTLPTraceExporterHttp } from '@opentelemetry/exporter-trace-otlp-http';\nimport { AwsInstrumentation } from '@opentelemetry/instrumentation-aws-sdk';\nimport { ConnectInstrumentation } from '@opentelemetry/instrumentation-connect';\nimport { DnsInstrumentation } from '@opentelemetry/instrumentation-dns';\nimport { ExpressInstrumentation, ExpressLayerType } from '@opentelemetry/instrumentation-express';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport { IORedisInstrumentation } from '@opentelemetry/instrumentation-ioredis';\nimport { PgInstrumentation } from '@opentelemetry/instrumentation-pg';\nimport { RedisInstrumentation } from '@opentelemetry/instrumentation-redis';\nimport { awsEc2Detector } from '@opentelemetry/resource-detector-aws';\nimport {\n  Resource,\n  detectResourcesSync,\n  envDetector,\n  processDetector,\n} from '@opentelemetry/resources';\nimport {\n  AggregationTemporality,\n  ConsoleMetricExporter,\n  MeterProvider,\n  PeriodicExportingMetricReader,\n  type PushMetricExporter,\n} from '@opentelemetry/sdk-metrics';\nimport {\n  AlwaysOffSampler,\n  AlwaysOnSampler,\n  BatchSpanProcessor,\n  ConsoleSpanExporter,\n  ParentBasedSampler,\n  type ReadableSpan,\n  type Sampler,\n  SimpleSpanProcessor,\n  type SpanExporter,\n  type SpanProcessor,\n  TraceIdRatioBasedSampler,\n} from '@opentelemetry/sdk-trace-base';\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\n\n/**\n * Extends `BatchSpanProcessor` to give it the ability to filter out spans\n * before they're queued up to send. This enhances our sampling process so\n * that we can filter spans _after_ they've been emitted.\n */\nclass FilterBatchSpanProcessor extends BatchSpanProcessor {\n  private filter: (span: ReadableSpan) => boolean;\n\n  constructor(exporter: SpanExporter, filter: (span: ReadableSpan) => boolean) {\n    super(exporter);\n    this.filter = filter;\n  }\n\n  /**\n   * This is invoked after a span is \"finalized\". `super.onEnd` will queue up\n   * the span to be exported, but if we don't call that, we can just drop the\n   * span and the parent will be none the wiser!\n   */\n  onEnd(span: ReadableSpan) {\n    if (!this.filter(span)) return;\n\n    super.onEnd(span);\n  }\n}\n\n/**\n * This will be used with our {@link FilterBatchSpanProcessor} to filter out\n * events that we're not interested in. This helps reduce our event volume\n * but still gives us fine-grained control over which events we keep.\n */\nfunction filter(span: ReadableSpan) {\n  if (span.name === 'pg-pool.connect') {\n    // Looking at historical data, this generally happens in under a millisecond,\n    // precisely because we maintain a pool of long-lived connections. The only\n    // time obtaining a client should take longer than that is if we're\n    // establishing a connection for the first time, which should happen only at\n    // bootup, or if a connection errors out. Those are the cases we're\n    // interested in, so we'll filter accordingly.\n    return hrTimeToMilliseconds(span.duration) > 1;\n  }\n\n  // Always return true so that we default to including a span.\n  return true;\n}\n\n// When adding new instrumentation here, add the corresponding packages to\n// `commonjs-preloads.ts` so that we can ensure that they're loaded via CJS\n// before anything tries to load them via CJS. This is necessary because the\n// instrumentations can't hook into the ESM loader.\nconst instrumentations = [\n  new AwsInstrumentation(),\n  new ConnectInstrumentation(),\n  new DnsInstrumentation(),\n  new ExpressInstrumentation({\n    // We use a lot of middleware; it makes the traces way too noisy. If we\n    // want telemetry on a particular middleware, we should instrument it\n    // manually.\n    ignoreLayersType: [ExpressLayerType.MIDDLEWARE],\n    ignoreLayers: [\n      // These don't provide useful information to us.\n      'router - /',\n      'request handler - /*',\n    ],\n  }),\n  new HttpInstrumentation({\n    ignoreIncomingRequestHook(req) {\n      return [\n        // socket.io requests are generally just long-polling; they don't add\n        // useful information for us.\n        /\\/socket.io\\//,\n        // We get several of these per second; they just chew through our event quota.\n        // They don't really do anything interesting anyways.\n        /\\/pl\\/webhooks\\/ping/,\n      ].some((re) => re.test(req.url ?? '/'));\n    },\n  }),\n  new IORedisInstrumentation(),\n  new PgInstrumentation(),\n  new RedisInstrumentation(),\n];\n\n// Enable all instrumentations now, even though we haven't configured our\n// span processors or trace exporters yet. We'll set those up later.\ninstrumentations.forEach((i) => {\n  i.enable();\n});\n\nlet tracerProvider: NodeTracerProvider | null;\n\ninterface OpenTelemetryConfigEnabled {\n  openTelemetryEnabled: boolean;\n  openTelemetryExporter?: 'console' | 'honeycomb' | 'jaeger' | SpanExporter | null;\n  openTelemetryMetricExporter?: 'console' | 'honeycomb' | PushMetricExporter | null;\n  openTelemetryMetricExportIntervalMillis?: number;\n  openTelemetrySamplerType: 'always-on' | 'always-off' | 'trace-id-ratio';\n  openTelemetrySampleRate?: number;\n  openTelemetrySpanProcessor?: 'batch' | 'simple' | SpanProcessor;\n  contextManager?: ContextManager;\n  honeycombApiKey?: string | null;\n  honeycombDataset?: string | null;\n  serviceName?: string;\n}\n\n// When we know for sure that OpenTelemetry is disabled, we won't require\n// any other attributes to be set.\ninterface OpenTelemetryConfigDisabled extends Partial<OpenTelemetryConfigEnabled> {\n  openTelemetryEnabled: false;\n}\n\nexport type OpenTelemetryConfig = OpenTelemetryConfigEnabled | OpenTelemetryConfigDisabled;\n\nfunction getHoneycombMetadata(config: OpenTelemetryConfig, datasetSuffix = ''): Metadata {\n  if (!config.honeycombApiKey) throw new Error('Missing Honeycomb API key');\n  if (!config.honeycombDataset) throw new Error('Missing Honeycomb dataset');\n\n  const metadata = new Metadata();\n\n  metadata.set('x-honeycomb-team', config.honeycombApiKey);\n  metadata.set('x-honeycomb-dataset', config.honeycombDataset + datasetSuffix);\n\n  return metadata;\n}\n\nfunction getTraceExporter(config: OpenTelemetryConfig): SpanExporter | null {\n  if (!config.openTelemetryExporter) return null;\n\n  if (typeof config.openTelemetryExporter === 'object') {\n    return config.openTelemetryExporter;\n  }\n\n  switch (config.openTelemetryExporter) {\n    case 'console':\n      return new ConsoleSpanExporter();\n    case 'honeycomb':\n      return new OTLPTraceExporter({\n        url: 'grpc://api.honeycomb.io:443/',\n        credentials: credentials.createSsl(),\n        metadata: getHoneycombMetadata(config),\n      });\n    case 'jaeger':\n      return new OTLPTraceExporterHttp();\n    default:\n      throw new Error(`Unknown OpenTelemetry exporter: ${config.openTelemetryExporter}`);\n  }\n}\n\nfunction getMetricExporter(config: OpenTelemetryConfig): PushMetricExporter | null {\n  if (!config.openTelemetryMetricExporter) return null;\n\n  if (typeof config.openTelemetryMetricExporter === 'object') {\n    return config.openTelemetryMetricExporter;\n  }\n\n  switch (config.openTelemetryMetricExporter) {\n    case 'console':\n      return new ConsoleMetricExporter();\n    case 'honeycomb':\n      return new OTLPMetricExporter({\n        url: 'grpc://api.honeycomb.io:443/',\n        credentials: credentials.createSsl(),\n        // Honeycomb recommends using a separate dataset for metrics, so we'll\n        // adopt the convention of appending '-metrics' to the dataset name.\n        metadata: getHoneycombMetadata(config, '-metrics'),\n        // Delta temporality means that sums, histograms, etc. will reset each\n        // time data is collected. This more closely matches how we want to\n        // observe our metrics than the default cumulative temporality.\n        temporalityPreference: AggregationTemporality.DELTA,\n      });\n    default:\n      throw new Error(\n        `Unknown OpenTelemetry metric exporter: ${config.openTelemetryMetricExporter}`,\n      );\n  }\n}\n\nfunction getSpanProcessor(config: OpenTelemetryConfig): SpanProcessor | null {\n  if (typeof config.openTelemetrySpanProcessor === 'object') {\n    return config.openTelemetrySpanProcessor;\n  }\n\n  const traceExporter = getTraceExporter(config);\n  if (!traceExporter) return null;\n\n  switch (config.openTelemetrySpanProcessor ?? 'batch') {\n    case 'batch': {\n      return new FilterBatchSpanProcessor(traceExporter, filter);\n    }\n    case 'simple': {\n      return new SimpleSpanProcessor(traceExporter);\n    }\n    default: {\n      throw new Error(`Unknown OpenTelemetry span processor: ${config.openTelemetrySpanProcessor}`);\n    }\n  }\n}\n\n/**\n * Should be called once we've loaded our config; this will allow us to set up\n * the correct metadata for the Honeycomb exporter. We don't actually have that\n * information available until we've loaded our config.\n */\nexport async function init(config: OpenTelemetryConfig) {\n  if (!config.openTelemetryEnabled) {\n    // If not enabled, do nothing. We used to disable the instrumentations, but\n    // per maintainers, that can actually be problematic. See the comments on\n    // https://github.com/open-telemetry/opentelemetry-js-contrib/issues/970\n    // The Express instrumentation also logs a benign error, which can be\n    // confusing to users. There's a fix in progress if we want to switch back\n    // to disabling instrumentations in the future:\n    // https://github.com/open-telemetry/opentelemetry-js-contrib/pull/972\n    return;\n  }\n\n  const metricExporter = getMetricExporter(config);\n  const spanProcessor = getSpanProcessor(config);\n\n  let sampler: Sampler;\n  switch (config.openTelemetrySamplerType ?? 'always-on') {\n    case 'always-on': {\n      sampler = new AlwaysOnSampler();\n      break;\n    }\n    case 'always-off': {\n      sampler = new AlwaysOffSampler();\n      break;\n    }\n    case 'trace-id-ratio': {\n      sampler = new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(config.openTelemetrySampleRate),\n      });\n      break;\n    }\n    default:\n      throw new Error(`Unknown OpenTelemetry sampler type: ${config.openTelemetrySamplerType}`);\n  }\n\n  // Much of this functionality is copied from `@opentelemetry/sdk-node`, but\n  // we can't use the SDK directly because of the fact that we load our config\n  // asynchronously. We need to initialize our instrumentations first; only\n  // then can we actually start requiring all of our code that loads our config\n  // and ultimately tells us how to configure OpenTelemetry.\n\n  let resource = detectResourcesSync({\n    // The AWS resource detector always tries to reach out to the EC2 metadata\n    // service endpoint. When running locally, or otherwise in a non-AWS environment,\n    // this will typically fail immediately wih `EHOSTDOWN`, but will sometimes wait\n    // 5 seconds before failing with a network timeout error. This causes problems\n    // when running tests, as 5 seconds is longer than Mocha lets tests and hooks run\n    // for by default. This causes nondeterministic test failures when the EC2 metadata\n    // request fails with a network timeout.\n    //\n    // To work around this, the AWS resource detector is only enabled when running in\n    // a production environment. In general this is reasonable, as we only care about\n    // AWS resource detection in production-like environments.\n    detectors: [\n      process.env.NODE_ENV === 'production' ? awsEc2Detector : null,\n      processDetector,\n      envDetector,\n    ].filter((d) => !!d),\n  });\n\n  if (config.serviceName) {\n    resource = resource.merge(\n      new Resource({ [SemanticResourceAttributes.SERVICE_NAME]: config.serviceName }),\n    );\n  }\n\n  // Set up tracing instrumentation.\n  const nodeTracerProvider = new NodeTracerProvider({\n    sampler,\n    resource,\n  });\n  if (spanProcessor) {\n    nodeTracerProvider.addSpanProcessor(spanProcessor);\n  }\n  nodeTracerProvider.register({\n    contextManager: config.contextManager,\n  });\n  instrumentations.forEach((i) => i.setTracerProvider(nodeTracerProvider));\n\n  // Save the provider so we can shut it down later.\n  tracerProvider = nodeTracerProvider;\n\n  // Set up metrics instrumentation if it's enabled.\n  if (metricExporter) {\n    const meterProvider = new MeterProvider({\n      resource,\n      readers: [\n        new PeriodicExportingMetricReader({\n          exporter: metricExporter,\n          exportIntervalMillis: config.openTelemetryMetricExportIntervalMillis ?? 30_000,\n        }),\n      ],\n    });\n    metrics.setGlobalMeterProvider(meterProvider);\n  }\n}\n\n/**\n * Gracefully shuts down the OpenTelemetry instrumentation. Should be called\n * when a `SIGTERM` signal is handled.\n */\nexport async function shutdown(): Promise<void> {\n  if (tracerProvider) {\n    await tracerProvider.shutdown();\n    tracerProvider = null;\n  }\n}\n\n/**\n * Disables all OpenTelemetry instrumentations. This is useful for tests that\n * need to access the unwrapped modules.\n */\nexport function disableInstrumentations() {\n  instrumentations.forEach((i) => i.disable());\n}\n"]}