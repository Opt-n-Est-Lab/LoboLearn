{"version":3,"file":"metrics.js","sourceRoot":"","sources":["../src/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type Counter,\n  type Histogram,\n  type Meter,\n  type MetricOptions,\n  type ObservableCounter,\n  type ObservableGauge,\n  type ObservableUpDownCounter,\n  type UpDownCounter,\n  ValueType,\n} from '@opentelemetry/api';\n\nconst histogramCache = new WeakMap<Meter, Map<string, Histogram>>();\nconst counterCache = new WeakMap<Meter, Map<string, Counter>>();\nconst upDownCounterCache = new WeakMap<Meter, Map<string, UpDownCounter>>();\nconst observableCounterCache = new WeakMap<Meter, Map<string, ObservableCounter>>();\nconst observableUpDownCounterCache = new WeakMap<Meter, Map<string, ObservableUpDownCounter>>();\nconst observableGaugeCache = new WeakMap<Meter, Map<string, ObservableGauge>>();\n\nfunction getCachedMetric<T>(\n  cache: WeakMap<Meter, Map<string, T>>,\n  meter: Meter,\n  name: string,\n  create: () => T,\n): T {\n  let meterCache = cache.get(meter);\n  if (!meterCache) {\n    meterCache = new Map();\n    cache.set(meter, meterCache);\n  }\n\n  let metric = meterCache.get(name);\n  if (!metric) {\n    metric = create();\n    meterCache.set(name, metric);\n  }\n\n  return metric;\n}\n\nexport function getHistogram(meter: Meter, name: string, options?: MetricOptions): Histogram {\n  return getCachedMetric(histogramCache, meter, name, () => meter.createHistogram(name, options));\n}\n\nexport function getCounter(meter: Meter, name: string, options?: MetricOptions) {\n  return getCachedMetric(counterCache, meter, name, () => meter.createCounter(name, options));\n}\n\nexport function getUpDownCounter(meter: Meter, name: string, options?: MetricOptions) {\n  return getCachedMetric(upDownCounterCache, meter, name, () =>\n    meter.createUpDownCounter(name, options),\n  );\n}\n\nexport function getObservableCounter(meter: Meter, name: string, options?: MetricOptions) {\n  return getCachedMetric(observableCounterCache, meter, name, () =>\n    meter.createObservableCounter(name, options),\n  );\n}\n\nexport function getObservableUpDownCounter(meter: Meter, name: string, options?: MetricOptions) {\n  return getCachedMetric(observableUpDownCounterCache, meter, name, () =>\n    meter.createObservableUpDownCounter(name, options),\n  );\n}\n\nexport function getObservableGauge(meter: Meter, name: string, options?: MetricOptions) {\n  return getCachedMetric(observableGaugeCache, meter, name, () =>\n    meter.createObservableGauge(name, options),\n  );\n}\n\nexport async function instrumentedWithMetrics<T>(\n  meter: Meter,\n  name: string,\n  fn: () => Promise<T> | T,\n  done?: (duration: number) => void,\n): Promise<T> {\n  const error = getCounter(meter, `${name}.error`, { valueType: ValueType.INT });\n  const histogram = getHistogram(meter, `${name}.duration`, {\n    unit: 'milliseconds',\n    valueType: ValueType.DOUBLE,\n  });\n\n  const start = performance.now();\n  try {\n    return await fn();\n  } catch (e) {\n    error.add(1);\n    throw e;\n  } finally {\n    const duration = performance.now() - start;\n    histogram.record(duration);\n    done?.(duration);\n  }\n}\n\nexport interface CreateObservableValueGaugesOptions extends MetricOptions {\n  interval: number;\n}\n\n/**\n * Creates a set of gauges that track the min, max, and average of a value over\n * time. The value is observed on a regular interval.\n *\n * The provided {@link name} is used as the base name for the three gauges. The\n * names of the individual gauges are:\n *\n * - `${name}.min`\n * - `${name}.max`\n * - `${name}.avg`\n */\nexport function createObservableValueGauges(\n  meter: Meter,\n  name: string,\n  options: CreateObservableValueGaugesOptions,\n  observe: () => number,\n) {\n  const { interval, ...metricOptions } = options;\n\n  let min = 0;\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n\n  // Observe the value on a regular interval. Black-hole any errors.\n  const intervalId = setInterval(() => {\n    Promise.resolve(observe())\n      .then((value) => {\n        min = count === 0 ? value : Math.min(min, value);\n        max = Math.max(max, value);\n        sum += value;\n        count += 1;\n      })\n      .catch(() => {});\n  }, interval);\n\n  // Don't let this keep the process alive.\n  intervalId.unref();\n\n  const minGauge = getObservableGauge(meter, `${name}.min`, metricOptions);\n  const maxGauge = getObservableGauge(meter, `${name}.max`, metricOptions);\n  const averageGauge = getObservableGauge(meter, `${name}.avg`, {\n    ...metricOptions,\n    // Average is always a double, even if the observed value is an int.\n    valueType: ValueType.DOUBLE,\n  });\n\n  minGauge.addCallback((observableResult) => {\n    observableResult.observe(min);\n\n    min = 0;\n  });\n\n  maxGauge.addCallback((observableResult) => {\n    observableResult.observe(max);\n\n    max = 0;\n  });\n\n  averageGauge.addCallback((observableResult) => {\n    const avg = sum / count;\n    observableResult.observe(avg);\n\n    sum = 0;\n    count = 0;\n  });\n\n  return { minGauge, maxGauge, averageGauge, stop: () => clearInterval(intervalId) };\n}\n"]}