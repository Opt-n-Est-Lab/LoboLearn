{"version":3,"file":"metrics.test.js","sourceRoot":"","sources":["../src/metrics.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Meter } from '@opentelemetry/api';\nimport {\n  AggregationTemporality,\n  type Histogram,\n  InMemoryMetricExporter,\n  MeterProvider,\n  PeriodicExportingMetricReader,\n} from '@opentelemetry/sdk-metrics';\nimport { assert, use as chaiUse } from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\n\nimport { instrumentedWithMetrics } from './metrics.js';\n\nchaiUse(chaiAsPromised);\n\nasync function waitForMetricsExport(exporter: InMemoryMetricExporter) {\n  while (exporter.getMetrics().length === 0) {\n    await new Promise((resolve) => setTimeout(resolve, 50));\n  }\n}\n\ndescribe('instrumentedWithMetrics', () => {\n  let exporter: InMemoryMetricExporter;\n  let metricReader: PeriodicExportingMetricReader;\n  let meter: Meter;\n\n  beforeEach(async () => {\n    const meterProvider = new MeterProvider();\n    meter = meterProvider.getMeter('test');\n    exporter = new InMemoryMetricExporter(AggregationTemporality.DELTA);\n    metricReader = new PeriodicExportingMetricReader({\n      exporter,\n      exportIntervalMillis: 50,\n    });\n    meterProvider.addMetricReader(metricReader);\n  });\n\n  afterEach(async () => {\n    await exporter.shutdown();\n    await metricReader.shutdown();\n  });\n\n  it('records a histogram for the function duration', async () => {\n    await instrumentedWithMetrics(meter, 'test', async () => {});\n\n    await waitForMetricsExport(exporter);\n    const exportedMetrics = exporter.getMetrics();\n    const { scope, metrics } = exportedMetrics[0].scopeMetrics[0];\n\n    // We won't see an exported metric for the error counter because the\n    // Metrics SDK no longer exports metrics with no data points.\n    // https://github.com/open-telemetry/opentelemetry-js/pull/4135\n    assert.lengthOf(metrics, 1);\n    const [histogramMetric] = metrics;\n\n    assert.equal(scope.name, 'test');\n\n    assert.ok(histogramMetric);\n    assert.equal(histogramMetric.descriptor.name, 'test.duration');\n    assert.equal((histogramMetric.dataPoints[0].value as Histogram).count, 1);\n  });\n\n  it('records an error count', async () => {\n    await assert.isRejected(\n      instrumentedWithMetrics(meter, 'test', async () => {\n        throw new Error('error for test');\n      }),\n      'error for test',\n    );\n\n    await waitForMetricsExport(exporter);\n    const exportedMetrics = exporter.getMetrics();\n    const { metrics, scope } = exportedMetrics[0].scopeMetrics[0];\n\n    // An error was reported above, so there will be both the error counter\n    // and histogram metrics.\n    assert.lengthOf(metrics, 2);\n    const [counterMetric, histogramMetric] = metrics;\n\n    assert.ok(scope);\n    assert.equal(scope.name, 'test');\n\n    assert.ok(counterMetric);\n    assert.equal(counterMetric.descriptor.name, 'test.error');\n    assert.equal(counterMetric.dataPoints[0].value, 1);\n\n    assert.ok(histogramMetric);\n    assert.equal(histogramMetric.descriptor.name, 'test.duration');\n    assert.equal((histogramMetric.dataPoints[0].value as Histogram).count, 1);\n  });\n});\n"]}