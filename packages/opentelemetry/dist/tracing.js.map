{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../src/tracing.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,cAAc,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAEtE,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,IAAY,EACZ,EAAkC;IAElC,OAAO,KAAK;SACT,SAAS,CAAC,SAAS,CAAC;SACpB,eAAe,CAA6B,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;QAChE,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5C,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,cAAc,CAAC,KAAK;gBAC1B,OAAO,EAAE,CAAC,CAAC,OAAO;aACnB,CAAC,CAAC;YACH,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { type Span, SpanStatusCode, trace } from '@opentelemetry/api';\n\nexport async function instrumented<T>(\n  name: string,\n  fn: (span: Span) => Promise<T> | T,\n): Promise<T> {\n  return trace\n    .getTracer('default')\n    .startActiveSpan<(span: Span) => Promise<T>>(name, async (span) => {\n      try {\n        const result = await fn(span);\n        span.setStatus({ code: SpanStatusCode.OK });\n        return result;\n      } catch (e: any) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message,\n        });\n        span.recordException(e);\n        throw e;\n      } finally {\n        span.end();\n      }\n    });\n}\n"]}