{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport { contains, isContainedRelativePath } from './index.js';\n\ndescribe('File paths', () => {\n  describe('contains function', () => {\n    it('works with valid absolute paths', async () => {\n      assert.ok(contains('/PrairieLearn', '/PrairieLearn/tests'));\n      assert.ok(contains('/', '/PrairieLearn/tests'));\n      assert.ok(contains('/PrairieLearn', '/PrairieLearn/exampleCourse/questions'));\n      assert.ok(contains('/PrairieLearn/exampleCourse', '/PrairieLearn/exampleCourse/questions'));\n    });\n\n    it('works with valid absolute over relative paths', async () => {\n      assert.ok(contains('/PrairieLearn', 'tests'));\n      assert.ok(contains('/PrairieLearn', 'exampleCourse/questions'));\n      assert.ok(contains('/PrairieLearn/exampleCourse', 'questions'));\n    });\n\n    it('works with absolute paths that are not contained', async () => {\n      assert.notOk(contains('/PrairieLearn', '/tmp'));\n      assert.notOk(contains('/PrairieLearn/exampleCourse', '/PrairieLearn/tests'));\n      assert.notOk(\n        contains('/PrairieLearn/exampleCourse/questions', '/PrairieLearn/exampleCourse'),\n      );\n    });\n\n    it('works with same path', async () => {\n      assert.ok(contains('/PrairieLearn', '/PrairieLearn'));\n      assert.ok(contains('/PrairieLearn', '/PrairieLearn/.'));\n      assert.ok(contains('/tmp', '/tmp'));\n      assert.notOk(contains('/PrairieLearn', '/PrairieLearn', false));\n      assert.notOk(contains('/PrairieLearn', '/PrairieLearn/.', false));\n      assert.notOk(contains('/tmp', '/tmp', false));\n    });\n\n    it('works with paths using .. that are outside parent', async () => {\n      assert.notOk(contains('/PrairieLearn', '/PrairieLearn/..'));\n      assert.notOk(contains('/PrairieLearn', '/PrairieLearn/../etc'));\n      assert.notOk(contains('/PrairieLearn', '/PrairieLearn/tests/../../etc'));\n      assert.notOk(contains('/PrairieLearn', '../etc'));\n      assert.notOk(contains('/PrairieLearn', 'tests/../../etc'));\n      assert.notOk(contains('/PrairieLearn', '/PrairieLearn/tests/..', false));\n      assert.notOk(contains('/PrairieLearn', 'tests/..', false));\n    });\n\n    it('works with paths using .. that are still inside parent', async () => {\n      assert.ok(contains('/PrairieLearn', '/PrairieLearn/tests/../exampleCourse'));\n      assert.ok(contains('/PrairieLearn', '/PrairieLearn/tests/..'));\n      assert.ok(contains('/PrairieLearn', 'tests/../exampleCourse'));\n      assert.ok(contains('/PrairieLearn', 'tests/..'));\n    });\n  });\n\n  describe('isContainedRelativePath function', () => {\n    it('works if path is contained', async () => {\n      assert.ok(isContainedRelativePath('PrairieLearn'));\n      assert.ok(isContainedRelativePath('PrairieLearn/../etc'));\n      assert.ok(isContainedRelativePath('PrairieLearn/..'));\n    });\n\n    it('works if path is not contained', async () => {\n      assert.notOk(isContainedRelativePath('PrairieLearn/..', false));\n      assert.notOk(isContainedRelativePath('/PrairieLearn'));\n      assert.notOk(isContainedRelativePath('../PrairieLearn'));\n      assert.notOk(isContainedRelativePath('PrairieLearn/../../etc'));\n    });\n  });\n});\n"]}