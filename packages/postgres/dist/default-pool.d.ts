import { type CursorIterator, PostgresPool, type QueryParams } from './pool.js';
declare const defaultPool: PostgresPool;
export { defaultPool, type CursorIterator, type QueryParams };
export declare const init: (arg1: import("./pool.js").PostgresPoolConfig, arg2: (error: Error, client: import("pg").PoolClient) => void, callback: (err: NodeJS.ErrnoException) => void) => void;
export declare const initAsync: (pgConfig: import("./pool.js").PostgresPoolConfig, idleErrorHandler: (error: Error, client: import("pg").PoolClient) => void) => Promise<void>;
export declare const close: (callback: (err: NodeJS.ErrnoException) => void) => void;
export declare const closeAsync: () => Promise<void>;
export declare const getClientAsync: () => Promise<import("pg").PoolClient>;
export declare const getClient: (callback: (error: Error | null, client?: import("pg").PoolClient, done?: () => void) => void) => void;
export declare const queryWithClient: (arg1: import("pg").PoolClient, arg2: string, arg3: QueryParams, callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const queryWithClientAsync: (client: import("pg").PoolClient, sql: string, params: QueryParams) => Promise<import("pg").QueryResult>;
export declare const queryWithClientOneRow: (arg1: import("pg").PoolClient, arg2: string, arg3: QueryParams, callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const queryWithClientOneRowAsync: (client: import("pg").PoolClient, sql: string, params: QueryParams) => Promise<import("pg").QueryResult>;
export declare const queryWithClientZeroOrOneRow: (arg1: import("pg").PoolClient, arg2: string, arg3: QueryParams, callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const queryWithClientZeroOrOneRowAsync: (client: import("pg").PoolClient, sql: string, params: QueryParams) => Promise<import("pg").QueryResult>;
export declare const rollbackWithClientAsync: (client: import("pg").PoolClient) => Promise<void>;
export declare const rollbackWithClient: (client: import("pg").PoolClient, _done: (release?: any) => void, callback: (err: Error | null) => void) => void;
export declare const beginTransactionAsync: () => Promise<import("pg").PoolClient>;
export declare const endTransactionAsync: (client: import("pg").PoolClient, err: Error | null | undefined) => Promise<void>;
export declare const endTransaction: (client: import("pg").PoolClient, _done: (rollback?: any) => void, err: Error | null | undefined, callback: (error: Error | null) => void) => void;
export declare const runInTransactionAsync: <T>(fn: (client: import("pg").PoolClient) => Promise<T>) => Promise<T>;
export declare const query: (arg1: string, arg2: QueryParams, callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const queryAsync: (sql: string, params: QueryParams) => Promise<import("pg").QueryResult>;
export declare const queryOneRow: (arg1: string, arg2: QueryParams, callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const queryOneRowAsync: (sql: string, params: QueryParams) => Promise<import("pg").QueryResult>;
export declare const queryZeroOrOneRow: (arg1: string, arg2: QueryParams, callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const queryZeroOrOneRowAsync: (sql: string, params: QueryParams) => Promise<import("pg").QueryResult>;
export declare const call: (arg1: string, arg2: any[], callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const callAsync: (functionName: string, params: any[]) => Promise<import("pg").QueryResult>;
export declare const callOneRow: (arg1: string, arg2: any[], callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const callOneRowAsync: (functionName: string, params: any[]) => Promise<import("pg").QueryResult>;
export declare const callZeroOrOneRow: (arg1: string, arg2: any[], callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const callZeroOrOneRowAsync: (functionName: string, params: any[]) => Promise<import("pg").QueryResult>;
export declare const callWithClient: (arg1: import("pg").PoolClient, arg2: string, arg3: any[], callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const callWithClientAsync: (client: import("pg").PoolClient, functionName: string, params: any[]) => Promise<import("pg").QueryResult>;
export declare const callWithClientOneRow: (arg1: import("pg").PoolClient, arg2: string, arg3: any[], callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const callWithClientOneRowAsync: (client: import("pg").PoolClient, functionName: string, params: any[]) => Promise<import("pg").QueryResult>;
export declare const callWithClientZeroOrOneRow: (arg1: import("pg").PoolClient, arg2: string, arg3: any[], callback: (err: NodeJS.ErrnoException | null, result: import("pg").QueryResult<any>) => void) => void;
export declare const callWithClientZeroOrOneRowAsync: (client: import("pg").PoolClient, functionName: string, params: any[]) => Promise<import("pg").QueryResult>;
export declare const queryValidatedRows: <Model extends import("zod").ZodTypeAny>(query: string, params: QueryParams, model: Model) => Promise<import("zod").TypeOf<Model>[]>;
export declare const queryValidatedOneRow: <Model extends import("zod").ZodTypeAny>(query: string, params: QueryParams, model: Model) => Promise<import("zod").TypeOf<Model>>;
export declare const queryValidatedZeroOrOneRow: <Model extends import("zod").ZodTypeAny>(query: string, params: QueryParams, model: Model) => Promise<import("zod").TypeOf<Model> | null>;
export declare const queryValidatedSingleColumnRows: <Model extends import("zod").ZodTypeAny>(query: string, params: QueryParams, model: Model) => Promise<import("zod").TypeOf<Model>[]>;
export declare const queryValidatedSingleColumnOneRow: <Model extends import("zod").ZodTypeAny>(query: string, params: QueryParams, model: Model) => Promise<import("zod").TypeOf<Model>>;
export declare const queryValidatedSingleColumnZeroOrOneRow: <Model extends import("zod").ZodTypeAny>(query: string, params: QueryParams, model: Model) => Promise<import("zod").TypeOf<Model> | null>;
export declare const callValidatedRows: <Model extends import("zod").ZodTypeAny>(sprocName: string, params: any[], model: Model) => Promise<import("zod").TypeOf<Model>[]>;
export declare const callValidatedOneRow: <Model extends import("zod").ZodTypeAny>(sprocName: string, params: any[], model: Model) => Promise<import("zod").TypeOf<Model>>;
export declare const callValidatedZeroOrOneRow: <Model extends import("zod").ZodTypeAny>(sprocName: string, params: any[], model: Model) => Promise<import("zod").TypeOf<Model> | null>;
export declare const queryRows: {
    <Model extends import("zod").ZodTypeAny>(sql: string, model: Model): Promise<import("zod").TypeOf<Model>[]>;
    <Model extends import("zod").ZodTypeAny>(sql: string, params: QueryParams, model: Model): Promise<import("zod").TypeOf<Model>[]>;
};
export declare const queryRow: {
    <Model extends import("zod").ZodTypeAny>(sql: string, model: Model): Promise<import("zod").TypeOf<Model>>;
    <Model extends import("zod").ZodTypeAny>(sql: string, params: QueryParams, model: Model): Promise<import("zod").TypeOf<Model>>;
};
export declare const queryOptionalRow: {
    <Model extends import("zod").ZodTypeAny>(sql: string, model: Model): Promise<import("zod").TypeOf<Model> | null>;
    <Model extends import("zod").ZodTypeAny>(sql: string, params: QueryParams, model: Model): Promise<import("zod").TypeOf<Model> | null>;
};
export declare const callRows: {
    <Model extends import("zod").ZodTypeAny>(sql: string, model: Model): Promise<import("zod").TypeOf<Model>[]>;
    <Model extends import("zod").ZodTypeAny>(sql: string, params: any[], model: Model): Promise<import("zod").TypeOf<Model>[]>;
};
export declare const callRow: {
    <Model extends import("zod").ZodTypeAny>(sql: string, model: Model): Promise<import("zod").TypeOf<Model>>;
    <Model extends import("zod").ZodTypeAny>(sql: string, params: any[], model: Model): Promise<import("zod").TypeOf<Model>>;
};
export declare const callOptionalRow: {
    <Model extends import("zod").ZodTypeAny>(sql: string, model: Model): Promise<import("zod").TypeOf<Model> | null>;
    <Model extends import("zod").ZodTypeAny>(sql: string, params: any[], model: Model): Promise<import("zod").TypeOf<Model> | null>;
};
export declare const queryCursorWithClient: (client: import("pg").PoolClient, sql: string, params: QueryParams) => Promise<import("pg-cursor")>;
export declare const queryCursor: <Model extends import("zod").ZodTypeAny>(sql: string, params: QueryParams) => Promise<CursorIterator<import("zod").TypeOf<Model>>>;
export declare const queryValidatedCursor: <Model extends import("zod").ZodTypeAny>(sql: string, params: QueryParams, model: Model) => Promise<CursorIterator<import("zod").TypeOf<Model>>>;
export declare const setSearchSchema: (schema: string) => Promise<void>;
export declare const getSearchSchema: () => string | null;
export declare const setRandomSearchSchema: (arg1: string, callback: (err: NodeJS.ErrnoException, result: string) => void) => void;
export declare const setRandomSearchSchemaAsync: (prefix: string) => Promise<string>;
