{"version":3,"file":"loader.js","sourceRoot":"","sources":["../src/loader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,SAAS,CAAC;AACzB,OAAO,IAAI,MAAM,WAAW,CAAC;AAC7B,OAAO,GAAG,MAAM,UAAU,CAAC;AAI3B,MAAM,UAAU,OAAO,CAAC,QAAgB;IACtC,MAAM,GAAG,GAAY,EAAE,CAAC;IACxB,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC5C,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACrC,MAAM,OAAO,GAAG,0BAA0B,CAAC;IAC3C,IAAI,SAAS,GAAkB,IAAI,CAAC;IACpC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACrB,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,MAAM,EAAE,CAAC;YACX,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,GAAG,CAAC,SAAS,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,GAAG,QAAQ,2BAA2B,SAAS,EAAE,CAAC,CAAC;YACvF,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;QACxB,CAAC;aAAM,IAAI,SAAS,EAAE,CAAC;YACrB,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC;QAChC,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,aAAqB;IAChD,IAAI,YAAY,GAAG,aAAa,CAAC;IAEjC,8EAA8E;IAC9E,oDAAoD;IACpD,IAAI,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;QACxC,YAAY,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC5C,UAAU,CAAC,GAAG,GAAG,MAAM,CAAC;IACxB,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC;IAChF,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC;AAC9B,CAAC","sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\nimport url from 'node:url';\n\ntype SqlFile = Record<string, string>;\n\nexport function loadSql(filename: string): SqlFile {\n  const sql: SqlFile = {};\n  sql.all = fs.readFileSync(filename, 'utf8');\n  const lines = sql.all.split(/\\r?\\n/);\n  const blockRE = /^ *-- *BLOCK +([^ ]+) *$/;\n  let blockName: string | null = null;\n  lines.forEach((line) => {\n    const result = blockRE.exec(line);\n    if (result) {\n      blockName = result[1];\n      if (sql[blockName]) throw new Error(`${filename}: duplicate BLOCK name: ${blockName}`);\n      sql[blockName] = line;\n    } else if (blockName) {\n      sql[blockName] += '\\n' + line;\n    }\n  });\n  return sql;\n}\n\nexport function loadSqlEquiv(filePathOrUrl: string): SqlFile {\n  let resolvedPath = filePathOrUrl;\n\n  // This allows for us to pass `import.meta.url` to this function in ES Modules\n  // environments where `__filename` is not available.\n  if (filePathOrUrl.startsWith('file://')) {\n    resolvedPath = url.fileURLToPath(filePathOrUrl);\n  }\n\n  const components = path.parse(resolvedPath);\n  components.ext = '.sql';\n  const sqlFilename = path.join(components.dir, components.name) + components.ext;\n  return loadSql(sqlFilename);\n}\n"]}