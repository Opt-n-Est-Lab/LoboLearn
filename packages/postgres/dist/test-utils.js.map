{"version":3,"file":"test-utils.js","sourceRoot":"","sources":["../src/test-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import pg from 'pg';\n\nimport * as defaultPool from './default-pool.js';\n\nconst POSTGRES_USER = 'postgres';\nconst POSTGRES_HOST = 'localhost';\nconst POSTGRES_DATABASE = 'postgres';\n\nexport interface PostgresTestUtilsOptions {\n  database: string;\n  user?: string;\n  host?: string;\n  poolConfig?: Pick<pg.PoolConfig, 'max' | 'idleTimeoutMillis'>;\n  defaultDatabase?: string;\n  prepareAfterReset?: (client: pg.Client) => Promise<void>;\n}\n\ninterface CreateDatabaseOptions {\n  dropExistingDatabase?: boolean;\n  database?: string;\n  templateDatabase?: string;\n  configurePool?: boolean;\n  prepare?: (client: pg.Client) => Promise<void>;\n}\n\ninterface DropDatabaseOptions {\n  database?: string;\n  force?: boolean;\n  closePool?: boolean;\n}\n\nasync function createDatabase(\n  options: PostgresTestUtilsOptions,\n  {\n    dropExistingDatabase = true,\n    configurePool = true,\n    database,\n    templateDatabase,\n    prepare,\n  }: CreateDatabaseOptions = {},\n): Promise<void> {\n  const client = new pg.Client({\n    ...getPoolConfig(options),\n    database: options.defaultDatabase ?? POSTGRES_DATABASE,\n  });\n  await client.connect();\n\n  const escapedDatabase = client.escapeIdentifier(\n    database ?? getDatabaseNameForCurrentMochaWorker(options.database),\n  );\n  if (dropExistingDatabase ?? true) {\n    await client.query(`DROP DATABASE IF EXISTS ${escapedDatabase}`);\n  }\n\n  if (templateDatabase) {\n    const escapedTemplateDatabase = client.escapeIdentifier(templateDatabase);\n    await client.query(`CREATE DATABASE ${escapedDatabase} TEMPLATE ${escapedTemplateDatabase}`);\n  } else {\n    await client.query(`CREATE DATABASE ${escapedDatabase}`);\n  }\n\n  await client.end();\n\n  await prepare?.(client);\n\n  if (configurePool) {\n    await defaultPool.initAsync(\n      {\n        user: options.user ?? POSTGRES_USER,\n        host: options.host ?? POSTGRES_HOST,\n        database: getDatabaseNameForCurrentMochaWorker(options.database),\n        // Offer sensible default, but these can be overridden by `options.poolConfig`.\n        max: 10,\n        idleTimeoutMillis: 30000,\n        errorOnUnusedParameters: true,\n        ...(options.poolConfig ?? {}),\n      },\n      (err) => {\n        throw err;\n      },\n    );\n  }\n}\n\nasync function resetDatabase(options: PostgresTestUtilsOptions): Promise<void> {\n  const client = new pg.Client(getPoolConfig(options));\n  await client.connect();\n  await client.query(`\n    DO\n    $func$\n    BEGIN\n      EXECUTE (\n        SELECT 'TRUNCATE TABLE ' || string_agg(oid::regclass::text, ', ') || ' RESTART IDENTITY CASCADE'\n          FROM pg_class\n          WHERE relkind = 'r'\n          AND relnamespace = 'public'::regnamespace\n      );\n    END\n    $func$;\n  `);\n  await options.prepareAfterReset?.(client);\n  await client.end();\n}\n\nasync function dropDatabase(\n  options: PostgresTestUtilsOptions,\n  { closePool = true, force = false, database }: DropDatabaseOptions = {},\n): Promise<void> {\n  if (closePool) {\n    await defaultPool.closeAsync();\n  }\n\n  const databaseName = database ?? getDatabaseNameForCurrentMochaWorker(options.database);\n  if ('PL_KEEP_TEST_DB' in process.env && !force) {\n    console.log(`PL_KEEP_TEST_DB environment variable set, not dropping database ${databaseName}`);\n    return;\n  }\n\n  const client = new pg.Client({\n    ...getPoolConfig(options),\n    database: options.defaultDatabase ?? POSTGRES_DATABASE,\n  });\n  await client.connect();\n  await client.query(`DROP DATABASE IF EXISTS ${client.escapeIdentifier(databaseName)}`);\n  await client.end();\n}\n\nfunction getDatabaseNameForCurrentMochaWorker(namespace: string): string {\n  const workerId = process.env.MOCHA_WORKER_ID ?? '1';\n  return `${namespace}_${workerId}`;\n}\n\nfunction getPoolConfig(options: PostgresTestUtilsOptions): pg.PoolConfig {\n  return {\n    user: options.user ?? POSTGRES_USER,\n    host: options.host ?? POSTGRES_HOST,\n    database: getDatabaseNameForCurrentMochaWorker(options.database),\n  };\n}\n\nexport interface PostgresTestUtils {\n  createDatabase: (options?: CreateDatabaseOptions) => Promise<void>;\n  resetDatabase: () => Promise<void>;\n  dropDatabase: (options?: DropDatabaseOptions) => Promise<void>;\n  getDatabaseNameForCurrentMochaWorker: () => string;\n  getPoolConfig: () => pg.PoolConfig;\n}\n\nexport function makePostgresTestUtils(options: PostgresTestUtilsOptions): PostgresTestUtils {\n  return {\n    createDatabase: (createOptions?: CreateDatabaseOptions) =>\n      createDatabase(options, createOptions),\n    resetDatabase: () => resetDatabase(options),\n    dropDatabase: (dropOptions?: DropDatabaseOptions) => dropDatabase(options, dropOptions),\n    getDatabaseNameForCurrentMochaWorker: () =>\n      getDatabaseNameForCurrentMochaWorker(options.database),\n    getPoolConfig: () => getPoolConfig(options),\n  };\n}\n"]}