{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AACH,MAAM,UAAU,cAAc,CAAI,KAAQ;IACxC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACnB,OAAO,IAAS,CAAC;IACnB,CAAC;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QAChC,OAAO,KAAK,CAAC,GAAG,CAAC,cAAc,CAAM,CAAC;IACxC,CAAC;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QACrC,OAAO,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAM,CAAC;IACpD,CAAC;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QACrC,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC3D,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC5C,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YACjB,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAS,CAAM,CAAC;IACrB,CAAC;SAAM,CAAC;QACN,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,YAAY,CAAC,GAAW;IACtC,OAAO,GAAG,CAAC,OAAO,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC;AACvD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,0BAA0B,CAAI,KAAQ,EAAE,SAAiB;IACvE,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACnB,OAAO,IAAS,CAAC;IACnB,CAAC;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QACrC,IAAI,KAAK,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;YAC9B,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,GAAG,gBAAgB,CAAM,CAAC;IACjE,CAAC;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QAChC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE,SAAS,CAAC,CAAM,CAAC;IACjF,CAAC;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QACrC,OAAO,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YACxD,GAAG,CAAC,GAAG,CAAC,GAAG,0BAA0B,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YACxD,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAS,CAAM,CAAC;IACrB,CAAC;SAAM,CAAC;QACN,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","sourcesContent":["/**\n * Recursively traverse an object and replace null bytes (\\u0000) with the\n * literal string \"\\u0000\". This produces a new object and does not modify the\n * provided object.\n *\n * @param value The object to be sanitized.\n * @return The sanitized object.\n */\nexport function sanitizeObject<T>(value: T): T {\n  if (value === null) {\n    return null as T;\n  } else if (Array.isArray(value)) {\n    return value.map(sanitizeObject) as T;\n  } else if (typeof value === 'string') {\n    return value.replaceAll('\\u0000', '\\\\u0000') as T;\n  } else if (typeof value === 'object') {\n    const sanitized = Object.entries(value).map(([key, value]) => {\n      return [key, sanitizeObject(value)];\n    });\n    return sanitized.reduce((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {} as any) as T;\n  } else {\n    return value;\n  }\n}\n\n/**\n * Escape special characters in a RegExp string\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\n *\n * @param str A literal string to act as a match for RegExp objects\n * @return A string literal ready to match\n */\nexport function escapeRegExp(str: string) {\n  return str.replace(/[.*+\\-?^${}()|[\\]\\\\/]/g, '\\\\$&');\n}\n\n/**\n * Recursively truncates all strings in a value to a maximum length.\n */\nexport function recursivelyTruncateStrings<T>(value: T, maxLength: number): T {\n  if (value === null) {\n    return null as T;\n  } else if (typeof value === 'string') {\n    if (value.length <= maxLength) {\n      return value;\n    }\n    return (value.substring(0, maxLength) + '...[truncated]') as T;\n  } else if (Array.isArray(value)) {\n    return value.map((value) => recursivelyTruncateStrings(value, maxLength)) as T;\n  } else if (typeof value === 'object') {\n    return Object.entries(value).reduce((acc, [key, value]) => {\n      acc[key] = recursivelyTruncateStrings(value, maxLength);\n      return acc;\n    }, {} as any) as T;\n  } else {\n    return value;\n  }\n}\n"]}