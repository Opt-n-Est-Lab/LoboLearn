{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\n\nimport { recursivelyTruncateStrings, sanitizeObject } from './index.js';\n\ndescribe('sanitizeObject', () => {\n  it('sanitizes an empty object', () => {\n    const input = {};\n    const expected = {};\n    assert.deepEqual(expected, sanitizeObject(input));\n  });\n\n  it('handles null byte in top-level string', () => {\n    const input = { test: 'test\\u0000ing' };\n    const expected = { test: 'test\\\\u0000ing' };\n    assert.deepEqual(expected, sanitizeObject(input));\n  });\n\n  it('handles multiple null bytes in top-level string', () => {\n    const input = { test: 'test\\u0000ing\\u0000' };\n    const expected = { test: 'test\\\\u0000ing\\\\u0000' };\n    assert.deepEqual(expected, sanitizeObject(input));\n  });\n\n  it('handles null byte in nested string', () => {\n    const input = {\n      test: {\n        nestedTest: 'test\\u0000ing',\n      },\n    };\n    const expected = {\n      test: {\n        nestedTest: 'test\\\\u0000ing',\n      },\n    };\n    assert.deepEqual(expected, sanitizeObject(input));\n  });\n\n  it('handles null byte in top-level array', () => {\n    const input = {\n      test: ['testing', 'test\\u0000ing'],\n    };\n    const expected = {\n      test: ['testing', 'test\\\\u0000ing'],\n    };\n    assert.deepEqual(expected, sanitizeObject(input));\n  });\n\n  it('handles null byte in nested array', () => {\n    const input = {\n      test: {\n        test2: ['testing', 'test\\u0000ing'],\n      },\n    };\n    const expected = {\n      test: {\n        test2: ['testing', 'test\\\\u0000ing'],\n      },\n    };\n    assert.deepEqual(expected, sanitizeObject(input));\n  });\n\n  it('handles numbers correctly', () => {\n    const input = {\n      test: 'test\\u0000ing',\n      a: 1,\n      b: 2.45,\n    };\n    const expected = {\n      test: 'test\\\\u0000ing',\n      a: 1,\n      b: 2.45,\n    };\n    assert.deepEqual(expected, sanitizeObject(input));\n  });\n\n  it('handles null values correctly', () => {\n    const input = {\n      test: 'test\\u0000ing',\n      a: null,\n    };\n    const expected = {\n      test: 'test\\\\u0000ing',\n      a: null,\n    };\n    assert.deepEqual(expected, sanitizeObject(input));\n  });\n});\n\ndescribe('recursivelyTruncateStrings', () => {\n  it('handles empty object', () => {\n    assert.deepEqual(recursivelyTruncateStrings({}, 10), {});\n  });\n\n  it('handles null and undefined', () => {\n    assert.deepEqual(recursivelyTruncateStrings({ test: null }, 10), { test: null });\n    assert.deepEqual(recursivelyTruncateStrings({ test: undefined }, 10), { test: undefined });\n  });\n\n  it('handles legal string', () => {\n    assert.deepEqual(recursivelyTruncateStrings({ test: 'test' }, 10), { test: 'test' });\n  });\n\n  it('handles long string', () => {\n    assert.deepEqual(recursivelyTruncateStrings({ test: 'testtest' }, 4), {\n      test: 'test...[truncated]',\n    });\n  });\n\n  it('handles long string in array', () => {\n    assert.deepEqual(recursivelyTruncateStrings({ test: ['testtest'] }, 4), {\n      test: ['test...[truncated]'],\n    });\n  });\n\n  it('handles long string in object in array', () => {\n    assert.deepEqual(recursivelyTruncateStrings({ test: [{ test: 'testtest' }] }, 4), {\n      test: [{ test: 'test...[truncated]' }],\n    });\n  });\n});\n"]}