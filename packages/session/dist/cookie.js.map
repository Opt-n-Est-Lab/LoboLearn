{"version":3,"file":"cookie.js","sourceRoot":"","sources":["../src/cookie.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAKzC,MAAM,UAAU,kBAAkB,CAAC,GAAY,EAAE,MAAoB;IACnE,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE,CAAC;QACjC,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAED,IAAI,MAAM,KAAK,MAAM,EAAE,CAAC;QACtB,OAAO,GAAG,CAAC,QAAQ,KAAK,OAAO,CAAC;IAClC,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,aAAwC,EACxC,OAAiB;IAEjB,gDAAgD;IAChD,IAAI,aAAa,EAAE,CAAC;QAClB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC7B,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YACtD,IAAI,KAAK,KAAK,KAAK,EAAE,CAAC;gBACpB,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import signature from 'cookie-signature';\nimport type { Request } from 'express';\n\nexport type CookieSecure = boolean | 'auto' | ((req: Request) => boolean);\n\nexport function shouldSecureCookie(req: Request, secure: CookieSecure): boolean {\n  if (typeof secure === 'function') {\n    return secure(req);\n  }\n\n  if (secure === 'auto') {\n    return req.protocol === 'https';\n  }\n\n  return secure;\n}\n\nexport function getSessionIdFromCookie(\n  sessionCookie: string | null | undefined,\n  secrets: string[],\n) {\n  // Try each secret until we find one that works.\n  if (sessionCookie) {\n    for (const secret of secrets) {\n      const value = signature.unsign(sessionCookie, secret);\n      if (value !== false) {\n        return value;\n      }\n    }\n  }\n\n  return null;\n}\n"]}