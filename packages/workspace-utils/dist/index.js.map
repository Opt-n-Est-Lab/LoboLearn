{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Dirent } from 'node:fs';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\n\nimport type { Emitter as SocketIOEmitter } from '@socket.io/redis-emitter';\nimport fg, { type Entry } from 'fast-glob';\nimport { filesize } from 'filesize';\nimport type { Server as SocketIOServer } from 'socket.io';\n\nimport { contains } from '@prairielearn/path-utils';\nimport { loadSqlEquiv, queryAsync, queryOneRowAsync, queryRow } from '@prairielearn/postgres';\nimport { IntervalSchema } from '@prairielearn/zod';\n\nconst sql = loadSqlEquiv(import.meta.url);\n\nexport const WORKSPACE_SOCKET_NAMESPACE = '/workspace';\n\nlet socketIoServer: SocketIOServer | SocketIOEmitter | null = null;\n\nexport function init(io: SocketIOServer | SocketIOEmitter) {\n  socketIoServer = io;\n}\n\nexport function emitMessageForWorkspace(\n  workspaceId: string | number,\n  event: string,\n  ...args: any[]\n) {\n  if (!socketIoServer) throw new Error('SocketIO server not initialized.');\n\n  socketIoServer\n    .of(WORKSPACE_SOCKET_NAMESPACE)\n    .to(`workspace-${workspaceId}`)\n    .emit(event, ...args);\n}\n\n/**\n * Updates a workspace's current message.\n *\n * @param id The workspace's id.\n * @param message The workspace's new message.\n * @param toDatabase Whether to write the message to the database.\n */\nexport async function updateWorkspaceMessage(\n  workspace_id: string | number,\n  message: string,\n  toDatabase = true,\n): Promise<void> {\n  if (toDatabase) await queryAsync(sql.update_workspace_message, { workspace_id, message });\n  emitMessageForWorkspace(workspace_id, 'change:message', {\n    workspace_id,\n    message,\n  });\n}\n\n/**\n * Updates a workspace's current state and message.\n *\n * @param id The workspace's id.\n * @param state The workspace's new state.\n * @param message The workspace's new message.\n */\nexport async function updateWorkspaceState(\n  workspace_id: string | number,\n  state: string,\n  message = '',\n): Promise<void> {\n  // TODO: add locking\n  const duration_milliseconds = await queryRow(\n    sql.update_workspace_state,\n    { workspace_id, state, message },\n    IntervalSchema,\n  );\n  if (duration_milliseconds > 0) {\n    await updateCourseInstanceUsagesForWorkspace({ workspace_id, duration_milliseconds });\n  }\n  emitMessageForWorkspace(workspace_id, 'change:state', {\n    workspace_id,\n    state,\n    message,\n  });\n}\n\ninterface GradedFilesLimits {\n  maxFiles: number;\n  maxSize: number;\n}\n\nexport async function getWorkspaceGradedFiles(\n  workspaceDir: string,\n  gradedFiles: string[],\n  limits: GradedFilesLimits,\n): Promise<Entry[]> {\n  const files = (\n    await fg(gradedFiles, {\n      cwd: workspaceDir,\n      stats: true,\n      ...workspaceFastGlobDefaultOptions,\n    })\n  ).filter((file) => contains(workspaceDir, path.join(workspaceDir, file.path)));\n\n  // We generally use `archiver` downstream of this, which does not elegantly\n  // handle file names with backslashes:\n  // https://github.com/archiverjs/node-archiver/issues/743\n  // To prevent downstream issues, we disallow any files with backslashes in\n  // their paths. We fail hard rather than silently dropping these files so\n  // that it's clear to the user what's happening.\n  const backslashPaths = files.filter((file) => file.path.includes('\\\\'));\n  if (backslashPaths.length > 0) {\n    const paths = backslashPaths.map((file) => file.path).join(', ');\n    throw new Error(`Cannot submit files with paths that contain backslashes: ${paths}`);\n  }\n\n  if (files.length > limits.maxFiles) {\n    throw new Error(`Cannot submit more than ${limits.maxFiles} files from the workspace.`);\n  }\n\n  const totalSize = files.reduce((acc, file) => acc + (file.stats?.size ?? 0), 0);\n  if (totalSize > limits.maxSize) {\n    throw new Error(\n      `Workspace files exceed limit of ${filesize(limits.maxSize, {\n        base: 2,\n      })}.`,\n    );\n  }\n\n  return files;\n}\n\n/**\n * Updates the disk usage of a workspace. This is computed as the sum of the\n * sizes of all versions of the workspace. The result is stored in the\n * `disk_usage_bytes` column of the `workspaces` table. The total size is returned.\n *\n * @param workspace_id The ID of the workspace to update.\n * @param workspacesRoot The root directory of all workspace data.\n */\nexport async function updateWorkspaceDiskUsage(\n  workspace_id: string,\n  workspacesRoot: string,\n): Promise<number> {\n  const result = await queryOneRowAsync(sql.select_workspace, { workspace_id });\n  const workspace = result.rows[0];\n\n  // We'll compute the size for all versions of the workspace so that we don't need\n  // to separately store the size for each version.\n  const version = Number.parseInt(workspace.version, 10);\n\n  let totalSize = 0;\n  for (let i = 1; i <= version; i++) {\n    const workspaceVersionPath = path.join(\n      workspacesRoot,\n      `workspace-${workspace.id}-${workspace.version}`,\n    );\n    const size = await getDirectoryDiskUsage(workspaceVersionPath);\n    totalSize += size ?? 0;\n  }\n\n  await queryAsync(sql.update_workspace_disk_usage_bytes, {\n    workspace_id,\n    disk_usage_bytes: totalSize,\n  });\n\n  return totalSize;\n}\n\nasync function getDirectoryDiskUsage(dir: string): Promise<number | null> {\n  let size = 0;\n\n  for (const file of await getWorkspaceFiles(dir)) {\n    try {\n      const stats = await fs.lstat(path.join(file.path, file.name));\n      size += stats.size;\n    } catch (err: any) {\n      // This code is susceptible to TOCTOU issues, but we're ok with that.\n      // We'll just silently ignore any files that can't be read. This would\n      // most frequently occur when we're reading files from an active\n      // workspace and a student deletes a file before we can read it.\n      if (err.code !== 'ENOENT') throw err;\n    }\n  }\n\n  return size;\n}\n\nasync function getWorkspaceFiles(dir: string): Promise<Dirent[]> {\n  try {\n    // We use `withFileTypes: true` to avoid a bug where Node will try to recurse\n    // into Unix domain socket files and fail with `ENOTDIR`.\n    //\n    // https://github.com/nodejs/node/issues/52159\n    return await fs.readdir(dir, { recursive: true, withFileTypes: true });\n  } catch (e: any) {\n    // Workspace directories might not exist at all. For instance, this can\n    // happen if a workspace is created for a variant but is never initialized\n    // and started. We'll treat this as a workspace with no files.\n    if (e.code === 'ENOENT') {\n      return [];\n    }\n    throw e;\n  }\n}\n\n/**\n * Default options for calls to `fast-glob`.\n */\nexport const workspaceFastGlobDefaultOptions = {\n  extglob: false,\n  braceExpansion: false,\n};\n\n/**\n * Update the course instance usages for workspace usage.\n *\n * @param param.workspace_id The ID of the workspace.\n * @param param.duration The usage duration (in milliseconds).\n */\nexport async function updateCourseInstanceUsagesForWorkspace({\n  workspace_id,\n  duration_milliseconds,\n}: {\n  workspace_id: string | number;\n  duration_milliseconds: number;\n}) {\n  await queryAsync(sql.update_course_instance_usages_for_workspace, {\n    workspace_id,\n    duration_milliseconds,\n  });\n}\n"]}