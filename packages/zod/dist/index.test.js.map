{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai';\nimport parsePostgresInterval from 'postgres-interval';\n\nimport { IdSchema, IntervalSchema } from './index.js';\n\ndescribe('IdSchema', () => {\n  it('parses a valid id', () => {\n    const id = IdSchema.parse('123');\n    assert.equal(id, '123');\n  });\n\n  it('parses a nullable id', () => {\n    const id = IdSchema.nullable().parse(null);\n    assert.equal(id, null);\n  });\n\n  it('parses an optional id', () => {\n    const id = IdSchema.optional().parse(undefined);\n    assert.equal(id, undefined);\n  });\n\n  it('rejects a negative ID', () => {\n    const result = IdSchema.safeParse('-1');\n    assert.isFalse(result.success);\n  });\n\n  it('rejects a non-numeric ID', () => {\n    const result = IdSchema.safeParse('abc');\n    assert.isFalse(result.success);\n  });\n});\n\ndescribe('IntervalSchema', () => {\n  it('handles a PostgresInterval object', () => {\n    const interval = IntervalSchema.parse(parsePostgresInterval('1 year 2 months 3 days'));\n    assert.equal(interval, 37000800000);\n  });\n\n  it('parses an interval with date', () => {\n    const interval = IntervalSchema.parse('1 year 2 months 3 days');\n    assert.equal(interval, 37000800000);\n  });\n\n  it('parses an interval with time', () => {\n    const interval = IntervalSchema.parse('04:05:06.7');\n    assert.equal(interval, 14706700);\n  });\n\n  it('parses an interval with microsecond-precision time', () => {\n    const interval = IntervalSchema.parse('01:02:03.456789');\n    assert.equal(interval, 3723456.789);\n  });\n\n  it('parses a complex interval', () => {\n    const interval = IntervalSchema.parse('1 years 2 mons 3 days 04:05:06.789');\n    assert.equal(interval, 37015506789);\n  });\n\n  it('parses interval with negative months', () => {\n    const interval = IntervalSchema.parse('-10 mons 3 days 04:05:06.789');\n    assert.equal(interval, -25646093211);\n  });\n\n  it('parses interval with negative years and months', () => {\n    const interval = IntervalSchema.parse('-1 years -2 months 3 days 04:05:06.789');\n    assert.equal(interval, -36467693211);\n  });\n\n  it('parses interval with negative years, months, and days', () => {\n    const interval = IntervalSchema.parse('-1 years -2 months -3 days 04:05:06.789');\n    assert.equal(interval, -36986093211);\n  });\n\n  it('parses a negative interval', () => {\n    const interval = IntervalSchema.parse('-1 years -2 months -3 days -04:05:06.789');\n    assert.equal(interval, -37015506789);\n  });\n});\n"]}